3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x1a, 0x142]",0x10,0,0,0,0,0,False,0,0,"0x1a, 0x142"
    =================================,0x10,0,0,0,0,0,False,0,0,"0x1a, 0x142"
    0x12: v12(0x4) = CONST ,0x10,v12,0,CONST,0,0,False,0x4,0,"0x1a, 0x142"
    0x14: v14 = CALLDATASIZE ,0x10,v14,0,CALLDATASIZE,0,0,False,0,0,"0x1a, 0x142"
"    0x15: v15 = LT v14, v12(0x4)",0x10,v15,"0,v14,v12",LT,0,0,False,0,0,"0x1a, 0x142"
    0x13e: v13e(0x142) = CONST ,0x10,v13e,0,CONST,0,0,False,0x142,0,"0x1a, 0x142"
"    0x13f: JUMPI v13e(0x142), v15",0x10,0,"0,v13e,v15",JUMPI,0,0,False,0,0,"0x1a, 0x142"
    Begin block 0x1a,0x1a,0,0,0,0,0,False,0,0,"0x1a, 0x142"
"    prev=[0x10], succ=[0x142, 0x145]",0x1a,0,0,0,0,0,False,0,0,"0x142, 0x145"
    =================================,0x1a,0,0,0,0,0,False,0,0,"0x142, 0x145"
    0x1a: v1a(0x0) = CONST ,0x1a,v1a,0,CONST,0,0,False,0x0,0,"0x142, 0x145"
    0x1c: v1c = CALLDATALOAD v1a(0x0),0x1a,v1c,"0,v1a",CALLDATALOAD,0,0,False,0,0,"0x142, 0x145"
    0x1d: v1d(0xe0) = CONST ,0x1a,v1d,0,CONST,0,0,False,0xe0,0,"0x142, 0x145"
"    0x1f: v1f = SHR v1d(0xe0), v1c",0x1a,v1f,"0,v1d,v1c",SHR,0,0,False,0,0,"0x142, 0x145"
    0x21: v21(0xa9059cbb) = CONST ,0x1a,v21,0,CONST,0,0,False,0xa9059cbb,0,"0x142, 0x145"
"    0x26: v26 = EQ v21(0xa9059cbb), v1f",0x1a,v26,"0,v21,v1f",EQ,0,0,False,0,0,"0x142, 0x145"
    0x140: v140(0x145) = CONST ,0x1a,v140,0,CONST,0,0,False,0x145,0,"0x142, 0x145"
"    0x141: JUMPI v140(0x145), v26",0x1a,0,"0,v140,v26",JUMPI,0,0,False,0,0,"0x142, 0x145"
    Begin block 0x142,0x142,0,0,0,0,0,False,0,0,"0x142, 0x145"
"    prev=[0x1a, 0x10], succ=[]",0x142,0,0,0,0,0,False,0,0,"0x142, 0x145"
    =================================,0x142,0,0,0,0,0,False,0,0,"0x142, 0x145"
    0x143: v143(0x2b) = CONST ,0x142,v143,0,CONST,0,0,False,0x2b,0,"0x142, 0x145"
    0x144: CALLPRIVATE v143(0x2b),0x142,0,"0,v143",CALLPRIVATE,0,0,False,0,0,"0x142, 0x145"
    Begin block 0x145,0x145,0,0,0,0,0,False,0,0,"0x142, 0x145"
"    prev=[0x1a], succ=[]",0x145,0,0,0,0,0,False,0,0,"0x142, 0x145"
    =================================,0x145,0,0,0,0,0,False,0,0,"0x142, 0x145"
    0x146: v146(0x30) = CONST ,0x145,v146,0,CONST,0,0,False,0x30,0,"0x142, 0x145"
    0x147: CALLPRIVATE v146(0x30),0x145,0,"0,v146",CALLPRIVATE,0,0,False,0,0,"0x142, 0x145"
},0x145,0,0,0,0,0,False,0,0,"0x142, 0x145"
function fallback()() public {,0x2b,0,0,public,fallback,public,False,0,0,"0x142, 0x145"
    Begin block 0x2b,0x2b,0,0,0,fallback,public,False,0,0,"0x142, 0x145"
"    prev=[], succ=[]",0x2b,0,0,0,fallback,public,False,0,0,"0x142, 0x145"
    =================================,0x2b,0,0,0,fallback,public,False,0,0,"0x142, 0x145"
    0x2c: v2c(0x0) = CONST ,0x2b,v2c,0,CONST,fallback,public,False,0x0,0,"0x142, 0x145"
"    0x2f: REVERT v2c(0x0), v2c(0x0)",0x2b,0,"0,v2c,v2c",REVERT,fallback,public,False,0,0,"0x142, 0x145"
},0x2b,0,0,0,fallback,public,False,0,0,"0x142, 0x145"
"function transfer(address,uint256)() public {",0x30,0,0,,transfer,public,False,0,0,"0x142, 0x145"
    Begin block 0x30,0x30,0,0,0,transfer,public,False,0,0,"0x142, 0x145"
"    prev=[], succ=[0x42, 0x46]",0x30,0,0,0,transfer,public,False,0,0,"0x42, 0x46"
    =================================,0x30,0,0,0,transfer,public,False,0,0,"0x42, 0x46"
    0x31: v31(0x7c) = CONST ,0x30,v31,0,CONST,transfer,public,False,0x7c,0,"0x42, 0x46"
    0x34: v34(0x4) = CONST ,0x30,v34,0,CONST,transfer,public,False,0x4,0,"0x42, 0x46"
    0x37: v37 = CALLDATASIZE ,0x30,v37,0,CALLDATASIZE,transfer,public,False,0,0,"0x42, 0x46"
"    0x38: v38 = SUB v37, v34(0x4)",0x30,v38,"0,v37,v34",SUB,transfer,public,False,0,0,"0x42, 0x46"
    0x39: v39(0x40) = CONST ,0x30,v39,0,CONST,transfer,public,False,0x40,0,"0x42, 0x46"
"    0x3c: v3c = LT v38, v39(0x40)",0x30,v3c,"0,v38,v39",LT,transfer,public,False,0,0,"0x42, 0x46"
    0x3d: v3d = ISZERO v3c,0x30,v3d,"0,v3c",ISZERO,transfer,public,False,0,0,"0x42, 0x46"
    0x3e: v3e(0x46) = CONST ,0x30,v3e,0,CONST,transfer,public,False,0x46,0,"0x42, 0x46"
"    0x41: JUMPI v3e(0x46), v3d",0x30,0,"0,v3e,v3d",JUMPI,transfer,public,False,0,0,"0x42, 0x46"
    Begin block 0x42,0x42,0,0,0,transfer,public,False,0,0,"0x42, 0x46"
"    prev=[0x30], succ=[]",0x42,0,0,0,transfer,public,False,0,0,"0x42, 0x46"
    =================================,0x42,0,0,0,transfer,public,False,0,0,"0x42, 0x46"
    0x42: v42(0x0) = CONST ,0x42,v42,0,CONST,transfer,public,False,0x0,0,"0x42, 0x46"
"    0x45: REVERT v42(0x0), v42(0x0)",0x42,0,"0,v42,v42",REVERT,transfer,public,False,0,0,"0x42, 0x46"
    Begin block 0x46,0x46,0,0,0,transfer,public,False,0,0,"0x42, 0x46"
"    prev=[0x30], succ=[0x96]",0x46,0,0,0,transfer,public,False,0,0,0x96
    =================================,0x46,0,0,0,transfer,public,False,0,0,0x96
"    0x48: v48 = ADD v34(0x4), v38",0x46,v48,"0,v34,v38",ADD,transfer,public,False,0,0,0x96
    0x4c: v4c = CALLDATALOAD v34(0x4),0x46,v4c,"0,v34",CALLDATALOAD,transfer,public,False,0,0,0x96
    0x4d: v4d(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x46,v4d,0,CONST,transfer,public,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x96
"    0x62: v62 = AND v4d(0xffffffffffffffffffffffffffffffffffffffff), v4c",0x46,v62,"0,v4d,v4c",AND,transfer,public,False,0,0,0x96
    0x64: v64(0x20) = CONST ,0x46,v64,0,CONST,transfer,public,False,0x20,0,0x96
"    0x66: v66(0x24) = ADD v64(0x20), v34(0x4)",0x46,v66,"0,v64,v34",ADD,transfer,public,False,0x24,0,0x96
    0x6c: v6c = CALLDATALOAD v66(0x24),0x46,v6c,"0,v66",CALLDATALOAD,transfer,public,False,0,0,0x96
    0x6e: v6e(0x20) = CONST ,0x46,v6e,0,CONST,transfer,public,False,0x20,0,0x96
"    0x70: v70(0x44) = ADD v6e(0x20), v66(0x24)",0x46,v70,"0,v6e,v66",ADD,transfer,public,False,0x44,0,0x96
    0x78: v78(0x96) = CONST ,0x46,v78,0,CONST,transfer,public,False,0x96,0,0x96
    0x7b: JUMP v78(0x96),0x46,0,"0,v78",JUMP,transfer,public,False,0,0,0x96
    Begin block 0x96,0x96,0,0,0,transfer,public,False,0,0,0x96
"    prev=[0x46], succ=[0x7c]",0x96,0,0,0,transfer,public,False,0,0,0x7c
    =================================,0x96,0,0,0,transfer,public,False,0,0,0x7c
    0x97: v97(0x0) = CONST ,0x96,v97,0,CONST,transfer,public,False,0x0,0,0x7c
    0x99: v99(0xb1a788d78c7ee87c662101020dc014023c80d738dd509f3ade9e69f463ec497d) = CONST ,0x96,v99,0,CONST,transfer,public,False,0xb1a788d78c7ee87c662101020dc014023c80d738dd509f3ade9e69f463ec497d,0,0x7c
    0xbc: vbc(0x40) = CONST ,0x96,vbc,0,CONST,transfer,public,False,0x40,0,0x7c
    0xbe: vbe = MLOAD vbc(0x40),0x96,vbe,"0,vbc",MLOAD,transfer,public,False,0,transfer&m0x40,0x7c
    0xc1: vc1(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x96,vc1,0,CONST,transfer,public,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x7c
"    0xd6: vd6 = AND vc1(0xffffffffffffffffffffffffffffffffffffffff), v62",0x96,vd6,"0,vc1,v62",AND,transfer,public,False,0,0,0x7c
    0xd7: vd7(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x96,vd7,0,CONST,transfer,public,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x7c
"    0xec: vec = AND vd7(0xffffffffffffffffffffffffffffffffffffffff), vd6",0x96,vec,"0,vd7,vd6",AND,transfer,public,False,0,0,0x7c
"    0xee: MSTORE vbe, vec",0x96,transfer&m0x40,"0,vbe,vec",MSTORE,transfer,public,False,0,transfer&m0x40,0x7c
    0xef: vef(0x20) = CONST ,0x96,vef,0,CONST,transfer,public,False,0x20,0,0x7c
"    0xf1: vf1 = ADD vef(0x20), vbe",0x96,vf1,"0,vef,vbe",ADD,transfer,public,False,0,transfer&m0x40+0x20,0x7c
"    0xf4: MSTORE vf1, v6c",0x96,transfer&m0x40+0x20,"0,vf1,v6c",MSTORE,transfer,public,False,0,transfer&m0x40+0x20,0x7c
    0xf5: vf5(0x20) = CONST ,0x96,vf5,0,CONST,transfer,public,False,0x20,0,0x7c
"    0xf7: vf7 = ADD vf5(0x20), vf1",0x96,vf7,"0,vf5,vf1",ADD,transfer,public,False,0,transfer&m0x40+0x20+0x20,0x7c
    0xfc: vfc(0x40) = CONST ,0x96,vfc,0,CONST,transfer,public,False,0x40,0,0x7c
    0xfe: vfe = MLOAD vfc(0x40),0x96,vfe,"0,vfc",MLOAD,transfer,public,False,0,transfer&m0x40,0x7c
"    0x101: v101(0x40) = SUB vf7, vfe",0x96,v101,"0,vf7,vfe",SUB,transfer,public,False,0x40,transfer&m0x40+0x20+0x20-0x40,0x7c
"    0x103: LOG1 vfe, v101(0x40), v99(0xb1a788d78c7ee87c662101020dc014023c80d738dd509f3ade9e69f463ec497d)",0x96,0,"0,vfe,v101,v99",LOG1,transfer,public,False,0,0,0x7c
    0x108: JUMP v31(0x7c),0x96,0,"0,v31",JUMP,transfer,public,False,0,0,0x7c
    Begin block 0x7c,0x7c,0,0,0,transfer,public,False,0,0,0x7c
"    prev=[0x96], succ=[]",0x7c,0,0,0,transfer,public,False,0,0,0x7c
    =================================,0x7c,0,0,0,transfer,public,False,0,0,0x7c
    0x7d: v7d(0x40) = CONST ,0x7c,v7d,0,CONST,transfer,public,False,0x40,0,0x7c
    0x7f: v7f = MLOAD v7d(0x40),0x7c,v7f,"0,v7d",MLOAD,transfer,public,False,0,transfer&m0x40,0x7c
    0x82: v82 = ISZERO v97(0x0),0x7c,v82,"0,v97",ISZERO,transfer,public,False,0,0,0x7c
    0x83: v83 = ISZERO v82,0x7c,v83,"0,v82",ISZERO,transfer,public,False,0,0,0x7c
    0x84: v84 = ISZERO v83,0x7c,v84,"0,v83",ISZERO,transfer,public,False,0,0,0x7c
    0x85: v85 = ISZERO v84,0x7c,v85,"0,v84",ISZERO,transfer,public,False,0,0,0x7c
"    0x87: MSTORE v7f, v85",0x7c,transfer&m0x40,"0,v7f,v85",MSTORE,transfer,public,False,0,transfer&m0x40,0x7c
    0x88: v88(0x20) = CONST ,0x7c,v88,0,CONST,transfer,public,False,0x20,0,0x7c
"    0x8a: v8a = ADD v88(0x20), v7f",0x7c,v8a,"0,v88,v7f",ADD,transfer,public,False,0,transfer&m0x40+0x20,0x7c
    0x8e: v8e(0x40) = CONST ,0x7c,v8e,0,CONST,transfer,public,False,0x40,0,0x7c
    0x90: v90 = MLOAD v8e(0x40),0x7c,v90,"0,v8e",MLOAD,transfer,public,False,0,transfer&m0x40,0x7c
"    0x93: v93(0x20) = SUB v8a, v90",0x7c,v93,"0,v8a,v90",SUB,transfer,public,False,0x20,transfer&m0x40+0x20-0x20,0x7c
"    0x95: RETURN v90, v93(0x20)",0x7c,0,"0,v90,v93",RETURN,transfer,public,False,0,0,0x7c
},0x7c,0,0,0,transfer,public,False,0,0,0x7c
