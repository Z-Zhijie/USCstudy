3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x1e, 0x22]",0x0,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x1e, 0x22"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x1e, 0x22"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x5: v5(0x1) = CONST ,0x0,v5,0,CONST,0,0,False,0x1,0,"0x1e, 0x22"
    0x8: v8 = SLOAD v5(0x1),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x1e, 0x22"
    0x9: v9(0xff) = CONST ,0x0,v9,0,CONST,0,0,False,0xff,0,"0x1e, 0x22"
    0xb: vb(0xa0) = CONST ,0x0,vb,0,CONST,0,0,False,0xa0,0,"0x1e, 0x22"
"    0xd: vd(0xff0000000000000000000000000000000000000000) = SHL vb(0xa0), v9(0xff)",0x0,vd,"0,vb,v9",SHL,0,0,False,0xff0000000000000000000000000000000000000000,0,"0x1e, 0x22"
    0xe: ve(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT vd(0xff0000000000000000000000000000000000000000),0x0,ve,"0,vd",NOT,0,0,False,0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff,0,"0x1e, 0x22"
"    0xf: vf = AND ve(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff), v8",0x0,vf,"0,ve,v8",AND,0,0,False,0,0,"0x1e, 0x22"
"    0x11: SSTORE v5(0x1), vf",0x0,0,"0,v5,vf",SSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x12: v12(0x0) = CONST ,0x0,v12,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
    0x14: v14(0xb) = CONST ,0x0,v14,0,CONST,0,0,False,0xb,0,"0x1e, 0x22"
"    0x16: SSTORE v14(0xb), v12(0x0)",0x0,0,"0,v14,v12",SSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x17: v17 = CALLVALUE ,0x0,v17,0,CALLVALUE,0,0,False,0,0,"0x1e, 0x22"
    0x19: v19 = ISZERO v17,0x0,v19,"0,v17",ISZERO,0,0,False,0,0,"0x1e, 0x22"
    0x1a: v1a(0x22) = CONST ,0x0,v1a,0,CONST,0,0,False,0x22,0,"0x1e, 0x22"
"    0x1d: JUMPI v1a(0x22), v19",0x0,0,"0,v1a,v19",JUMPI,0,0,False,0,0,"0x1e, 0x22"
    Begin block 0x1e,0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
"    prev=[0x0], succ=[]",0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x1e: v1e(0x0) = CONST ,0x1e,v1e,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
"    0x21: REVERT v1e(0x0), v1e(0x0)",0x1e,0,"0,v1e,v1e",REVERT,0,0,False,0,0,"0x1e, 0x22"
    Begin block 0x22,0x22,0,0,0,0,0,False,0,0,"0x1e, 0x22"
"    prev=[0x0], succ=[0x31]",0x22,0,0,0,0,0,False,0,0,0x31
    =================================,0x22,0,0,0,0,0,False,0,0,0x31
    0x24: v24(0x2c) = CONST ,0x22,v24,0,CONST,0,0,False,0x2c,0,0x31
    0x27: v27 = CALLER ,0x22,v27,0,CALLER,0,0,True,0,0,0x31
    0x28: v28(0x31) = CONST ,0x22,v28,0,CONST,0,0,False,0x31,0,0x31
    0x2b: JUMP v28(0x31),0x22,0,"0,v28",JUMP,0,0,False,0,0,0x31
    Begin block 0x31,0x31,0,0,0,0,0,False,0,0,0x31
"    prev=[0x22], succ=[0x2c]",0x31,0,0,0,0,0,False,0,0,0x2c
    =================================,0x31,0,0,0,0,0,False,0,0,0x2c
    0x32: v32(0x0) = CONST ,0x31,v32,0,CONST,0,0,False,0x0,0,0x2c
    0x35: v35 = SLOAD v32(0x0),0x31,v35,"0,v32",SLOAD,0,0,False,0,0,0x2c
    0x36: v36(0x1) = CONST ,0x31,v36,0,CONST,0,0,False,0x1,0,0x2c
    0x38: v38(0x1) = CONST ,0x31,v38,0,CONST,0,0,False,0x1,0,0x2c
    0x3a: v3a(0xa0) = CONST ,0x31,v3a,0,CONST,0,0,False,0xa0,0,0x2c
"    0x3c: v3c(0x10000000000000000000000000000000000000000) = SHL v3a(0xa0), v38(0x1)",0x31,v3c,"0,v3a,v38",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x2c
"    0x3d: v3d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c(0x10000000000000000000000000000000000000000), v36(0x1)",0x31,v3d,"0,v3c,v36",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x2c
    0x3e: v3e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v3d(0xffffffffffffffffffffffffffffffffffffffff),0x31,v3e,"0,v3d",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x2c
"    0x3f: v3f = AND v3e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v35",0x31,v3f,"0,v3e,v35",AND,0,0,False,0,0,0x2c
    0x40: v40(0x1) = CONST ,0x31,v40,0,CONST,0,0,False,0x1,0,0x2c
    0x42: v42(0x1) = CONST ,0x31,v42,0,CONST,0,0,False,0x1,0,0x2c
    0x44: v44(0xa0) = CONST ,0x31,v44,0,CONST,0,0,False,0xa0,0,0x2c
"    0x46: v46(0x10000000000000000000000000000000000000000) = SHL v44(0xa0), v42(0x1)",0x31,v46,"0,v44,v42",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x2c
"    0x47: v47(0xffffffffffffffffffffffffffffffffffffffff) = SUB v46(0x10000000000000000000000000000000000000000), v40(0x1)",0x31,v47,"0,v46,v40",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x2c
"    0x4b: v4b = AND v47(0xffffffffffffffffffffffffffffffffffffffff), v27",0x31,v4b,"0,v47,v27",AND,0,0,True,0,0,0x2c
"    0x4f: v4f = OR v4b, v3f",0x31,v4f,"0,v4b,v3f",OR,0,0,True,0,0,0x2c
"    0x51: SSTORE v32(0x0), v4f",0x31,0,"0,v32,v4f",SSTORE,0,0,False,0,0,0x2c
    0x52: JUMP v24(0x2c),0x31,0,"0,v24",JUMP,0,0,False,0,0,0x2c
    Begin block 0x2c,0x2c,0,0,0,0,0,False,0,0,0x2c
"    prev=[0x31], succ=[0x53]",0x2c,0,0,0,0,0,False,0,0,0x53
    =================================,0x2c,0,0,0,0,0,False,0,0,0x53
    0x2d: v2d(0x53) = CONST ,0x2c,v2d,0,CONST,0,0,False,0x53,0,0x53
    0x30: JUMP v2d(0x53),0x2c,0,"0,v2d",JUMP,0,0,False,0,0,0x53
    Begin block 0x53,0x53,0,0,0,0,0,False,0,0,0x53
"    prev=[0x2c], succ=[]",0x53,0,0,0,0,0,False,0,0,0x53
    =================================,0x53,0,0,0,0,0,False,0,0,0x53
    0x54: v54(0x314a) = CONST ,0x53,v54,0,CONST,0,0,False,0x314a,0,0x53
    0x58: v58(0x63) = CONST ,0x53,v58,0,CONST,0,0,False,0x63,0,0x53
    0x5c: v5c(0x0) = CONST ,0x53,v5c,0,CONST,0,0,False,0x0,0,0x53
"    0x5e: CODECOPY v5c(0x0), v58(0x63), v54(0x314a)",0x53,0,"0,v5c,v58,v54",CODECOPY,0,0,False,0,0,0x53
    0x5f: v5f(0x0) = CONST ,0x53,v5f,0,CONST,0,0,False,0x0,0,0x53
"    0x61: RETURN v5f(0x0), v54(0x314a)",0x53,0,"0,v5f,v54",RETURN,0,0,False,0,0,0x53
},0x53,0,0,0,0,0,False,0,0,0x53
