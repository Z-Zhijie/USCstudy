3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x12: v12 = CALLER ,0x10,v12,0,CALLER,0,0,True,0,0,"0xc, 0x10"
    0x13: v13(0x1) = CONST ,0x10,v13,0,CONST,0,0,False,0x1,0,"0xc, 0x10"
    0x15: v15(0x0) = CONST ,0x10,v15,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
    0x17: v17(0x100) = CONST ,0x10,v17,0,CONST,0,0,False,0x100,0,"0xc, 0x10"
"    0x1a: v1a(0x1) = EXP v17(0x100), v15(0x0)",0x10,v1a,"0,v17,v15",EXP,0,0,False,0x1,0,"0xc, 0x10"
    0x1c: v1c = SLOAD v13(0x1),0x10,v1c,"0,v13",SLOAD,0,0,False,0,0,"0xc, 0x10"
    0x1e: v1e(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x10,v1e,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xc, 0x10"
"    0x33: v33(0xffffffffffffffffffffffffffffffffffffffff) = MUL v1e(0xffffffffffffffffffffffffffffffffffffffff), v1a(0x1)",0x10,v33,"0,v1e,v1a",MUL,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xc, 0x10"
    0x34: v34(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v33(0xffffffffffffffffffffffffffffffffffffffff),0x10,v34,"0,v33",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0xc, 0x10"
"    0x35: v35 = AND v34(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v1c",0x10,v35,"0,v34,v1c",AND,0,0,False,0,0,"0xc, 0x10"
    0x38: v38(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x10,v38,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xc, 0x10"
"    0x4d: v4d = AND v38(0xffffffffffffffffffffffffffffffffffffffff), v12",0x10,v4d,"0,v38,v12",AND,0,0,True,0,0,"0xc, 0x10"
"    0x4e: v4e = MUL v4d, v1a(0x1)",0x10,v4e,"0,v4d,v1a",MUL,0,0,False,0,0,"0xc, 0x10"
"    0x4f: v4f = OR v4e, v35",0x10,v4f,"0,v4e,v35",OR,0,0,False,0,0,"0xc, 0x10"
"    0x51: SSTORE v13(0x1), v4f",0x10,0,"0,v13,v4f",SSTORE,0,0,False,0,0,"0xc, 0x10"
    0x53: v53(0x5dae) = CONST ,0x10,v53,0,CONST,0,0,False,0x5dae,0,"0xc, 0x10"
    0x57: v57(0x62) = CONST ,0x10,v57,0,CONST,0,0,False,0x62,0,"0xc, 0x10"
    0x5b: v5b(0x0) = CONST ,0x10,v5b,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0x5d: CODECOPY v5b(0x0), v57(0x62), v53(0x5dae)",0x10,0,"0,v5b,v57,v53",CODECOPY,0,0,False,0,0,"0xc, 0x10"
    0x5e: v5e(0x0) = CONST ,0x10,v5e,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0x60: RETURN v5e(0x0), v53(0x5dae)",0x10,0,"0,v5e,v53",RETURN,0,0,False,0,0,"0xc, 0x10"
},0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
