3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xf, 0xb]",0x0,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0x0: v0(0x60) = CONST ,0x0,v0,0,CONST,0,0,False,0x60,0,"0xf, 0xb"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
"    0x4: MSTORE v2(0x40), v0(0x60)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xf, 0xb"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xf, 0xb"
    0x6: v6 = ISZERO v5,0x0,v6,"0,v5",ISZERO,0,0,False,0,0,"0xf, 0xb"
    0x7: v7(0xf) = CONST ,0x0,v7,0,CONST,0,0,False,0xf,0,"0xf, 0xb"
"    0xa: JUMPI v7(0xf), v6",0x0,0,"0,v7,v6",JUMPI,0,0,False,0,0,"0xf, 0xb"
    Begin block 0xf,0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
"    prev=[0x0], succ=[]",0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0x10: v10(0x289c) = CONST ,0xf,v10,0,CONST,0,0,False,0x289c,0,"0xf, 0xb"
    0x14: v14(0x1e) = CONST ,0xf,v14,0,CONST,0,0,False,0x1e,0,"0xf, 0xb"
    0x17: v17(0x0) = CONST ,0xf,v17,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0x19: CODECOPY v17(0x0), v14(0x1e), v10(0x289c)",0xf,0,"0,v17,v14,v10",CODECOPY,0,0,False,0,0,"0xf, 0xb"
    0x1a: v1a(0x0) = CONST ,0xf,v1a,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0x1c: RETURN v1a(0x0), v10(0x289c)",0xf,0,"0,v1a,v10",RETURN,0,0,False,0,0,"0xf, 0xb"
    Begin block 0xb,0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
"    prev=[0x0], succ=[]",0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0xb: vb(0x0) = CONST ,0xb,vb,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0xe: REVERT vb(0x0), vb(0x0)",0xb,0,"0,vb,vb",REVERT,0,0,False,0,0,"0xf, 0xb"
},0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
