3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xf, 0xb]",0x0,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0x0: v0(0x60) = CONST ,0x0,v0,0,CONST,0,0,False,0x60,0,"0xf, 0xb"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
"    0x4: MSTORE v2(0x40), v0(0x60)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xf, 0xb"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xf, 0xb"
    0x6: v6 = ISZERO v5,0x0,v6,"0,v5",ISZERO,0,0,False,0,0,"0xf, 0xb"
    0x7: v7(0xf) = CONST ,0x0,v7,0,CONST,0,0,False,0xf,0,"0xf, 0xb"
"    0xa: JUMPI v7(0xf), v6",0x0,0,"0,v7,v6",JUMPI,0,0,False,0,0,"0xf, 0xb"
    Begin block 0xf,0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
"    prev=[0x0], succ=[]",0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0x10: v10(0x40) = CONST ,0xf,v10,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
    0x12: v12 = MLOAD v10(0x40),0xf,v12,"0,v10",MLOAD,0,0,False,0,0&m0x40,"0xf, 0xb"
    0x13: v13(0x40) = CONST ,0xf,v13,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
    0x16: v16(0x2c1) = CONST ,0xf,v16,0,CONST,0,0,False,0x2c1,0,"0xf, 0xb"
"    0x1a: CODECOPY v12, v16(0x2c1), v13(0x40)",0xf,0,"0,v12,v16,v13",CODECOPY,0,0,False,0,0,"0xf, 0xb"
"    0x1c: v1c = ADD v12, v13(0x40)",0xf,v1c,"0,v12,v13",ADD,0,0,False,0,0&m0x40+0x40,"0xf, 0xb"
    0x1d: v1d(0x40) = CONST ,0xf,v1d,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
"    0x1f: MSTORE v1d(0x40), v1c",0xf,0,"0,v1d,v1c",MSTORE,0,0,False,0,0,"0xf, 0xb"
    0x22: v22 = MLOAD v12,0xf,v22,"0,v12",MLOAD,0,0,False,0,0,"0xf, 0xb"
    0x25: v25(0x20) = CONST ,0xf,v25,0,CONST,0,0,False,0x20,0,"0xf, 0xb"
"    0x27: v27 = ADD v25(0x20), v12",0xf,v27,"0,v25,v12",ADD,0,0,False,0,0&m0x40+0x20,"0xf, 0xb"
    0x29: v29 = MLOAD v27,0xf,v29,"0,v27",MLOAD,0,0,False,0,0,"0xf, 0xb"
    0x2a: v2a(0x0) = CONST ,0xf,v2a,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
    0x2d: v2d = SLOAD v2a(0x0),0xf,v2d,"0,v2a",SLOAD,0,0,False,0,0,"0xf, 0xb"
    0x2e: v2e(0x1) = CONST ,0xf,v2e,0,CONST,0,0,False,0x1,0,"0xf, 0xb"
    0x30: v30(0xa0) = CONST ,0xf,v30,0,CONST,0,0,False,0xa0,0,"0xf, 0xb"
    0x32: v32(0x2) = CONST ,0xf,v32,0,CONST,0,0,False,0x2,0,"0xf, 0xb"
"    0x34: v34(0x10000000000000000000000000000000000000000) = EXP v32(0x2), v30(0xa0)",0xf,v34,"0,v32,v30",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0xf, 0xb"
"    0x35: v35(0xffffffffffffffffffffffffffffffffffffffff) = SUB v34(0x10000000000000000000000000000000000000000), v2e(0x1)",0xf,v35,"0,v34,v2e",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xf, 0xb"
"    0x38: v38 = AND v22, v35(0xffffffffffffffffffffffffffffffffffffffff)",0xf,v38,"0,v22,v35",AND,0,0,False,0,0,"0xf, 0xb"
    0x39: v39(0x1) = CONST ,0xf,v39,0,CONST,0,0,False,0x1,0,"0xf, 0xb"
    0x3b: v3b(0xa0) = CONST ,0xf,v3b,0,CONST,0,0,False,0xa0,0,"0xf, 0xb"
    0x3d: v3d(0x2) = CONST ,0xf,v3d,0,CONST,0,0,False,0x2,0,"0xf, 0xb"
"    0x3f: v3f(0x10000000000000000000000000000000000000000) = EXP v3d(0x2), v3b(0xa0)",0xf,v3f,"0,v3d,v3b",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0xf, 0xb"
"    0x40: v40(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3f(0x10000000000000000000000000000000000000000), v39(0x1)",0xf,v40,"0,v3f,v39",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xf, 0xb"
    0x41: v41(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v40(0xffffffffffffffffffffffffffffffffffffffff),0xf,v41,"0,v40",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0xf, 0xb"
"    0x44: v44 = AND v2d, v41(0xffffffffffffffffffffffff0000000000000000000000000000000000000000)",0xf,v44,"0,v2d,v41",AND,0,0,False,0,0,"0xf, 0xb"
"    0x48: v48 = OR v44, v38",0xf,v48,"0,v44,v38",OR,0,0,False,0,0,"0xf, 0xb"
"    0x4b: SSTORE v2a(0x0), v48",0xf,0,"0,v2a,v48",SSTORE,0,0,False,0,0,"0xf, 0xb"
    0x4e: v4e(0x1) = CONST ,0xf,v4e,0,CONST,0,0,False,0x1,0,"0xf, 0xb"
"    0x50: SSTORE v4e(0x1), v29",0xf,0,"0,v4e,v29",SSTORE,0,0,False,0,0,"0xf, 0xb"
    0x51: v51(0x262) = CONST ,0xf,v51,0,CONST,0,0,False,0x262,0,"0xf, 0xb"
    0x55: v55(0x5f) = CONST ,0xf,v55,0,CONST,0,0,False,0x5f,0,"0xf, 0xb"
    0x58: v58(0x0) = CONST ,0xf,v58,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0x5a: CODECOPY v58(0x0), v55(0x5f), v51(0x262)",0xf,0,"0,v58,v55,v51",CODECOPY,0,0,False,0,0,"0xf, 0xb"
    0x5b: v5b(0x0) = CONST ,0xf,v5b,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0x5d: RETURN v5b(0x0), v51(0x262)",0xf,0,"0,v5b,v51",RETURN,0,0,False,0,0,"0xf, 0xb"
    Begin block 0xb,0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
"    prev=[0x0], succ=[]",0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0xb: vb(0x0) = CONST ,0xb,vb,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0xe: REVERT vb(0x0), vb(0x0)",0xb,0,"0,vb,vb",REVERT,0,0,False,0,0,"0xf, 0xb"
},0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
