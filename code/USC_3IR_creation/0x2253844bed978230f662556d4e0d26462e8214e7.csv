3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x19, 0x1d]",0x0,0,0,0,0,0,False,0,0,"0x19, 0x1d"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x19, 0x1d"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x19, 0x1d"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x19, 0x1d"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x19, 0x1d"
    0x5: v5(0x4) = CONST ,0x0,v5,0,CONST,0,0,False,0x4,0,"0x19, 0x1d"
    0x8: v8 = SLOAD v5(0x4),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x19, 0x1d"
    0x9: v9(0xff) = CONST ,0x0,v9,0,CONST,0,0,False,0xff,0,"0x19, 0x1d"
    0xb: vb(0xa0) = CONST ,0x0,vb,0,CONST,0,0,False,0xa0,0,"0x19, 0x1d"
"    0xd: vd(0xff0000000000000000000000000000000000000000) = SHL vb(0xa0), v9(0xff)",0x0,vd,"0,vb,v9",SHL,0,0,False,0xff0000000000000000000000000000000000000000,0,"0x19, 0x1d"
    0xe: ve(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT vd(0xff0000000000000000000000000000000000000000),0x0,ve,"0,vd",NOT,0,0,False,0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff,0,"0x19, 0x1d"
"    0xf: vf = AND ve(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff), v8",0x0,vf,"0,ve,v8",AND,0,0,False,0,0,"0x19, 0x1d"
"    0x11: SSTORE v5(0x4), vf",0x0,0,"0,v5,vf",SSTORE,0,0,False,0,0,"0x19, 0x1d"
    0x12: v12 = CALLVALUE ,0x0,v12,0,CALLVALUE,0,0,False,0,0,"0x19, 0x1d"
    0x14: v14 = ISZERO v12,0x0,v14,"0,v12",ISZERO,0,0,False,0,0,"0x19, 0x1d"
    0x15: v15(0x1d) = CONST ,0x0,v15,0,CONST,0,0,False,0x1d,0,"0x19, 0x1d"
"    0x18: JUMPI v15(0x1d), v14",0x0,0,"0,v15,v14",JUMPI,0,0,False,0,0,"0x19, 0x1d"
    Begin block 0x19,0x19,0,0,0,0,0,False,0,0,"0x19, 0x1d"
"    prev=[0x0], succ=[]",0x19,0,0,0,0,0,False,0,0,"0x19, 0x1d"
    =================================,0x19,0,0,0,0,0,False,0,0,"0x19, 0x1d"
    0x19: v19(0x0) = CONST ,0x19,v19,0,CONST,0,0,False,0x0,0,"0x19, 0x1d"
"    0x1c: REVERT v19(0x0), v19(0x0)",0x19,0,"0,v19,v19",REVERT,0,0,False,0,0,"0x19, 0x1d"
    Begin block 0x1d,0x1d,0,0,0,0,0,False,0,0,"0x19, 0x1d"
"    prev=[0x0], succ=[]",0x1d,0,0,0,0,0,False,0,0,"0x19, 0x1d"
    =================================,0x1d,0,0,0,0,0,False,0,0,"0x19, 0x1d"
    0x1f: v1f(0x264a) = CONST ,0x1d,v1f,0,CONST,0,0,False,0x264a,0,"0x19, 0x1d"
    0x23: v23(0x2d) = CONST ,0x1d,v23,0,CONST,0,0,False,0x2d,0,"0x19, 0x1d"
    0x26: v26(0x0) = CONST ,0x1d,v26,0,CONST,0,0,False,0x0,0,"0x19, 0x1d"
"    0x28: CODECOPY v26(0x0), v23(0x2d), v1f(0x264a)",0x1d,0,"0,v26,v23,v1f",CODECOPY,0,0,False,0,0,"0x19, 0x1d"
    0x29: v29(0x0) = CONST ,0x1d,v29,0,CONST,0,0,False,0x0,0,"0x19, 0x1d"
"    0x2b: RETURN v29(0x0), v1f(0x264a)",0x1d,0,"0,v29,v1f",RETURN,0,0,False,0,0,"0x19, 0x1d"
},0x1d,0,0,0,0,0,False,0,0,"0x19, 0x1d"
