3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x12: v12(0x0) = CONST ,0x10,v12,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
    0x15: v15 = SLOAD v12(0x0),0x10,v15,"0,v12",SLOAD,0,0,False,0,0,"0xc, 0x10"
    0x16: v16(0x1) = CONST ,0x10,v16,0,CONST,0,0,False,0x1,0,"0xc, 0x10"
    0x18: v18(0x1) = CONST ,0x10,v18,0,CONST,0,0,False,0x1,0,"0xc, 0x10"
    0x1a: v1a(0xa0) = CONST ,0x10,v1a,0,CONST,0,0,False,0xa0,0,"0xc, 0x10"
"    0x1c: v1c(0x10000000000000000000000000000000000000000) = SHL v1a(0xa0), v18(0x1)",0x10,v1c,"0,v1a,v18",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0xc, 0x10"
"    0x1d: v1d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1c(0x10000000000000000000000000000000000000000), v16(0x1)",0x10,v1d,"0,v1c,v16",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xc, 0x10"
    0x1e: v1e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1d(0xffffffffffffffffffffffffffffffffffffffff),0x10,v1e,"0,v1d",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0xc, 0x10"
"    0x1f: v1f = AND v1e(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v15",0x10,v1f,"0,v1e,v15",AND,0,0,False,0,0,"0xc, 0x10"
    0x20: v20 = CALLER ,0x10,v20,0,CALLER,0,0,True,0,0,"0xc, 0x10"
"    0x21: v21 = OR v20, v1f",0x10,v21,"0,v20,v1f",OR,0,0,True,0,0,"0xc, 0x10"
"    0x23: SSTORE v12(0x0), v21",0x10,0,"0,v12,v21",SSTORE,0,0,False,0,0,"0xc, 0x10"
    0x24: v24(0x5cc7) = CONST ,0x10,v24,0,CONST,0,0,False,0x5cc7,0,"0xc, 0x10"
    0x28: v28(0x33) = CONST ,0x10,v28,0,CONST,0,0,False,0x33,0,"0xc, 0x10"
    0x2c: v2c(0x0) = CONST ,0x10,v2c,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0x2e: CODECOPY v2c(0x0), v28(0x33), v24(0x5cc7)",0x10,0,"0,v2c,v28,v24",CODECOPY,0,0,False,0,0,"0xc, 0x10"
    0x2f: v2f(0x0) = CONST ,0x10,v2f,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0x31: RETURN v2f(0x0), v24(0x5cc7)",0x10,0,"0,v2f,v24",RETURN,0,0,False,0,0,"0xc, 0x10"
},0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
