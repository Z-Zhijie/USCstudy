3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x6e]",0x10,0,0,0,0,0,False,0,0,0x6e
    =================================,0x10,0,0,0,0,0,False,0,0,0x6e
    0x12: v12(0x0) = CONST ,0x10,v12,0,CONST,0,0,False,0x0,0,0x6e
    0x14: v14(0x1b) = CONST ,0x10,v14,0,CONST,0,0,False,0x1b,0,0x6e
    0x17: v17(0x6e) = CONST ,0x10,v17,0,CONST,0,0,False,0x6e,0,0x6e
    0x1a: JUMP v17(0x6e),0x10,0,"0,v17",JUMP,0,0,False,0,0,0x6e
    Begin block 0x6e,0x6e,0,0,0,0,0,False,0,0,0x6e
"    prev=[0x10], succ=[0x1b]",0x6e,0,0,0,0,0,False,0,0,0x1b
    =================================,0x6e,0,0,0,0,0,False,0,0,0x1b
    0x6f: v6f = CALLER ,0x6e,v6f,0,CALLER,0,0,True,0,0,0x1b
    0x71: JUMP v14(0x1b),0x6e,0,"0,v14",JUMP,0,0,False,0,0,0x1b
    Begin block 0x1b,0x1b,0,0,0,0,0,False,0,0,0x1b
"    prev=[0x6e], succ=[0x72]",0x1b,0,0,0,0,0,False,0,0,0x72
    =================================,0x1b,0,0,0,0,0,False,0,0,0x72
    0x1c: v1c(0x0) = CONST ,0x1b,v1c,0,CONST,0,0,False,0x0,0,0x72
    0x1f: v1f = SLOAD v1c(0x0),0x1b,v1f,"0,v1c",SLOAD,0,0,False,0,0,0x72
    0x20: v20(0x1) = CONST ,0x1b,v20,0,CONST,0,0,False,0x1,0,0x72
    0x22: v22(0x1) = CONST ,0x1b,v22,0,CONST,0,0,False,0x1,0,0x72
    0x24: v24(0xa0) = CONST ,0x1b,v24,0,CONST,0,0,False,0xa0,0,0x72
"    0x26: v26(0x10000000000000000000000000000000000000000) = SHL v24(0xa0), v22(0x1)",0x1b,v26,"0,v24,v22",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x72
"    0x27: v27(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26(0x10000000000000000000000000000000000000000), v20(0x1)",0x1b,v27,"0,v26,v20",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x72
    0x28: v28(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v27(0xffffffffffffffffffffffffffffffffffffffff),0x1b,v28,"0,v27",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x72
"    0x29: v29 = AND v28(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v1f",0x1b,v29,"0,v28,v1f",AND,0,0,False,0,0,0x72
    0x2a: v2a(0x1) = CONST ,0x1b,v2a,0,CONST,0,0,False,0x1,0,0x72
    0x2c: v2c(0x1) = CONST ,0x1b,v2c,0,CONST,0,0,False,0x1,0,0x72
    0x2e: v2e(0xa0) = CONST ,0x1b,v2e,0,CONST,0,0,False,0xa0,0,0x72
"    0x30: v30(0x10000000000000000000000000000000000000000) = SHL v2e(0xa0), v2c(0x1)",0x1b,v30,"0,v2e,v2c",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x72
"    0x31: v31(0xffffffffffffffffffffffffffffffffffffffff) = SUB v30(0x10000000000000000000000000000000000000000), v2a(0x1)",0x1b,v31,"0,v30,v2a",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x72
"    0x33: v33 = AND v6f, v31(0xffffffffffffffffffffffffffffffffffffffff)",0x1b,v33,"0,v6f,v31",AND,0,0,True,0,0,0x72
"    0x36: v36 = OR v33, v29",0x1b,v36,"0,v33,v29",OR,0,0,True,0,0,0x72
"    0x38: SSTORE v1c(0x0), v36",0x1b,0,"0,v1c,v36",SSTORE,0,0,False,0,0,0x72
    0x39: v39(0x40) = CONST ,0x1b,v39,0,CONST,0,0,False,0x40,0,0x72
    0x3b: v3b = MLOAD v39(0x40),0x1b,v3b,"0,v39",MLOAD,0,0,False,0,0&m0x40,0x72
    0x40: v40(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST ,0x1b,v40,0,CONST,0,0,False,0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0,0,0x72
"    0x64: LOG3 v3b, v1c(0x0), v40(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v1c(0x0), v33",0x1b,0,"0,v3b,v1c,v40,v1c,v33",LOG3,0,0,False,0,0,0x72
    0x66: v66(0x1) = CONST ,0x1b,v66,0,CONST,0,0,False,0x1,0,0x72
"    0x69: SSTORE v66(0x1), v66(0x1)",0x1b,0,"0,v66,v66",SSTORE,0,0,False,0,0,0x72
    0x6a: v6a(0x72) = CONST ,0x1b,v6a,0,CONST,0,0,False,0x72,0,0x72
    0x6d: JUMP v6a(0x72),0x1b,0,"0,v6a",JUMP,0,0,False,0,0,0x72
    Begin block 0x72,0x72,0,0,0,0,0,False,0,0,0x72
"    prev=[0x1b], succ=[]",0x72,0,0,0,0,0,False,0,0,0x72
    =================================,0x72,0,0,0,0,0,False,0,0,0x72
    0x73: v73(0x1c7f) = CONST ,0x72,v73,0,CONST,0,0,False,0x1c7f,0,0x72
    0x77: v77(0x81) = CONST ,0x72,v77,0,CONST,0,0,False,0x81,0,0x72
    0x7a: v7a(0x0) = CONST ,0x72,v7a,0,CONST,0,0,False,0x0,0,0x72
"    0x7c: CODECOPY v7a(0x0), v77(0x81), v73(0x1c7f)",0x72,0,"0,v7a,v77,v73",CODECOPY,0,0,False,0,0,0x72
    0x7d: v7d(0x0) = CONST ,0x72,v7d,0,CONST,0,0,False,0x0,0,0x72
"    0x7f: RETURN v7d(0x0), v73(0x1c7f)",0x72,0,"0,v7d,v73",RETURN,0,0,False,0,0,0x72
},0x72,0,0,0,0,0,False,0,0,0x72
