3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x5d]",0x10,0,0,0,0,0,False,0,0,0x5d
    =================================,0x10,0,0,0,0,0,False,0,0,0x5d
    0x12: v12(0x5d) = CONST ,0x10,v12,0,CONST,0,0,False,0x5d,0,0x5d
    0x15: v15 = CALLER ,0x10,v15,0,CALLER,0,0,True,0,0,0x5d
    0x16: v16(0x40) = CONST ,0x10,v16,0,CONST,0,0,False,0x40,0,0x5d
    0x19: v19 = MLOAD v16(0x40),0x10,v19,"0,v16",MLOAD,0,0,False,0,0&m0x40,0x5d
    0x1a: v1a(0x666169726d696e742e626561636f6e70726f78792e626561636f6e0000000000) = CONST ,0x10,v1a,0,CONST,0,0,False,0x666169726d696e742e626561636f6e70726f78792e626561636f6e0000000000,0,0x5d
    0x3b: v3b(0x20) = CONST ,0x10,v3b,0,CONST,0,0,False,0x20,0,0x5d
"    0x3f: v3f = ADD v19, v3b(0x20)",0x10,v3f,"0,v19,v3b",ADD,0,0,False,0,0&m0x40+0x20,0x5d
"    0x43: MSTORE v3f, v1a(0x666169726d696e742e626561636f6e70726f78792e626561636f6e0000000000)",0x10,0&m0x40+0x20,"0,v3f,v1a",MSTORE,0,0,False,0,0&m0x40+0x20,0x5d
    0x45: v45 = MLOAD v16(0x40),0x10,v45,"0,v16",MLOAD,0,0,False,0,0&m0x40,0x5d
    0x46: v46(0x1b) = CONST ,0x10,v46,0,CONST,0,0,False,0x1b,0,0x5d
"    0x4a: v4a(0x0) = SUB v19, v45",0x10,v4a,"0,v19,v45",SUB,0,0,False,0x0,0&m0x40-0x0,0x5d
"    0x4b: v4b(0x1b) = ADD v4a(0x0), v46(0x1b)",0x10,v4b,"0,v4a,v46",ADD,0,0,False,0x1b,0&m0x40-0x0+0x1b,0x5d
"    0x4d: MSTORE v45, v4b(0x1b)",0x10,0&m0x40,"0,v45,v4b",MSTORE,0,0,False,0,0&m0x40,0x5d
    0x4e: v4e(0x3b) = CONST ,0x10,v4e,0,CONST,0,0,False,0x3b,0,0x5d
"    0x52: v52 = ADD v19, v4e(0x3b)",0x10,v52,"0,v19,v4e",ADD,0,0,False,0,0&m0x40+0x3b,0x5d
"    0x55: MSTORE v16(0x40), v52",0x10,0,"0,v16,v52",MSTORE,0,0,False,0,0,0x5d
    0x57: v57(0x1b) = MLOAD v45,0x10,v57,"0,v45",MLOAD,0,0,False,0x1b,0&m0x1b,0x5d
"    0x59: v59 = ADD v3b(0x20), v45",0x10,v59,"0,v3b,v45",ADD,0,0,False,0,0&m0x40+0x20,0x5d
"    0x5a: v5a = SHA3 v59, v57(0x1b)",0x10,v5a,"0,v59,v57",SHA3,0,0,False,0,0,0x5d
"    0x5b: SSTORE v5a, v15",0x10,0,"0,v5a,v15",SSTORE,0,0,False,0,0,0x5d
    0x5c: JUMP v12(0x5d),0x10,0,"0,v12",JUMP,0,0,False,0,0,0x5d
    Begin block 0x5d,0x5d,0,0,0,0,0,False,0,0,0x5d
"    prev=[0x10], succ=[]",0x5d,0,0,0,0,0,False,0,0,0x5d
    =================================,0x5d,0,0,0,0,0,False,0,0,0x5d
    0x5e: v5e(0x172) = CONST ,0x5d,v5e,0,CONST,0,0,False,0x172,0,0x5d
    0x62: v62(0x6c) = CONST ,0x5d,v62,0,CONST,0,0,False,0x6c,0,0x5d
    0x65: v65(0x0) = CONST ,0x5d,v65,0,CONST,0,0,False,0x0,0,0x5d
"    0x67: CODECOPY v65(0x0), v62(0x6c), v5e(0x172)",0x5d,0,"0,v65,v62,v5e",CODECOPY,0,0,False,0,0,0x5d
    0x68: v68(0x0) = CONST ,0x5d,v68,0,CONST,0,0,False,0x0,0,0x5d
"    0x6a: RETURN v68(0x0), v5e(0x172)",0x5d,0,"0,v68,v5e",RETURN,0,0,False,0,0,0x5d
},0x5d,0,0,0,0,0,False,0,0,0x5d
