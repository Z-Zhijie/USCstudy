3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x42, 0x46]",0x0,0,0,0,0,0,False,0,0,"0x42, 0x46"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x42, 0x46"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x42, 0x46"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x42, 0x46"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x42, 0x46"
    0x5: v5(0x0) = CONST ,0x0,v5,0,CONST,0,0,False,0x0,0,"0x42, 0x46"
    0x7: v7(0x3) = CONST ,0x0,v7,0,CONST,0,0,False,0x3,0,"0x42, 0x46"
    0x9: v9(0x14) = CONST ,0x0,v9,0,CONST,0,0,False,0x14,0,"0x42, 0x46"
    0xb: vb(0x100) = CONST ,0x0,vb,0,CONST,0,0,False,0x100,0,"0x42, 0x46"
"    0xe: ve(0x10000000000000000000000000000000000000000) = EXP vb(0x100), v9(0x14)",0x0,ve,"0,vb,v9",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0x42, 0x46"
    0x10: v10 = SLOAD v7(0x3),0x0,v10,"0,v7",SLOAD,0,0,False,0,0,"0x42, 0x46"
    0x12: v12(0xff) = CONST ,0x0,v12,0,CONST,0,0,False,0xff,0,"0x42, 0x46"
"    0x14: v14(0xff0000000000000000000000000000000000000000) = MUL v12(0xff), ve(0x10000000000000000000000000000000000000000)",0x0,v14,"0,v12,ve",MUL,0,0,False,0xff0000000000000000000000000000000000000000,0,"0x42, 0x46"
    0x15: v15(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT v14(0xff0000000000000000000000000000000000000000),0x0,v15,"0,v14",NOT,0,0,False,0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff,0,"0x42, 0x46"
"    0x16: v16 = AND v15(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff), v10",0x0,v16,"0,v15,v10",AND,0,0,False,0,0,"0x42, 0x46"
    0x19: v19(0x1) = ISZERO v5(0x0),0x0,v19,"0,v5",ISZERO,0,0,False,0x1,0,"0x42, 0x46"
    0x1a: v1a(0x0) = ISZERO v19(0x1),0x0,v1a,"0,v19",ISZERO,0,0,False,0x0,0,"0x42, 0x46"
"    0x1b: v1b(0x0) = MUL v1a(0x0), ve(0x10000000000000000000000000000000000000000)",0x0,v1b,"0,v1a,ve",MUL,0,0,False,0x0,0,"0x42, 0x46"
"    0x1c: v1c = OR v1b(0x0), v16",0x0,v1c,"0,v1b,v16",OR,0,0,False,0,0,"0x42, 0x46"
"    0x1e: SSTORE v7(0x3), v1c",0x0,0,"0,v7,v1c",SSTORE,0,0,False,0,0,"0x42, 0x46"
    0x20: v20(0x0) = CONST ,0x0,v20,0,CONST,0,0,False,0x0,0,"0x42, 0x46"
    0x22: v22(0x3) = CONST ,0x0,v22,0,CONST,0,0,False,0x3,0,"0x42, 0x46"
    0x24: v24(0x15) = CONST ,0x0,v24,0,CONST,0,0,False,0x15,0,"0x42, 0x46"
    0x26: v26(0x100) = CONST ,0x0,v26,0,CONST,0,0,False,0x100,0,"0x42, 0x46"
"    0x29: v29(0x1000000000000000000000000000000000000000000) = EXP v26(0x100), v24(0x15)",0x0,v29,"0,v26,v24",EXP,0,0,False,0x1000000000000000000000000000000000000000000,0,"0x42, 0x46"
    0x2b: v2b = SLOAD v22(0x3),0x0,v2b,"0,v22",SLOAD,0,0,False,0,0,"0x42, 0x46"
    0x2d: v2d(0xff) = CONST ,0x0,v2d,0,CONST,0,0,False,0xff,0,"0x42, 0x46"
"    0x2f: v2f(0xff000000000000000000000000000000000000000000) = MUL v2d(0xff), v29(0x1000000000000000000000000000000000000000000)",0x0,v2f,"0,v2d,v29",MUL,0,0,False,0xff000000000000000000000000000000000000000000,0,"0x42, 0x46"
    0x30: v30(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) = NOT v2f(0xff000000000000000000000000000000000000000000),0x0,v30,"0,v2f",NOT,0,0,False,0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff,0,"0x42, 0x46"
"    0x31: v31 = AND v30(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff), v2b",0x0,v31,"0,v30,v2b",AND,0,0,False,0,0,"0x42, 0x46"
    0x34: v34(0x1) = ISZERO v20(0x0),0x0,v34,"0,v20",ISZERO,0,0,False,0x1,0,"0x42, 0x46"
    0x35: v35(0x0) = ISZERO v34(0x1),0x0,v35,"0,v34",ISZERO,0,0,False,0x0,0,"0x42, 0x46"
"    0x36: v36(0x0) = MUL v35(0x0), v29(0x1000000000000000000000000000000000000000000)",0x0,v36,"0,v35,v29",MUL,0,0,False,0x0,0,"0x42, 0x46"
"    0x37: v37 = OR v36(0x0), v31",0x0,v37,"0,v36,v31",OR,0,0,False,0,0,"0x42, 0x46"
"    0x39: SSTORE v22(0x3), v37",0x0,0,"0,v22,v37",SSTORE,0,0,False,0,0,"0x42, 0x46"
    0x3b: v3b = CALLVALUE ,0x0,v3b,0,CALLVALUE,0,0,False,0,0,"0x42, 0x46"
    0x3d: v3d = ISZERO v3b,0x0,v3d,"0,v3b",ISZERO,0,0,False,0,0,"0x42, 0x46"
    0x3e: v3e(0x46) = CONST ,0x0,v3e,0,CONST,0,0,False,0x46,0,"0x42, 0x46"
"    0x41: JUMPI v3e(0x46), v3d",0x0,0,"0,v3e,v3d",JUMPI,0,0,False,0,0,"0x42, 0x46"
    Begin block 0x42,0x42,0,0,0,0,0,False,0,0,"0x42, 0x46"
"    prev=[0x0], succ=[]",0x42,0,0,0,0,0,False,0,0,"0x42, 0x46"
    =================================,0x42,0,0,0,0,0,False,0,0,"0x42, 0x46"
    0x42: v42(0x0) = CONST ,0x42,v42,0,CONST,0,0,False,0x0,0,"0x42, 0x46"
"    0x45: REVERT v42(0x0), v42(0x0)",0x42,0,"0,v42,v42",REVERT,0,0,False,0,0,"0x42, 0x46"
    Begin block 0x46,0x46,0,0,0,0,0,False,0,0,"0x42, 0x46"
"    prev=[0x0], succ=[]",0x46,0,0,0,0,0,False,0,0,"0x42, 0x46"
    =================================,0x46,0,0,0,0,0,False,0,0,"0x42, 0x46"
    0x48: v48 = CALLER ,0x46,v48,0,CALLER,0,0,True,0,0,"0x42, 0x46"
    0x49: v49(0x3) = CONST ,0x46,v49,0,CONST,0,0,False,0x3,0,"0x42, 0x46"
    0x4b: v4b(0x0) = CONST ,0x46,v4b,0,CONST,0,0,False,0x0,0,"0x42, 0x46"
    0x4d: v4d(0x100) = CONST ,0x46,v4d,0,CONST,0,0,False,0x100,0,"0x42, 0x46"
"    0x50: v50(0x1) = EXP v4d(0x100), v4b(0x0)",0x46,v50,"0,v4d,v4b",EXP,0,0,False,0x1,0,"0x42, 0x46"
    0x52: v52 = SLOAD v49(0x3),0x46,v52,"0,v49",SLOAD,0,0,False,0,0,"0x42, 0x46"
    0x54: v54(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x46,v54,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x42, 0x46"
"    0x69: v69(0xffffffffffffffffffffffffffffffffffffffff) = MUL v54(0xffffffffffffffffffffffffffffffffffffffff), v50(0x1)",0x46,v69,"0,v54,v50",MUL,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x42, 0x46"
    0x6a: v6a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v69(0xffffffffffffffffffffffffffffffffffffffff),0x46,v6a,"0,v69",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0x42, 0x46"
"    0x6b: v6b = AND v6a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v52",0x46,v6b,"0,v6a,v52",AND,0,0,False,0,0,"0x42, 0x46"
    0x6e: v6e(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x46,v6e,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x42, 0x46"
"    0x83: v83 = AND v6e(0xffffffffffffffffffffffffffffffffffffffff), v48",0x46,v83,"0,v6e,v48",AND,0,0,True,0,0,"0x42, 0x46"
"    0x84: v84 = MUL v83, v50(0x1)",0x46,v84,"0,v83,v50",MUL,0,0,False,0,0,"0x42, 0x46"
"    0x85: v85 = OR v84, v6b",0x46,v85,"0,v84,v6b",OR,0,0,False,0,0,"0x42, 0x46"
"    0x87: SSTORE v49(0x3), v85",0x46,0,"0,v49,v85",SSTORE,0,0,False,0,0,"0x42, 0x46"
    0x89: v89(0x5e8e) = CONST ,0x46,v89,0,CONST,0,0,False,0x5e8e,0,"0x42, 0x46"
    0x8d: v8d(0x98) = CONST ,0x46,v8d,0,CONST,0,0,False,0x98,0,"0x42, 0x46"
    0x91: v91(0x0) = CONST ,0x46,v91,0,CONST,0,0,False,0x0,0,"0x42, 0x46"
"    0x93: CODECOPY v91(0x0), v8d(0x98), v89(0x5e8e)",0x46,0,"0,v91,v8d,v89",CODECOPY,0,0,False,0,0,"0x42, 0x46"
    0x94: v94(0x0) = CONST ,0x46,v94,0,CONST,0,0,False,0x0,0,"0x42, 0x46"
"    0x96: RETURN v94(0x0), v89(0x5e8e)",0x46,0,"0,v94,v89",RETURN,0,0,False,0,0,"0x42, 0x46"
},0x46,0,0,0,0,0,False,0,0,"0x42, 0x46"
