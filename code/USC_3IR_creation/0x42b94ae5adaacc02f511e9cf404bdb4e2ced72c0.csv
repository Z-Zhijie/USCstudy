3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x33, 0x24]",0x10,0,0,0,0,0,False,0,0,"0x33, 0x24"
    =================================,0x10,0,0,0,0,0,False,0,0,"0x33, 0x24"
    0x12: v12(0x0) = CONST ,0x10,v12,0,CONST,0,0,False,0x0,0,"0x33, 0x24"
    0x14: v14 = SLOAD v12(0x0),0x10,v14,"0,v12",SLOAD,0,0,False,0,0,"0x33, 0x24"
    0x15: v15(0x1) = CONST ,0x10,v15,0,CONST,0,0,False,0x1,0,"0x33, 0x24"
    0x17: v17(0xa8) = CONST ,0x10,v17,0,CONST,0,0,False,0xa8,0,"0x33, 0x24"
"    0x19: v19(0x1000000000000000000000000000000000000000000) = SHL v17(0xa8), v15(0x1)",0x10,v19,"0,v17,v15",SHL,0,0,False,0x1000000000000000000000000000000000000000000,0,"0x33, 0x24"
"    0x1b: v1b = DIV v14, v19(0x1000000000000000000000000000000000000000000)",0x10,v1b,"0,v14,v19",DIV,0,0,False,0,0,"0x33, 0x24"
    0x1c: v1c(0xff) = CONST ,0x10,v1c,0,CONST,0,0,False,0xff,0,"0x33, 0x24"
"    0x1e: v1e = AND v1c(0xff), v1b",0x10,v1e,"0,v1c,v1b",AND,0,0,False,0,0,"0x33, 0x24"
    0x20: v20(0x33) = CONST ,0x10,v20,0,CONST,0,0,False,0x33,0,"0x33, 0x24"
"    0x23: JUMPI v20(0x33), v1e",0x10,0,"0,v20,v1e",JUMPI,0,0,False,0,0,"0x33, 0x24"
    Begin block 0x33,0x33,0,0,0,0,0,False,0,0,"0x33, 0x24"
"    prev=[0x10, 0x24], succ=[0x38, 0x9a]",0x33,0,0,0,0,0,False,0,0,"0x38, 0x9a"
    =================================,0x33,0,0,0,0,0,False,0,0,"0x38, 0x9a"
"    0x33_0x0: v33_0 = PHI v1e, v32",0x33,v33_0,"0,v1e,v32",PHI,0,0,False,0,0,"0x38, 0x9a"
    0x34: v34(0x9a) = CONST ,0x33,v34,0,CONST,0,0,False,0x9a,0,"0x38, 0x9a"
"    0x37: JUMPI v34(0x9a), v33_0",0x33,0,"0,v34,v33_0",JUMPI,0,0,False,0,0,"0x38, 0x9a"
    Begin block 0x38,0x38,0,0,0,0,0,False,0,0,"0x38, 0x9a"
"    prev=[0x33], succ=[]",0x38,0,0,0,0,0,False,0,0,"0x38, 0x9a"
    =================================,0x38,0,0,0,0,0,False,0,0,"0x38, 0x9a"
    0x38: v38(0x40) = CONST ,0x38,v38,0,CONST,0,0,False,0x40,0,"0x38, 0x9a"
    0x3a: v3a = MLOAD v38(0x40),0x38,v3a,"0,v38",MLOAD,0,0,False,0,0&m0x40,"0x38, 0x9a"
    0x3b: v3b(0x461bcd) = CONST ,0x38,v3b,0,CONST,0,0,False,0x461bcd,0,"0x38, 0x9a"
    0x3f: v3f(0xe5) = CONST ,0x38,v3f,0,CONST,0,0,False,0xe5,0,"0x38, 0x9a"
"    0x41: v41(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v3f(0xe5), v3b(0x461bcd)",0x38,v41,"0,v3f,v3b",SHL,0,0,False,0x8c379a000000000000000000000000000000000000000000000000000000000,0,"0x38, 0x9a"
"    0x43: MSTORE v3a, v41(0x8c379a000000000000000000000000000000000000000000000000000000000)",0x38,0&m0x40,"0,v3a,v41",MSTORE,0,0,False,0,0&m0x40,"0x38, 0x9a"
    0x44: v44(0x20) = CONST ,0x38,v44,0,CONST,0,0,False,0x20,0,"0x38, 0x9a"
    0x46: v46(0x4) = CONST ,0x38,v46,0,CONST,0,0,False,0x4,0,"0x38, 0x9a"
"    0x49: v49 = ADD v3a, v46(0x4)",0x38,v49,"0,v3a,v46",ADD,0,0,False,0,0&m0x40+0x4,"0x38, 0x9a"
"    0x4a: MSTORE v49, v44(0x20)",0x38,0&m0x40+0x4,"0,v49,v44",MSTORE,0,0,False,0,0&m0x40+0x4,"0x38, 0x9a"
    0x4b: v4b(0x2e) = CONST ,0x38,v4b,0,CONST,0,0,False,0x2e,0,"0x38, 0x9a"
    0x4d: v4d(0x24) = CONST ,0x38,v4d,0,CONST,0,0,False,0x24,0,"0x38, 0x9a"
"    0x50: v50 = ADD v3a, v4d(0x24)",0x38,v50,"0,v3a,v4d",ADD,0,0,False,0,0&m0x40+0x24,"0x38, 0x9a"
"    0x51: MSTORE v50, v4b(0x2e)",0x38,0&m0x40+0x24,"0,v50,v4b",MSTORE,0,0,False,0,0&m0x40+0x24,"0x38, 0x9a"
    0x52: v52(0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561) = CONST ,0x38,v52,0,CONST,0,0,False,0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561,0,"0x38, 0x9a"
    0x73: v73(0x44) = CONST ,0x38,v73,0,CONST,0,0,False,0x44,0,"0x38, 0x9a"
"    0x76: v76 = ADD v3a, v73(0x44)",0x38,v76,"0,v3a,v73",ADD,0,0,False,0,0&m0x40+0x44,"0x38, 0x9a"
"    0x77: MSTORE v76, v52(0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561)",0x38,0&m0x40+0x44,"0,v76,v52",MSTORE,0,0,False,0,0&m0x40+0x44,"0x38, 0x9a"
    0x78: v78(0x191e481a5b9a5d1a585b1a5e9959) = CONST ,0x38,v78,0,CONST,0,0,False,0x191e481a5b9a5d1a585b1a5e9959,0,"0x38, 0x9a"
    0x87: v87(0x92) = CONST ,0x38,v87,0,CONST,0,0,False,0x92,0,"0x38, 0x9a"
"    0x89: v89(0x647920696e697469616c697a6564000000000000000000000000000000000000) = SHL v87(0x92), v78(0x191e481a5b9a5d1a585b1a5e9959)",0x38,v89,"0,v87,v78",SHL,0,0,False,0x647920696e697469616c697a6564000000000000000000000000000000000000,0,"0x38, 0x9a"
    0x8a: v8a(0x64) = CONST ,0x38,v8a,0,CONST,0,0,False,0x64,0,"0x38, 0x9a"
"    0x8d: v8d = ADD v3a, v8a(0x64)",0x38,v8d,"0,v3a,v8a",ADD,0,0,False,0,0&m0x40+0x64,"0x38, 0x9a"
"    0x8e: MSTORE v8d, v89(0x647920696e697469616c697a6564000000000000000000000000000000000000)",0x38,0&m0x40+0x64,"0,v8d,v89",MSTORE,0,0,False,0,0&m0x40+0x64,"0x38, 0x9a"
    0x8f: v8f(0x84) = CONST ,0x38,v8f,0,CONST,0,0,False,0x84,0,"0x38, 0x9a"
"    0x91: v91 = ADD v8f(0x84), v3a",0x38,v91,"0,v8f,v3a",ADD,0,0,False,0,0&m0x40+0x84,"0x38, 0x9a"
    0x92: v92(0x40) = CONST ,0x38,v92,0,CONST,0,0,False,0x40,0,"0x38, 0x9a"
    0x94: v94 = MLOAD v92(0x40),0x38,v94,"0,v92",MLOAD,0,0,False,0,0&m0x40,"0x38, 0x9a"
"    0x97: v97(0x84) = SUB v91, v94",0x38,v97,"0,v91,v94",SUB,0,0,False,0x84,0&m0x40+0x84-0x84,"0x38, 0x9a"
"    0x99: REVERT v94, v97(0x84)",0x38,0,"0,v94,v97",REVERT,0,0,False,0,0,"0x38, 0x9a"
    Begin block 0x9a,0x9a,0,0,0,0,0,False,0,0,"0x38, 0x9a"
"    prev=[0x33], succ=[0xaf, 0xc4]",0x9a,0,0,0,0,0,False,0,0,"0xaf, 0xc4"
    =================================,0x9a,0,0,0,0,0,False,0,0,"0xaf, 0xc4"
    0x9b: v9b(0x0) = CONST ,0x9a,v9b,0,CONST,0,0,False,0x0,0,"0xaf, 0xc4"
    0x9d: v9d = SLOAD v9b(0x0),0x9a,v9d,"0,v9b",SLOAD,0,0,False,0,0,"0xaf, 0xc4"
    0x9e: v9e(0x1) = CONST ,0x9a,v9e,0,CONST,0,0,False,0x1,0,"0xaf, 0xc4"
    0xa0: va0(0xa8) = CONST ,0x9a,va0,0,CONST,0,0,False,0xa8,0,"0xaf, 0xc4"
"    0xa2: va2(0x1000000000000000000000000000000000000000000) = SHL va0(0xa8), v9e(0x1)",0x9a,va2,"0,va0,v9e",SHL,0,0,False,0x1000000000000000000000000000000000000000000,0,"0xaf, 0xc4"
"    0xa4: va4 = DIV v9d, va2(0x1000000000000000000000000000000000000000000)",0x9a,va4,"0,v9d,va2",DIV,0,0,False,0,0,"0xaf, 0xc4"
    0xa5: va5(0xff) = CONST ,0x9a,va5,0,CONST,0,0,False,0xff,0,"0xaf, 0xc4"
"    0xa7: va7 = AND va5(0xff), va4",0x9a,va7,"0,va5,va4",AND,0,0,False,0,0,"0xaf, 0xc4"
    0xa8: va8 = ISZERO va7,0x9a,va8,"0,va7",ISZERO,0,0,False,0,0,"0xaf, 0xc4"
    0xaa: vaa = ISZERO va8,0x9a,vaa,"0,va8",ISZERO,0,0,False,0,0,"0xaf, 0xc4"
    0xab: vab(0xc4) = CONST ,0x9a,vab,0,CONST,0,0,False,0xc4,0,"0xaf, 0xc4"
"    0xae: JUMPI vab(0xc4), vaa",0x9a,0,"0,vab,vaa",JUMPI,0,0,False,0,0,"0xaf, 0xc4"
    Begin block 0xaf,0xaf,0,0,0,0,0,False,0,0,"0xaf, 0xc4"
"    prev=[0x9a], succ=[0xc4]",0xaf,0,0,0,0,0,False,0,0,0xc4
    =================================,0xaf,0,0,0,0,0,False,0,0,0xc4
    0xaf: vaf(0x0) = CONST ,0xaf,vaf,0,CONST,0,0,False,0x0,0,0xc4
    0xb2: vb2 = SLOAD vaf(0x0),0xaf,vb2,"0,vaf",SLOAD,0,0,False,0,0,0xc4
    0xb3: vb3(0xffff) = CONST ,0xaf,vb3,0,CONST,0,0,False,0xffff,0,0xc4
    0xb6: vb6(0xa0) = CONST ,0xaf,vb6,0,CONST,0,0,False,0xa0,0,0xc4
"    0xb8: vb8(0xffff0000000000000000000000000000000000000000) = SHL vb6(0xa0), vb3(0xffff)",0xaf,vb8,"0,vb6,vb3",SHL,0,0,False,0xffff0000000000000000000000000000000000000000,0,0xc4
    0xb9: vb9(0xffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff) = NOT vb8(0xffff0000000000000000000000000000000000000000),0xaf,vb9,"0,vb8",NOT,0,0,False,0xffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff,0,0xc4
"    0xba: vba = AND vb9(0xffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff), vb2",0xaf,vba,"0,vb9,vb2",AND,0,0,False,0,0,0xc4
    0xbb: vbb(0x101) = CONST ,0xaf,vbb,0,CONST,0,0,False,0x101,0,0xc4
    0xbe: vbe(0xa0) = CONST ,0xaf,vbe,0,CONST,0,0,False,0xa0,0,0xc4
"    0xc0: vc0(0x1010000000000000000000000000000000000000000) = SHL vbe(0xa0), vbb(0x101)",0xaf,vc0,"0,vbe,vbb",SHL,0,0,False,0x1010000000000000000000000000000000000000000,0,0xc4
"    0xc1: vc1 = OR vc0(0x1010000000000000000000000000000000000000000), vba",0xaf,vc1,"0,vc0,vba",OR,0,0,False,0,0,0xc4
"    0xc3: SSTORE vaf(0x0), vc1",0xaf,0,"0,vaf,vc1",SSTORE,0,0,False,0,0,0xc4
    Begin block 0xc4,0xc4,0,0,0,0,0,False,0,0,0xc4
"    prev=[0xaf, 0x9a], succ=[0xcb, 0xd8]",0xc4,0,0,0,0,0,False,0,0,"0xcb, 0xd8"
    =================================,0xc4,0,0,0,0,0,False,0,0,"0xcb, 0xd8"
    0xc6: vc6 = ISZERO va8,0xc4,vc6,"0,va8",ISZERO,0,0,False,0,0,"0xcb, 0xd8"
    0xc7: vc7(0xd8) = CONST ,0xc4,vc7,0,CONST,0,0,False,0xd8,0,"0xcb, 0xd8"
"    0xca: JUMPI vc7(0xd8), vc6",0xc4,0,"0,vc7,vc6",JUMPI,0,0,False,0,0,"0xcb, 0xd8"
    Begin block 0xcb,0xcb,0,0,0,0,0,False,0,0,"0xcb, 0xd8"
"    prev=[0xc4], succ=[0xd8]",0xcb,0,0,0,0,0,False,0,0,0xd8
    =================================,0xcb,0,0,0,0,0,False,0,0,0xd8
    0xcb: vcb(0x0) = CONST ,0xcb,vcb,0,CONST,0,0,False,0x0,0,0xd8
    0xce: vce = SLOAD vcb(0x0),0xcb,vce,"0,vcb",SLOAD,0,0,False,0,0,0xd8
    0xcf: vcf(0xff) = CONST ,0xcb,vcf,0,CONST,0,0,False,0xff,0,0xd8
    0xd1: vd1(0xa8) = CONST ,0xcb,vd1,0,CONST,0,0,False,0xa8,0,0xd8
"    0xd3: vd3(0xff000000000000000000000000000000000000000000) = SHL vd1(0xa8), vcf(0xff)",0xcb,vd3,"0,vd1,vcf",SHL,0,0,False,0xff000000000000000000000000000000000000000000,0,0xd8
    0xd4: vd4(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) = NOT vd3(0xff000000000000000000000000000000000000000000),0xcb,vd4,"0,vd3",NOT,0,0,False,0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff,0,0xd8
"    0xd5: vd5 = AND vd4(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff), vce",0xcb,vd5,"0,vd4,vce",AND,0,0,False,0,0,0xd8
"    0xd7: SSTORE vcb(0x0), vd5",0xcb,0,"0,vcb,vd5",SSTORE,0,0,False,0,0,0xd8
    Begin block 0xd8,0xd8,0,0,0,0,0,False,0,0,0xd8
"    prev=[0xcb, 0xc4], succ=[]",0xd8,0,0,0,0,0,False,0,0,0xd8
    =================================,0xd8,0,0,0,0,0,False,0,0,0xd8
    0xda: vda(0x1ea9) = CONST ,0xd8,vda,0,CONST,0,0,False,0x1ea9,0,0xd8
    0xde: vde(0xe8) = CONST ,0xd8,vde,0,CONST,0,0,False,0xe8,0,0xd8
    0xe1: ve1(0x0) = CONST ,0xd8,ve1,0,CONST,0,0,False,0x0,0,0xd8
"    0xe3: CODECOPY ve1(0x0), vde(0xe8), vda(0x1ea9)",0xd8,0,"0,ve1,vde,vda",CODECOPY,0,0,False,0,0,0xd8
    0xe4: ve4(0x0) = CONST ,0xd8,ve4,0,CONST,0,0,False,0x0,0,0xd8
"    0xe6: RETURN ve4(0x0), vda(0x1ea9)",0xd8,0,"0,ve4,vda",RETURN,0,0,False,0,0,0xd8
    Begin block 0x24,0x24,0,0,0,0,0,False,0,0,0xd8
"    prev=[0x10], succ=[0x33]",0x24,0,0,0,0,0,False,0,0,0x33
    =================================,0x24,0,0,0,0,0,False,0,0,0x33
    0x25: v25(0x0) = CONST ,0x24,v25,0,CONST,0,0,False,0x0,0,0x33
    0x27: v27 = SLOAD v25(0x0),0x24,v27,"0,v25",SLOAD,0,0,False,0,0,0x33
    0x28: v28(0x1) = CONST ,0x24,v28,0,CONST,0,0,False,0x1,0,0x33
    0x2a: v2a(0xa0) = CONST ,0x24,v2a,0,CONST,0,0,False,0xa0,0,0x33
"    0x2c: v2c(0x10000000000000000000000000000000000000000) = SHL v2a(0xa0), v28(0x1)",0x24,v2c,"0,v2a,v28",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x33
"    0x2e: v2e = DIV v27, v2c(0x10000000000000000000000000000000000000000)",0x24,v2e,"0,v27,v2c",DIV,0,0,False,0,0,0x33
    0x2f: v2f(0xff) = CONST ,0x24,v2f,0,CONST,0,0,False,0xff,0,0x33
"    0x31: v31 = AND v2f(0xff), v2e",0x24,v31,"0,v2f,v2e",AND,0,0,False,0,0,0x33
    0x32: v32 = ISZERO v31,0x24,v32,"0,v31",ISZERO,0,0,False,0,0,0x33
},0x24,0,0,0,0,0,False,0,0,0x33
