3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x1d, 0x21]",0x0,0,0,0,0,0,False,0,0,"0x1d, 0x21"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x1d, 0x21"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x1d, 0x21"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x1d, 0x21"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x1d, 0x21"
    0x5: v5(0x0) = CONST ,0x0,v5,0,CONST,0,0,False,0x0,0,"0x1d, 0x21"
    0x8: v8 = SLOAD v5(0x0),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x1d, 0x21"
    0x9: v9(0x100) = CONST ,0x0,v9,0,CONST,0,0,False,0x100,0,"0x1d, 0x21"
    0xc: vc(0x1) = CONST ,0x0,vc,0,CONST,0,0,False,0x1,0,"0x1d, 0x21"
    0xe: ve(0xa8) = CONST ,0x0,ve,0,CONST,0,0,False,0xa8,0,"0x1d, 0x21"
"    0x10: v10(0x1000000000000000000000000000000000000000000) = SHL ve(0xa8), vc(0x1)",0x0,v10,"0,ve,vc",SHL,0,0,False,0x1000000000000000000000000000000000000000000,0,"0x1d, 0x21"
"    0x11: v11(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v10(0x1000000000000000000000000000000000000000000), v9(0x100)",0x0,v11,"0,v10,v9",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff00,0,"0x1d, 0x21"
    0x12: v12(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v11(0xffffffffffffffffffffffffffffffffffffffff00),0x0,v12,"0,v11",NOT,0,0,False,0xffffffffffffffffffffff0000000000000000000000000000000000000000ff,0,"0x1d, 0x21"
"    0x13: v13 = AND v12(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff), v8",0x0,v13,"0,v12,v8",AND,0,0,False,0,0,"0x1d, 0x21"
"    0x15: SSTORE v5(0x0), v13",0x0,0,"0,v5,v13",SSTORE,0,0,False,0,0,"0x1d, 0x21"
    0x16: v16 = CALLVALUE ,0x0,v16,0,CALLVALUE,0,0,False,0,0,"0x1d, 0x21"
    0x18: v18 = ISZERO v16,0x0,v18,"0,v16",ISZERO,0,0,False,0,0,"0x1d, 0x21"
    0x19: v19(0x21) = CONST ,0x0,v19,0,CONST,0,0,False,0x21,0,"0x1d, 0x21"
"    0x1c: JUMPI v19(0x21), v18",0x0,0,"0,v19,v18",JUMPI,0,0,False,0,0,"0x1d, 0x21"
    Begin block 0x1d,0x1d,0,0,0,0,0,False,0,0,"0x1d, 0x21"
"    prev=[0x0], succ=[]",0x1d,0,0,0,0,0,False,0,0,"0x1d, 0x21"
    =================================,0x1d,0,0,0,0,0,False,0,0,"0x1d, 0x21"
    0x1d: v1d(0x0) = CONST ,0x1d,v1d,0,CONST,0,0,False,0x0,0,"0x1d, 0x21"
"    0x20: REVERT v1d(0x0), v1d(0x0)",0x1d,0,"0,v1d,v1d",REVERT,0,0,False,0,0,"0x1d, 0x21"
    Begin block 0x21,0x21,0,0,0,0,0,False,0,0,"0x1d, 0x21"
"    prev=[0x0], succ=[0x40, 0x44]",0x21,0,0,0,0,0,False,0,0,"0x40, 0x44"
    =================================,0x21,0,0,0,0,0,False,0,0,"0x40, 0x44"
    0x23: v23(0x40) = CONST ,0x21,v23,0,CONST,0,0,False,0x40,0,"0x40, 0x44"
    0x25: v25 = MLOAD v23(0x40),0x21,v25,"0,v23",MLOAD,0,0,False,0,0&m0x40,"0x40, 0x44"
    0x26: v26(0xa5b) = CONST ,0x21,v26,0,CONST,0,0,False,0xa5b,0,"0x40, 0x44"
    0x29: v29 = CODESIZE ,0x21,v29,0,CODESIZE,0,0,False,0,0,"0x40, 0x44"
"    0x2a: v2a = SUB v29, v26(0xa5b)",0x21,v2a,"0,v29,v26",SUB,0,0,False,0,0,"0x40, 0x44"
    0x2c: v2c(0xa5b) = CONST ,0x21,v2c,0,CONST,0,0,False,0xa5b,0,"0x40, 0x44"
"    0x30: CODECOPY v25, v2c(0xa5b), v2a",0x21,0,"0,v25,v2c,v2a",CODECOPY,0,0,False,0,0,"0x40, 0x44"
"    0x33: v33 = ADD v2a, v25",0x21,v33,"0,v2a,v25",ADD,0,0,False,0,0,"0x40, 0x44"
    0x34: v34(0x40) = CONST ,0x21,v34,0,CONST,0,0,False,0x40,0,"0x40, 0x44"
"    0x36: MSTORE v34(0x40), v33",0x21,0,"0,v34,v33",MSTORE,0,0,False,0,0,"0x40, 0x44"
    0x37: v37(0x20) = CONST ,0x21,v37,0,CONST,0,0,False,0x20,0,"0x40, 0x44"
"    0x3a: v3a = LT v2a, v37(0x20)",0x21,v3a,"0,v2a,v37",LT,0,0,False,0,0,"0x40, 0x44"
    0x3b: v3b = ISZERO v3a,0x21,v3b,"0,v3a",ISZERO,0,0,False,0,0,"0x40, 0x44"
    0x3c: v3c(0x44) = CONST ,0x21,v3c,0,CONST,0,0,False,0x44,0,"0x40, 0x44"
"    0x3f: JUMPI v3c(0x44), v3b",0x21,0,"0,v3c,v3b",JUMPI,0,0,False,0,0,"0x40, 0x44"
    Begin block 0x40,0x40,0,0,0,0,0,False,0,0,"0x40, 0x44"
"    prev=[0x21], succ=[]",0x40,0,0,0,0,0,False,0,0,"0x40, 0x44"
    =================================,0x40,0,0,0,0,0,False,0,0,"0x40, 0x44"
    0x40: v40(0x0) = CONST ,0x40,v40,0,CONST,0,0,False,0x0,0,"0x40, 0x44"
"    0x43: REVERT v40(0x0), v40(0x0)",0x40,0,"0,v40,v40",REVERT,0,0,False,0,0,"0x40, 0x44"
    Begin block 0x44,0x44,0,0,0,0,0,False,0,0,"0x40, 0x44"
"    prev=[0x21], succ=[]",0x44,0,0,0,0,0,False,0,0,"0x40, 0x44"
    =================================,0x44,0,0,0,0,0,False,0,0,"0x40, 0x44"
    0x46: v46 = MLOAD v25,0x44,v46,"0,v25",MLOAD,0,0,False,0,0,"0x40, 0x44"
    0x47: v47(0x0) = CONST ,0x44,v47,0,CONST,0,0,False,0x0,0,"0x40, 0x44"
    0x4a: v4a = SLOAD v47(0x0),0x44,v4a,"0,v47",SLOAD,0,0,False,0,0,"0x40, 0x44"
    0x4b: v4b(0x100) = CONST ,0x44,v4b,0,CONST,0,0,False,0x100,0,"0x40, 0x44"
    0x4e: v4e(0x1) = CONST ,0x44,v4e,0,CONST,0,0,False,0x1,0,"0x40, 0x44"
    0x50: v50(0xa8) = CONST ,0x44,v50,0,CONST,0,0,False,0xa8,0,"0x40, 0x44"
"    0x52: v52(0x1000000000000000000000000000000000000000000) = SHL v50(0xa8), v4e(0x1)",0x44,v52,"0,v50,v4e",SHL,0,0,False,0x1000000000000000000000000000000000000000000,0,"0x40, 0x44"
"    0x53: v53(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v52(0x1000000000000000000000000000000000000000000), v4b(0x100)",0x44,v53,"0,v52,v4b",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff00,0,"0x40, 0x44"
    0x54: v54(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v53(0xffffffffffffffffffffffffffffffffffffffff00),0x44,v54,"0,v53",NOT,0,0,False,0xffffffffffffffffffffff0000000000000000000000000000000000000000ff,0,"0x40, 0x44"
"    0x55: v55 = AND v54(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff), v4a",0x44,v55,"0,v54,v4a",AND,0,0,False,0,0,"0x40, 0x44"
    0x56: v56(0x100) = CONST ,0x44,v56,0,CONST,0,0,False,0x100,0,"0x40, 0x44"
    0x59: v59(0x1) = CONST ,0x44,v59,0,CONST,0,0,False,0x1,0,"0x40, 0x44"
    0x5b: v5b(0x1) = CONST ,0x44,v5b,0,CONST,0,0,False,0x1,0,"0x40, 0x44"
    0x5d: v5d(0xa0) = CONST ,0x44,v5d,0,CONST,0,0,False,0xa0,0,"0x40, 0x44"
"    0x5f: v5f(0x10000000000000000000000000000000000000000) = SHL v5d(0xa0), v5b(0x1)",0x44,v5f,"0,v5d,v5b",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x40, 0x44"
"    0x60: v60(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5f(0x10000000000000000000000000000000000000000), v59(0x1)",0x44,v60,"0,v5f,v59",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x40, 0x44"
"    0x62: v62 = AND v46, v60(0xffffffffffffffffffffffffffffffffffffffff)",0x44,v62,"0,v46,v60",AND,0,0,False,0,0,"0x40, 0x44"
"    0x63: v63 = MUL v62, v56(0x100)",0x44,v63,"0,v62,v56",MUL,0,0,False,0,0,"0x40, 0x44"
"    0x64: v64 = OR v63, v55",0x44,v64,"0,v63,v55",OR,0,0,False,0,0,"0x40, 0x44"
"    0x66: SSTORE v47(0x0), v64",0x44,0,"0,v47,v64",SSTORE,0,0,False,0,0,"0x40, 0x44"
    0x68: v68(0x0) = CONST ,0x44,v68,0,CONST,0,0,False,0x0,0,"0x40, 0x44"
    0x6b: v6b = SLOAD v68(0x0),0x44,v6b,"0,v68",SLOAD,0,0,False,0,0,"0x40, 0x44"
    0x6c: v6c(0xff) = CONST ,0x44,v6c,0,CONST,0,0,False,0xff,0,"0x40, 0x44"
    0x6e: v6e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v6c(0xff),0x44,v6e,"0,v6c",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00,0,"0x40, 0x44"
"    0x6f: v6f = AND v6e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), v6b",0x44,v6f,"0,v6e,v6b",AND,0,0,False,0,0,"0x40, 0x44"
    0x70: v70(0x1) = CONST ,0x44,v70,0,CONST,0,0,False,0x1,0,"0x40, 0x44"
"    0x72: v72 = OR v70(0x1), v6f",0x44,v72,"0,v70,v6f",OR,0,0,False,0,0,"0x40, 0x44"
"    0x74: SSTORE v68(0x0), v72",0x44,0,"0,v68,v72",SSTORE,0,0,False,0,0,"0x40, 0x44"
    0x75: v75(0x9d8) = CONST ,0x44,v75,0,CONST,0,0,False,0x9d8,0,"0x40, 0x44"
    0x79: v79(0x83) = CONST ,0x44,v79,0,CONST,0,0,False,0x83,0,"0x40, 0x44"
    0x7c: v7c(0x0) = CONST ,0x44,v7c,0,CONST,0,0,False,0x0,0,"0x40, 0x44"
"    0x7e: CODECOPY v7c(0x0), v79(0x83), v75(0x9d8)",0x44,0,"0,v7c,v79,v75",CODECOPY,0,0,False,0,0,"0x40, 0x44"
    0x7f: v7f(0x0) = CONST ,0x44,v7f,0,CONST,0,0,False,0x0,0,"0x40, 0x44"
"    0x81: RETURN v7f(0x0), v75(0x9d8)",0x44,0,"0,v7f,v75",RETURN,0,0,False,0,0,"0x40, 0x44"
},0x44,0,0,0,0,0,False,0,0,"0x40, 0x44"
