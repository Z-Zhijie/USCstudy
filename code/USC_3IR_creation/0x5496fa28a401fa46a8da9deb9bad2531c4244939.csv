3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x1e, 0x22]",0x0,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x1e, 0x22"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x1e, 0x22"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x5: v5(0x0) = CONST ,0x0,v5,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
    0x8: v8 = SLOAD v5(0x0),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x1e, 0x22"
    0x9: v9(0x100) = CONST ,0x0,v9,0,CONST,0,0,False,0x100,0,"0x1e, 0x22"
    0xc: vc(0x1) = CONST ,0x0,vc,0,CONST,0,0,False,0x1,0,"0x1e, 0x22"
    0xe: ve(0xa8) = CONST ,0x0,ve,0,CONST,0,0,False,0xa8,0,"0x1e, 0x22"
"    0x10: v10(0x1000000000000000000000000000000000000000000) = SHL ve(0xa8), vc(0x1)",0x0,v10,"0,ve,vc",SHL,0,0,False,0x1000000000000000000000000000000000000000000,0,"0x1e, 0x22"
"    0x11: v11(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v10(0x1000000000000000000000000000000000000000000), v9(0x100)",0x0,v11,"0,v10,v9",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff00,0,"0x1e, 0x22"
    0x12: v12(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v11(0xffffffffffffffffffffffffffffffffffffffff00),0x0,v12,"0,v11",NOT,0,0,False,0xffffffffffffffffffffff0000000000000000000000000000000000000000ff,0,"0x1e, 0x22"
"    0x13: v13 = AND v12(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff), v8",0x0,v13,"0,v12,v8",AND,0,0,False,0,0,"0x1e, 0x22"
"    0x15: SSTORE v5(0x0), v13",0x0,0,"0,v5,v13",SSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x16: v16 = CALLVALUE ,0x0,v16,0,CALLVALUE,0,0,False,0,0,"0x1e, 0x22"
    0x18: v18 = ISZERO v16,0x0,v18,"0,v16",ISZERO,0,0,False,0,0,"0x1e, 0x22"
    0x19: v19(0x22) = CONST ,0x0,v19,0,CONST,0,0,False,0x22,0,"0x1e, 0x22"
"    0x1d: JUMPI v19(0x22), v18",0x0,0,"0,v19,v18",JUMPI,0,0,False,0,0,"0x1e, 0x22"
    Begin block 0x1e,0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
"    prev=[0x0], succ=[]",0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x1e: v1e(0x0) = CONST ,0x1e,v1e,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
"    0x21: REVERT v1e(0x0), v1e(0x0)",0x1e,0,"0,v1e,v1e",REVERT,0,0,False,0,0,"0x1e, 0x22"
    Begin block 0x22,0x22,0,0,0,0,0,False,0,0,"0x1e, 0x22"
"    prev=[0x0], succ=[0x44, 0x48]",0x22,0,0,0,0,0,False,0,0,"0x44, 0x48"
    =================================,0x22,0,0,0,0,0,False,0,0,"0x44, 0x48"
    0x24: v24(0x40) = CONST ,0x22,v24,0,CONST,0,0,False,0x40,0,"0x44, 0x48"
    0x26: v26 = MLOAD v24(0x40),0x22,v26,"0,v24",MLOAD,0,0,False,0,0&m0x40,"0x44, 0x48"
    0x27: v27(0x5991) = CONST ,0x22,v27,0,CONST,0,0,False,0x5991,0,"0x44, 0x48"
    0x2b: v2b = CODESIZE ,0x22,v2b,0,CODESIZE,0,0,False,0,0,"0x44, 0x48"
"    0x2c: v2c = SUB v2b, v27(0x5991)",0x22,v2c,"0,v2b,v27",SUB,0,0,False,0,0,"0x44, 0x48"
    0x2e: v2e(0x5991) = CONST ,0x22,v2e,0,CONST,0,0,False,0x5991,0,"0x44, 0x48"
"    0x33: CODECOPY v26, v2e(0x5991), v2c",0x22,0,"0,v26,v2e,v2c",CODECOPY,0,0,False,0,0,"0x44, 0x48"
"    0x36: v36 = ADD v2c, v26",0x22,v36,"0,v2c,v26",ADD,0,0,False,0,0,"0x44, 0x48"
    0x37: v37(0x40) = CONST ,0x22,v37,0,CONST,0,0,False,0x40,0,"0x44, 0x48"
"    0x39: MSTORE v37(0x40), v36",0x22,0,"0,v37,v36",MSTORE,0,0,False,0,0,"0x44, 0x48"
    0x3a: v3a(0x20) = CONST ,0x22,v3a,0,CONST,0,0,False,0x20,0,"0x44, 0x48"
"    0x3d: v3d = LT v2c, v3a(0x20)",0x22,v3d,"0,v2c,v3a",LT,0,0,False,0,0,"0x44, 0x48"
    0x3e: v3e = ISZERO v3d,0x22,v3e,"0,v3d",ISZERO,0,0,False,0,0,"0x44, 0x48"
    0x3f: v3f(0x48) = CONST ,0x22,v3f,0,CONST,0,0,False,0x48,0,"0x44, 0x48"
"    0x43: JUMPI v3f(0x48), v3e",0x22,0,"0,v3f,v3e",JUMPI,0,0,False,0,0,"0x44, 0x48"
    Begin block 0x44,0x44,0,0,0,0,0,False,0,0,"0x44, 0x48"
"    prev=[0x22], succ=[]",0x44,0,0,0,0,0,False,0,0,"0x44, 0x48"
    =================================,0x44,0,0,0,0,0,False,0,0,"0x44, 0x48"
    0x44: v44(0x0) = CONST ,0x44,v44,0,CONST,0,0,False,0x0,0,"0x44, 0x48"
"    0x47: REVERT v44(0x0), v44(0x0)",0x44,0,"0,v44,v44",REVERT,0,0,False,0,0,"0x44, 0x48"
    Begin block 0x48,0x48,0,0,0,0,0,False,0,0,"0x44, 0x48"
"    prev=[0x22], succ=[]",0x48,0,0,0,0,0,False,0,0,"0x44, 0x48"
    =================================,0x48,0,0,0,0,0,False,0,0,"0x44, 0x48"
    0x4a: v4a = MLOAD v26,0x48,v4a,"0,v26",MLOAD,0,0,False,0,0,"0x44, 0x48"
    0x4b: v4b(0x0) = CONST ,0x48,v4b,0,CONST,0,0,False,0x0,0,"0x44, 0x48"
    0x4e: v4e = SLOAD v4b(0x0),0x48,v4e,"0,v4b",SLOAD,0,0,False,0,0,"0x44, 0x48"
    0x4f: v4f(0xff) = CONST ,0x48,v4f,0,CONST,0,0,False,0xff,0,"0x44, 0x48"
    0x51: v51(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v4f(0xff),0x48,v51,"0,v4f",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00,0,"0x44, 0x48"
    0x52: v52(0x1) = CONST ,0x48,v52,0,CONST,0,0,False,0x1,0,"0x44, 0x48"
    0x54: v54(0x1) = CONST ,0x48,v54,0,CONST,0,0,False,0x1,0,"0x44, 0x48"
    0x56: v56(0xa0) = CONST ,0x48,v56,0,CONST,0,0,False,0xa0,0,"0x44, 0x48"
"    0x58: v58(0x10000000000000000000000000000000000000000) = SHL v56(0xa0), v54(0x1)",0x48,v58,"0,v56,v54",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x44, 0x48"
"    0x59: v59(0xffffffffffffffffffffffffffffffffffffffff) = SUB v58(0x10000000000000000000000000000000000000000), v52(0x1)",0x48,v59,"0,v58,v52",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x44, 0x48"
"    0x5c: v5c = AND v4a, v59(0xffffffffffffffffffffffffffffffffffffffff)",0x48,v5c,"0,v4a,v59",AND,0,0,False,0,0,"0x44, 0x48"
    0x5d: v5d(0x100) = CONST ,0x48,v5d,0,CONST,0,0,False,0x100,0,"0x44, 0x48"
"    0x60: v60 = MUL v5d(0x100), v5c",0x48,v60,"0,v5d,v5c",MUL,0,0,False,0,0,"0x44, 0x48"
    0x61: v61(0x100) = CONST ,0x48,v61,0,CONST,0,0,False,0x100,0,"0x44, 0x48"
    0x64: v64(0x1) = CONST ,0x48,v64,0,CONST,0,0,False,0x1,0,"0x44, 0x48"
    0x66: v66(0xa8) = CONST ,0x48,v66,0,CONST,0,0,False,0xa8,0,"0x44, 0x48"
"    0x68: v68(0x1000000000000000000000000000000000000000000) = SHL v66(0xa8), v64(0x1)",0x48,v68,"0,v66,v64",SHL,0,0,False,0x1000000000000000000000000000000000000000000,0,"0x44, 0x48"
"    0x69: v69(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v68(0x1000000000000000000000000000000000000000000), v61(0x100)",0x48,v69,"0,v68,v61",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff00,0,"0x44, 0x48"
    0x6a: v6a(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v69(0xffffffffffffffffffffffffffffffffffffffff00),0x48,v6a,"0,v69",NOT,0,0,False,0xffffffffffffffffffffff0000000000000000000000000000000000000000ff,0,"0x44, 0x48"
"    0x6d: v6d = AND v4e, v6a(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff)",0x48,v6d,"0,v4e,v6a",AND,0,0,False,0,0,"0x44, 0x48"
"    0x6e: v6e = OR v6d, v60",0x48,v6e,"0,v6d,v60",OR,0,0,False,0,0,"0x44, 0x48"
"    0x72: v72 = AND v6e, v51(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)",0x48,v72,"0,v6e,v51",AND,0,0,False,0,0,"0x44, 0x48"
    0x73: v73(0x1) = CONST ,0x48,v73,0,CONST,0,0,False,0x1,0,"0x44, 0x48"
"    0x75: v75 = OR v73(0x1), v72",0x48,v75,"0,v73,v72",OR,0,0,False,0,0,"0x44, 0x48"
"    0x77: SSTORE v4b(0x0), v75",0x48,0,"0,v4b,v75",SSTORE,0,0,False,0,0,"0x44, 0x48"
    0x78: v78(0x590a) = CONST ,0x48,v78,0,CONST,0,0,False,0x590a,0,"0x44, 0x48"
    0x7c: v7c(0x87) = CONST ,0x48,v7c,0,CONST,0,0,False,0x87,0,"0x44, 0x48"
    0x80: v80(0x0) = CONST ,0x48,v80,0,CONST,0,0,False,0x0,0,"0x44, 0x48"
"    0x82: CODECOPY v80(0x0), v7c(0x87), v78(0x590a)",0x48,0,"0,v80,v7c,v78",CODECOPY,0,0,False,0,0,"0x44, 0x48"
    0x83: v83(0x0) = CONST ,0x48,v83,0,CONST,0,0,False,0x0,0,"0x44, 0x48"
"    0x85: RETURN v83(0x0), v78(0x590a)",0x48,0,"0,v83,v78",RETURN,0,0,False,0,0,"0x44, 0x48"
},0x48,0,0,0,0,0,False,0,0,"0x44, 0x48"
