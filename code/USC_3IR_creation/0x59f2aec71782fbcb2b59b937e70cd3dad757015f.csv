3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x16, 0x1a]",0x0,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x16, 0x1a"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x16, 0x1a"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x16, 0x1a"
    0x5: v5(0xd) = CONST ,0x0,v5,0,CONST,0,0,False,0xd,0,"0x16, 0x1a"
    0x8: v8 = SLOAD v5(0xd),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x16, 0x1a"
    0x9: v9(0xff) = CONST ,0x0,v9,0,CONST,0,0,False,0xff,0,"0x16, 0x1a"
    0xb: vb(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v9(0xff),0x0,vb,"0,v9",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00,0,"0x16, 0x1a"
"    0xc: vc = AND vb(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), v8",0x0,vc,"0,vb,v8",AND,0,0,False,0,0,"0x16, 0x1a"
"    0xe: SSTORE v5(0xd), vc",0x0,0,"0,v5,vc",SSTORE,0,0,False,0,0,"0x16, 0x1a"
    0xf: vf = CALLVALUE ,0x0,vf,0,CALLVALUE,0,0,False,0,0,"0x16, 0x1a"
    0x11: v11 = ISZERO vf,0x0,v11,"0,vf",ISZERO,0,0,False,0,0,"0x16, 0x1a"
    0x12: v12(0x1a) = CONST ,0x0,v12,0,CONST,0,0,False,0x1a,0,"0x16, 0x1a"
"    0x15: JUMPI v12(0x1a), v11",0x0,0,"0,v12,v11",JUMPI,0,0,False,0,0,"0x16, 0x1a"
    Begin block 0x16,0x16,0,0,0,0,0,False,0,0,"0x16, 0x1a"
"    prev=[0x0], succ=[]",0x16,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    =================================,0x16,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    0x16: v16(0x0) = CONST ,0x16,v16,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
"    0x19: REVERT v16(0x0), v16(0x0)",0x16,0,"0,v16,v16",REVERT,0,0,False,0,0,"0x16, 0x1a"
    Begin block 0x1a,0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
"    prev=[0x0], succ=[]",0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    =================================,0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    0x1c: v1c(0x0) = CONST ,0x1a,v1c,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
    0x1f: v1f = SLOAD v1c(0x0),0x1a,v1f,"0,v1c",SLOAD,0,0,False,0,0,"0x16, 0x1a"
    0x20: v20(0x1) = CONST ,0x1a,v20,0,CONST,0,0,False,0x1,0,"0x16, 0x1a"
    0x22: v22(0xa0) = CONST ,0x1a,v22,0,CONST,0,0,False,0xa0,0,"0x16, 0x1a"
    0x24: v24(0x2) = CONST ,0x1a,v24,0,CONST,0,0,False,0x2,0,"0x16, 0x1a"
"    0x26: v26(0x10000000000000000000000000000000000000000) = EXP v24(0x2), v22(0xa0)",0x1a,v26,"0,v24,v22",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0x16, 0x1a"
"    0x27: v27(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26(0x10000000000000000000000000000000000000000), v20(0x1)",0x1a,v27,"0,v26,v20",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x16, 0x1a"
    0x28: v28(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v27(0xffffffffffffffffffffffffffffffffffffffff),0x1a,v28,"0,v27",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0x16, 0x1a"
"    0x29: v29 = AND v28(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v1f",0x1a,v29,"0,v28,v1f",AND,0,0,False,0,0,"0x16, 0x1a"
    0x2a: v2a = CALLER ,0x1a,v2a,0,CALLER,0,0,True,0,0,"0x16, 0x1a"
"    0x2b: v2b = OR v2a, v29",0x1a,v2b,"0,v2a,v29",OR,0,0,True,0,0,"0x16, 0x1a"
"    0x2d: SSTORE v1c(0x0), v2b",0x1a,0,"0,v1c,v2b",SSTORE,0,0,False,0,0,"0x16, 0x1a"
    0x2e: v2e(0x1d81) = CONST ,0x1a,v2e,0,CONST,0,0,False,0x1d81,0,"0x16, 0x1a"
    0x32: v32(0x3c) = CONST ,0x1a,v32,0,CONST,0,0,False,0x3c,0,"0x16, 0x1a"
    0x35: v35(0x0) = CONST ,0x1a,v35,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
"    0x37: CODECOPY v35(0x0), v32(0x3c), v2e(0x1d81)",0x1a,0,"0,v35,v32,v2e",CODECOPY,0,0,False,0,0,"0x16, 0x1a"
    0x38: v38(0x0) = CONST ,0x1a,v38,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
"    0x3a: RETURN v38(0x0), v2e(0x1d81)",0x1a,0,"0,v38,v2e",RETURN,0,0,False,0,0,"0x16, 0x1a"
},0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
