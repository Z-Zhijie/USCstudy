3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x2f, 0x33]",0x10,0,0,0,0,0,False,0,0,"0x2f, 0x33"
    =================================,0x10,0,0,0,0,0,False,0,0,"0x2f, 0x33"
    0x12: v12(0x40) = CONST ,0x10,v12,0,CONST,0,0,False,0x40,0,"0x2f, 0x33"
    0x14: v14 = MLOAD v12(0x40),0x10,v14,"0,v12",MLOAD,0,0,False,0,0&m0x40,"0x2f, 0x33"
    0x15: v15(0x701) = CONST ,0x10,v15,0,CONST,0,0,False,0x701,0,"0x2f, 0x33"
    0x18: v18 = CODESIZE ,0x10,v18,0,CODESIZE,0,0,False,0,0,"0x2f, 0x33"
"    0x19: v19 = SUB v18, v15(0x701)",0x10,v19,"0,v18,v15",SUB,0,0,False,0,0,"0x2f, 0x33"
    0x1b: v1b(0x701) = CONST ,0x10,v1b,0,CONST,0,0,False,0x701,0,"0x2f, 0x33"
"    0x1f: CODECOPY v14, v1b(0x701), v19",0x10,0,"0,v14,v1b,v19",CODECOPY,0,0,False,0,0,"0x2f, 0x33"
"    0x22: v22 = ADD v19, v14",0x10,v22,"0,v19,v14",ADD,0,0,False,0,0,"0x2f, 0x33"
    0x23: v23(0x40) = CONST ,0x10,v23,0,CONST,0,0,False,0x40,0,"0x2f, 0x33"
"    0x25: MSTORE v23(0x40), v22",0x10,0,"0,v23,v22",MSTORE,0,0,False,0,0,"0x2f, 0x33"
    0x26: v26(0x40) = CONST ,0x10,v26,0,CONST,0,0,False,0x40,0,"0x2f, 0x33"
"    0x29: v29 = LT v19, v26(0x40)",0x10,v29,"0,v19,v26",LT,0,0,False,0,0,"0x2f, 0x33"
    0x2a: v2a = ISZERO v29,0x10,v2a,"0,v29",ISZERO,0,0,False,0,0,"0x2f, 0x33"
    0x2b: v2b(0x33) = CONST ,0x10,v2b,0,CONST,0,0,False,0x33,0,"0x2f, 0x33"
"    0x2e: JUMPI v2b(0x33), v2a",0x10,0,"0,v2b,v2a",JUMPI,0,0,False,0,0,"0x2f, 0x33"
    Begin block 0x2f,0x2f,0,0,0,0,0,False,0,0,"0x2f, 0x33"
"    prev=[0x10], succ=[]",0x2f,0,0,0,0,0,False,0,0,"0x2f, 0x33"
    =================================,0x2f,0,0,0,0,0,False,0,0,"0x2f, 0x33"
    0x2f: v2f(0x0) = CONST ,0x2f,v2f,0,CONST,0,0,False,0x0,0,"0x2f, 0x33"
"    0x32: REVERT v2f(0x0), v2f(0x0)",0x2f,0,"0,v2f,v2f",REVERT,0,0,False,0,0,"0x2f, 0x33"
    Begin block 0x33,0x33,0,0,0,0,0,False,0,0,"0x2f, 0x33"
"    prev=[0x10], succ=[]",0x33,0,0,0,0,0,False,0,0,"0x2f, 0x33"
    =================================,0x33,0,0,0,0,0,False,0,0,"0x2f, 0x33"
    0x36: v36 = MLOAD v14,0x33,v36,"0,v14",MLOAD,0,0,False,0,0,"0x2f, 0x33"
    0x37: v37(0x20) = CONST ,0x33,v37,0,CONST,0,0,False,0x20,0,"0x2f, 0x33"
"    0x3b: v3b = ADD v14, v37(0x20)",0x33,v3b,"0,v14,v37",ADD,0,0,False,0,0&m0x40+0x20,"0x2f, 0x33"
    0x3c: v3c = MLOAD v3b,0x33,v3c,"0,v3b",MLOAD,0,0,False,0,0,"0x2f, 0x33"
    0x3d: v3d(0x0) = CONST ,0x33,v3d,0,CONST,0,0,False,0x0,0,"0x2f, 0x33"
    0x40: v40 = SLOAD v3d(0x0),0x33,v40,"0,v3d",SLOAD,0,0,False,0,0,"0x2f, 0x33"
    0x41: v41(0x1) = CONST ,0x33,v41,0,CONST,0,0,False,0x1,0,"0x2f, 0x33"
    0x43: v43(0x1) = CONST ,0x33,v43,0,CONST,0,0,False,0x1,0,"0x2f, 0x33"
    0x45: v45(0xa0) = CONST ,0x33,v45,0,CONST,0,0,False,0xa0,0,"0x2f, 0x33"
"    0x47: v47(0x10000000000000000000000000000000000000000) = SHL v45(0xa0), v43(0x1)",0x33,v47,"0,v45,v43",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x2f, 0x33"
"    0x48: v48(0xffffffffffffffffffffffffffffffffffffffff) = SUB v47(0x10000000000000000000000000000000000000000), v41(0x1)",0x33,v48,"0,v47,v41",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x2f, 0x33"
"    0x4b: v4b = AND v48(0xffffffffffffffffffffffffffffffffffffffff), v36",0x33,v4b,"0,v48,v36",AND,0,0,False,0,0,"0x2f, 0x33"
    0x4c: v4c(0x1) = CONST ,0x33,v4c,0,CONST,0,0,False,0x1,0,"0x2f, 0x33"
    0x4e: v4e(0x1) = CONST ,0x33,v4e,0,CONST,0,0,False,0x1,0,"0x2f, 0x33"
    0x50: v50(0xa0) = CONST ,0x33,v50,0,CONST,0,0,False,0xa0,0,"0x2f, 0x33"
"    0x52: v52(0x10000000000000000000000000000000000000000) = SHL v50(0xa0), v4e(0x1)",0x33,v52,"0,v50,v4e",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x2f, 0x33"
"    0x53: v53(0xffffffffffffffffffffffffffffffffffffffff) = SUB v52(0x10000000000000000000000000000000000000000), v4c(0x1)",0x33,v53,"0,v52,v4c",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x2f, 0x33"
    0x54: v54(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v53(0xffffffffffffffffffffffffffffffffffffffff),0x33,v54,"0,v53",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0x2f, 0x33"
"    0x57: v57 = AND v54(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v40",0x33,v57,"0,v54,v40",AND,0,0,False,0,0,"0x2f, 0x33"
"    0x58: v58 = OR v57, v4b",0x33,v58,"0,v57,v4b",OR,0,0,False,0,0,"0x2f, 0x33"
"    0x5b: SSTORE v3d(0x0), v58",0x33,0,"0,v3d,v58",SSTORE,0,0,False,0,0,"0x2f, 0x33"
    0x5c: v5c(0x1) = CONST ,0x33,v5c,0,CONST,0,0,False,0x1,0,"0x2f, 0x33"
    0x5f: v5f = SLOAD v5c(0x1),0x33,v5f,"0,v5c",SLOAD,0,0,False,0,0,"0x2f, 0x33"
"    0x63: v63 = AND v3c, v48(0xffffffffffffffffffffffffffffffffffffffff)",0x33,v63,"0,v3c,v48",AND,0,0,False,0,0,"0x2f, 0x33"
"    0x66: v66 = AND v54(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v5f",0x33,v66,"0,v54,v5f",AND,0,0,False,0,0,"0x2f, 0x33"
"    0x6a: v6a = OR v66, v63",0x33,v6a,"0,v66,v63",OR,0,0,False,0,0,"0x2f, 0x33"
"    0x6c: SSTORE v5c(0x1), v6a",0x33,0,"0,v5c,v6a",SSTORE,0,0,False,0,0,"0x2f, 0x33"
    0x6d: v6d(0x2) = CONST ,0x33,v6d,0,CONST,0,0,False,0x2,0,"0x2f, 0x33"
    0x70: v70 = SLOAD v6d(0x2),0x33,v70,"0,v6d",SLOAD,0,0,False,0,0,"0x2f, 0x33"
"    0x73: v73 = AND v54(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v70",0x33,v73,"0,v54,v70",AND,0,0,False,0,0,"0x2f, 0x33"
    0x74: v74 = CALLER ,0x33,v74,0,CALLER,0,0,True,0,0,"0x2f, 0x33"
"    0x75: v75 = OR v74, v73",0x33,v75,"0,v74,v73",OR,0,0,True,0,0,"0x2f, 0x33"
"    0x77: SSTORE v6d(0x2), v75",0x33,0,"0,v6d,v75",SSTORE,0,0,False,0,0,"0x2f, 0x33"
    0x78: v78(0x67b) = CONST ,0x33,v78,0,CONST,0,0,False,0x67b,0,"0x2f, 0x33"
    0x7c: v7c(0x86) = CONST ,0x33,v7c,0,CONST,0,0,False,0x86,0,"0x2f, 0x33"
    0x7f: v7f(0x0) = CONST ,0x33,v7f,0,CONST,0,0,False,0x0,0,"0x2f, 0x33"
"    0x81: CODECOPY v7f(0x0), v7c(0x86), v78(0x67b)",0x33,0,"0,v7f,v7c,v78",CODECOPY,0,0,False,0,0,"0x2f, 0x33"
    0x82: v82(0x0) = CONST ,0x33,v82,0,CONST,0,0,False,0x0,0,"0x2f, 0x33"
"    0x84: RETURN v82(0x0), v78(0x67b)",0x33,0,"0,v82,v78",RETURN,0,0,False,0,0,"0x2f, 0x33"
},0x33,0,0,0,0,0,False,0,0,"0x2f, 0x33"
