3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xf, 0xb]",0x0,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0x0: v0(0x60) = CONST ,0x0,v0,0,CONST,0,0,False,0x60,0,"0xf, 0xb"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
"    0x4: MSTORE v2(0x40), v0(0x60)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xf, 0xb"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xf, 0xb"
    0x6: v6 = ISZERO v5,0x0,v6,"0,v5",ISZERO,0,0,False,0,0,"0xf, 0xb"
    0x7: v7(0xf) = CONST ,0x0,v7,0,CONST,0,0,False,0xf,0,"0xf, 0xb"
"    0xa: JUMPI v7(0xf), v6",0x0,0,"0,v7,v6",JUMPI,0,0,False,0,0,"0xf, 0xb"
    Begin block 0xf,0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
"    prev=[0x0], succ=[]",0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0xf,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0x10: v10(0x40) = CONST ,0xf,v10,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
    0x12: v12 = MLOAD v10(0x40),0xf,v12,"0,v10",MLOAD,0,0,False,0,0&m0x40,"0xf, 0xb"
    0x13: v13(0x20) = CONST ,0xf,v13,0,CONST,0,0,False,0x20,0,"0xf, 0xb"
    0x16: v16(0x4ae) = CONST ,0xf,v16,0,CONST,0,0,False,0x4ae,0,"0xf, 0xb"
"    0x1c: v1c = ADD v4d0(0x000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3), v12",0xf,v1c,"0,v4d0,v12",ADD,0,0,False,0,0&m0x40+0x000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3,"0xf, 0xb"
    0x1d: v1d(0x40) = CONST ,0xf,v1d,0,CONST,0,0,False,0x40,0,"0xf, 0xb"
"    0x1f: MSTORE v1d(0x40), v1c",0xf,0,"0,v1d,v1c",MSTORE,0,0,False,0,0,"0xf, 0xb"
    0x22: v22 = MLOAD v4d0(0x000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3),0xf,v22,"0,v4d0",MLOAD,0,0,False,0,0&m0x000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3,"0xf, 0xb"
    0x23: v23(0x0) = CONST ,0xf,v23,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
    0x26: v26 = SLOAD v23(0x0),0xf,v26,"0,v23",SLOAD,0,0,False,0,0,"0xf, 0xb"
    0x27: v27(0x1) = CONST ,0xf,v27,0,CONST,0,0,False,0x1,0,"0xf, 0xb"
    0x29: v29(0xa0) = CONST ,0xf,v29,0,CONST,0,0,False,0xa0,0,"0xf, 0xb"
    0x2b: v2b(0x2) = CONST ,0xf,v2b,0,CONST,0,0,False,0x2,0,"0xf, 0xb"
"    0x2d: v2d(0x10000000000000000000000000000000000000000) = EXP v2b(0x2), v29(0xa0)",0xf,v2d,"0,v2b,v29",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0xf, 0xb"
"    0x2e: v2e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2d(0x10000000000000000000000000000000000000000), v27(0x1)",0xf,v2e,"0,v2d,v27",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xf, 0xb"
"    0x31: v31 = AND v22, v2e(0xffffffffffffffffffffffffffffffffffffffff)",0xf,v31,"0,v22,v2e",AND,0,0,False,0,0,"0xf, 0xb"
    0x32: v32(0x1) = CONST ,0xf,v32,0,CONST,0,0,False,0x1,0,"0xf, 0xb"
    0x34: v34(0xa0) = CONST ,0xf,v34,0,CONST,0,0,False,0xa0,0,"0xf, 0xb"
    0x36: v36(0x2) = CONST ,0xf,v36,0,CONST,0,0,False,0x2,0,"0xf, 0xb"
"    0x38: v38(0x10000000000000000000000000000000000000000) = EXP v36(0x2), v34(0xa0)",0xf,v38,"0,v36,v34",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0xf, 0xb"
"    0x39: v39(0xffffffffffffffffffffffffffffffffffffffff) = SUB v38(0x10000000000000000000000000000000000000000), v32(0x1)",0xf,v39,"0,v38,v32",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xf, 0xb"
    0x3a: v3a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v39(0xffffffffffffffffffffffffffffffffffffffff),0xf,v3a,"0,v39",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0xf, 0xb"
"    0x3d: v3d = AND v26, v3a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000)",0xf,v3d,"0,v26,v3a",AND,0,0,False,0,0,"0xf, 0xb"
"    0x41: v41 = OR v3d, v31",0xf,v41,"0,v3d,v31",OR,0,0,False,0,0,"0xf, 0xb"
"    0x43: SSTORE v23(0x0), v41",0xf,0,"0,v23,v41",SSTORE,0,0,False,0,0,"0xf, 0xb"
    0x46: v46(0x45a) = CONST ,0xf,v46,0,CONST,0,0,False,0x45a,0,"0xf, 0xb"
    0x4a: v4a(0x54) = CONST ,0xf,v4a,0,CONST,0,0,False,0x54,0,"0xf, 0xb"
    0x4d: v4d(0x0) = CONST ,0xf,v4d,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0x4f: CODECOPY v4d(0x0), v4a(0x54), v46(0x45a)",0xf,0,"0,v4d,v4a,v46",CODECOPY,0,0,False,0,0,"0xf, 0xb"
    0x50: v50(0x0) = CONST ,0xf,v50,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0x52: RETURN v50(0x0), v46(0x45a)",0xf,0,"0,v50,v46",RETURN,0,0,False,0,0,"0xf, 0xb"
    0x4d0: v4d0(0x000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3) = CONST ,0xf,v4d0,0,CONST,0,0,False,0x000000000000000000000000f96d54e490317c557a967abfa5d6e33006be69b3,0,"0xf, 0xb"
    Begin block 0xb,0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
"    prev=[0x0], succ=[]",0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
    =================================,0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
    0xb: vb(0x0) = CONST ,0xb,vb,0,CONST,0,0,False,0x0,0,"0xf, 0xb"
"    0xe: REVERT vb(0x0), vb(0x0)",0xb,0,"0,vb,vb",REVERT,0,0,False,0,0,"0xf, 0xb"
},0xb,0,0,0,0,0,False,0,0,"0xf, 0xb"
