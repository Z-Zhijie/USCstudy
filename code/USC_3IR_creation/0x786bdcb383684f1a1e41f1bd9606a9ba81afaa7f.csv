3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x1f, 0x23]",0x0,0,0,0,0,0,False,0,0,"0x1f, 0x23"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x1f, 0x23"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x1f, 0x23"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x1f, 0x23"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x1f, 0x23"
    0x5: v5(0x1) = CONST ,0x0,v5,0,CONST,0,0,False,0x1,0,"0x1f, 0x23"
    0x8: v8 = SLOAD v5(0x1),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x1f, 0x23"
    0x9: v9(0xff) = CONST ,0x0,v9,0,CONST,0,0,False,0xff,0,"0x1f, 0x23"
    0xb: vb(0xa0) = CONST ,0x0,vb,0,CONST,0,0,False,0xa0,0,"0x1f, 0x23"
"    0xd: vd(0xff0000000000000000000000000000000000000000) = SHL vb(0xa0), v9(0xff)",0x0,vd,"0,vb,v9",SHL,0,0,False,0xff0000000000000000000000000000000000000000,0,"0x1f, 0x23"
    0xe: ve(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT vd(0xff0000000000000000000000000000000000000000),0x0,ve,"0,vd",NOT,0,0,False,0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff,0,"0x1f, 0x23"
"    0xf: vf = AND ve(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff), v8",0x0,vf,"0,ve,v8",AND,0,0,False,0,0,"0x1f, 0x23"
"    0x11: SSTORE v5(0x1), vf",0x0,0,"0,v5,vf",SSTORE,0,0,False,0,0,"0x1f, 0x23"
    0x12: v12(0x0) = CONST ,0x0,v12,0,CONST,0,0,False,0x0,0,"0x1f, 0x23"
    0x14: v14(0xb) = CONST ,0x0,v14,0,CONST,0,0,False,0xb,0,"0x1f, 0x23"
"    0x16: SSTORE v14(0xb), v12(0x0)",0x0,0,"0,v14,v12",SSTORE,0,0,False,0,0,"0x1f, 0x23"
    0x17: v17 = CALLVALUE ,0x0,v17,0,CALLVALUE,0,0,False,0,0,"0x1f, 0x23"
    0x19: v19 = ISZERO v17,0x0,v19,"0,v17",ISZERO,0,0,False,0,0,"0x1f, 0x23"
    0x1a: v1a(0x23) = CONST ,0x0,v1a,0,CONST,0,0,False,0x23,0,"0x1f, 0x23"
"    0x1e: JUMPI v1a(0x23), v19",0x0,0,"0,v1a,v19",JUMPI,0,0,False,0,0,"0x1f, 0x23"
    Begin block 0x1f,0x1f,0,0,0,0,0,False,0,0,"0x1f, 0x23"
"    prev=[0x0], succ=[]",0x1f,0,0,0,0,0,False,0,0,"0x1f, 0x23"
    =================================,0x1f,0,0,0,0,0,False,0,0,"0x1f, 0x23"
    0x1f: v1f(0x0) = CONST ,0x1f,v1f,0,CONST,0,0,False,0x0,0,"0x1f, 0x23"
"    0x22: REVERT v1f(0x0), v1f(0x0)",0x1f,0,"0,v1f,v1f",REVERT,0,0,False,0,0,"0x1f, 0x23"
    Begin block 0x23,0x23,0,0,0,0,0,False,0,0,"0x1f, 0x23"
"    prev=[0x0], succ=[0x35]",0x23,0,0,0,0,0,False,0,0,0x35
    =================================,0x23,0,0,0,0,0,False,0,0,0x35
    0x25: v25(0x2f) = CONST ,0x23,v25,0,CONST,0,0,False,0x2f,0,0x35
    0x29: v29 = CALLER ,0x23,v29,0,CALLER,0,0,True,0,0,0x35
    0x2a: v2a(0x35) = CONST ,0x23,v2a,0,CONST,0,0,False,0x35,0,0x35
    0x2e: JUMP v2a(0x35),0x23,0,"0,v2a",JUMP,0,0,False,0,0,0x35
    Begin block 0x35,0x35,0,0,0,0,0,False,0,0,0x35
"    prev=[0x23], succ=[0x2f]",0x35,0,0,0,0,0,False,0,0,0x2f
    =================================,0x35,0,0,0,0,0,False,0,0,0x2f
    0x36: v36(0x0) = CONST ,0x35,v36,0,CONST,0,0,False,0x0,0,0x2f
    0x39: v39 = SLOAD v36(0x0),0x35,v39,"0,v36",SLOAD,0,0,False,0,0,0x2f
    0x3a: v3a(0x1) = CONST ,0x35,v3a,0,CONST,0,0,False,0x1,0,0x2f
    0x3c: v3c(0x1) = CONST ,0x35,v3c,0,CONST,0,0,False,0x1,0,0x2f
    0x3e: v3e(0xa0) = CONST ,0x35,v3e,0,CONST,0,0,False,0xa0,0,0x2f
"    0x40: v40(0x10000000000000000000000000000000000000000) = SHL v3e(0xa0), v3c(0x1)",0x35,v40,"0,v3e,v3c",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x2f
"    0x41: v41(0xffffffffffffffffffffffffffffffffffffffff) = SUB v40(0x10000000000000000000000000000000000000000), v3a(0x1)",0x35,v41,"0,v40,v3a",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x2f
    0x42: v42(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v41(0xffffffffffffffffffffffffffffffffffffffff),0x35,v42,"0,v41",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x2f
"    0x43: v43 = AND v42(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v39",0x35,v43,"0,v42,v39",AND,0,0,False,0,0,0x2f
    0x44: v44(0x1) = CONST ,0x35,v44,0,CONST,0,0,False,0x1,0,0x2f
    0x46: v46(0x1) = CONST ,0x35,v46,0,CONST,0,0,False,0x1,0,0x2f
    0x48: v48(0xa0) = CONST ,0x35,v48,0,CONST,0,0,False,0xa0,0,0x2f
"    0x4a: v4a(0x10000000000000000000000000000000000000000) = SHL v48(0xa0), v46(0x1)",0x35,v4a,"0,v48,v46",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x2f
"    0x4b: v4b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4a(0x10000000000000000000000000000000000000000), v44(0x1)",0x35,v4b,"0,v4a,v44",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x2f
"    0x4f: v4f = AND v4b(0xffffffffffffffffffffffffffffffffffffffff), v29",0x35,v4f,"0,v4b,v29",AND,0,0,True,0,0,0x2f
"    0x53: v53 = OR v4f, v43",0x35,v53,"0,v4f,v43",OR,0,0,True,0,0,0x2f
"    0x55: SSTORE v36(0x0), v53",0x35,0,"0,v36,v53",SSTORE,0,0,False,0,0,0x2f
    0x56: JUMP v25(0x2f),0x35,0,"0,v25",JUMP,0,0,False,0,0,0x2f
    Begin block 0x2f,0x2f,0,0,0,0,0,False,0,0,0x2f
"    prev=[0x35], succ=[0x57]",0x2f,0,0,0,0,0,False,0,0,0x57
    =================================,0x2f,0,0,0,0,0,False,0,0,0x57
    0x30: v30(0x57) = CONST ,0x2f,v30,0,CONST,0,0,False,0x57,0,0x57
    0x34: JUMP v30(0x57),0x2f,0,"0,v30",JUMP,0,0,False,0,0,0x57
    Begin block 0x57,0x57,0,0,0,0,0,False,0,0,0x57
"    prev=[0x2f], succ=[]",0x57,0,0,0,0,0,False,0,0,0x57
    =================================,0x57,0,0,0,0,0,False,0,0,0x57
    0x58: v58(0x52e5) = CONST ,0x57,v58,0,CONST,0,0,False,0x52e5,0,0x57
    0x5c: v5c(0x67) = CONST ,0x57,v5c,0,CONST,0,0,False,0x67,0,0x57
    0x60: v60(0x0) = CONST ,0x57,v60,0,CONST,0,0,False,0x0,0,0x57
"    0x62: CODECOPY v60(0x0), v5c(0x67), v58(0x52e5)",0x57,0,"0,v60,v5c,v58",CODECOPY,0,0,False,0,0,0x57
    0x63: v63(0x0) = CONST ,0x57,v63,0,CONST,0,0,False,0x0,0,0x57
"    0x65: RETURN v63(0x0), v58(0x52e5)",0x57,0,"0,v63,v58",RETURN,0,0,False,0,0,0x57
},0x57,0,0,0,0,0,False,0,0,0x57
