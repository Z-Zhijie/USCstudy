3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x83B0x10]",0x10,0,0,0,0,0,False,0,0,0x83B0x10
    =================================,0x10,0,0,0,0,0,False,0,0,0x83B0x10
    0x12: v12(0x40) = CONST ,0x10,v12,0,CONST,0,0,False,0x40,0,0x83B0x10
    0x14: v14 = MLOAD v12(0x40),0x10,v14,"0,v12",MLOAD,0,0,False,0,0&m0x40,0x83B0x10
    0x15: v15(0x1ce) = CONST ,0x10,v15,0,CONST,0,0,False,0x1ce,0,0x83B0x10
    0x18: v18 = CODESIZE ,0x10,v18,0,CODESIZE,0,0,False,0,0,0x83B0x10
"    0x19: v19 = SUB v18, v15(0x1ce)",0x10,v19,"0,v18,v15",SUB,0,0,False,0,0,0x83B0x10
    0x1b: v1b(0x1ce) = CONST ,0x10,v1b,0,CONST,0,0,False,0x1ce,0,0x83B0x10
"    0x1f: CODECOPY v14, v1b(0x1ce), v19",0x10,0,"0,v14,v1b,v19",CODECOPY,0,0,False,0,0,0x83B0x10
"    0x21: v21 = ADD v14, v19",0x10,v21,"0,v14,v19",ADD,0,0,False,0,0,0x83B0x10
    0x22: v22(0x40) = CONST ,0x10,v22,0,CONST,0,0,False,0x40,0,0x83B0x10
"    0x26: MSTORE v22(0x40), v21",0x10,0,"0,v22,v21",MSTORE,0,0,False,0,0,0x83B0x10
    0x27: v27(0x2f) = CONST ,0x10,v27,0,CONST,0,0,False,0x2f,0,0x83B0x10
    0x2b: v2b(0x83) = CONST ,0x10,v2b,0,CONST,0,0,False,0x83,0,0x83B0x10
    0x2e: JUMP v2b(0x83),0x10,0,"0,v2b",JUMP,0,0,False,0,0,0x83B0x10
    Begin block 0x83B0x10,0x83B0x10,0,0,0,0,0,False,0,0,0x83B0x10
"    prev=[0x10], succ=[0x94B0x10, 0x91B0x10]",0x83B0x10,0,0,0,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
    =================================,0x83B0x10,0,0,0,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
    0x84S0x10: v84V10(0x0) = CONST ,0x83B0x10,v84V10,0,CONST,0,0,False,0x0,0,"0x94B0x10, 0x91B0x10"
    0x86S0x10: v86V10(0x20) = CONST ,0x83B0x10,v86V10,0,CONST,0,0,False,0x20,0,"0x94B0x10, 0x91B0x10"
"    0x8aS0x10: v8aV10 = SUB v21, v14",0x83B0x10,v8aV10,"0,v21,v14",SUB,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
"    0x8bS0x10: v8bV10 = SLT v8aV10, v86V10(0x20)",0x83B0x10,v8bV10,"0,v8aV10,v86V10",SLT,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
    0x8cS0x10: v8cV10 = ISZERO v8bV10,0x83B0x10,v8cV10,"0,v8bV10",ISZERO,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
    0x8dS0x10: v8dV10(0x94) = CONST ,0x83B0x10,v8dV10,0,CONST,0,0,False,0x94,0,"0x94B0x10, 0x91B0x10"
"    0x90S0x10: JUMPI v8dV10(0x94), v8cV10",0x83B0x10,0,"0,v8dV10,v8cV10",JUMPI,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
    Begin block 0x94B0x10,0x94B0x10,0,0,0,0,0,False,0,0,"0x94B0x10, 0x91B0x10"
"    prev=[0x83B0x10], succ=[0xaaB0x10, 0xa7B0x10]",0x94B0x10,0,0,0,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
    =================================,0x94B0x10,0,0,0,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
    0x96S0x10: v96V10 = MLOAD v14,0x94B0x10,v96V10,"0,v14",MLOAD,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
    0x97S0x10: v97V10(0x1) = CONST ,0x94B0x10,v97V10,0,CONST,0,0,False,0x1,0,"0xaaB0x10, 0xa7B0x10"
    0x99S0x10: v99V10(0x1) = CONST ,0x94B0x10,v99V10,0,CONST,0,0,False,0x1,0,"0xaaB0x10, 0xa7B0x10"
    0x9bS0x10: v9bV10(0xa0) = CONST ,0x94B0x10,v9bV10,0,CONST,0,0,False,0xa0,0,"0xaaB0x10, 0xa7B0x10"
"    0x9dS0x10: v9dV10(0x10000000000000000000000000000000000000000) = SHL v9bV10(0xa0), v99V10(0x1)",0x94B0x10,v9dV10,"0,v9bV10,v99V10",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0xaaB0x10, 0xa7B0x10"
"    0x9eS0x10: v9eV10(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9dV10(0x10000000000000000000000000000000000000000), v97V10(0x1)",0x94B0x10,v9eV10,"0,v9dV10,v97V10",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0xaaB0x10, 0xa7B0x10"
"    0xa0S0x10: va0V10 = AND v96V10, v9eV10(0xffffffffffffffffffffffffffffffffffffffff)",0x94B0x10,va0V10,"0,v96V10,v9eV10",AND,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
"    0xa2S0x10: va2V10 = EQ v96V10, va0V10",0x94B0x10,va2V10,"0,v96V10,va0V10",EQ,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
    0xa3S0x10: va3V10(0xaa) = CONST ,0x94B0x10,va3V10,0,CONST,0,0,False,0xaa,0,"0xaaB0x10, 0xa7B0x10"
"    0xa6S0x10: JUMPI va3V10(0xaa), va2V10",0x94B0x10,0,"0,va3V10,va2V10",JUMPI,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
    Begin block 0xaaB0x10,0xaaB0x10,0,0,0,0,0,False,0,0,"0xaaB0x10, 0xa7B0x10"
"    prev=[0x94B0x10], succ=[0x2f]",0xaaB0x10,0,0,0,0,0,False,0,0,0x2f
    =================================,0xaaB0x10,0,0,0,0,0,False,0,0,0x2f
    0xb0S0x10: JUMP v27(0x2f),0xaaB0x10,0,"0,v27",JUMP,0,0,False,0,0,0x2f
    Begin block 0x2f,0x2f,0,0,0,0,0,False,0,0,0x2f
"    prev=[0xaaB0x10], succ=[0x3e, 0x5e]",0x2f,0,0,0,0,0,False,0,0,"0x3e, 0x5e"
    =================================,0x2f,0,0,0,0,0,False,0,0,"0x3e, 0x5e"
    0x30: v30(0x1) = CONST ,0x2f,v30,0,CONST,0,0,False,0x1,0,"0x3e, 0x5e"
    0x32: v32(0x1) = CONST ,0x2f,v32,0,CONST,0,0,False,0x1,0,"0x3e, 0x5e"
    0x34: v34(0xa0) = CONST ,0x2f,v34,0,CONST,0,0,False,0xa0,0,"0x3e, 0x5e"
"    0x36: v36(0x10000000000000000000000000000000000000000) = SHL v34(0xa0), v32(0x1)",0x2f,v36,"0,v34,v32",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x3e, 0x5e"
"    0x37: v37(0xffffffffffffffffffffffffffffffffffffffff) = SUB v36(0x10000000000000000000000000000000000000000), v30(0x1)",0x2f,v37,"0,v36,v30",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x3e, 0x5e"
"    0x39: v39 = AND v96V10, v37(0xffffffffffffffffffffffffffffffffffffffff)",0x2f,v39,"0,v96V10,v37",AND,0,0,False,0,0,"0x3e, 0x5e"
    0x3a: v3a(0x5e) = CONST ,0x2f,v3a,0,CONST,0,0,False,0x5e,0,"0x3e, 0x5e"
"    0x3d: JUMPI v3a(0x5e), v39",0x2f,0,"0,v3a,v39",JUMPI,0,0,False,0,0,"0x3e, 0x5e"
    Begin block 0x3e,0x3e,0,0,0,0,0,False,0,0,"0x3e, 0x5e"
"    prev=[0x2f], succ=[0xb1]",0x3e,0,0,0,0,0,False,0,0,0xb1
    =================================,0x3e,0,0,0,0,0,False,0,0,0xb1
    0x3e: v3e(0x40) = CONST ,0x3e,v3e,0,CONST,0,0,False,0x40,0,0xb1
    0x40: v40 = MLOAD v3e(0x40),0x3e,v40,"0,v3e",MLOAD,0,0,False,0,0&m0x40,0xb1
    0x41: v41(0x461bcd) = CONST ,0x3e,v41,0,CONST,0,0,False,0x461bcd,0,0xb1
    0x45: v45(0xe5) = CONST ,0x3e,v45,0,CONST,0,0,False,0xe5,0,0xb1
"    0x47: v47(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v45(0xe5), v41(0x461bcd)",0x3e,v47,"0,v45,v41",SHL,0,0,False,0x8c379a000000000000000000000000000000000000000000000000000000000,0,0xb1
"    0x49: MSTORE v40, v47(0x8c379a000000000000000000000000000000000000000000000000000000000)",0x3e,0&m0x40,"0,v40,v47",MSTORE,0,0,False,0,0&m0x40,0xb1
    0x4a: v4a(0x4) = CONST ,0x3e,v4a,0,CONST,0,0,False,0x4,0,0xb1
"    0x4c: v4c = ADD v4a(0x4), v40",0x3e,v4c,"0,v4a,v40",ADD,0,0,False,0,0&m0x40+0x4,0xb1
    0x4d: v4d(0x55) = CONST ,0x3e,v4d,0,CONST,0,0,False,0x55,0,0xb1
    0x51: v51(0xb1) = CONST ,0x3e,v51,0,CONST,0,0,False,0xb1,0,0xb1
    0x54: JUMP v51(0xb1),0x3e,0,"0,v51",JUMP,0,0,False,0,0,0xb1
    Begin block 0xb1,0xb1,0,0,0,0,0,False,0,0,0xb1
"    prev=[0x3e], succ=[0x55]",0xb1,0,0,0,0,0,False,0,0,0x55
    =================================,0xb1,0,0,0,0,0,False,0,0,0x55
    0xb2: vb2(0x20) = CONST ,0xb1,vb2,0,CONST,0,0,False,0x20,0,0x55
"    0xb6: MSTORE v4c, vb2(0x20)",0xb1,0&m0x40+0x4,"0,v4c,vb2",MSTORE,0,0,False,0,0&m0x40+0x4,0x55
    0xb7: vb7(0x24) = CONST ,0xb1,vb7,0,CONST,0,0,False,0x24,0,0x55
"    0xbb: vbb = ADD v4c, vb2(0x20)",0xb1,vbb,"0,v4c,vb2",ADD,0,0,False,0,0&m0x40+0x4+0x20,0x55
"    0xbc: MSTORE vbb, vb7(0x24)",0xb1,0&m0x40+0x4+0x20,"0,vbb,vb7",MSTORE,0,0,False,0,0&m0x40+0x4+0x20,0x55
    0xbd: vbd(0x496e76616c6964206d617374657220636f707920616464726573732070726f76) = CONST ,0xb1,vbd,0,CONST,0,0,False,0x496e76616c6964206d617374657220636f707920616464726573732070726f76,0,0x55
    0xde: vde(0x40) = CONST ,0xb1,vde,0,CONST,0,0,False,0x40,0,0x55
"    0xe1: ve1 = ADD v4c, vde(0x40)",0xb1,ve1,"0,v4c,vde",ADD,0,0,False,0,0&m0x40+0x4+0x40,0x55
"    0xe2: MSTORE ve1, vbd(0x496e76616c6964206d617374657220636f707920616464726573732070726f76)",0xb1,0&m0x40+0x4+0x40,"0,ve1,vbd",MSTORE,0,0,False,0,0&m0x40+0x4+0x40,0x55
    0xe3: ve3(0x1a591959) = CONST ,0xb1,ve3,0,CONST,0,0,False,0x1a591959,0,0x55
    0xe8: ve8(0xe2) = CONST ,0xb1,ve8,0,CONST,0,0,False,0xe2,0,0x55
"    0xea: vea(0x6964656400000000000000000000000000000000000000000000000000000000) = SHL ve8(0xe2), ve3(0x1a591959)",0xb1,vea,"0,ve8,ve3",SHL,0,0,False,0x6964656400000000000000000000000000000000000000000000000000000000,0,0x55
    0xeb: veb(0x60) = CONST ,0xb1,veb,0,CONST,0,0,False,0x60,0,0x55
"    0xee: vee = ADD v4c, veb(0x60)",0xb1,vee,"0,v4c,veb",ADD,0,0,False,0,0&m0x40+0x4+0x60,0x55
"    0xef: MSTORE vee, vea(0x6964656400000000000000000000000000000000000000000000000000000000)",0xb1,0&m0x40+0x4+0x60,"0,vee,vea",MSTORE,0,0,False,0,0&m0x40+0x4+0x60,0x55
    0xf0: vf0(0x80) = CONST ,0xb1,vf0,0,CONST,0,0,False,0x80,0,0x55
"    0xf2: vf2 = ADD vf0(0x80), v4c",0xb1,vf2,"0,vf0,v4c",ADD,0,0,False,0,0&m0x40+0x4+0x80,0x55
    0xf4: JUMP v4d(0x55),0xb1,0,"0,v4d",JUMP,0,0,False,0,0,0x55
    Begin block 0x55,0x55,0,0,0,0,0,False,0,0,0x55
"    prev=[0xb1], succ=[]",0x55,0,0,0,0,0,False,0,0,0x55
    =================================,0x55,0,0,0,0,0,False,0,0,0x55
    0x56: v56(0x40) = CONST ,0x55,v56,0,CONST,0,0,False,0x40,0,0x55
    0x58: v58 = MLOAD v56(0x40),0x55,v58,"0,v56",MLOAD,0,0,False,0,0&m0x40,0x55
"    0x5b: v5b(0x84) = SUB vf2, v58",0x55,v5b,"0,vf2,v58",SUB,0,0,False,0x84,0&m0x40+0x4+0x80-0x84,0x55
"    0x5d: REVERT v58, v5b(0x84)",0x55,0,"0,v58,v5b",REVERT,0,0,False,0,0,0x55
    Begin block 0x5e,0x5e,0,0,0,0,0,False,0,0,0x55
"    prev=[0x2f], succ=[0xf5]",0x5e,0,0,0,0,0,False,0,0,0xf5
    =================================,0x5e,0,0,0,0,0,False,0,0,0xf5
    0x5f: v5f(0x0) = CONST ,0x5e,v5f,0,CONST,0,0,False,0x0,0,0xf5
    0x62: v62 = SLOAD v5f(0x0),0x5e,v62,"0,v5f",SLOAD,0,0,False,0,0,0xf5
    0x63: v63(0x1) = CONST ,0x5e,v63,0,CONST,0,0,False,0x1,0,0xf5
    0x65: v65(0x1) = CONST ,0x5e,v65,0,CONST,0,0,False,0x1,0,0xf5
    0x67: v67(0xa0) = CONST ,0x5e,v67,0,CONST,0,0,False,0xa0,0,0xf5
"    0x69: v69(0x10000000000000000000000000000000000000000) = SHL v67(0xa0), v65(0x1)",0x5e,v69,"0,v67,v65",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0xf5
"    0x6a: v6a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v69(0x10000000000000000000000000000000000000000), v63(0x1)",0x5e,v6a,"0,v69,v63",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0xf5
    0x6b: v6b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v6a(0xffffffffffffffffffffffffffffffffffffffff),0x5e,v6b,"0,v6a",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0xf5
"    0x6c: v6c = AND v6b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v62",0x5e,v6c,"0,v6b,v62",AND,0,0,False,0,0,0xf5
    0x6d: v6d(0x1) = CONST ,0x5e,v6d,0,CONST,0,0,False,0x1,0,0xf5
    0x6f: v6f(0x1) = CONST ,0x5e,v6f,0,CONST,0,0,False,0x1,0,0xf5
    0x71: v71(0xa0) = CONST ,0x5e,v71,0,CONST,0,0,False,0xa0,0,0xf5
"    0x73: v73(0x10000000000000000000000000000000000000000) = SHL v71(0xa0), v6f(0x1)",0x5e,v73,"0,v71,v6f",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0xf5
"    0x74: v74(0xffffffffffffffffffffffffffffffffffffffff) = SUB v73(0x10000000000000000000000000000000000000000), v6d(0x1)",0x5e,v74,"0,v73,v6d",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0xf5
"    0x78: v78 = AND v74(0xffffffffffffffffffffffffffffffffffffffff), v96V10",0x5e,v78,"0,v74,v96V10",AND,0,0,False,0,0,0xf5
"    0x7c: v7c = OR v78, v6c",0x5e,v7c,"0,v78,v6c",OR,0,0,False,0,0,0xf5
"    0x7e: SSTORE v5f(0x0), v7c",0x5e,0,"0,v5f,v7c",SSTORE,0,0,False,0,0,0xf5
    0x7f: v7f(0xf5) = CONST ,0x5e,v7f,0,CONST,0,0,False,0xf5,0,0xf5
    0x82: JUMP v7f(0xf5),0x5e,0,"0,v7f",JUMP,0,0,False,0,0,0xf5
    Begin block 0xf5,0xf5,0,0,0,0,0,False,0,0,0xf5
"    prev=[0x5e], succ=[]",0xf5,0,0,0,0,0,False,0,0,0xf5
    =================================,0xf5,0,0,0,0,0,False,0,0,0xf5
    0xf6: vf6(0xcb) = CONST ,0xf5,vf6,0,CONST,0,0,False,0xcb,0,0xf5
    0xf9: vf9(0x103) = CONST ,0xf5,vf9,0,CONST,0,0,False,0x103,0,0xf5
    0xfc: vfc(0x0) = CONST ,0xf5,vfc,0,CONST,0,0,False,0x0,0,0xf5
"    0xfe: CODECOPY vfc(0x0), vf9(0x103), vf6(0xcb)",0xf5,0,"0,vfc,vf9,vf6",CODECOPY,0,0,False,0,0,0xf5
    0xff: vff(0x0) = CONST ,0xf5,vff,0,CONST,0,0,False,0x0,0,0xf5
"    0x101: RETURN vff(0x0), vf6(0xcb)",0xf5,0,"0,vff,vf6",RETURN,0,0,False,0,0,0xf5
    Begin block 0xa7B0x10,0xa7B0x10,0,0,0,0,0,False,0,0,0xf5
"    prev=[0x94B0x10], succ=[]",0xa7B0x10,0,0,0,0,0,False,0,0,0xf5
    =================================,0xa7B0x10,0,0,0,0,0,False,0,0,0xf5
"    0xa9S0x10: REVERT v84V10(0x0), v84V10(0x0)",0xa7B0x10,0,"0,v84V10,v84V10",REVERT,0,0,False,0,0,0xf5
    Begin block 0x91B0x10,0x91B0x10,0,0,0,0,0,False,0,0,0xf5
"    prev=[0x83B0x10], succ=[]",0x91B0x10,0,0,0,0,0,False,0,0,0xf5
    =================================,0x91B0x10,0,0,0,0,0,False,0,0,0xf5
"    0x93S0x10: REVERT v84V10(0x0), v84V10(0x0)",0x91B0x10,0,"0,v84V10,v84V10",REVERT,0,0,False,0,0,0xf5
},0x91B0x10,0,0,0,0,0,False,0,0,0xf5
