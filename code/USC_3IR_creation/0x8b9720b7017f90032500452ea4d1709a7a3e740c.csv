3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x5dB0x10]",0x10,0,0,0,0,0,False,0,0,0x5dB0x10
    =================================,0x10,0,0,0,0,0,False,0,0,0x5dB0x10
    0x12: v12(0x40) = CONST ,0x10,v12,0,CONST,0,0,False,0x40,0,0x5dB0x10
    0x14: v14 = MLOAD v12(0x40),0x10,v14,"0,v12",MLOAD,0,0,False,0,0&m0x40,0x5dB0x10
    0x15: v15(0x2a2) = CONST ,0x10,v15,0,CONST,0,0,False,0x2a2,0,0x5dB0x10
    0x18: v18 = CODESIZE ,0x10,v18,0,CODESIZE,0,0,False,0,0,0x5dB0x10
"    0x19: v19 = SUB v18, v15(0x2a2)",0x10,v19,"0,v18,v15",SUB,0,0,False,0,0,0x5dB0x10
    0x1b: v1b(0x2a2) = CONST ,0x10,v1b,0,CONST,0,0,False,0x2a2,0,0x5dB0x10
"    0x1f: CODECOPY v14, v1b(0x2a2), v19",0x10,0,"0,v14,v1b,v19",CODECOPY,0,0,False,0,0,0x5dB0x10
"    0x21: v21 = ADD v14, v19",0x10,v21,"0,v14,v19",ADD,0,0,False,0,0,0x5dB0x10
    0x22: v22(0x40) = CONST ,0x10,v22,0,CONST,0,0,False,0x40,0,0x5dB0x10
"    0x26: MSTORE v22(0x40), v21",0x10,0,"0,v22,v21",MSTORE,0,0,False,0,0,0x5dB0x10
    0x27: v27(0x2f) = CONST ,0x10,v27,0,CONST,0,0,False,0x2f,0,0x5dB0x10
    0x2b: v2b(0x5d) = CONST ,0x10,v2b,0,CONST,0,0,False,0x5d,0,0x5dB0x10
    0x2e: JUMP v2b(0x5d),0x10,0,"0,v2b",JUMP,0,0,False,0,0,0x5dB0x10
    Begin block 0x5dB0x10,0x5dB0x10,0,0,0,0,0,False,0,0,0x5dB0x10
"    prev=[0x10], succ=[0x6bB0x10, 0x6fB0x10]",0x5dB0x10,0,0,0,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    =================================,0x5dB0x10,0,0,0,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    0x5eS0x10: v5eV10(0x0) = CONST ,0x5dB0x10,v5eV10,0,CONST,0,0,False,0x0,0,"0x6bB0x10, 0x6fB0x10"
    0x60S0x10: v60V10(0x20) = CONST ,0x5dB0x10,v60V10,0,CONST,0,0,False,0x20,0,"0x6bB0x10, 0x6fB0x10"
"    0x64S0x10: v64V10 = SUB v21, v14",0x5dB0x10,v64V10,"0,v21,v14",SUB,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
"    0x65S0x10: v65V10 = SLT v64V10, v60V10(0x20)",0x5dB0x10,v65V10,"0,v64V10,v60V10",SLT,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    0x66S0x10: v66V10 = ISZERO v65V10,0x5dB0x10,v66V10,"0,v65V10",ISZERO,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    0x67S0x10: v67V10(0x6f) = CONST ,0x5dB0x10,v67V10,0,CONST,0,0,False,0x6f,0,"0x6bB0x10, 0x6fB0x10"
"    0x6aS0x10: JUMPI v67V10(0x6f), v66V10",0x5dB0x10,0,"0,v67V10,v66V10",JUMPI,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    Begin block 0x6bB0x10,0x6bB0x10,0,0,0,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
"    prev=[0x5dB0x10], succ=[]",0x6bB0x10,0,0,0,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    =================================,0x6bB0x10,0,0,0,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    0x6bS0x10: v6bV10(0x0) = CONST ,0x6bB0x10,v6bV10,0,CONST,0,0,False,0x0,0,"0x6bB0x10, 0x6fB0x10"
"    0x6eS0x10: REVERT v6bV10(0x0), v6bV10(0x0)",0x6bB0x10,0,"0,v6bV10,v6bV10",REVERT,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
    Begin block 0x6fB0x10,0x6fB0x10,0,0,0,0,0,False,0,0,"0x6bB0x10, 0x6fB0x10"
"    prev=[0x5dB0x10], succ=[0x82B0x10, 0x86B0x10]",0x6fB0x10,0,0,0,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    =================================,0x6fB0x10,0,0,0,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    0x71S0x10: v71V10 = MLOAD v14,0x6fB0x10,v71V10,"0,v14",MLOAD,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    0x72S0x10: v72V10(0x1) = CONST ,0x6fB0x10,v72V10,0,CONST,0,0,False,0x1,0,"0x82B0x10, 0x86B0x10"
    0x74S0x10: v74V10(0x1) = CONST ,0x6fB0x10,v74V10,0,CONST,0,0,False,0x1,0,"0x82B0x10, 0x86B0x10"
    0x76S0x10: v76V10(0xa0) = CONST ,0x6fB0x10,v76V10,0,CONST,0,0,False,0xa0,0,"0x82B0x10, 0x86B0x10"
"    0x78S0x10: v78V10(0x10000000000000000000000000000000000000000) = SHL v76V10(0xa0), v74V10(0x1)",0x6fB0x10,v78V10,"0,v76V10,v74V10",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x82B0x10, 0x86B0x10"
"    0x79S0x10: v79V10(0xffffffffffffffffffffffffffffffffffffffff) = SUB v78V10(0x10000000000000000000000000000000000000000), v72V10(0x1)",0x6fB0x10,v79V10,"0,v78V10,v72V10",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x82B0x10, 0x86B0x10"
"    0x7bS0x10: v7bV10 = AND v71V10, v79V10(0xffffffffffffffffffffffffffffffffffffffff)",0x6fB0x10,v7bV10,"0,v71V10,v79V10",AND,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
"    0x7dS0x10: v7dV10 = EQ v71V10, v7bV10",0x6fB0x10,v7dV10,"0,v71V10,v7bV10",EQ,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    0x7eS0x10: v7eV10(0x86) = CONST ,0x6fB0x10,v7eV10,0,CONST,0,0,False,0x86,0,"0x82B0x10, 0x86B0x10"
"    0x81S0x10: JUMPI v7eV10(0x86), v7dV10",0x6fB0x10,0,"0,v7eV10,v7dV10",JUMPI,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    Begin block 0x82B0x10,0x82B0x10,0,0,0,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
"    prev=[0x6fB0x10], succ=[]",0x82B0x10,0,0,0,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    =================================,0x82B0x10,0,0,0,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    0x82S0x10: v82V10(0x0) = CONST ,0x82B0x10,v82V10,0,CONST,0,0,False,0x0,0,"0x82B0x10, 0x86B0x10"
"    0x85S0x10: REVERT v82V10(0x0), v82V10(0x0)",0x82B0x10,0,"0,v82V10,v82V10",REVERT,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
    Begin block 0x86B0x10,0x86B0x10,0,0,0,0,0,False,0,0,"0x82B0x10, 0x86B0x10"
"    prev=[0x6fB0x10], succ=[0x2f]",0x86B0x10,0,0,0,0,0,False,0,0,0x2f
    =================================,0x86B0x10,0,0,0,0,0,False,0,0,0x2f
    0x8cS0x10: JUMP v27(0x2f),0x86B0x10,0,"0,v27",JUMP,0,0,False,0,0,0x2f
    Begin block 0x2f,0x2f,0,0,0,0,0,False,0,0,0x2f
"    prev=[0x86B0x10], succ=[0x8d]",0x2f,0,0,0,0,0,False,0,0,0x8d
    =================================,0x2f,0,0,0,0,0,False,0,0,0x8d
    0x30: v30(0x0) = CONST ,0x2f,v30,0,CONST,0,0,False,0x0,0,0x8d
    0x33: v33 = SLOAD v30(0x0),0x2f,v33,"0,v30",SLOAD,0,0,False,0,0,0x8d
    0x34: v34(0x1) = CONST ,0x2f,v34,0,CONST,0,0,False,0x1,0,0x8d
    0x36: v36(0x1) = CONST ,0x2f,v36,0,CONST,0,0,False,0x1,0,0x8d
    0x38: v38(0xa0) = CONST ,0x2f,v38,0,CONST,0,0,False,0xa0,0,0x8d
"    0x3a: v3a(0x10000000000000000000000000000000000000000) = SHL v38(0xa0), v36(0x1)",0x2f,v3a,"0,v38,v36",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x8d
"    0x3b: v3b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3a(0x10000000000000000000000000000000000000000), v34(0x1)",0x2f,v3b,"0,v3a,v34",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x8d
"    0x3e: v3e = AND v71V10, v3b(0xffffffffffffffffffffffffffffffffffffffff)",0x2f,v3e,"0,v71V10,v3b",AND,0,0,False,0,0,0x8d
    0x3f: v3f(0x1) = CONST ,0x2f,v3f,0,CONST,0,0,False,0x1,0,0x8d
    0x41: v41(0x1) = CONST ,0x2f,v41,0,CONST,0,0,False,0x1,0,0x8d
    0x43: v43(0xa0) = CONST ,0x2f,v43,0,CONST,0,0,False,0xa0,0,0x8d
"    0x45: v45(0x10000000000000000000000000000000000000000) = SHL v43(0xa0), v41(0x1)",0x2f,v45,"0,v43,v41",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x8d
"    0x46: v46(0xffffffffffffffffffffffffffffffffffffffff) = SUB v45(0x10000000000000000000000000000000000000000), v3f(0x1)",0x2f,v46,"0,v45,v3f",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x8d
    0x47: v47(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v46(0xffffffffffffffffffffffffffffffffffffffff),0x2f,v47,"0,v46",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x8d
"    0x4a: v4a = AND v47(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v33",0x2f,v4a,"0,v47,v33",AND,0,0,False,0,0,0x8d
"    0x4b: v4b = OR v4a, v3e",0x2f,v4b,"0,v4a,v3e",OR,0,0,False,0,0,0x8d
"    0x4d: SSTORE v30(0x0), v4b",0x2f,0,"0,v30,v4b",SSTORE,0,0,False,0,0,0x8d
    0x4e: v4e(0x1) = CONST ,0x2f,v4e,0,CONST,0,0,False,0x1,0,0x8d
    0x51: v51 = SLOAD v4e(0x1),0x2f,v51,"0,v4e",SLOAD,0,0,False,0,0,0x8d
"    0x54: v54 = AND v47(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v51",0x2f,v54,"0,v47,v51",AND,0,0,False,0,0,0x8d
    0x55: v55 = CALLER ,0x2f,v55,0,CALLER,0,0,True,0,0,0x8d
"    0x56: v56 = OR v55, v54",0x2f,v56,"0,v55,v54",OR,0,0,True,0,0,0x8d
"    0x58: SSTORE v4e(0x1), v56",0x2f,0,"0,v4e,v56",SSTORE,0,0,False,0,0,0x8d
    0x59: v59(0x8d) = CONST ,0x2f,v59,0,CONST,0,0,False,0x8d,0,0x8d
    0x5c: JUMP v59(0x8d),0x2f,0,"0,v59",JUMP,0,0,False,0,0,0x8d
    Begin block 0x8d,0x8d,0,0,0,0,0,False,0,0,0x8d
"    prev=[0x2f], succ=[]",0x8d,0,0,0,0,0,False,0,0,0x8d
    =================================,0x8d,0,0,0,0,0,False,0,0,0x8d
    0x8e: v8e(0x206) = CONST ,0x8d,v8e,0,CONST,0,0,False,0x206,0,0x8d
    0x92: v92(0x9c) = CONST ,0x8d,v92,0,CONST,0,0,False,0x9c,0,0x8d
    0x95: v95(0x0) = CONST ,0x8d,v95,0,CONST,0,0,False,0x0,0,0x8d
"    0x97: CODECOPY v95(0x0), v92(0x9c), v8e(0x206)",0x8d,0,"0,v95,v92,v8e",CODECOPY,0,0,False,0,0,0x8d
    0x98: v98(0x0) = CONST ,0x8d,v98,0,CONST,0,0,False,0x0,0,0x8d
"    0x9a: RETURN v98(0x0), v8e(0x206)",0x8d,0,"0,v98,v8e",RETURN,0,0,False,0,0,0x8d
},0x8d,0,0,0,0,0,False,0,0,0x8d
