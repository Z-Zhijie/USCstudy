3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x12]",0x0,0,0,0,0,0,False,0,0,0x12
    =================================,0x0,0,0,0,0,0,False,0,0,0x12
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,0x12
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,0x12
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,0x12
    0x5: v5(0xd) = CONST ,0x0,v5,0,CONST,0,0,False,0xd,0,0x12
    0x8: v8 = CALLER ,0x0,v8,0,CALLER,0,0,True,0,0,0x12
    0x9: v9(0x12) = CONST ,0x0,v9,0,CONST,0,0,False,0x12,0,0x12
    0xc: JUMP v9(0x12),0x0,0,"0,v9",JUMP,0,0,False,0,0,0x12
    Begin block 0x12,0x12,0,0,0,0,0,False,0,0,0x12
"    prev=[0x0], succ=[0x42, 0x78]",0x12,0,0,0,0,0,False,0,0,"0x42, 0x78"
    =================================,0x12,0,0,0,0,0,False,0,0,"0x42, 0x78"
    0x13: v13(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103) = CONST ,0x12,v13,0,CONST,0,0,False,0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,0,"0x42, 0x78"
    0x34: v34(0x1) = CONST ,0x12,v34,0,CONST,0,0,False,0x1,0,"0x42, 0x78"
    0x36: v36(0x1) = CONST ,0x12,v36,0,CONST,0,0,False,0x1,0,"0x42, 0x78"
    0x38: v38(0xa0) = CONST ,0x12,v38,0,CONST,0,0,False,0xa0,0,"0x42, 0x78"
"    0x3a: v3a(0x10000000000000000000000000000000000000000) = SHL v38(0xa0), v36(0x1)",0x12,v3a,"0,v38,v36",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x42, 0x78"
"    0x3b: v3b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3a(0x10000000000000000000000000000000000000000), v34(0x1)",0x12,v3b,"0,v3a,v34",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x42, 0x78"
"    0x3d: v3d = AND v8, v3b(0xffffffffffffffffffffffffffffffffffffffff)",0x12,v3d,"0,v8,v3b",AND,0,0,True,0,0,"0x42, 0x78"
    0x3e: v3e(0x78) = CONST ,0x12,v3e,0,CONST,0,0,False,0x78,0,"0x42, 0x78"
"    0x41: JUMPI v3e(0x78), v3d",0x12,0,"0,v3e,v3d",JUMPI,0,0,False,0,0,"0x42, 0x78"
    Begin block 0x42,0x42,0,0,0,0,0,False,0,0,"0x42, 0x78"
"    prev=[0x12], succ=[]",0x42,0,0,0,0,0,False,0,0,"0x42, 0x78"
    =================================,0x42,0,0,0,0,0,False,0,0,"0x42, 0x78"
    0x42: v42(0x40) = CONST ,0x42,v42,0,CONST,0,0,False,0x40,0,"0x42, 0x78"
    0x44: v44 = MLOAD v42(0x40),0x42,v44,"0,v42",MLOAD,0,0,False,0,0&m0x40,"0x42, 0x78"
    0x45: v45(0x461bcd) = CONST ,0x42,v45,0,CONST,0,0,False,0x461bcd,0,"0x42, 0x78"
    0x49: v49(0xe5) = CONST ,0x42,v49,0,CONST,0,0,False,0xe5,0,"0x42, 0x78"
"    0x4b: v4b(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v49(0xe5), v45(0x461bcd)",0x42,v4b,"0,v49,v45",SHL,0,0,False,0x8c379a000000000000000000000000000000000000000000000000000000000,0,"0x42, 0x78"
"    0x4d: MSTORE v44, v4b(0x8c379a000000000000000000000000000000000000000000000000000000000)",0x42,0&m0x40,"0,v44,v4b",MSTORE,0,0,False,0,0&m0x40,"0x42, 0x78"
    0x4e: v4e(0x4) = CONST ,0x42,v4e,0,CONST,0,0,False,0x4,0,"0x42, 0x78"
"    0x50: v50 = ADD v4e(0x4), v44",0x42,v50,"0,v4e,v44",ADD,0,0,False,0,0&m0x40+0x4,"0x42, 0x78"
    0x53: v53(0x20) = CONST ,0x42,v53,0,CONST,0,0,False,0x20,0,"0x42, 0x78"
"    0x55: v55 = ADD v53(0x20), v50",0x42,v55,"0,v53,v50",ADD,0,0,False,0,0&m0x40+0x4+0x20,"0x42, 0x78"
"    0x58: v58(0x20) = SUB v55, v50",0x42,v58,"0,v55,v50",SUB,0,0,False,0x20,0&m0x40+0x4+0x20-0x20,"0x42, 0x78"
"    0x5a: MSTORE v50, v58(0x20)",0x42,0&m0x40+0x4,"0,v50,v58",MSTORE,0,0,False,0,0&m0x40+0x4,"0x42, 0x78"
    0x5b: v5b(0x29) = CONST ,0x42,v5b,0,CONST,0,0,False,0x29,0,"0x42, 0x78"
"    0x5e: MSTORE v55, v5b(0x29)",0x42,0&m0x40+0x4+0x20,"0,v55,v5b",MSTORE,0,0,False,0,0&m0x40+0x4+0x20,"0x42, 0x78"
    0x5f: v5f(0x20) = CONST ,0x42,v5f,0,CONST,0,0,False,0x20,0,"0x42, 0x78"
"    0x61: v61 = ADD v5f(0x20), v55",0x42,v61,"0,v5f,v55",ADD,0,0,False,0,0&m0x40+0x4+0x20+0x20,"0x42, 0x78"
    0x63: v63(0x9b8) = CONST ,0x42,v63,0,CONST,0,0,False,0x9b8,0,"0x42, 0x78"
    0x66: v66(0x29) = CONST ,0x42,v66,0,CONST,0,0,False,0x29,0,"0x42, 0x78"
"    0x69: CODECOPY v61, v63(0x9b8), v66(0x29)",0x42,0,"0,v61,v63,v66",CODECOPY,0,0,False,0,0,"0x42, 0x78"
    0x6a: v6a(0x40) = CONST ,0x42,v6a,0,CONST,0,0,False,0x40,0,"0x42, 0x78"
"    0x6c: v6c = ADD v6a(0x40), v61",0x42,v6c,"0,v6a,v61",ADD,0,0,False,0,0&m0x40+0x4+0x20+0x20+0x40,"0x42, 0x78"
    0x70: v70(0x40) = CONST ,0x42,v70,0,CONST,0,0,False,0x40,0,"0x42, 0x78"
    0x72: v72 = MLOAD v70(0x40),0x42,v72,"0,v70",MLOAD,0,0,False,0,0&m0x40,"0x42, 0x78"
"    0x75: v75(0x84) = SUB v6c, v72",0x42,v75,"0,v6c,v72",SUB,0,0,False,0x84,0&m0x40+0x4+0x20+0x20+0x40-0x84,"0x42, 0x78"
"    0x77: REVERT v72, v75(0x84)",0x42,0,"0,v72,v75",REVERT,0,0,False,0,0,"0x42, 0x78"
    Begin block 0x78,0x78,0,0,0,0,0,False,0,0,"0x42, 0x78"
"    prev=[0x12], succ=[0xd]",0x78,0,0,0,0,0,False,0,0,0xd
    =================================,0x78,0,0,0,0,0,False,0,0,0xd
"    0x79: SSTORE v13(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103), v8",0x78,0,"0,v13,v8",SSTORE,0,0,False,0,0,0xd
    0x7a: JUMP v5(0xd),0x78,0,"0,v5",JUMP,0,0,False,0,0,0xd
    Begin block 0xd,0xd,0,0,0,0,0,False,0,0,0xd
"    prev=[0x78], succ=[0x7b]",0xd,0,0,0,0,0,False,0,0,0x7b
    =================================,0xd,0,0,0,0,0,False,0,0,0x7b
    0xe: ve(0x7b) = CONST ,0xd,ve,0,CONST,0,0,False,0x7b,0,0x7b
    0x11: JUMP ve(0x7b),0xd,0,"0,ve",JUMP,0,0,False,0,0,0x7b
    Begin block 0x7b,0x7b,0,0,0,0,0,False,0,0,0x7b
"    prev=[0xd], succ=[]",0x7b,0,0,0,0,0,False,0,0,0x7b
    =================================,0x7b,0,0,0,0,0,False,0,0,0x7b
    0x7c: v7c(0x92e) = CONST ,0x7b,v7c,0,CONST,0,0,False,0x92e,0,0x7b
    0x80: v80(0x8a) = CONST ,0x7b,v80,0,CONST,0,0,False,0x8a,0,0x7b
    0x83: v83(0x0) = CONST ,0x7b,v83,0,CONST,0,0,False,0x0,0,0x7b
"    0x85: CODECOPY v83(0x0), v80(0x8a), v7c(0x92e)",0x7b,0,"0,v83,v80,v7c",CODECOPY,0,0,False,0,0,0x7b
    0x86: v86(0x0) = CONST ,0x7b,v86,0,CONST,0,0,False,0x0,0,0x7b
"    0x88: RETURN v86(0x0), v7c(0x92e)",0x7b,0,"0,v86,v7c",RETURN,0,0,False,0,0,0x7b
},0x7b,0,0,0,0,0,False,0,0,0x7b
