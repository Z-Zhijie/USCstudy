3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x12, 0x16]",0x0,0,0,0,0,0,False,0,0,"0x12, 0x16"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x12, 0x16"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x12, 0x16"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x12, 0x16"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x12, 0x16"
    0x5: v5(0x1) = CONST ,0x0,v5,0,CONST,0,0,False,0x1,0,"0x12, 0x16"
    0x7: v7(0x2) = CONST ,0x0,v7,0,CONST,0,0,False,0x2,0,"0x12, 0x16"
"    0x9: SSTORE v7(0x2), v5(0x1)",0x0,0,"0,v7,v5",SSTORE,0,0,False,0,0,"0x12, 0x16"
    0xa: va = CALLVALUE ,0x0,va,0,CALLVALUE,0,0,False,0,0,"0x12, 0x16"
    0xc: vc = ISZERO va,0x0,vc,"0,va",ISZERO,0,0,False,0,0,"0x12, 0x16"
    0xd: vd(0x16) = CONST ,0x0,vd,0,CONST,0,0,False,0x16,0,"0x12, 0x16"
"    0x11: JUMPI vd(0x16), vc",0x0,0,"0,vd,vc",JUMPI,0,0,False,0,0,"0x12, 0x16"
    Begin block 0x12,0x12,0,0,0,0,0,False,0,0,"0x12, 0x16"
"    prev=[0x0], succ=[]",0x12,0,0,0,0,0,False,0,0,"0x12, 0x16"
    =================================,0x12,0,0,0,0,0,False,0,0,"0x12, 0x16"
    0x12: v12(0x0) = CONST ,0x12,v12,0,CONST,0,0,False,0x0,0,"0x12, 0x16"
"    0x15: REVERT v12(0x0), v12(0x0)",0x12,0,"0,v12,v12",REVERT,0,0,False,0,0,"0x12, 0x16"
    Begin block 0x16,0x16,0,0,0,0,0,False,0,0,"0x12, 0x16"
"    prev=[0x0], succ=[0x77]",0x16,0,0,0,0,0,False,0,0,0x77
    =================================,0x16,0,0,0,0,0,False,0,0,0x77
    0x18: v18(0x0) = CONST ,0x16,v18,0,CONST,0,0,False,0x0,0,0x77
    0x1a: v1a(0x23) = CONST ,0x16,v1a,0,CONST,0,0,False,0x23,0,0x77
    0x1e: v1e(0x77) = CONST ,0x16,v1e,0,CONST,0,0,False,0x77,0,0x77
    0x22: JUMP v1e(0x77),0x16,0,"0,v1e",JUMP,0,0,False,0,0,0x77
    Begin block 0x77,0x77,0,0,0,0,0,False,0,0,0x77
"    prev=[0x16], succ=[0x23]",0x77,0,0,0,0,0,False,0,0,0x23
    =================================,0x77,0,0,0,0,0,False,0,0,0x23
    0x78: v78 = CALLER ,0x77,v78,0,CALLER,0,0,True,0,0,0x23
    0x7a: JUMP v1a(0x23),0x77,0,"0,v1a",JUMP,0,0,False,0,0,0x23
    Begin block 0x23,0x23,0,0,0,0,0,False,0,0,0x23
"    prev=[0x77], succ=[0x7b]",0x23,0,0,0,0,0,False,0,0,0x7b
    =================================,0x23,0,0,0,0,0,False,0,0,0x7b
    0x24: v24(0x0) = CONST ,0x23,v24,0,CONST,0,0,False,0x0,0,0x7b
    0x27: v27 = SLOAD v24(0x0),0x23,v27,"0,v24",SLOAD,0,0,False,0,0,0x7b
    0x28: v28(0x1) = CONST ,0x23,v28,0,CONST,0,0,False,0x1,0,0x7b
    0x2a: v2a(0x1) = CONST ,0x23,v2a,0,CONST,0,0,False,0x1,0,0x7b
    0x2c: v2c(0xa0) = CONST ,0x23,v2c,0,CONST,0,0,False,0xa0,0,0x7b
"    0x2e: v2e(0x10000000000000000000000000000000000000000) = SHL v2c(0xa0), v2a(0x1)",0x23,v2e,"0,v2c,v2a",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x7b
"    0x2f: v2f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2e(0x10000000000000000000000000000000000000000), v28(0x1)",0x23,v2f,"0,v2e,v28",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x7b
    0x30: v30(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v2f(0xffffffffffffffffffffffffffffffffffffffff),0x23,v30,"0,v2f",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x7b
"    0x31: v31 = AND v30(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v27",0x23,v31,"0,v30,v27",AND,0,0,False,0,0,0x7b
    0x32: v32(0x1) = CONST ,0x23,v32,0,CONST,0,0,False,0x1,0,0x7b
    0x34: v34(0x1) = CONST ,0x23,v34,0,CONST,0,0,False,0x1,0,0x7b
    0x36: v36(0xa0) = CONST ,0x23,v36,0,CONST,0,0,False,0xa0,0,0x7b
"    0x38: v38(0x10000000000000000000000000000000000000000) = SHL v36(0xa0), v34(0x1)",0x23,v38,"0,v36,v34",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,0x7b
"    0x39: v39(0xffffffffffffffffffffffffffffffffffffffff) = SUB v38(0x10000000000000000000000000000000000000000), v32(0x1)",0x23,v39,"0,v38,v32",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x7b
"    0x3b: v3b = AND v78, v39(0xffffffffffffffffffffffffffffffffffffffff)",0x23,v3b,"0,v78,v39",AND,0,0,True,0,0,0x7b
"    0x3e: v3e = OR v3b, v31",0x23,v3e,"0,v3b,v31",OR,0,0,True,0,0,0x7b
"    0x40: SSTORE v24(0x0), v3e",0x23,0,"0,v24,v3e",SSTORE,0,0,False,0,0,0x7b
    0x41: v41(0x40) = CONST ,0x23,v41,0,CONST,0,0,False,0x40,0,0x7b
    0x43: v43 = MLOAD v41(0x40),0x23,v43,"0,v41",MLOAD,0,0,False,0,0&m0x40,0x7b
    0x48: v48(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST ,0x23,v48,0,CONST,0,0,False,0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0,0,0x7b
"    0x6c: LOG3 v43, v24(0x0), v48(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v24(0x0), v3b",0x23,0,"0,v43,v24,v48,v24,v3b",LOG3,0,0,False,0,0,0x7b
    0x6e: v6e(0x1) = CONST ,0x23,v6e,0,CONST,0,0,False,0x1,0,0x7b
"    0x71: SSTORE v6e(0x1), v6e(0x1)",0x23,0,"0,v6e,v6e",SSTORE,0,0,False,0,0,0x7b
    0x72: v72(0x7b) = CONST ,0x23,v72,0,CONST,0,0,False,0x7b,0,0x7b
    0x76: JUMP v72(0x7b),0x23,0,"0,v72",JUMP,0,0,False,0,0,0x7b
    Begin block 0x7b,0x7b,0,0,0,0,0,False,0,0,0x7b
"    prev=[0x23], succ=[]",0x7b,0,0,0,0,0,False,0,0,0x7b
    =================================,0x7b,0,0,0,0,0,False,0,0,0x7b
    0x7c: v7c(0x53bf) = CONST ,0x7b,v7c,0,CONST,0,0,False,0x53bf,0,0x7b
    0x80: v80(0x8b) = CONST ,0x7b,v80,0,CONST,0,0,False,0x8b,0,0x7b
    0x84: v84(0x0) = CONST ,0x7b,v84,0,CONST,0,0,False,0x0,0,0x7b
"    0x86: CODECOPY v84(0x0), v80(0x8b), v7c(0x53bf)",0x7b,0,"0,v84,v80,v7c",CODECOPY,0,0,False,0,0,0x7b
    0x87: v87(0x0) = CONST ,0x7b,v87,0,CONST,0,0,False,0x0,0,0x7b
"    0x89: RETURN v87(0x0), v7c(0x53bf)",0x7b,0,"0,v87,v7c",RETURN,0,0,False,0,0,0x7b
},0x7b,0,0,0,0,0,False,0,0,0x7b
