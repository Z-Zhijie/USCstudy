3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x20, 0x1c]",0x0,0,0,0,0,0,False,0,0,"0x20, 0x1c"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x20, 0x1c"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x20, 0x1c"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x20, 0x1c"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x20, 0x1c"
    0x5: v5(0x9c) = CONST ,0x0,v5,0,CONST,0,0,False,0x9c,0,"0x20, 0x1c"
    0x8: v8 = SLOAD v5(0x9c),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x20, 0x1c"
    0x9: v9(0x1) = CONST ,0x0,v9,0,CONST,0,0,False,0x1,0,"0x20, 0x1c"
    0xb: vb(0x1) = CONST ,0x0,vb,0,CONST,0,0,False,0x1,0,"0x20, 0x1c"
    0xd: vd(0xa0) = CONST ,0x0,vd,0,CONST,0,0,False,0xa0,0,"0x20, 0x1c"
"    0xf: vf(0x10000000000000000000000000000000000000000) = SHL vd(0xa0), vb(0x1)",0x0,vf,"0,vd,vb",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x20, 0x1c"
"    0x10: v10(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf(0x10000000000000000000000000000000000000000), v9(0x1)",0x0,v10,"0,vf,v9",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x20, 0x1c"
    0x11: v11(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v10(0xffffffffffffffffffffffffffffffffffffffff),0x0,v11,"0,v10",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0x20, 0x1c"
"    0x12: v12 = AND v11(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v8",0x0,v12,"0,v11,v8",AND,0,0,False,0,0,"0x20, 0x1c"
"    0x14: SSTORE v5(0x9c), v12",0x0,0,"0,v5,v12",SSTORE,0,0,False,0,0,"0x20, 0x1c"
    0x15: v15 = CALLVALUE ,0x0,v15,0,CALLVALUE,0,0,False,0,0,"0x20, 0x1c"
    0x17: v17 = ISZERO v15,0x0,v17,"0,v15",ISZERO,0,0,False,0,0,"0x20, 0x1c"
    0x18: v18(0x20) = CONST ,0x0,v18,0,CONST,0,0,False,0x20,0,"0x20, 0x1c"
"    0x1b: JUMPI v18(0x20), v17",0x0,0,"0,v18,v17",JUMPI,0,0,False,0,0,"0x20, 0x1c"
    Begin block 0x20,0x20,0,0,0,0,0,False,0,0,"0x20, 0x1c"
"    prev=[0x0], succ=[]",0x20,0,0,0,0,0,False,0,0,"0x20, 0x1c"
    =================================,0x20,0,0,0,0,0,False,0,0,"0x20, 0x1c"
    0x22: v22(0x7f8) = CONST ,0x20,v22,0,CONST,0,0,False,0x7f8,0,"0x20, 0x1c"
    0x26: v26(0x30) = CONST ,0x20,v26,0,CONST,0,0,False,0x30,0,"0x20, 0x1c"
    0x29: v29(0x0) = CONST ,0x20,v29,0,CONST,0,0,False,0x0,0,"0x20, 0x1c"
"    0x2b: CODECOPY v29(0x0), v26(0x30), v22(0x7f8)",0x20,0,"0,v29,v26,v22",CODECOPY,0,0,False,0,0,"0x20, 0x1c"
    0x2c: v2c(0x0) = CONST ,0x20,v2c,0,CONST,0,0,False,0x0,0,"0x20, 0x1c"
"    0x2e: RETURN v2c(0x0), v22(0x7f8)",0x20,0,"0,v2c,v22",RETURN,0,0,False,0,0,"0x20, 0x1c"
    Begin block 0x1c,0x1c,0,0,0,0,0,False,0,0,"0x20, 0x1c"
"    prev=[0x0], succ=[]",0x1c,0,0,0,0,0,False,0,0,"0x20, 0x1c"
    =================================,0x1c,0,0,0,0,0,False,0,0,"0x20, 0x1c"
    0x1c: v1c(0x0) = CONST ,0x1c,v1c,0,CONST,0,0,False,0x0,0,"0x20, 0x1c"
"    0x1f: REVERT v1c(0x0), v1c(0x0)",0x1c,0,"0,v1c,v1c",REVERT,0,0,False,0,0,"0x20, 0x1c"
},0x1c,0,0,0,0,0,False,0,0,"0x20, 0x1c"
