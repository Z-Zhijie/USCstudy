3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x26, 0x2a]",0x0,0,0,0,0,0,False,0,0,"0x26, 0x2a"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x26, 0x2a"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x26, 0x2a"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x26, 0x2a"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x26, 0x2a"
    0x5: v5(0x5) = CONST ,0x0,v5,0,CONST,0,0,False,0x5,0,"0x26, 0x2a"
    0x8: v8 = SLOAD v5(0x5),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x26, 0x2a"
    0x9: v9(0xff) = CONST ,0x0,v9,0,CONST,0,0,False,0xff,0,"0x26, 0x2a"
    0xb: vb(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v9(0xff),0x0,vb,"0,v9",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00,0,"0x26, 0x2a"
"    0xc: vc = AND vb(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), v8",0x0,vc,"0,vb,v8",AND,0,0,False,0,0,"0x26, 0x2a"
"    0xe: SSTORE v5(0x5), vc",0x0,0,"0,v5,vc",SSTORE,0,0,False,0,0,"0x26, 0x2a"
    0xf: vf(0x0) = CONST ,0x0,vf,0,CONST,0,0,False,0x0,0,"0x26, 0x2a"
    0x11: v11(0x6) = CONST ,0x0,v11,0,CONST,0,0,False,0x6,0,"0x26, 0x2a"
"    0x15: SSTORE v11(0x6), vf(0x0)",0x0,0,"0,v11,vf",SSTORE,0,0,False,0,0,"0x26, 0x2a"
    0x16: v16(0x7) = CONST ,0x0,v16,0,CONST,0,0,False,0x7,0,"0x26, 0x2a"
"    0x18: SSTORE v16(0x7), vf(0x0)",0x0,0,"0,v16,vf",SSTORE,0,0,False,0,0,"0x26, 0x2a"
    0x19: v19(0x3e8) = CONST ,0x0,v19,0,CONST,0,0,False,0x3e8,0,"0x26, 0x2a"
    0x1c: v1c(0x15) = CONST ,0x0,v1c,0,CONST,0,0,False,0x15,0,"0x26, 0x2a"
"    0x1e: SSTORE v1c(0x15), v19(0x3e8)",0x0,0,"0,v1c,v19",SSTORE,0,0,False,0,0,"0x26, 0x2a"
    0x1f: v1f = CALLVALUE ,0x0,v1f,0,CALLVALUE,0,0,False,0,0,"0x26, 0x2a"
    0x21: v21 = ISZERO v1f,0x0,v21,"0,v1f",ISZERO,0,0,False,0,0,"0x26, 0x2a"
    0x22: v22(0x2a) = CONST ,0x0,v22,0,CONST,0,0,False,0x2a,0,"0x26, 0x2a"
"    0x25: JUMPI v22(0x2a), v21",0x0,0,"0,v22,v21",JUMPI,0,0,False,0,0,"0x26, 0x2a"
    Begin block 0x26,0x26,0,0,0,0,0,False,0,0,"0x26, 0x2a"
"    prev=[0x0], succ=[]",0x26,0,0,0,0,0,False,0,0,"0x26, 0x2a"
    =================================,0x26,0,0,0,0,0,False,0,0,"0x26, 0x2a"
    0x26: v26(0x0) = CONST ,0x26,v26,0,CONST,0,0,False,0x0,0,"0x26, 0x2a"
"    0x29: REVERT v26(0x0), v26(0x0)",0x26,0,"0,v26,v26",REVERT,0,0,False,0,0,"0x26, 0x2a"
    Begin block 0x2a,0x2a,0,0,0,0,0,False,0,0,"0x26, 0x2a"
"    prev=[0x0], succ=[]",0x2a,0,0,0,0,0,False,0,0,"0x26, 0x2a"
    =================================,0x2a,0,0,0,0,0,False,0,0,"0x26, 0x2a"
    0x2c: v2c(0x0) = CONST ,0x2a,v2c,0,CONST,0,0,False,0x0,0,"0x26, 0x2a"
    0x2f: v2f = SLOAD v2c(0x0),0x2a,v2f,"0,v2c",SLOAD,0,0,False,0,0,"0x26, 0x2a"
    0x30: v30(0x1) = CONST ,0x2a,v30,0,CONST,0,0,False,0x1,0,"0x26, 0x2a"
    0x32: v32(0x1) = CONST ,0x2a,v32,0,CONST,0,0,False,0x1,0,"0x26, 0x2a"
    0x34: v34(0xa0) = CONST ,0x2a,v34,0,CONST,0,0,False,0xa0,0,"0x26, 0x2a"
"    0x36: v36(0x10000000000000000000000000000000000000000) = SHL v34(0xa0), v32(0x1)",0x2a,v36,"0,v34,v32",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x26, 0x2a"
"    0x37: v37(0xffffffffffffffffffffffffffffffffffffffff) = SUB v36(0x10000000000000000000000000000000000000000), v30(0x1)",0x2a,v37,"0,v36,v30",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x26, 0x2a"
    0x38: v38(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v37(0xffffffffffffffffffffffffffffffffffffffff),0x2a,v38,"0,v37",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0x26, 0x2a"
"    0x39: v39 = AND v38(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v2f",0x2a,v39,"0,v38,v2f",AND,0,0,False,0,0,"0x26, 0x2a"
    0x3a: v3a = CALLER ,0x2a,v3a,0,CALLER,0,0,True,0,0,"0x26, 0x2a"
"    0x3b: v3b = OR v3a, v39",0x2a,v3b,"0,v3a,v39",OR,0,0,True,0,0,"0x26, 0x2a"
"    0x3e: SSTORE v2c(0x0), v3b",0x2a,0,"0,v2c,v3b",SSTORE,0,0,False,0,0,"0x26, 0x2a"
    0x3f: v3f(0x40) = CONST ,0x2a,v3f,0,CONST,0,0,False,0x40,0,"0x26, 0x2a"
    0x41: v41 = MLOAD v3f(0x40),0x2a,v41,"0,v3f",MLOAD,0,0,False,0,0&m0x40,"0x26, 0x2a"
    0x42: v42(0x1) = CONST ,0x2a,v42,0,CONST,0,0,False,0x1,0,"0x26, 0x2a"
    0x44: v44(0x1) = CONST ,0x2a,v44,0,CONST,0,0,False,0x1,0,"0x26, 0x2a"
    0x46: v46(0xa0) = CONST ,0x2a,v46,0,CONST,0,0,False,0xa0,0,"0x26, 0x2a"
"    0x48: v48(0x10000000000000000000000000000000000000000) = SHL v46(0xa0), v44(0x1)",0x2a,v48,"0,v46,v44",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x26, 0x2a"
"    0x49: v49(0xffffffffffffffffffffffffffffffffffffffff) = SUB v48(0x10000000000000000000000000000000000000000), v42(0x1)",0x2a,v49,"0,v48,v42",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x26, 0x2a"
"    0x4d: v4d = AND v49(0xffffffffffffffffffffffffffffffffffffffff), v3b",0x2a,v4d,"0,v49,v3b",AND,0,0,True,0,0,"0x26, 0x2a"
    0x50: v50(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST ,0x2a,v50,0,CONST,0,0,False,0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0,0,"0x26, 0x2a"
"    0x74: LOG3 v41, v2c(0x0), v50(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v2c(0x0), v4d",0x2a,0,"0,v41,v2c,v50,v2c,v4d",LOG3,0,0,False,0,0,"0x26, 0x2a"
    0x75: v75(0x2907) = CONST ,0x2a,v75,0,CONST,0,0,False,0x2907,0,"0x26, 0x2a"
    0x79: v79(0x83) = CONST ,0x2a,v79,0,CONST,0,0,False,0x83,0,"0x26, 0x2a"
    0x7c: v7c(0x0) = CONST ,0x2a,v7c,0,CONST,0,0,False,0x0,0,"0x26, 0x2a"
"    0x7e: CODECOPY v7c(0x0), v79(0x83), v75(0x2907)",0x2a,0,"0,v7c,v79,v75",CODECOPY,0,0,False,0,0,"0x26, 0x2a"
    0x7f: v7f(0x0) = CONST ,0x2a,v7f,0,CONST,0,0,False,0x0,0,"0x26, 0x2a"
"    0x81: RETURN v7f(0x0), v75(0x2907)",0x2a,0,"0,v7f,v75",RETURN,0,0,False,0,0,"0x26, 0x2a"
},0x2a,0,0,0,0,0,False,0,0,"0x26, 0x2a"
