3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x12: v12(0x1) = CONST ,0x10,v12,0,CONST,0,0,False,0x1,0,"0xc, 0x10"
    0x14: v14(0x0) = CONST ,0x10,v14,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
    0x17: v17(0x100) = CONST ,0x10,v17,0,CONST,0,0,False,0x100,0,"0xc, 0x10"
"    0x1a: v1a(0x1) = EXP v17(0x100), v14(0x0)",0x10,v1a,"0,v17,v14",EXP,0,0,False,0x1,0,"0xc, 0x10"
    0x1c: v1c = SLOAD v14(0x0),0x10,v1c,"0,v14",SLOAD,0,0,False,0,0,"0xc, 0x10"
    0x1e: v1e(0xff) = CONST ,0x10,v1e,0,CONST,0,0,False,0xff,0,"0xc, 0x10"
"    0x20: v20(0xff) = MUL v1e(0xff), v1a(0x1)",0x10,v20,"0,v1e,v1a",MUL,0,0,False,0xff,0,"0xc, 0x10"
    0x21: v21(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v20(0xff),0x10,v21,"0,v20",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00,0,"0xc, 0x10"
"    0x22: v22 = AND v21(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), v1c",0x10,v22,"0,v21,v1c",AND,0,0,False,0,0,"0xc, 0x10"
    0x25: v25(0x0) = ISZERO v12(0x1),0x10,v25,"0,v12",ISZERO,0,0,False,0x0,0,"0xc, 0x10"
    0x26: v26(0x1) = ISZERO v25(0x0),0x10,v26,"0,v25",ISZERO,0,0,False,0x1,0,"0xc, 0x10"
"    0x27: v27(0x1) = MUL v26(0x1), v1a(0x1)",0x10,v27,"0,v26,v1a",MUL,0,0,False,0x1,0,"0xc, 0x10"
"    0x28: v28 = OR v27(0x1), v22",0x10,v28,"0,v27,v22",OR,0,0,False,0,0,"0xc, 0x10"
"    0x2a: SSTORE v14(0x0), v28",0x10,0,"0,v14,v28",SSTORE,0,0,False,0,0,"0xc, 0x10"
    0x2c: v2c(0x4c77) = CONST ,0x10,v2c,0,CONST,0,0,False,0x4c77,0,"0xc, 0x10"
    0x30: v30(0x3a) = CONST ,0x10,v30,0,CONST,0,0,False,0x3a,0,"0xc, 0x10"
    0x33: v33(0x0) = CONST ,0x10,v33,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0x35: CODECOPY v33(0x0), v30(0x3a), v2c(0x4c77)",0x10,0,"0,v33,v30,v2c",CODECOPY,0,0,False,0,0,"0xc, 0x10"
    0x36: v36(0x0) = CONST ,0x10,v36,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0x38: RETURN v36(0x0), v2c(0x4c77)",0x10,0,"0,v36,v2c",RETURN,0,0,False,0,0,"0xc, 0x10"
},0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
