3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0x10]",0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0x10"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0x10"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0x10"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xc, 0x10"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xc, 0x10"
    0x8: v8(0x10) = CONST ,0x0,v8,0,CONST,0,0,False,0x10,0,"0xc, 0x10"
"    0xb: JUMPI v8(0x10), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xc, 0x10"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[]",0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xc, 0x10"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xc, 0x10"
"    0xf: REVERT vc(0x0), vc(0x0)",0xc,0,"0,vc,vc",REVERT,0,0,False,0,0,"0xc, 0x10"
    Begin block 0x10,0x10,0,0,0,0,0,False,0,0,"0xc, 0x10"
"    prev=[0x0], succ=[0x2a, 0x22]",0x10,0,0,0,0,0,False,0,0,"0x2a, 0x22"
    =================================,0x10,0,0,0,0,0,False,0,0,"0x2a, 0x22"
    0x12: v12(0x0) = CONST ,0x10,v12,0,CONST,0,0,False,0x0,0,"0x2a, 0x22"
    0x14: v14 = SLOAD v12(0x0),0x10,v14,"0,v12",SLOAD,0,0,False,0,0,"0x2a, 0x22"
    0x15: v15(0x100) = CONST ,0x10,v15,0,CONST,0,0,False,0x100,0,"0x2a, 0x22"
"    0x19: v19 = DIV v14, v15(0x100)",0x10,v19,"0,v14,v15",DIV,0,0,False,0,0,"0x2a, 0x22"
    0x1a: v1a(0xff) = CONST ,0x10,v1a,0,CONST,0,0,False,0xff,0,"0x2a, 0x22"
"    0x1c: v1c = AND v1a(0xff), v19",0x10,v1c,"0,v1a,v19",AND,0,0,False,0,0,"0x2a, 0x22"
    0x1e: v1e(0x2a) = CONST ,0x10,v1e,0,CONST,0,0,False,0x2a,0,"0x2a, 0x22"
"    0x21: JUMPI v1e(0x2a), v1c",0x10,0,"0,v1e,v1c",JUMPI,0,0,False,0,0,"0x2a, 0x22"
    Begin block 0x2a,0x2a,0,0,0,0,0,False,0,0,"0x2a, 0x22"
"    prev=[0x10, 0x22], succ=[0x2f, 0x91]",0x2a,0,0,0,0,0,False,0,0,"0x2f, 0x91"
    =================================,0x2a,0,0,0,0,0,False,0,0,"0x2f, 0x91"
"    0x2a_0x0: v2a_0 = PHI v1c, v29",0x2a,v2a_0,"0,v1c,v29",PHI,0,0,False,0,0,"0x2f, 0x91"
    0x2b: v2b(0x91) = CONST ,0x2a,v2b,0,CONST,0,0,False,0x91,0,"0x2f, 0x91"
"    0x2e: JUMPI v2b(0x91), v2a_0",0x2a,0,"0,v2b,v2a_0",JUMPI,0,0,False,0,0,"0x2f, 0x91"
    Begin block 0x2f,0x2f,0,0,0,0,0,False,0,0,"0x2f, 0x91"
"    prev=[0x2a], succ=[]",0x2f,0,0,0,0,0,False,0,0,"0x2f, 0x91"
    =================================,0x2f,0,0,0,0,0,False,0,0,"0x2f, 0x91"
    0x2f: v2f(0x40) = CONST ,0x2f,v2f,0,CONST,0,0,False,0x40,0,"0x2f, 0x91"
    0x31: v31 = MLOAD v2f(0x40),0x2f,v31,"0,v2f",MLOAD,0,0,False,0,0&m0x40,"0x2f, 0x91"
    0x32: v32(0x461bcd) = CONST ,0x2f,v32,0,CONST,0,0,False,0x461bcd,0,"0x2f, 0x91"
    0x36: v36(0xe5) = CONST ,0x2f,v36,0,CONST,0,0,False,0xe5,0,"0x2f, 0x91"
"    0x38: v38(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v36(0xe5), v32(0x461bcd)",0x2f,v38,"0,v36,v32",SHL,0,0,False,0x8c379a000000000000000000000000000000000000000000000000000000000,0,"0x2f, 0x91"
"    0x3a: MSTORE v31, v38(0x8c379a000000000000000000000000000000000000000000000000000000000)",0x2f,0&m0x40,"0,v31,v38",MSTORE,0,0,False,0,0&m0x40,"0x2f, 0x91"
    0x3b: v3b(0x20) = CONST ,0x2f,v3b,0,CONST,0,0,False,0x20,0,"0x2f, 0x91"
    0x3d: v3d(0x4) = CONST ,0x2f,v3d,0,CONST,0,0,False,0x4,0,"0x2f, 0x91"
"    0x40: v40 = ADD v31, v3d(0x4)",0x2f,v40,"0,v31,v3d",ADD,0,0,False,0,0&m0x40+0x4,"0x2f, 0x91"
"    0x41: MSTORE v40, v3b(0x20)",0x2f,0&m0x40+0x4,"0,v40,v3b",MSTORE,0,0,False,0,0&m0x40+0x4,"0x2f, 0x91"
    0x42: v42(0x2e) = CONST ,0x2f,v42,0,CONST,0,0,False,0x2e,0,"0x2f, 0x91"
    0x44: v44(0x24) = CONST ,0x2f,v44,0,CONST,0,0,False,0x24,0,"0x2f, 0x91"
"    0x47: v47 = ADD v31, v44(0x24)",0x2f,v47,"0,v31,v44",ADD,0,0,False,0,0&m0x40+0x24,"0x2f, 0x91"
"    0x48: MSTORE v47, v42(0x2e)",0x2f,0&m0x40+0x24,"0,v47,v42",MSTORE,0,0,False,0,0&m0x40+0x24,"0x2f, 0x91"
    0x49: v49(0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561) = CONST ,0x2f,v49,0,CONST,0,0,False,0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561,0,"0x2f, 0x91"
    0x6a: v6a(0x44) = CONST ,0x2f,v6a,0,CONST,0,0,False,0x44,0,"0x2f, 0x91"
"    0x6d: v6d = ADD v31, v6a(0x44)",0x2f,v6d,"0,v31,v6a",ADD,0,0,False,0,0&m0x40+0x44,"0x2f, 0x91"
"    0x6e: MSTORE v6d, v49(0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561)",0x2f,0&m0x40+0x44,"0,v6d,v49",MSTORE,0,0,False,0,0&m0x40+0x44,"0x2f, 0x91"
    0x6f: v6f(0x191e481a5b9a5d1a585b1a5e9959) = CONST ,0x2f,v6f,0,CONST,0,0,False,0x191e481a5b9a5d1a585b1a5e9959,0,"0x2f, 0x91"
    0x7e: v7e(0x92) = CONST ,0x2f,v7e,0,CONST,0,0,False,0x92,0,"0x2f, 0x91"
"    0x80: v80(0x647920696e697469616c697a6564000000000000000000000000000000000000) = SHL v7e(0x92), v6f(0x191e481a5b9a5d1a585b1a5e9959)",0x2f,v80,"0,v7e,v6f",SHL,0,0,False,0x647920696e697469616c697a6564000000000000000000000000000000000000,0,"0x2f, 0x91"
    0x81: v81(0x64) = CONST ,0x2f,v81,0,CONST,0,0,False,0x64,0,"0x2f, 0x91"
"    0x84: v84 = ADD v31, v81(0x64)",0x2f,v84,"0,v31,v81",ADD,0,0,False,0,0&m0x40+0x64,"0x2f, 0x91"
"    0x85: MSTORE v84, v80(0x647920696e697469616c697a6564000000000000000000000000000000000000)",0x2f,0&m0x40+0x64,"0,v84,v80",MSTORE,0,0,False,0,0&m0x40+0x64,"0x2f, 0x91"
    0x86: v86(0x84) = CONST ,0x2f,v86,0,CONST,0,0,False,0x84,0,"0x2f, 0x91"
"    0x88: v88 = ADD v86(0x84), v31",0x2f,v88,"0,v86,v31",ADD,0,0,False,0,0&m0x40+0x84,"0x2f, 0x91"
    0x89: v89(0x40) = CONST ,0x2f,v89,0,CONST,0,0,False,0x40,0,"0x2f, 0x91"
    0x8b: v8b = MLOAD v89(0x40),0x2f,v8b,"0,v89",MLOAD,0,0,False,0,0&m0x40,"0x2f, 0x91"
"    0x8e: v8e(0x84) = SUB v88, v8b",0x2f,v8e,"0,v88,v8b",SUB,0,0,False,0x84,0&m0x40+0x84-0x84,"0x2f, 0x91"
"    0x90: REVERT v8b, v8e(0x84)",0x2f,0,"0,v8b,v8e",REVERT,0,0,False,0,0,"0x2f, 0x91"
    Begin block 0x91,0x91,0,0,0,0,0,False,0,0,"0x2f, 0x91"
"    prev=[0x2a], succ=[0xa4, 0xb3]",0x91,0,0,0,0,0,False,0,0,"0xa4, 0xb3"
    =================================,0x91,0,0,0,0,0,False,0,0,"0xa4, 0xb3"
    0x92: v92(0x0) = CONST ,0x91,v92,0,CONST,0,0,False,0x0,0,"0xa4, 0xb3"
    0x94: v94 = SLOAD v92(0x0),0x91,v94,"0,v92",SLOAD,0,0,False,0,0,"0xa4, 0xb3"
    0x95: v95(0x100) = CONST ,0x91,v95,0,CONST,0,0,False,0x100,0,"0xa4, 0xb3"
"    0x99: v99 = DIV v94, v95(0x100)",0x91,v99,"0,v94,v95",DIV,0,0,False,0,0,"0xa4, 0xb3"
    0x9a: v9a(0xff) = CONST ,0x91,v9a,0,CONST,0,0,False,0xff,0,"0xa4, 0xb3"
"    0x9c: v9c = AND v9a(0xff), v99",0x91,v9c,"0,v9a,v99",AND,0,0,False,0,0,"0xa4, 0xb3"
    0x9d: v9d = ISZERO v9c,0x91,v9d,"0,v9c",ISZERO,0,0,False,0,0,"0xa4, 0xb3"
    0x9f: v9f = ISZERO v9d,0x91,v9f,"0,v9d",ISZERO,0,0,False,0,0,"0xa4, 0xb3"
    0xa0: va0(0xb3) = CONST ,0x91,va0,0,CONST,0,0,False,0xb3,0,"0xa4, 0xb3"
"    0xa3: JUMPI va0(0xb3), v9f",0x91,0,"0,va0,v9f",JUMPI,0,0,False,0,0,"0xa4, 0xb3"
    Begin block 0xa4,0xa4,0,0,0,0,0,False,0,0,"0xa4, 0xb3"
"    prev=[0x91], succ=[0xb3]",0xa4,0,0,0,0,0,False,0,0,0xb3
    =================================,0xa4,0,0,0,0,0,False,0,0,0xb3
    0xa4: va4(0x0) = CONST ,0xa4,va4,0,CONST,0,0,False,0x0,0,0xb3
    0xa7: va7 = SLOAD va4(0x0),0xa4,va7,"0,va4",SLOAD,0,0,False,0,0,0xb3
    0xa8: va8(0xffff) = CONST ,0xa4,va8,0,CONST,0,0,False,0xffff,0,0xb3
    0xab: vab(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000) = NOT va8(0xffff),0xa4,vab,"0,va8",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000,0,0xb3
"    0xac: vac = AND vab(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000), va7",0xa4,vac,"0,vab,va7",AND,0,0,False,0,0,0xb3
    0xad: vad(0x101) = CONST ,0xa4,vad,0,CONST,0,0,False,0x101,0,0xb3
"    0xb0: vb0 = OR vad(0x101), vac",0xa4,vb0,"0,vad,vac",OR,0,0,False,0,0,0xb3
"    0xb2: SSTORE va4(0x0), vb0",0xa4,0,"0,va4,vb0",SSTORE,0,0,False,0,0,0xb3
    Begin block 0xb3,0xb3,0,0,0,0,0,False,0,0,0xb3
"    prev=[0xa4, 0x91], succ=[0xba, 0xc5]",0xb3,0,0,0,0,0,False,0,0,"0xba, 0xc5"
    =================================,0xb3,0,0,0,0,0,False,0,0,"0xba, 0xc5"
    0xb5: vb5 = ISZERO v9d,0xb3,vb5,"0,v9d",ISZERO,0,0,False,0,0,"0xba, 0xc5"
    0xb6: vb6(0xc5) = CONST ,0xb3,vb6,0,CONST,0,0,False,0xc5,0,"0xba, 0xc5"
"    0xb9: JUMPI vb6(0xc5), vb5",0xb3,0,"0,vb6,vb5",JUMPI,0,0,False,0,0,"0xba, 0xc5"
    Begin block 0xba,0xba,0,0,0,0,0,False,0,0,"0xba, 0xc5"
"    prev=[0xb3], succ=[0xc5]",0xba,0,0,0,0,0,False,0,0,0xc5
    =================================,0xba,0,0,0,0,0,False,0,0,0xc5
    0xba: vba(0x0) = CONST ,0xba,vba,0,CONST,0,0,False,0x0,0,0xc5
    0xbd: vbd = SLOAD vba(0x0),0xba,vbd,"0,vba",SLOAD,0,0,False,0,0,0xc5
    0xbe: vbe(0xff00) = CONST ,0xba,vbe,0,CONST,0,0,False,0xff00,0,0xc5
    0xc1: vc1(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vbe(0xff00),0xba,vc1,"0,vbe",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff,0,0xc5
"    0xc2: vc2 = AND vc1(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vbd",0xba,vc2,"0,vc1,vbd",AND,0,0,False,0,0,0xc5
"    0xc4: SSTORE vba(0x0), vc2",0xba,0,"0,vba,vc2",SSTORE,0,0,False,0,0,0xc5
    Begin block 0xc5,0xc5,0,0,0,0,0,False,0,0,0xc5
"    prev=[0xba, 0xb3], succ=[]",0xc5,0,0,0,0,0,False,0,0,0xc5
    =================================,0xc5,0,0,0,0,0,False,0,0,0xc5
    0xc7: vc7(0x99c) = CONST ,0xc5,vc7,0,CONST,0,0,False,0x99c,0,0xc5
    0xcb: vcb(0xd5) = CONST ,0xc5,vcb,0,CONST,0,0,False,0xd5,0,0xc5
    0xce: vce(0x0) = CONST ,0xc5,vce,0,CONST,0,0,False,0x0,0,0xc5
"    0xd0: CODECOPY vce(0x0), vcb(0xd5), vc7(0x99c)",0xc5,0,"0,vce,vcb,vc7",CODECOPY,0,0,False,0,0,0xc5
    0xd1: vd1(0x0) = CONST ,0xc5,vd1,0,CONST,0,0,False,0x0,0,0xc5
"    0xd3: RETURN vd1(0x0), vc7(0x99c)",0xc5,0,"0,vd1,vc7",RETURN,0,0,False,0,0,0xc5
    Begin block 0x22,0x22,0,0,0,0,0,False,0,0,0xc5
"    prev=[0x10], succ=[0x2a]",0x22,0,0,0,0,0,False,0,0,0x2a
    =================================,0x22,0,0,0,0,0,False,0,0,0x2a
    0x23: v23(0x0) = CONST ,0x22,v23,0,CONST,0,0,False,0x0,0,0x2a
    0x25: v25 = SLOAD v23(0x0),0x22,v25,"0,v23",SLOAD,0,0,False,0,0,0x2a
    0x26: v26(0xff) = CONST ,0x22,v26,0,CONST,0,0,False,0xff,0,0x2a
"    0x28: v28 = AND v26(0xff), v25",0x22,v28,"0,v26,v25",AND,0,0,False,0,0,0x2a
    0x29: v29 = ISZERO v28,0x22,v29,"0,v28",ISZERO,0,0,False,0,0,0x2a
},0x22,0,0,0,0,0,False,0,0,0x2a
