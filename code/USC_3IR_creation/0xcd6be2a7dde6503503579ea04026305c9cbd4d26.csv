3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x21]",0x0,0,0,0,0,0,False,0,0,0x21
    =================================,0x0,0,0,0,0,0,False,0,0,0x21
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,0x21
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,0x21
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,0x21
    0x5: v5(0x1c) = CONST ,0x0,v5,0,CONST,0,0,False,0x1c,0,0x21
    0x8: v8 = CALLER ,0x0,v8,0,CALLER,0,0,True,0,0,0x21
    0x9: v9(0x21) = CONST ,0x0,v9,0,CONST,0,0,False,0x21,0,0x21
    0xc: vc(0x100000000) = CONST ,0x0,vc,0,CONST,0,0,False,0x100000000,0,0x21
"    0x12: v12(0x2100000000) = MUL vc(0x100000000), v9(0x21)",0x0,v12,"0,vc,v9",MUL,0,0,False,0x2100000000,0,0x21
    0x13: v13(0x100000000) = CONST ,0x0,v13,0,CONST,0,0,False,0x100000000,0,0x21
"    0x1a: v1a(0x21) = DIV v12(0x2100000000), v13(0x100000000)",0x0,v1a,"0,v12,v13",DIV,0,0,False,0x21,0,0x21
    0x1b: JUMP v1a(0x21),0x0,0,"0,v1a",JUMP,0,0,False,0,0,0x21
    Begin block 0x21,0x21,0,0,0,0,0,False,0,0,0x21
"    prev=[0x0], succ=[0x1c]",0x21,0,0,0,0,0,False,0,0,0x1c
    =================================,0x21,0,0,0,0,0,False,0,0,0x1c
    0x23: v23(0x6) = CONST ,0x21,v23,0,CONST,0,0,False,0x6,0,0x1c
    0x25: v25(0x0) = CONST ,0x21,v25,0,CONST,0,0,False,0x0,0,0x1c
    0x27: v27(0x100) = CONST ,0x21,v27,0,CONST,0,0,False,0x100,0,0x1c
"    0x2a: v2a(0x1) = EXP v27(0x100), v25(0x0)",0x21,v2a,"0,v27,v25",EXP,0,0,False,0x1,0,0x1c
    0x2c: v2c = SLOAD v23(0x6),0x21,v2c,"0,v23",SLOAD,0,0,False,0,0,0x1c
    0x2e: v2e(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x21,v2e,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x1c
"    0x43: v43(0xffffffffffffffffffffffffffffffffffffffff) = MUL v2e(0xffffffffffffffffffffffffffffffffffffffff), v2a(0x1)",0x21,v43,"0,v2e,v2a",MUL,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x1c
    0x44: v44(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v43(0xffffffffffffffffffffffffffffffffffffffff),0x21,v44,"0,v43",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x1c
"    0x45: v45 = AND v44(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v2c",0x21,v45,"0,v44,v2c",AND,0,0,False,0,0,0x1c
    0x48: v48(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x21,v48,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x1c
"    0x5d: v5d = AND v48(0xffffffffffffffffffffffffffffffffffffffff), v8",0x21,v5d,"0,v48,v8",AND,0,0,True,0,0,0x1c
"    0x5e: v5e = MUL v5d, v2a(0x1)",0x21,v5e,"0,v5d,v2a",MUL,0,0,False,0,0,0x1c
"    0x5f: v5f = OR v5e, v45",0x21,v5f,"0,v5e,v45",OR,0,0,False,0,0,0x1c
"    0x61: SSTORE v23(0x6), v5f",0x21,0,"0,v23,v5f",SSTORE,0,0,False,0,0,0x1c
    0x64: JUMP v5(0x1c),0x21,0,"0,v5",JUMP,0,0,False,0,0,0x1c
    Begin block 0x1c,0x1c,0,0,0,0,0,False,0,0,0x1c
"    prev=[0x21], succ=[0x65]",0x1c,0,0,0,0,0,False,0,0,0x65
    =================================,0x1c,0,0,0,0,0,False,0,0,0x65
    0x1d: v1d(0x65) = CONST ,0x1c,v1d,0,CONST,0,0,False,0x65,0,0x65
    0x20: JUMP v1d(0x65),0x1c,0,"0,v1d",JUMP,0,0,False,0,0,0x65
    Begin block 0x65,0x65,0,0,0,0,0,False,0,0,0x65
"    prev=[0x1c], succ=[]",0x65,0,0,0,0,0,False,0,0,0x65
    =================================,0x65,0,0,0,0,0,False,0,0,0x65
    0x66: v66(0x6b9) = CONST ,0x65,v66,0,CONST,0,0,False,0x6b9,0,0x65
    0x6a: v6a(0x74) = CONST ,0x65,v6a,0,CONST,0,0,False,0x74,0,0x65
    0x6d: v6d(0x0) = CONST ,0x65,v6d,0,CONST,0,0,False,0x0,0,0x65
"    0x6f: CODECOPY v6d(0x0), v6a(0x74), v66(0x6b9)",0x65,0,"0,v6d,v6a,v66",CODECOPY,0,0,False,0,0,0x65
    0x70: v70(0x0) = CONST ,0x65,v70,0,CONST,0,0,False,0x0,0,0x65
"    0x72: RETURN v70(0x0), v66(0x6b9)",0x65,0,"0,v70,v66",RETURN,0,0,False,0,0,0x65
},0x65,0,0,0,0,0,False,0,0,0x65
