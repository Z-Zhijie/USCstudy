3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x2d, 0x31]",0x0,0,0,0,0,0,False,0,0,"0x2d, 0x31"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x2d, 0x31"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x2d, 0x31"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x2d, 0x31"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x2d, 0x31"
    0x5: v5(0x0) = CONST ,0x0,v5,0,CONST,0,0,False,0x0,0,"0x2d, 0x31"
    0x7: v7(0x1) = CONST ,0x0,v7,0,CONST,0,0,False,0x1,0,"0x2d, 0x31"
    0x9: v9(0x14) = CONST ,0x0,v9,0,CONST,0,0,False,0x14,0,"0x2d, 0x31"
    0xb: vb(0x100) = CONST ,0x0,vb,0,CONST,0,0,False,0x100,0,"0x2d, 0x31"
"    0xe: ve(0x10000000000000000000000000000000000000000) = EXP vb(0x100), v9(0x14)",0x0,ve,"0,vb,v9",EXP,0,0,False,0x10000000000000000000000000000000000000000,0,"0x2d, 0x31"
    0x10: v10 = SLOAD v7(0x1),0x0,v10,"0,v7",SLOAD,0,0,False,0,0,"0x2d, 0x31"
    0x12: v12(0xff) = CONST ,0x0,v12,0,CONST,0,0,False,0xff,0,"0x2d, 0x31"
"    0x14: v14(0xff0000000000000000000000000000000000000000) = MUL v12(0xff), ve(0x10000000000000000000000000000000000000000)",0x0,v14,"0,v12,ve",MUL,0,0,False,0xff0000000000000000000000000000000000000000,0,"0x2d, 0x31"
    0x15: v15(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT v14(0xff0000000000000000000000000000000000000000),0x0,v15,"0,v14",NOT,0,0,False,0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff,0,"0x2d, 0x31"
"    0x16: v16 = AND v15(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff), v10",0x0,v16,"0,v15,v10",AND,0,0,False,0,0,"0x2d, 0x31"
    0x19: v19(0x1) = ISZERO v5(0x0),0x0,v19,"0,v5",ISZERO,0,0,False,0x1,0,"0x2d, 0x31"
    0x1a: v1a(0x0) = ISZERO v19(0x1),0x0,v1a,"0,v19",ISZERO,0,0,False,0x0,0,"0x2d, 0x31"
"    0x1b: v1b(0x0) = MUL v1a(0x0), ve(0x10000000000000000000000000000000000000000)",0x0,v1b,"0,v1a,ve",MUL,0,0,False,0x0,0,"0x2d, 0x31"
"    0x1c: v1c = OR v1b(0x0), v16",0x0,v1c,"0,v1b,v16",OR,0,0,False,0,0,"0x2d, 0x31"
"    0x1e: SSTORE v7(0x1), v1c",0x0,0,"0,v7,v1c",SSTORE,0,0,False,0,0,"0x2d, 0x31"
    0x20: v20(0x0) = CONST ,0x0,v20,0,CONST,0,0,False,0x0,0,"0x2d, 0x31"
    0x22: v22(0xb) = CONST ,0x0,v22,0,CONST,0,0,False,0xb,0,"0x2d, 0x31"
"    0x24: SSTORE v22(0xb), v20(0x0)",0x0,0,"0,v22,v20",SSTORE,0,0,False,0,0,"0x2d, 0x31"
    0x25: v25 = CALLVALUE ,0x0,v25,0,CALLVALUE,0,0,False,0,0,"0x2d, 0x31"
    0x27: v27 = ISZERO v25,0x0,v27,"0,v25",ISZERO,0,0,False,0,0,"0x2d, 0x31"
    0x28: v28(0x31) = CONST ,0x0,v28,0,CONST,0,0,False,0x31,0,"0x2d, 0x31"
"    0x2c: JUMPI v28(0x31), v27",0x0,0,"0,v28,v27",JUMPI,0,0,False,0,0,"0x2d, 0x31"
    Begin block 0x2d,0x2d,0,0,0,0,0,False,0,0,"0x2d, 0x31"
"    prev=[0x0], succ=[]",0x2d,0,0,0,0,0,False,0,0,"0x2d, 0x31"
    =================================,0x2d,0,0,0,0,0,False,0,0,"0x2d, 0x31"
    0x2d: v2d(0x0) = CONST ,0x2d,v2d,0,CONST,0,0,False,0x0,0,"0x2d, 0x31"
"    0x30: REVERT v2d(0x0), v2d(0x0)",0x2d,0,"0,v2d,v2d",REVERT,0,0,False,0,0,"0x2d, 0x31"
    Begin block 0x31,0x31,0,0,0,0,0,False,0,0,"0x2d, 0x31"
"    prev=[0x0], succ=[0x49]",0x31,0,0,0,0,0,False,0,0,0x49
    =================================,0x31,0,0,0,0,0,False,0,0,0x49
    0x33: v33(0x43) = CONST ,0x31,v33,0,CONST,0,0,False,0x43,0,0x49
    0x37: v37 = CALLER ,0x31,v37,0,CALLER,0,0,True,0,0,0x49
    0x38: v38(0x49) = CONST ,0x31,v38,0,CONST,0,0,False,0x49,0,0x49
    0x3c: v3c(0x20) = CONST ,0x31,v3c,0,CONST,0,0,False,0x20,0,0x49
"    0x3e: v3e(0x4900000000) = SHL v3c(0x20), v38(0x49)",0x31,v3e,"0,v3c,v38",SHL,0,0,False,0x4900000000,0,0x49
    0x3f: v3f(0x20) = CONST ,0x31,v3f,0,CONST,0,0,False,0x20,0,0x49
"    0x41: v41(0x49) = SHR v3f(0x20), v3e(0x4900000000)",0x31,v41,"0,v3f,v3e",SHR,0,0,False,0x49,0,0x49
    0x42: JUMP v41(0x49),0x31,0,"0,v41",JUMP,0,0,False,0,0,0x49
    Begin block 0x49,0x49,0,0,0,0,0,False,0,0,0x49
"    prev=[0x31], succ=[0x43]",0x49,0,0,0,0,0,False,0,0,0x43
    =================================,0x49,0,0,0,0,0,False,0,0,0x43
    0x4b: v4b(0x0) = CONST ,0x49,v4b,0,CONST,0,0,False,0x0,0,0x43
    0x4e: v4e(0x100) = CONST ,0x49,v4e,0,CONST,0,0,False,0x100,0,0x43
"    0x51: v51(0x1) = EXP v4e(0x100), v4b(0x0)",0x49,v51,"0,v4e,v4b",EXP,0,0,False,0x1,0,0x43
    0x53: v53 = SLOAD v4b(0x0),0x49,v53,"0,v4b",SLOAD,0,0,False,0,0,0x43
    0x55: v55(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x49,v55,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x43
"    0x6a: v6a(0xffffffffffffffffffffffffffffffffffffffff) = MUL v55(0xffffffffffffffffffffffffffffffffffffffff), v51(0x1)",0x49,v6a,"0,v55,v51",MUL,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x43
    0x6b: v6b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v6a(0xffffffffffffffffffffffffffffffffffffffff),0x49,v6b,"0,v6a",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,0x43
"    0x6c: v6c = AND v6b(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v53",0x49,v6c,"0,v6b,v53",AND,0,0,False,0,0,0x43
    0x6f: v6f(0xffffffffffffffffffffffffffffffffffffffff) = CONST ,0x49,v6f,0,CONST,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x43
"    0x84: v84 = AND v6f(0xffffffffffffffffffffffffffffffffffffffff), v37",0x49,v84,"0,v6f,v37",AND,0,0,True,0,0,0x43
"    0x85: v85 = MUL v84, v51(0x1)",0x49,v85,"0,v84,v51",MUL,0,0,False,0,0,0x43
"    0x86: v86 = OR v85, v6c",0x49,v86,"0,v85,v6c",OR,0,0,False,0,0,0x43
"    0x88: SSTORE v4b(0x0), v86",0x49,0,"0,v4b,v86",SSTORE,0,0,False,0,0,0x43
    0x8b: JUMP v33(0x43),0x49,0,"0,v33",JUMP,0,0,False,0,0,0x43
    Begin block 0x43,0x43,0,0,0,0,0,False,0,0,0x43
"    prev=[0x49], succ=[0x8c]",0x43,0,0,0,0,0,False,0,0,0x8c
    =================================,0x43,0,0,0,0,0,False,0,0,0x8c
    0x44: v44(0x8c) = CONST ,0x43,v44,0,CONST,0,0,False,0x8c,0,0x8c
    0x48: JUMP v44(0x8c),0x43,0,"0,v44",JUMP,0,0,False,0,0,0x8c
    Begin block 0x8c,0x8c,0,0,0,0,0,False,0,0,0x8c
"    prev=[0x43], succ=[]",0x8c,0,0,0,0,0,False,0,0,0x8c
    =================================,0x8c,0,0,0,0,0,False,0,0,0x8c
    0x8d: v8d(0x4af9) = CONST ,0x8c,v8d,0,CONST,0,0,False,0x4af9,0,0x8c
    0x91: v91(0x9c) = CONST ,0x8c,v91,0,CONST,0,0,False,0x9c,0,0x8c
    0x95: v95(0x0) = CONST ,0x8c,v95,0,CONST,0,0,False,0x0,0,0x8c
"    0x97: CODECOPY v95(0x0), v91(0x9c), v8d(0x4af9)",0x8c,0,"0,v95,v91,v8d",CODECOPY,0,0,False,0,0,0x8c
    0x98: v98(0x0) = CONST ,0x8c,v98,0,CONST,0,0,False,0x0,0,0x8c
"    0x9a: RETURN v98(0x0), v8d(0x4af9)",0x8c,0,"0,v98,v8d",RETURN,0,0,False,0,0,0x8c
},0x8c,0,0,0,0,0,False,0,0,0x8c
