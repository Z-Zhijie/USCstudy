3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x1e, 0x22]",0x0,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x1e, 0x22"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x1e, 0x22"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x5: v5(0x3) = CONST ,0x0,v5,0,CONST,0,0,False,0x3,0,"0x1e, 0x22"
    0x8: v8 = SLOAD v5(0x3),0x0,v8,"0,v5",SLOAD,0,0,False,0,0,"0x1e, 0x22"
    0x9: v9(0x1) = CONST ,0x0,v9,0,CONST,0,0,False,0x1,0,"0x1e, 0x22"
    0xb: vb(0x1) = CONST ,0x0,vb,0,CONST,0,0,False,0x1,0,"0x1e, 0x22"
    0xd: vd(0xa0) = CONST ,0x0,vd,0,CONST,0,0,False,0xa0,0,"0x1e, 0x22"
"    0xf: vf(0x10000000000000000000000000000000000000000) = SHL vd(0xa0), vb(0x1)",0x0,vf,"0,vd,vb",SHL,0,0,False,0x10000000000000000000000000000000000000000,0,"0x1e, 0x22"
"    0x10: v10(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf(0x10000000000000000000000000000000000000000), v9(0x1)",0x0,v10,"0,vf,v9",SUB,0,0,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x1e, 0x22"
    0x11: v11(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v10(0xffffffffffffffffffffffffffffffffffffffff),0x0,v11,"0,v10",NOT,0,0,False,0xffffffffffffffffffffffff0000000000000000000000000000000000000000,0,"0x1e, 0x22"
"    0x12: v12 = AND v11(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v8",0x0,v12,"0,v11,v8",AND,0,0,False,0,0,"0x1e, 0x22"
    0x13: v13 = CALLER ,0x0,v13,0,CALLER,0,0,True,0,0,"0x1e, 0x22"
"    0x14: v14 = OR v13, v12",0x0,v14,"0,v13,v12",OR,0,0,True,0,0,"0x1e, 0x22"
"    0x16: SSTORE v5(0x3), v14",0x0,0,"0,v5,v14",SSTORE,0,0,False,0,0,"0x1e, 0x22"
    0x17: v17 = CALLVALUE ,0x0,v17,0,CALLVALUE,0,0,False,0,0,"0x1e, 0x22"
    0x19: v19 = ISZERO v17,0x0,v19,"0,v17",ISZERO,0,0,False,0,0,"0x1e, 0x22"
    0x1a: v1a(0x22) = CONST ,0x0,v1a,0,CONST,0,0,False,0x22,0,"0x1e, 0x22"
"    0x1d: JUMPI v1a(0x22), v19",0x0,0,"0,v1a,v19",JUMPI,0,0,False,0,0,"0x1e, 0x22"
    Begin block 0x1e,0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
"    prev=[0x0], succ=[]",0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x1e,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x1e: v1e(0x0) = CONST ,0x1e,v1e,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
"    0x21: REVERT v1e(0x0), v1e(0x0)",0x1e,0,"0,v1e,v1e",REVERT,0,0,False,0,0,"0x1e, 0x22"
    Begin block 0x22,0x22,0,0,0,0,0,False,0,0,"0x1e, 0x22"
"    prev=[0x0], succ=[]",0x22,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    =================================,0x22,0,0,0,0,0,False,0,0,"0x1e, 0x22"
    0x24: v24(0x1628) = CONST ,0x22,v24,0,CONST,0,0,False,0x1628,0,"0x1e, 0x22"
    0x28: v28(0x32) = CONST ,0x22,v28,0,CONST,0,0,False,0x32,0,"0x1e, 0x22"
    0x2b: v2b(0x0) = CONST ,0x22,v2b,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
"    0x2d: CODECOPY v2b(0x0), v28(0x32), v24(0x1628)",0x22,0,"0,v2b,v28,v24",CODECOPY,0,0,False,0,0,"0x1e, 0x22"
    0x2e: v2e(0x0) = CONST ,0x22,v2e,0,CONST,0,0,False,0x0,0,"0x1e, 0x22"
"    0x30: RETURN v2e(0x0), v24(0x1628)",0x22,0,"0,v2e,v24",RETURN,0,0,False,0,0,"0x1e, 0x22"
},0x22,0,0,0,0,0,False,0,0,"0x1e, 0x22"
