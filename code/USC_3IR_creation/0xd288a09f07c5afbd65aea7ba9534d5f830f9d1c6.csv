3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xd, 0x11]",0x0,0,0,0,0,0,False,0,0,"0xd, 0x11"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xd, 0x11"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xd, 0x11"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xd, 0x11"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xd, 0x11"
    0x5: v5 = CALLVALUE ,0x0,v5,0,CALLVALUE,0,0,False,0,0,"0xd, 0x11"
    0x7: v7 = ISZERO v5,0x0,v7,"0,v5",ISZERO,0,0,False,0,0,"0xd, 0x11"
    0x8: v8(0x11) = CONST ,0x0,v8,0,CONST,0,0,False,0x11,0,"0xd, 0x11"
"    0xc: JUMPI v8(0x11), v7",0x0,0,"0,v8,v7",JUMPI,0,0,False,0,0,"0xd, 0x11"
    Begin block 0xd,0xd,0,0,0,0,0,False,0,0,"0xd, 0x11"
"    prev=[0x0], succ=[]",0xd,0,0,0,0,0,False,0,0,"0xd, 0x11"
    =================================,0xd,0,0,0,0,0,False,0,0,"0xd, 0x11"
    0xd: vd(0x0) = CONST ,0xd,vd,0,CONST,0,0,False,0x0,0,"0xd, 0x11"
"    0x10: REVERT vd(0x0), vd(0x0)",0xd,0,"0,vd,vd",REVERT,0,0,False,0,0,"0xd, 0x11"
    Begin block 0x11,0x11,0,0,0,0,0,False,0,0,"0xd, 0x11"
"    prev=[0x0], succ=[0x2c, 0x24]",0x11,0,0,0,0,0,False,0,0,"0x2c, 0x24"
    =================================,0x11,0,0,0,0,0,False,0,0,"0x2c, 0x24"
    0x13: v13(0x0) = CONST ,0x11,v13,0,CONST,0,0,False,0x0,0,"0x2c, 0x24"
    0x15: v15 = SLOAD v13(0x0),0x11,v15,"0,v13",SLOAD,0,0,False,0,0,"0x2c, 0x24"
    0x16: v16(0x100) = CONST ,0x11,v16,0,CONST,0,0,False,0x100,0,"0x2c, 0x24"
"    0x1a: v1a = DIV v15, v16(0x100)",0x11,v1a,"0,v15,v16",DIV,0,0,False,0,0,"0x2c, 0x24"
    0x1b: v1b(0xff) = CONST ,0x11,v1b,0,CONST,0,0,False,0xff,0,"0x2c, 0x24"
"    0x1d: v1d = AND v1b(0xff), v1a",0x11,v1d,"0,v1b,v1a",AND,0,0,False,0,0,"0x2c, 0x24"
    0x1f: v1f(0x2c) = CONST ,0x11,v1f,0,CONST,0,0,False,0x2c,0,"0x2c, 0x24"
"    0x23: JUMPI v1f(0x2c), v1d",0x11,0,"0,v1f,v1d",JUMPI,0,0,False,0,0,"0x2c, 0x24"
    Begin block 0x2c,0x2c,0,0,0,0,0,False,0,0,"0x2c, 0x24"
"    prev=[0x11, 0x24], succ=[0x32, 0x94]",0x2c,0,0,0,0,0,False,0,0,"0x32, 0x94"
    =================================,0x2c,0,0,0,0,0,False,0,0,"0x32, 0x94"
"    0x2c_0x0: v2c_0 = PHI v1d, v2b",0x2c,v2c_0,"0,v1d,v2b",PHI,0,0,False,0,0,"0x32, 0x94"
    0x2d: v2d(0x94) = CONST ,0x2c,v2d,0,CONST,0,0,False,0x94,0,"0x32, 0x94"
"    0x31: JUMPI v2d(0x94), v2c_0",0x2c,0,"0,v2d,v2c_0",JUMPI,0,0,False,0,0,"0x32, 0x94"
    Begin block 0x32,0x32,0,0,0,0,0,False,0,0,"0x32, 0x94"
"    prev=[0x2c], succ=[]",0x32,0,0,0,0,0,False,0,0,"0x32, 0x94"
    =================================,0x32,0,0,0,0,0,False,0,0,"0x32, 0x94"
    0x32: v32(0x40) = CONST ,0x32,v32,0,CONST,0,0,False,0x40,0,"0x32, 0x94"
    0x34: v34 = MLOAD v32(0x40),0x32,v34,"0,v32",MLOAD,0,0,False,0,0&m0x40,"0x32, 0x94"
    0x35: v35(0x461bcd) = CONST ,0x32,v35,0,CONST,0,0,False,0x461bcd,0,"0x32, 0x94"
    0x39: v39(0xe5) = CONST ,0x32,v39,0,CONST,0,0,False,0xe5,0,"0x32, 0x94"
"    0x3b: v3b(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v39(0xe5), v35(0x461bcd)",0x32,v3b,"0,v39,v35",SHL,0,0,False,0x8c379a000000000000000000000000000000000000000000000000000000000,0,"0x32, 0x94"
"    0x3d: MSTORE v34, v3b(0x8c379a000000000000000000000000000000000000000000000000000000000)",0x32,0&m0x40,"0,v34,v3b",MSTORE,0,0,False,0,0&m0x40,"0x32, 0x94"
    0x3e: v3e(0x20) = CONST ,0x32,v3e,0,CONST,0,0,False,0x20,0,"0x32, 0x94"
    0x40: v40(0x4) = CONST ,0x32,v40,0,CONST,0,0,False,0x4,0,"0x32, 0x94"
"    0x43: v43 = ADD v34, v40(0x4)",0x32,v43,"0,v34,v40",ADD,0,0,False,0,0&m0x40+0x4,"0x32, 0x94"
"    0x44: MSTORE v43, v3e(0x20)",0x32,0&m0x40+0x4,"0,v43,v3e",MSTORE,0,0,False,0,0&m0x40+0x4,"0x32, 0x94"
    0x45: v45(0x2e) = CONST ,0x32,v45,0,CONST,0,0,False,0x2e,0,"0x32, 0x94"
    0x47: v47(0x24) = CONST ,0x32,v47,0,CONST,0,0,False,0x24,0,"0x32, 0x94"
"    0x4a: v4a = ADD v34, v47(0x24)",0x32,v4a,"0,v34,v47",ADD,0,0,False,0,0&m0x40+0x24,"0x32, 0x94"
"    0x4b: MSTORE v4a, v45(0x2e)",0x32,0&m0x40+0x24,"0,v4a,v45",MSTORE,0,0,False,0,0&m0x40+0x24,"0x32, 0x94"
    0x4c: v4c(0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561) = CONST ,0x32,v4c,0,CONST,0,0,False,0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561,0,"0x32, 0x94"
    0x6d: v6d(0x44) = CONST ,0x32,v6d,0,CONST,0,0,False,0x44,0,"0x32, 0x94"
"    0x70: v70 = ADD v34, v6d(0x44)",0x32,v70,"0,v34,v6d",ADD,0,0,False,0,0&m0x40+0x44,"0x32, 0x94"
"    0x71: MSTORE v70, v4c(0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561)",0x32,0&m0x40+0x44,"0,v70,v4c",MSTORE,0,0,False,0,0&m0x40+0x44,"0x32, 0x94"
    0x72: v72(0x191e481a5b9a5d1a585b1a5e9959) = CONST ,0x32,v72,0,CONST,0,0,False,0x191e481a5b9a5d1a585b1a5e9959,0,"0x32, 0x94"
    0x81: v81(0x92) = CONST ,0x32,v81,0,CONST,0,0,False,0x92,0,"0x32, 0x94"
"    0x83: v83(0x647920696e697469616c697a6564000000000000000000000000000000000000) = SHL v81(0x92), v72(0x191e481a5b9a5d1a585b1a5e9959)",0x32,v83,"0,v81,v72",SHL,0,0,False,0x647920696e697469616c697a6564000000000000000000000000000000000000,0,"0x32, 0x94"
    0x84: v84(0x64) = CONST ,0x32,v84,0,CONST,0,0,False,0x64,0,"0x32, 0x94"
"    0x87: v87 = ADD v34, v84(0x64)",0x32,v87,"0,v34,v84",ADD,0,0,False,0,0&m0x40+0x64,"0x32, 0x94"
"    0x88: MSTORE v87, v83(0x647920696e697469616c697a6564000000000000000000000000000000000000)",0x32,0&m0x40+0x64,"0,v87,v83",MSTORE,0,0,False,0,0&m0x40+0x64,"0x32, 0x94"
    0x89: v89(0x84) = CONST ,0x32,v89,0,CONST,0,0,False,0x84,0,"0x32, 0x94"
"    0x8b: v8b = ADD v89(0x84), v34",0x32,v8b,"0,v89,v34",ADD,0,0,False,0,0&m0x40+0x84,"0x32, 0x94"
    0x8c: v8c(0x40) = CONST ,0x32,v8c,0,CONST,0,0,False,0x40,0,"0x32, 0x94"
    0x8e: v8e = MLOAD v8c(0x40),0x32,v8e,"0,v8c",MLOAD,0,0,False,0,0&m0x40,"0x32, 0x94"
"    0x91: v91(0x84) = SUB v8b, v8e",0x32,v91,"0,v8b,v8e",SUB,0,0,False,0x84,0&m0x40+0x84-0x84,"0x32, 0x94"
"    0x93: REVERT v8e, v91(0x84)",0x32,0,"0,v8e,v91",REVERT,0,0,False,0,0,"0x32, 0x94"
    Begin block 0x94,0x94,0,0,0,0,0,False,0,0,"0x32, 0x94"
"    prev=[0x2c], succ=[0xa8, 0xb7]",0x94,0,0,0,0,0,False,0,0,"0xa8, 0xb7"
    =================================,0x94,0,0,0,0,0,False,0,0,"0xa8, 0xb7"
    0x95: v95(0x0) = CONST ,0x94,v95,0,CONST,0,0,False,0x0,0,"0xa8, 0xb7"
    0x97: v97 = SLOAD v95(0x0),0x94,v97,"0,v95",SLOAD,0,0,False,0,0,"0xa8, 0xb7"
    0x98: v98(0x100) = CONST ,0x94,v98,0,CONST,0,0,False,0x100,0,"0xa8, 0xb7"
"    0x9c: v9c = DIV v97, v98(0x100)",0x94,v9c,"0,v97,v98",DIV,0,0,False,0,0,"0xa8, 0xb7"
    0x9d: v9d(0xff) = CONST ,0x94,v9d,0,CONST,0,0,False,0xff,0,"0xa8, 0xb7"
"    0x9f: v9f = AND v9d(0xff), v9c",0x94,v9f,"0,v9d,v9c",AND,0,0,False,0,0,"0xa8, 0xb7"
    0xa0: va0 = ISZERO v9f,0x94,va0,"0,v9f",ISZERO,0,0,False,0,0,"0xa8, 0xb7"
    0xa2: va2 = ISZERO va0,0x94,va2,"0,va0",ISZERO,0,0,False,0,0,"0xa8, 0xb7"
    0xa3: va3(0xb7) = CONST ,0x94,va3,0,CONST,0,0,False,0xb7,0,"0xa8, 0xb7"
"    0xa7: JUMPI va3(0xb7), va2",0x94,0,"0,va3,va2",JUMPI,0,0,False,0,0,"0xa8, 0xb7"
    Begin block 0xa8,0xa8,0,0,0,0,0,False,0,0,"0xa8, 0xb7"
"    prev=[0x94], succ=[0xb7]",0xa8,0,0,0,0,0,False,0,0,0xb7
    =================================,0xa8,0,0,0,0,0,False,0,0,0xb7
    0xa8: va8(0x0) = CONST ,0xa8,va8,0,CONST,0,0,False,0x0,0,0xb7
    0xab: vab = SLOAD va8(0x0),0xa8,vab,"0,va8",SLOAD,0,0,False,0,0,0xb7
    0xac: vac(0xffff) = CONST ,0xa8,vac,0,CONST,0,0,False,0xffff,0,0xb7
    0xaf: vaf(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000) = NOT vac(0xffff),0xa8,vaf,"0,vac",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000,0,0xb7
"    0xb0: vb0 = AND vaf(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000), vab",0xa8,vb0,"0,vaf,vab",AND,0,0,False,0,0,0xb7
    0xb1: vb1(0x101) = CONST ,0xa8,vb1,0,CONST,0,0,False,0x101,0,0xb7
"    0xb4: vb4 = OR vb1(0x101), vb0",0xa8,vb4,"0,vb1,vb0",OR,0,0,False,0,0,0xb7
"    0xb6: SSTORE va8(0x0), vb4",0xa8,0,"0,va8,vb4",SSTORE,0,0,False,0,0,0xb7
    Begin block 0xb7,0xb7,0,0,0,0,0,False,0,0,0xb7
"    prev=[0xa8, 0x94], succ=[0xbf, 0xca]",0xb7,0,0,0,0,0,False,0,0,"0xbf, 0xca"
    =================================,0xb7,0,0,0,0,0,False,0,0,"0xbf, 0xca"
    0xb9: vb9 = ISZERO va0,0xb7,vb9,"0,va0",ISZERO,0,0,False,0,0,"0xbf, 0xca"
    0xba: vba(0xca) = CONST ,0xb7,vba,0,CONST,0,0,False,0xca,0,"0xbf, 0xca"
"    0xbe: JUMPI vba(0xca), vb9",0xb7,0,"0,vba,vb9",JUMPI,0,0,False,0,0,"0xbf, 0xca"
    Begin block 0xbf,0xbf,0,0,0,0,0,False,0,0,"0xbf, 0xca"
"    prev=[0xb7], succ=[0xca]",0xbf,0,0,0,0,0,False,0,0,0xca
    =================================,0xbf,0,0,0,0,0,False,0,0,0xca
    0xbf: vbf(0x0) = CONST ,0xbf,vbf,0,CONST,0,0,False,0x0,0,0xca
    0xc2: vc2 = SLOAD vbf(0x0),0xbf,vc2,"0,vbf",SLOAD,0,0,False,0,0,0xca
    0xc3: vc3(0xff00) = CONST ,0xbf,vc3,0,CONST,0,0,False,0xff00,0,0xca
    0xc6: vc6(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vc3(0xff00),0xbf,vc6,"0,vc3",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff,0,0xca
"    0xc7: vc7 = AND vc6(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vc2",0xbf,vc7,"0,vc6,vc2",AND,0,0,False,0,0,0xca
"    0xc9: SSTORE vbf(0x0), vc7",0xbf,0,"0,vbf,vc7",SSTORE,0,0,False,0,0,0xca
    Begin block 0xca,0xca,0,0,0,0,0,False,0,0,0xca
"    prev=[0xbf, 0xb7], succ=[]",0xca,0,0,0,0,0,False,0,0,0xca
    =================================,0xca,0,0,0,0,0,False,0,0,0xca
    0xcc: vcc(0x2b9c) = CONST ,0xca,vcc,0,CONST,0,0,False,0x2b9c,0,0xca
    0xd0: vd0(0xdb) = CONST ,0xca,vd0,0,CONST,0,0,False,0xdb,0,0xca
    0xd4: vd4(0x0) = CONST ,0xca,vd4,0,CONST,0,0,False,0x0,0,0xca
"    0xd6: CODECOPY vd4(0x0), vd0(0xdb), vcc(0x2b9c)",0xca,0,"0,vd4,vd0,vcc",CODECOPY,0,0,False,0,0,0xca
    0xd7: vd7(0x0) = CONST ,0xca,vd7,0,CONST,0,0,False,0x0,0,0xca
"    0xd9: RETURN vd7(0x0), vcc(0x2b9c)",0xca,0,"0,vd7,vcc",RETURN,0,0,False,0,0,0xca
    Begin block 0x24,0x24,0,0,0,0,0,False,0,0,0xca
"    prev=[0x11], succ=[0x2c]",0x24,0,0,0,0,0,False,0,0,0x2c
    =================================,0x24,0,0,0,0,0,False,0,0,0x2c
    0x25: v25(0x0) = CONST ,0x24,v25,0,CONST,0,0,False,0x0,0,0x2c
    0x27: v27 = SLOAD v25(0x0),0x24,v27,"0,v25",SLOAD,0,0,False,0,0,0x2c
    0x28: v28(0xff) = CONST ,0x24,v28,0,CONST,0,0,False,0xff,0,0x2c
"    0x2a: v2a = AND v28(0xff), v27",0x24,v2a,"0,v28,v27",AND,0,0,False,0,0,0x2c
    0x2b: v2b = ISZERO v2a,0x24,v2b,"0,v2a",ISZERO,0,0,False,0,0,0x2c
},0x24,0,0,0,0,0,False,0,0,0x2c
