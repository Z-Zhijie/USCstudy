3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0x16, 0x1a]",0x0,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    =================================,0x0,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0x16, 0x1a"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0x16, 0x1a"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0x16, 0x1a"
    0x5: v5(0x0) = CONST ,0x0,v5,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
    0x7: v7(0x6b) = CONST ,0x0,v7,0,CONST,0,0,False,0x6b,0,"0x16, 0x1a"
"    0x9: SSTORE v7(0x6b), v5(0x0)",0x0,0,"0,v7,v5",SSTORE,0,0,False,0,0,"0x16, 0x1a"
    0xa: va(0x0) = CONST ,0x0,va,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
    0xc: vc(0x6c) = CONST ,0x0,vc,0,CONST,0,0,False,0x6c,0,"0x16, 0x1a"
"    0xe: SSTORE vc(0x6c), va(0x0)",0x0,0,"0,vc,va",SSTORE,0,0,False,0,0,"0x16, 0x1a"
    0xf: vf = CALLVALUE ,0x0,vf,0,CALLVALUE,0,0,False,0,0,"0x16, 0x1a"
    0x11: v11 = ISZERO vf,0x0,v11,"0,vf",ISZERO,0,0,False,0,0,"0x16, 0x1a"
    0x12: v12(0x1a) = CONST ,0x0,v12,0,CONST,0,0,False,0x1a,0,"0x16, 0x1a"
"    0x15: JUMPI v12(0x1a), v11",0x0,0,"0,v12,v11",JUMPI,0,0,False,0,0,"0x16, 0x1a"
    Begin block 0x16,0x16,0,0,0,0,0,False,0,0,"0x16, 0x1a"
"    prev=[0x0], succ=[]",0x16,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    =================================,0x16,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    0x16: v16(0x0) = CONST ,0x16,v16,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
"    0x19: REVERT v16(0x0), v16(0x0)",0x16,0,"0,v16,v16",REVERT,0,0,False,0,0,"0x16, 0x1a"
    Begin block 0x1a,0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
"    prev=[0x0], succ=[]",0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    =================================,0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
    0x1c: v1c(0x66) = CONST ,0x1a,v1c,0,CONST,0,0,False,0x66,0,"0x16, 0x1a"
    0x1f: v1f = SLOAD v1c(0x66),0x1a,v1f,"0,v1c",SLOAD,0,0,False,0,0,"0x16, 0x1a"
    0x20: v20(0xff) = CONST ,0x1a,v20,0,CONST,0,0,False,0xff,0,"0x16, 0x1a"
    0x22: v22(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v20(0xff),0x1a,v22,"0,v20",NOT,0,0,False,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00,0,"0x16, 0x1a"
"    0x23: v23 = AND v22(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), v1f",0x1a,v23,"0,v22,v1f",AND,0,0,False,0,0,"0x16, 0x1a"
"    0x25: SSTORE v1c(0x66), v23",0x1a,0,"0,v1c,v23",SSTORE,0,0,False,0,0,"0x16, 0x1a"
    0x26: v26(0x1) = CONST ,0x1a,v26,0,CONST,0,0,False,0x1,0,"0x16, 0x1a"
    0x28: v28(0x67) = CONST ,0x1a,v28,0,CONST,0,0,False,0x67,0,"0x16, 0x1a"
"    0x2a: SSTORE v28(0x67), v26(0x1)",0x1a,0,"0,v28,v26",SSTORE,0,0,False,0,0,"0x16, 0x1a"
    0x2b: v2b(0x37fe) = CONST ,0x1a,v2b,0,CONST,0,0,False,0x37fe,0,"0x16, 0x1a"
    0x2f: v2f(0x39) = CONST ,0x1a,v2f,0,CONST,0,0,False,0x39,0,"0x16, 0x1a"
    0x32: v32(0x0) = CONST ,0x1a,v32,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
"    0x34: CODECOPY v32(0x0), v2f(0x39), v2b(0x37fe)",0x1a,0,"0,v32,v2f,v2b",CODECOPY,0,0,False,0,0,"0x16, 0x1a"
    0x35: v35(0x0) = CONST ,0x1a,v35,0,CONST,0,0,False,0x0,0,"0x16, 0x1a"
"    0x37: RETURN v35(0x0), v2b(0x37fe)",0x1a,0,"0,v35,v2b",RETURN,0,0,False,0,0,"0x16, 0x1a"
},0x1a,0,0,0,0,0,False,0,0,"0x16, 0x1a"
