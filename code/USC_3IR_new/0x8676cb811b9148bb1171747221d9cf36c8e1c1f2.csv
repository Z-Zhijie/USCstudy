3IR,blockname,leftvariable,rightvariable,option,functionname,functiontype,callersource,constant,memloc,succ
    Begin block 0x0,0x0,0,0,0,0,0,False,0,0,
"    prev=[], succ=[0xc, 0xcf]",0x0,0,0,0,0,0,False,0,0,"0xc, 0xcf"
    =================================,0x0,0,0,0,0,0,False,0,0,"0xc, 0xcf"
    0x0: v0(0x80) = CONST ,0x0,v0,0,CONST,0,0,False,0x80,0,"0xc, 0xcf"
    0x2: v2(0x40) = CONST ,0x0,v2,0,CONST,0,0,False,0x40,0,"0xc, 0xcf"
"    0x4: MSTORE v2(0x40), v0(0x80)",0x0,0,"0,v2,v0",MSTORE,0,0,False,0,0,"0xc, 0xcf"
    0x5: v5(0x4) = CONST ,0x0,v5,0,CONST,0,0,False,0x4,0,"0xc, 0xcf"
    0x7: v7 = CALLDATASIZE ,0x0,v7,0,CALLDATASIZE,0,0,False,0,0,"0xc, 0xcf"
"    0x8: v8 = LT v7, v5(0x4)",0x0,v8,"0,v7,v5",LT,0,0,False,0,0,"0xc, 0xcf"
    0xcb: vcb(0xcf) = CONST ,0x0,vcb,0,CONST,0,0,False,0xcf,0,"0xc, 0xcf"
"    0xcc: JUMPI vcb(0xcf), v8",0x0,0,"0,vcb,v8",JUMPI,0,0,False,0,0,"0xc, 0xcf"
    Begin block 0xc,0xc,0,0,0,0,0,False,0,0,"0xc, 0xcf"
"    prev=[0x0], succ=[0xcf, 0xd2]",0xc,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
    =================================,0xc,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
    0xc: vc(0x0) = CONST ,0xc,vc,0,CONST,0,0,False,0x0,0,"0xcf, 0xd2"
    0xe: ve = CALLDATALOAD vc(0x0),0xc,ve,"0,vc",CALLDATALOAD,0,0,False,0,0,"0xcf, 0xd2"
    0xf: vf(0xe0) = CONST ,0xc,vf,0,CONST,0,0,False,0xe0,0,"0xcf, 0xd2"
"    0x11: v11 = SHR vf(0xe0), ve",0xc,v11,"0,vf,ve",SHR,0,0,False,0,0,"0xcf, 0xd2"
    0x13: v13(0xa619486e) = CONST ,0xc,v13,0,CONST,0,0,False,0xa619486e,0,"0xcf, 0xd2"
"    0x18: v18 = EQ v13(0xa619486e), v11",0xc,v18,"0,v13,v11",EQ,0,0,False,0,0,"0xcf, 0xd2"
    0xcd: vcd(0xd2) = CONST ,0xc,vcd,0,CONST,0,0,False,0xd2,0,"0xcf, 0xd2"
"    0xce: JUMPI vcd(0xd2), v18",0xc,0,"0,vcd,v18",JUMPI,0,0,False,0,0,"0xcf, 0xd2"
    Begin block 0xcf,0xcf,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
"    prev=[0x0, 0xc], succ=[]",0xcf,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
    =================================,0xcf,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
    0xd0: vd0(0x1c) = CONST ,0xcf,vd0,0,CONST,0,0,False,0x1c,0,"0xcf, 0xd2"
    0xd1: CALLPRIVATE vd0(0x1c),0xcf,0,"0,vd0",CALLPRIVATE,0,0,False,0,0,"0xcf, 0xd2"
    Begin block 0xd2,0xd2,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
"    prev=[0xc], succ=[]",0xd2,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
    =================================,0xd2,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
    0xd3: vd3(0x4c) = CONST ,0xd2,vd3,0,CONST,0,0,False,0x4c,0,"0xcf, 0xd2"
    0xd4: CALLPRIVATE vd3(0x4c),0xd2,0,"0,vd3",CALLPRIVATE,0,0,False,0,0,"0xcf, 0xd2"
},0xd2,0,0,0,0,0,False,0,0,"0xcf, 0xd2"
function fallback()() public {,0x1c,0,0,public,fallback,public,False,0,0,"0xcf, 0xd2"
    Begin block 0x1c,0x1c,0,0,0,fallback,public,False,0,0,"0xcf, 0xd2"
"    prev=[], succ=[0x43, 0x47]",0x1c,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
    =================================,0x1c,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
    0x1d: v1d(0x0) = CONST ,0x1c,v1d,0,CONST,fallback,public,False,0x0,0,"0x43, 0x47"
    0x20: v20 = SLOAD v1d(0x0),0x1c,v20,"0,v1d",SLOAD,fallback,public,False,0,0,"0x43, 0x47"
    0x21: v21(0x1) = CONST ,0x1c,v21,0,CONST,fallback,public,False,0x1,0,"0x43, 0x47"
    0x23: v23(0x1) = CONST ,0x1c,v23,0,CONST,fallback,public,False,0x1,0,"0x43, 0x47"
    0x25: v25(0xa0) = CONST ,0x1c,v25,0,CONST,fallback,public,False,0xa0,0,"0x43, 0x47"
"    0x27: v27(0x10000000000000000000000000000000000000000) = SHL v25(0xa0), v23(0x1)",0x1c,v27,"0,v25,v23",SHL,fallback,public,False,0x10000000000000000000000000000000000000000,0,"0x43, 0x47"
"    0x28: v28(0xffffffffffffffffffffffffffffffffffffffff) = SUB v27(0x10000000000000000000000000000000000000000), v21(0x1)",0x1c,v28,"0,v27,v21",SUB,fallback,public,False,0xffffffffffffffffffffffffffffffffffffffff,0,"0x43, 0x47"
"    0x29: v29 = AND v28(0xffffffffffffffffffffffffffffffffffffffff), v20",0x1c,v29,"0,v28,v20",AND,fallback,public,False,0,0,"0x43, 0x47"
    0x2b: v2b = CALLDATASIZE ,0x1c,v2b,0,CALLDATASIZE,fallback,public,False,0,0,"0x43, 0x47"
"    0x2e: CALLDATACOPY v1d(0x0), v1d(0x0), v2b",0x1c,0,"0,v1d,v1d,v2b",CALLDATACOPY,fallback,public,False,0,0,"0x43, 0x47"
    0x2f: v2f(0x0) = CONST ,0x1c,v2f,0,CONST,fallback,public,False,0x0,0,"0x43, 0x47"
    0x32: v32 = CALLDATASIZE ,0x1c,v32,0,CALLDATASIZE,fallback,public,False,0,0,"0x43, 0x47"
    0x33: v33(0x0) = CONST ,0x1c,v33,0,CONST,fallback,public,False,0x0,0,"0x43, 0x47"
    0x36: v36 = GAS ,0x1c,v36,0,GAS,fallback,public,False,0,0,"0x43, 0x47"
"    0x37: v37 = DELEGATECALL v36, v29, v33(0x0), v32, v2f(0x0), v2f(0x0)",0x1c,v37,"0,v36,v29,v33,v32,v2f,v2f",DELEGATECALL,fallback,public,False,0,0,"0x43, 0x47"
    0x38: v38 = RETURNDATASIZE ,0x1c,v38,0,RETURNDATASIZE,fallback,public,False,0,0,"0x43, 0x47"
    0x39: v39(0x0) = CONST ,0x1c,v39,0,CONST,fallback,public,False,0x0,0,"0x43, 0x47"
"    0x3c: RETURNDATACOPY v39(0x0), v39(0x0), v38",0x1c,0,"0,v39,v39,v38",RETURNDATACOPY,fallback,public,False,0,0,"0x43, 0x47"
    0x3f: v3f = ISZERO v37,0x1c,v3f,"0,v37",ISZERO,fallback,public,False,0,0,"0x43, 0x47"
    0x40: v40(0x47) = CONST ,0x1c,v40,0,CONST,fallback,public,False,0x47,0,"0x43, 0x47"
"    0x42: JUMPI v40(0x47), v3f",0x1c,0,"0,v40,v3f",JUMPI,fallback,public,False,0,0,"0x43, 0x47"
    Begin block 0x43,0x43,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
"    prev=[0x1c], succ=[]",0x43,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
    =================================,0x43,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
    0x43: v43 = RETURNDATASIZE ,0x43,v43,0,RETURNDATASIZE,fallback,public,False,0,0,"0x43, 0x47"
    0x44: v44(0x0) = CONST ,0x43,v44,0,CONST,fallback,public,False,0x0,0,"0x43, 0x47"
"    0x46: RETURN v44(0x0), v43",0x43,0,"0,v44,v43",RETURN,fallback,public,False,0,0,"0x43, 0x47"
    Begin block 0x47,0x47,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
"    prev=[0x1c], succ=[]",0x47,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
    =================================,0x47,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
    0x48: v48 = RETURNDATASIZE ,0x47,v48,0,RETURNDATASIZE,fallback,public,False,0,0,"0x43, 0x47"
    0x49: v49(0x0) = CONST ,0x47,v49,0,CONST,fallback,public,False,0x0,0,"0x43, 0x47"
"    0x4b: REVERT v49(0x0), v48",0x47,0,"0,v49,v48",REVERT,fallback,public,False,0,0,"0x43, 0x47"
},0x47,0,0,0,fallback,public,False,0,0,"0x43, 0x47"
function masterCopy()() public {,0x4c,0,0,public,masterCopy,public,False,0,0,"0x43, 0x47"
    Begin block 0x4c,0x4c,0,0,0,masterCopy,public,False,0,0,"0x43, 0x47"
"    prev=[], succ=[0x53, 0x57]",0x4c,0,0,0,masterCopy,public,False,0,0,"0x53, 0x57"
    =================================,0x4c,0,0,0,masterCopy,public,False,0,0,"0x53, 0x57"
    0x4d: v4d = CALLVALUE ,0x4c,v4d,0,CALLVALUE,masterCopy,public,False,0,0,"0x53, 0x57"
    0x4f: v4f = ISZERO v4d,0x4c,v4f,"0,v4d",ISZERO,masterCopy,public,False,0,0,"0x53, 0x57"
    0x50: v50(0x57) = CONST ,0x4c,v50,0,CONST,masterCopy,public,False,0x57,0,"0x53, 0x57"
"    0x52: JUMPI v50(0x57), v4f",0x4c,0,"0,v50,v4f",JUMPI,masterCopy,public,False,0,0,"0x53, 0x57"
    Begin block 0x53,0x53,0,0,0,masterCopy,public,False,0,0,"0x53, 0x57"
"    prev=[0x4c], succ=[]",0x53,0,0,0,masterCopy,public,False,0,0,"0x53, 0x57"
    =================================,0x53,0,0,0,masterCopy,public,False,0,0,"0x53, 0x57"
    0x53: v53(0x0) = CONST ,0x53,v53,0,CONST,masterCopy,public,False,0x0,0,"0x53, 0x57"
"    0x56: REVERT v53(0x0), v53(0x0)",0x53,0,"0,v53,v53",REVERT,masterCopy,public,False,0,0,"0x53, 0x57"
    Begin block 0x57,0x57,0,0,0,masterCopy,public,False,0,0,"0x53, 0x57"
"    prev=[0x4c], succ=[0x72]",0x57,0,0,0,masterCopy,public,False,0,0,0x72
    =================================,0x57,0,0,0,masterCopy,public,False,0,0,0x72
    0x59: v59(0x5e) = CONST ,0x57,v59,0,CONST,masterCopy,public,False,0x5e,0,0x72
    0x5b: v5b(0x72) = CONST ,0x57,v5b,0,CONST,masterCopy,public,False,0x72,0,0x72
    0x5d: JUMP v5b(0x72),0x57,0,"0,v5b",JUMP,masterCopy,public,False,0,0,0x72
    Begin block 0x72,0x72,0,0,0,masterCopy,public,False,0,0,0x72
"    prev=[0x57], succ=[0x5e]",0x72,0,0,0,masterCopy,public,False,0,0,0x5e
    =================================,0x72,0,0,0,masterCopy,public,False,0,0,0x5e
    0x73: v73(0x0) = CONST ,0x72,v73,0,CONST,masterCopy,public,False,0x0,0,0x5e
    0x75: v75 = SLOAD v73(0x0),0x72,v75,"0,v73",SLOAD,masterCopy,public,False,0,0,0x5e
    0x76: v76(0x1) = CONST ,0x72,v76,0,CONST,masterCopy,public,False,0x1,0,0x5e
    0x78: v78(0x1) = CONST ,0x72,v78,0,CONST,masterCopy,public,False,0x1,0,0x5e
    0x7a: v7a(0xa0) = CONST ,0x72,v7a,0,CONST,masterCopy,public,False,0xa0,0,0x5e
"    0x7c: v7c(0x10000000000000000000000000000000000000000) = SHL v7a(0xa0), v78(0x1)",0x72,v7c,"0,v7a,v78",SHL,masterCopy,public,False,0x10000000000000000000000000000000000000000,0,0x5e
"    0x7d: v7d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7c(0x10000000000000000000000000000000000000000), v76(0x1)",0x72,v7d,"0,v7c,v76",SUB,masterCopy,public,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x5e
"    0x7e: v7e = AND v7d(0xffffffffffffffffffffffffffffffffffffffff), v75",0x72,v7e,"0,v7d,v75",AND,masterCopy,public,False,0,0,0x5e
    0x80: JUMP v59(0x5e),0x72,0,"0,v59",JUMP,masterCopy,public,False,0,0,0x5e
    Begin block 0x5e,0x5e,0,0,0,masterCopy,public,False,0,0,0x5e
"    prev=[0x72], succ=[0x81]",0x5e,0,0,0,masterCopy,public,False,0,0,0x81
    =================================,0x5e,0,0,0,masterCopy,public,False,0,0,0x81
    0x5f: v5f(0x40) = CONST ,0x5e,v5f,0,CONST,masterCopy,public,False,0x40,0,0x81
    0x61: v61 = MLOAD v5f(0x40),0x5e,v61,"0,v5f",MLOAD,masterCopy,public,False,0,masterCopy&m0x40,0x81
    0x62: v62(0x69) = CONST ,0x5e,v62,0,CONST,masterCopy,public,False,0x69,0,0x81
    0x66: v66(0x81) = CONST ,0x5e,v66,0,CONST,masterCopy,public,False,0x81,0,0x81
    0x68: JUMP v66(0x81),0x5e,0,"0,v66",JUMP,masterCopy,public,False,0,0,0x81
    Begin block 0x81,0x81,0,0,0,masterCopy,public,False,0,0,0x81
"    prev=[0x5e], succ=[0x69]",0x81,0,0,0,masterCopy,public,False,0,0,0x69
    =================================,0x81,0,0,0,masterCopy,public,False,0,0,0x69
    0x82: v82(0x1) = CONST ,0x81,v82,0,CONST,masterCopy,public,False,0x1,0,0x69
    0x84: v84(0x1) = CONST ,0x81,v84,0,CONST,masterCopy,public,False,0x1,0,0x69
    0x86: v86(0xa0) = CONST ,0x81,v86,0,CONST,masterCopy,public,False,0xa0,0,0x69
"    0x88: v88(0x10000000000000000000000000000000000000000) = SHL v86(0xa0), v84(0x1)",0x81,v88,"0,v86,v84",SHL,masterCopy,public,False,0x10000000000000000000000000000000000000000,0,0x69
"    0x89: v89(0xffffffffffffffffffffffffffffffffffffffff) = SUB v88(0x10000000000000000000000000000000000000000), v82(0x1)",0x81,v89,"0,v88,v82",SUB,masterCopy,public,False,0xffffffffffffffffffffffffffffffffffffffff,0,0x69
"    0x8d: v8d = AND v89(0xffffffffffffffffffffffffffffffffffffffff), v7e",0x81,v8d,"0,v89,v7e",AND,masterCopy,public,False,0,0,0x69
"    0x8f: MSTORE v61, v8d",0x81,masterCopy&m0x40,"0,v61,v8d",MSTORE,masterCopy,public,False,0,masterCopy&m0x40,0x69
    0x90: v90(0x20) = CONST ,0x81,v90,0,CONST,masterCopy,public,False,0x20,0,0x69
"    0x92: v92 = ADD v90(0x20), v61",0x81,v92,"0,v90,v61",ADD,masterCopy,public,False,0,masterCopy&m0x40+0x20,0x69
    0x94: JUMP v62(0x69),0x81,0,"0,v62",JUMP,masterCopy,public,False,0,0,0x69
    Begin block 0x69,0x69,0,0,0,masterCopy,public,False,0,0,0x69
"    prev=[0x81], succ=[]",0x69,0,0,0,masterCopy,public,False,0,0,0x69
    =================================,0x69,0,0,0,masterCopy,public,False,0,0,0x69
    0x6a: v6a(0x40) = CONST ,0x69,v6a,0,CONST,masterCopy,public,False,0x40,0,0x69
    0x6c: v6c = MLOAD v6a(0x40),0x69,v6c,"0,v6a",MLOAD,masterCopy,public,False,0,masterCopy&m0x40,0x69
"    0x6f: v6f(0x20) = SUB v92, v6c",0x69,v6f,"0,v92,v6c",SUB,masterCopy,public,False,0x20,masterCopy&m0x40+0x20-0x20,0x69
"    0x71: RETURN v6c, v6f(0x20)",0x69,0,"0,v6c,v6f",RETURN,masterCopy,public,False,0,0,0x69
},0x69,0,0,0,masterCopy,public,False,0,0,0x69
