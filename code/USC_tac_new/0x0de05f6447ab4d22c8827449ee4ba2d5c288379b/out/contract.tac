function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x471]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x465: v465(0x471) = CONST 
    0x466: JUMPI v465(0x471), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x474, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x5c60da1b) = CONST 
    0x26: v26 = EQ v21(0x5c60da1b), v1f
    0x467: v467(0x474) = CONST 
    0x468: JUMPI v467(0x474), v26

    Begin block 0x474
    prev=[0x1a], succ=[]
    =================================
    0x475: v475(0x87) = CONST 
    0x476: CALLPRIVATE v475(0x87)

    Begin block 0x2b
    prev=[0x1a], succ=[0x477, 0x36]
    =================================
    0x2c: v2c(0x715018a6) = CONST 
    0x31: v31 = EQ v2c(0x715018a6), v1f
    0x469: v469(0x477) = CONST 
    0x46a: JUMPI v469(0x477), v31

    Begin block 0x477
    prev=[0x2b], succ=[]
    =================================
    0x478: v478(0xb6) = CONST 
    0x479: CALLPRIVATE v478(0xb6)

    Begin block 0x36
    prev=[0x2b], succ=[0x47a, 0x41]
    =================================
    0x37: v37(0x8da5cb5b) = CONST 
    0x3c: v3c = EQ v37(0x8da5cb5b), v1f
    0x46b: v46b(0x47a) = CONST 
    0x46c: JUMPI v46b(0x47a), v3c

    Begin block 0x47a
    prev=[0x36], succ=[]
    =================================
    0x47b: v47b(0xc0) = CONST 
    0x47c: CALLPRIVATE v47b(0xc0)

    Begin block 0x41
    prev=[0x36], succ=[0x47d, 0x4c]
    =================================
    0x42: v42(0xd69efdc5) = CONST 
    0x47: v47 = EQ v42(0xd69efdc5), v1f
    0x46d: v46d(0x47d) = CONST 
    0x46e: JUMPI v46d(0x47d), v47

    Begin block 0x47d
    prev=[0x41], succ=[]
    =================================
    0x47e: v47e(0xd1) = CONST 
    0x47f: CALLPRIVATE v47e(0xd1)

    Begin block 0x4c
    prev=[0x41], succ=[0x471, 0x480]
    =================================
    0x4d: v4d(0xf2fde38b) = CONST 
    0x52: v52 = EQ v4d(0xf2fde38b), v1f
    0x46f: v46f(0x480) = CONST 
    0x470: JUMPI v46f(0x480), v52

    Begin block 0x471
    prev=[0x10, 0x4c], succ=[]
    =================================
    0x472: v472(0x57) = CONST 
    0x473: CALLPRIVATE v472(0x57)

    Begin block 0x480
    prev=[0x4c], succ=[]
    =================================
    0x481: v481(0xe4) = CONST 
    0x482: CALLPRIVATE v481(0xe4)

}

function fallback()() public {
    Begin block 0x57
    prev=[], succ=[0x7e, 0x82]
    =================================
    0x58: v58(0x1) = CONST 
    0x5a: v5a = SLOAD v58(0x1)
    0x5b: v5b(0x1) = CONST 
    0x5d: v5d(0x1) = CONST 
    0x5f: v5f(0xa0) = CONST 
    0x61: v61(0x10000000000000000000000000000000000000000) = SHL v5f(0xa0), v5d(0x1)
    0x62: v62(0xffffffffffffffffffffffffffffffffffffffff) = SUB v61(0x10000000000000000000000000000000000000000), v5b(0x1)
    0x63: v63 = AND v62(0xffffffffffffffffffffffffffffffffffffffff), v5a
    0x64: v64 = CALLDATASIZE 
    0x65: v65(0x0) = CONST 
    0x68: CALLDATACOPY v65(0x0), v65(0x0), v64
    0x69: v69(0x0) = CONST 
    0x6c: v6c = CALLDATASIZE 
    0x6d: v6d(0x0) = CONST 
    0x70: v70 = GAS 
    0x71: v71 = DELEGATECALL v70, v63, v6d(0x0), v6c, v69(0x0), v69(0x0)
    0x72: v72 = RETURNDATASIZE 
    0x73: v73(0x0) = CONST 
    0x76: RETURNDATACOPY v73(0x0), v73(0x0), v72
    0x79: v79 = ISZERO v71
    0x7a: v7a(0x82) = CONST 
    0x7d: JUMPI v7a(0x82), v79

    Begin block 0x7e
    prev=[0x57], succ=[]
    =================================
    0x7e: v7e = RETURNDATASIZE 
    0x7f: v7f(0x0) = CONST 
    0x81: RETURN v7f(0x0), v7e

    Begin block 0x82
    prev=[0x57], succ=[]
    =================================
    0x83: v83 = RETURNDATASIZE 
    0x84: v84(0x0) = CONST 
    0x86: REVERT v84(0x0), v83

}

function implementation()() public {
    Begin block 0x87
    prev=[], succ=[0x9a0x87]
    =================================
    0x88: v88(0x1) = CONST 
    0x8a: v8a = SLOAD v88(0x1)
    0x8b: v8b(0x9a) = CONST 
    0x8f: v8f(0x1) = CONST 
    0x91: v91(0x1) = CONST 
    0x93: v93(0xa0) = CONST 
    0x95: v95(0x10000000000000000000000000000000000000000) = SHL v93(0xa0), v91(0x1)
    0x96: v96(0xffffffffffffffffffffffffffffffffffffffff) = SUB v95(0x10000000000000000000000000000000000000000), v8f(0x1)
    0x97: v97 = AND v96(0xffffffffffffffffffffffffffffffffffffffff), v8a
    0x99: JUMP v8b(0x9a)

    Begin block 0x9a0x87
    prev=[0x87], succ=[]
    =================================
    0x9b0x87: v879b(0x40) = CONST 
    0x9d0x87: v879d = MLOAD v879b(0x40)
    0x9e0x87: v879e(0x1) = CONST 
    0xa00x87: v87a0(0x1) = CONST 
    0xa20x87: v87a2(0xa0) = CONST 
    0xa40x87: v87a4(0x10000000000000000000000000000000000000000) = SHL v87a2(0xa0), v87a0(0x1)
    0xa50x87: v87a5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v87a4(0x10000000000000000000000000000000000000000), v879e(0x1)
    0xa80x87: v87a8 = AND v97, v87a5(0xffffffffffffffffffffffffffffffffffffffff)
    0xaa0x87: MSTORE v879d, v87a8
    0xab0x87: v87ab(0x20) = CONST 
    0xad0x87: v87ad = ADD v87ab(0x20), v879d
    0xae0x87: v87ae(0x40) = CONST 
    0xb00x87: v87b0 = MLOAD v87ae(0x40)
    0xb30x87: v87b3(0x20) = SUB v87ad, v87b0
    0xb50x87: RETURN v87b0, v87b3(0x20)

}

function renounceOwnership()() public {
    Begin block 0xb6
    prev=[], succ=[0xf7B0xb6]
    =================================
    0xb7: vb7(0x3a9) = CONST 
    0xba: vba(0xf7) = CONST 
    0xbd: JUMP vba(0xf7), vb7(0x3a9)

    Begin block 0xf7B0xb6
    prev=[0xb6], succ=[0x10aB0xb6, 0x12aB0xb6]
    =================================
    0xf8S0xb6: vf8Vb6(0x0) = CONST 
    0xfaS0xb6: vfaVb6 = SLOAD vf8Vb6(0x0)
    0xfbS0xb6: vfbVb6(0x1) = CONST 
    0xfdS0xb6: vfdVb6(0x1) = CONST 
    0xffS0xb6: vffVb6(0xa0) = CONST 
    0x101S0xb6: v101Vb6(0x10000000000000000000000000000000000000000) = SHL vffVb6(0xa0), vfdVb6(0x1)
    0x102S0xb6: v102Vb6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v101Vb6(0x10000000000000000000000000000000000000000), vfbVb6(0x1)
    0x103S0xb6: v103Vb6 = AND v102Vb6(0xffffffffffffffffffffffffffffffffffffffff), vfaVb6
    0x104S0xb6: v104Vb6 = CALLER 
    0x105S0xb6: v105Vb6 = EQ v104Vb6, v103Vb6
    0x106S0xb6: v106Vb6(0x12a) = CONST 
    0x109S0xb6: JUMPI v106Vb6(0x12a), v105Vb6

    Begin block 0x10aB0xb6
    prev=[0xf7B0xb6], succ=[0x2e2B0x10aB0xb6]
    =================================
    0x10aS0xb6: v10aVb6(0x40) = CONST 
    0x10cS0xb6: v10cVb6 = MLOAD v10aVb6(0x40)
    0x10dS0xb6: v10dVb6(0x461bcd) = CONST 
    0x111S0xb6: v111Vb6(0xe5) = CONST 
    0x113S0xb6: v113Vb6(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v111Vb6(0xe5), v10dVb6(0x461bcd)
    0x115S0xb6: MSTORE v10cVb6, v113Vb6(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x116S0xb6: v116Vb6(0x4) = CONST 
    0x118S0xb6: v118Vb6 = ADD v116Vb6(0x4), v10cVb6
    0x119S0xb6: v119Vb6(0x40c) = CONST 
    0x11dS0xb6: v11dVb6(0x2e2) = CONST 
    0x120S0xb6: JUMP v11dVb6(0x2e2)

    Begin block 0x2e2B0x10aB0xb6
    prev=[0x10aB0xb6], succ=[0x40cB0xb6]
    =================================
    0x2e3S0x10aS0xb6: v2e3V10aVb6(0x20) = CONST 
    0x2e7S0x10aS0xb6: MSTORE v118Vb6, v2e3V10aVb6(0x20)
    0x2eaS0x10aS0xb6: v2eaV10aVb6 = ADD v2e3V10aVb6(0x20), v118Vb6
    0x2ebS0x10aS0xb6: MSTORE v2eaV10aVb6, v2e3V10aVb6(0x20)
    0x2ecS0x10aS0xb6: v2ecV10aVb6(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
    0x30dS0x10aS0xb6: v30dV10aVb6(0x40) = CONST 
    0x310S0x10aS0xb6: v310V10aVb6 = ADD v118Vb6, v30dV10aVb6(0x40)
    0x311S0x10aS0xb6: MSTORE v310V10aVb6, v2ecV10aVb6(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x312S0x10aS0xb6: v312V10aVb6(0x60) = CONST 
    0x314S0x10aS0xb6: v314V10aVb6 = ADD v312V10aVb6(0x60), v118Vb6
    0x316S0x10aS0xb6: JUMP v119Vb6(0x40c)

    Begin block 0x40cB0xb6
    prev=[0x2e2B0x10aB0xb6], succ=[]
    =================================
    0x40dS0xb6: v40dVb6(0x40) = CONST 
    0x40fS0xb6: v40fVb6 = MLOAD v40dVb6(0x40)
    0x412S0xb6: v412Vb6(0x64) = SUB v314V10aVb6, v40fVb6
    0x414S0xb6: REVERT v40fVb6, v412Vb6(0x64)

    Begin block 0x12aB0xb6
    prev=[0xf7B0xb6], succ=[0x262B0x12aB0xb6]
    =================================
    0x12bS0xb6: v12bVb6(0x134) = CONST 
    0x12eS0xb6: v12eVb6(0x0) = CONST 
    0x130S0xb6: v130Vb6(0x262) = CONST 
    0x133S0xb6: JUMP v130Vb6(0x262), v12eVb6(0x0), v12bVb6(0x134)

    Begin block 0x262B0x12aB0xb6
    prev=[0x12aB0xb6], succ=[0x134B0xb6]
    =================================
    0x263S0x12aS0xb6: v263V12aVb6(0x0) = CONST 
    0x266S0x12aS0xb6: v266V12aVb6 = SLOAD v263V12aVb6(0x0)
    0x267S0x12aS0xb6: v267V12aVb6(0x1) = CONST 
    0x269S0x12aS0xb6: v269V12aVb6(0x1) = CONST 
    0x26bS0x12aS0xb6: v26bV12aVb6(0xa0) = CONST 
    0x26dS0x12aS0xb6: v26dV12aVb6(0x10000000000000000000000000000000000000000) = SHL v26bV12aVb6(0xa0), v269V12aVb6(0x1)
    0x26eS0x12aS0xb6: v26eV12aVb6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26dV12aVb6(0x10000000000000000000000000000000000000000), v267V12aVb6(0x1)
    0x271S0x12aS0xb6: v271V12aVb6(0x0) = AND v26eV12aVb6(0xffffffffffffffffffffffffffffffffffffffff), v12eVb6(0x0)
    0x272S0x12aS0xb6: v272V12aVb6(0x1) = CONST 
    0x274S0x12aS0xb6: v274V12aVb6(0x1) = CONST 
    0x276S0x12aS0xb6: v276V12aVb6(0xa0) = CONST 
    0x278S0x12aS0xb6: v278V12aVb6(0x10000000000000000000000000000000000000000) = SHL v276V12aVb6(0xa0), v274V12aVb6(0x1)
    0x279S0x12aS0xb6: v279V12aVb6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v278V12aVb6(0x10000000000000000000000000000000000000000), v272V12aVb6(0x1)
    0x27aS0x12aS0xb6: v27aV12aVb6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v279V12aVb6(0xffffffffffffffffffffffffffffffffffffffff)
    0x27cS0x12aS0xb6: v27cV12aVb6 = AND v266V12aVb6, v27aV12aVb6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000)
    0x27eS0x12aS0xb6: v27eV12aVb6 = OR v271V12aVb6(0x0), v27cV12aVb6
    0x280S0x12aS0xb6: SSTORE v263V12aVb6(0x0), v27eV12aVb6
    0x281S0x12aS0xb6: v281V12aVb6(0x40) = CONST 
    0x283S0x12aS0xb6: v283V12aVb6 = MLOAD v281V12aVb6(0x40)
    0x287S0x12aS0xb6: v287V12aVb6 = AND v266V12aVb6, v26eV12aVb6(0xffffffffffffffffffffffffffffffffffffffff)
    0x28bS0x12aS0xb6: v28bV12aVb6(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x2aeS0x12aS0xb6: LOG3 v283V12aVb6, v263V12aVb6(0x0), v28bV12aVb6(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v287V12aVb6, v271V12aVb6(0x0)
    0x2b1S0x12aS0xb6: JUMP v12bVb6(0x134)

    Begin block 0x134B0xb6
    prev=[0x262B0x12aB0xb6], succ=[0x3a9]
    =================================
    0x135S0xb6: JUMP vb7(0x3a9)

    Begin block 0x3a9
    prev=[0x134B0xb6], succ=[]
    =================================
    0x3aa: STOP 

}

function owner()() public {
    Begin block 0xc0
    prev=[], succ=[0x9a0xc0]
    =================================
    0xc1: vc1(0x0) = CONST 
    0xc3: vc3 = SLOAD vc1(0x0)
    0xc4: vc4(0x1) = CONST 
    0xc6: vc6(0x1) = CONST 
    0xc8: vc8(0xa0) = CONST 
    0xca: vca(0x10000000000000000000000000000000000000000) = SHL vc8(0xa0), vc6(0x1)
    0xcb: vcb(0xffffffffffffffffffffffffffffffffffffffff) = SUB vca(0x10000000000000000000000000000000000000000), vc4(0x1)
    0xcc: vcc = AND vcb(0xffffffffffffffffffffffffffffffffffffffff), vc3
    0xcd: vcd(0x9a) = CONST 
    0xd0: JUMP vcd(0x9a)

    Begin block 0x9a0xc0
    prev=[0xc0], succ=[]
    =================================
    0x9b0xc0: vc09b(0x40) = CONST 
    0x9d0xc0: vc09d = MLOAD vc09b(0x40)
    0x9e0xc0: vc09e(0x1) = CONST 
    0xa00xc0: vc0a0(0x1) = CONST 
    0xa20xc0: vc0a2(0xa0) = CONST 
    0xa40xc0: vc0a4(0x10000000000000000000000000000000000000000) = SHL vc0a2(0xa0), vc0a0(0x1)
    0xa50xc0: vc0a5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc0a4(0x10000000000000000000000000000000000000000), vc09e(0x1)
    0xa80xc0: vc0a8 = AND vcc, vc0a5(0xffffffffffffffffffffffffffffffffffffffff)
    0xaa0xc0: MSTORE vc09d, vc0a8
    0xab0xc0: vc0ab(0x20) = CONST 
    0xad0xc0: vc0ad = ADD vc0ab(0x20), vc09d
    0xae0xc0: vc0ae(0x40) = CONST 
    0xb00xc0: vc0b0 = MLOAD vc0ae(0x40)
    0xb30xc0: vc0b3(0x20) = SUB vc0ad, vc0b0
    0xb50xc0: RETURN vc0b0, vc0b3(0x20)

}

function replaceImplementation(address)() public {
    Begin block 0xd1
    prev=[], succ=[0x2b2B0xd1]
    =================================
    0xd2: vd2(0x3ca) = CONST 
    0xd5: vd5(0xdf) = CONST 
    0xd8: vd8 = CALLDATASIZE 
    0xd9: vd9(0x4) = CONST 
    0xdb: vdb(0x2b2) = CONST 
    0xde: JUMP vdb(0x2b2)

    Begin block 0x2b2B0xd1
    prev=[0xd1], succ=[0x2c0B0xd1, 0x2c4B0xd1]
    =================================
    0x2b3S0xd1: v2b3Vd1(0x0) = CONST 
    0x2b5S0xd1: v2b5Vd1(0x20) = CONST 
    0x2b9S0xd1: v2b9Vd1 = SUB vd8, vd9(0x4)
    0x2baS0xd1: v2baVd1 = SLT v2b9Vd1, v2b5Vd1(0x20)
    0x2bbS0xd1: v2bbVd1 = ISZERO v2baVd1
    0x2bcS0xd1: v2bcVd1(0x2c4) = CONST 
    0x2bfS0xd1: JUMPI v2bcVd1(0x2c4), v2bbVd1

    Begin block 0x2c0B0xd1
    prev=[0x2b2B0xd1], succ=[]
    =================================
    0x2c0S0xd1: v2c0Vd1(0x0) = CONST 
    0x2c3S0xd1: REVERT v2c0Vd1(0x0), v2c0Vd1(0x0)

    Begin block 0x2c4B0xd1
    prev=[0x2b2B0xd1], succ=[0x2d7B0xd1, 0x2dbB0xd1]
    =================================
    0x2c6S0xd1: v2c6Vd1 = CALLDATALOAD vd9(0x4)
    0x2c7S0xd1: v2c7Vd1(0x1) = CONST 
    0x2c9S0xd1: v2c9Vd1(0x1) = CONST 
    0x2cbS0xd1: v2cbVd1(0xa0) = CONST 
    0x2cdS0xd1: v2cdVd1(0x10000000000000000000000000000000000000000) = SHL v2cbVd1(0xa0), v2c9Vd1(0x1)
    0x2ceS0xd1: v2ceVd1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2cdVd1(0x10000000000000000000000000000000000000000), v2c7Vd1(0x1)
    0x2d0S0xd1: v2d0Vd1 = AND v2c6Vd1, v2ceVd1(0xffffffffffffffffffffffffffffffffffffffff)
    0x2d2S0xd1: v2d2Vd1 = EQ v2c6Vd1, v2d0Vd1
    0x2d3S0xd1: v2d3Vd1(0x2db) = CONST 
    0x2d6S0xd1: JUMPI v2d3Vd1(0x2db), v2d2Vd1

    Begin block 0x2d7B0xd1
    prev=[0x2c4B0xd1], succ=[]
    =================================
    0x2d7S0xd1: v2d7Vd1(0x0) = CONST 
    0x2daS0xd1: REVERT v2d7Vd1(0x0), v2d7Vd1(0x0)

    Begin block 0x2dbB0xd1
    prev=[0x2c4B0xd1], succ=[0xdf]
    =================================
    0x2e1S0xd1: JUMP vd5(0xdf)

    Begin block 0xdf
    prev=[0x2dbB0xd1], succ=[0x136]
    =================================
    0xe0: ve0(0x136) = CONST 
    0xe3: JUMP ve0(0x136)

    Begin block 0x136
    prev=[0xdf], succ=[0x149, 0x160]
    =================================
    0x137: v137(0x0) = CONST 
    0x139: v139 = SLOAD v137(0x0)
    0x13a: v13a(0x1) = CONST 
    0x13c: v13c(0x1) = CONST 
    0x13e: v13e(0xa0) = CONST 
    0x140: v140(0x10000000000000000000000000000000000000000) = SHL v13e(0xa0), v13c(0x1)
    0x141: v141(0xffffffffffffffffffffffffffffffffffffffff) = SUB v140(0x10000000000000000000000000000000000000000), v13a(0x1)
    0x142: v142 = AND v141(0xffffffffffffffffffffffffffffffffffffffff), v139
    0x143: v143 = CALLER 
    0x144: v144 = EQ v143, v142
    0x145: v145(0x160) = CONST 
    0x148: JUMPI v145(0x160), v144

    Begin block 0x149
    prev=[0x136], succ=[0x2e2B0x149]
    =================================
    0x149: v149(0x40) = CONST 
    0x14b: v14b = MLOAD v149(0x40)
    0x14c: v14c(0x461bcd) = CONST 
    0x150: v150(0xe5) = CONST 
    0x152: v152(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v150(0xe5), v14c(0x461bcd)
    0x154: MSTORE v14b, v152(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x155: v155(0x4) = CONST 
    0x157: v157 = ADD v155(0x4), v14b
    0x158: v158(0x434) = CONST 
    0x15c: v15c(0x2e2) = CONST 
    0x15f: JUMP v15c(0x2e2)

    Begin block 0x2e2B0x149
    prev=[0x149], succ=[0x434]
    =================================
    0x2e3S0x149: v2e3V149(0x20) = CONST 
    0x2e7S0x149: MSTORE v157, v2e3V149(0x20)
    0x2eaS0x149: v2eaV149 = ADD v2e3V149(0x20), v157
    0x2ebS0x149: MSTORE v2eaV149, v2e3V149(0x20)
    0x2ecS0x149: v2ecV149(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
    0x30dS0x149: v30dV149(0x40) = CONST 
    0x310S0x149: v310V149 = ADD v157, v30dV149(0x40)
    0x311S0x149: MSTORE v310V149, v2ecV149(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x312S0x149: v312V149(0x60) = CONST 
    0x314S0x149: v314V149 = ADD v312V149(0x60), v157
    0x316S0x149: JUMP v158(0x434)

    Begin block 0x434
    prev=[0x2e2B0x149], succ=[]
    =================================
    0x435: v435(0x40) = CONST 
    0x437: v437 = MLOAD v435(0x40)
    0x43a: v43a(0x64) = SUB v314V149, v437
    0x43c: REVERT v437, v43a(0x64)

    Begin block 0x160
    prev=[0x136], succ=[0x167, 0x19f]
    =================================
    0x162: v162 = EXTCODESIZE v2c6Vd1
    0x163: v163(0x19f) = CONST 
    0x166: JUMPI v163(0x19f), v162

    Begin block 0x167
    prev=[0x160], succ=[0x359]
    =================================
    0x167: v167(0x40) = CONST 
    0x169: v169 = MLOAD v167(0x40)
    0x16a: v16a(0x461bcd) = CONST 
    0x16e: v16e(0xe5) = CONST 
    0x170: v170(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v16e(0xe5), v16a(0x461bcd)
    0x172: MSTORE v169, v170(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x173: v173(0x20) = CONST 
    0x175: v175(0x4) = CONST 
    0x178: v178 = ADD v169, v175(0x4)
    0x179: MSTORE v178, v173(0x20)
    0x17a: v17a(0xe) = CONST 
    0x17c: v17c(0x24) = CONST 
    0x17f: v17f = ADD v169, v17c(0x24)
    0x180: MSTORE v17f, v17a(0xe)
    0x181: v181(0x1b9bdd08184818dbdb9d1c9858dd) = CONST 
    0x190: v190(0x92) = CONST 
    0x192: v192(0x6e6f74206120636f6e7472616374000000000000000000000000000000000000) = SHL v190(0x92), v181(0x1b9bdd08184818dbdb9d1c9858dd)
    0x193: v193(0x44) = CONST 
    0x196: v196 = ADD v169, v193(0x44)
    0x197: MSTORE v196, v192(0x6e6f74206120636f6e7472616374000000000000000000000000000000000000)
    0x198: v198(0x64) = CONST 
    0x19a: v19a = ADD v198(0x64), v169
    0x19b: v19b(0x359) = CONST 
    0x19e: JUMP v19b(0x359)

    Begin block 0x359
    prev=[0x167], succ=[]
    =================================
    0x35a: v35a(0x40) = CONST 
    0x35c: v35c = MLOAD v35a(0x40)
    0x35f: v35f(0x64) = SUB v19a, v35c
    0x361: REVERT v35c, v35f(0x64)

    Begin block 0x19f
    prev=[0x160], succ=[0x3ca]
    =================================
    0x1a0: v1a0(0x1) = CONST 
    0x1a3: v1a3 = SLOAD v1a0(0x1)
    0x1a4: v1a4(0x1) = CONST 
    0x1a6: v1a6(0x1) = CONST 
    0x1a8: v1a8(0xa0) = CONST 
    0x1aa: v1aa(0x10000000000000000000000000000000000000000) = SHL v1a8(0xa0), v1a6(0x1)
    0x1ab: v1ab(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1aa(0x10000000000000000000000000000000000000000), v1a4(0x1)
    0x1ac: v1ac(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1ab(0xffffffffffffffffffffffffffffffffffffffff)
    0x1ad: v1ad = AND v1ac(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v1a3
    0x1ae: v1ae(0x1) = CONST 
    0x1b0: v1b0(0x1) = CONST 
    0x1b2: v1b2(0xa0) = CONST 
    0x1b4: v1b4(0x10000000000000000000000000000000000000000) = SHL v1b2(0xa0), v1b0(0x1)
    0x1b5: v1b5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1b4(0x10000000000000000000000000000000000000000), v1ae(0x1)
    0x1b9: v1b9 = AND v1b5(0xffffffffffffffffffffffffffffffffffffffff), v2c6Vd1
    0x1bd: v1bd = OR v1b9, v1ad
    0x1bf: SSTORE v1a0(0x1), v1bd
    0x1c0: JUMP vd2(0x3ca)

    Begin block 0x3ca
    prev=[0x19f], succ=[]
    =================================
    0x3cb: STOP 

}

function transferOwnership(address)() public {
    Begin block 0xe4
    prev=[], succ=[0x2b2B0xe4]
    =================================
    0xe5: ve5(0x3eb) = CONST 
    0xe8: ve8(0xf2) = CONST 
    0xeb: veb = CALLDATASIZE 
    0xec: vec(0x4) = CONST 
    0xee: vee(0x2b2) = CONST 
    0xf1: JUMP vee(0x2b2)

    Begin block 0x2b2B0xe4
    prev=[0xe4], succ=[0x2c0B0xe4, 0x2c4B0xe4]
    =================================
    0x2b3S0xe4: v2b3Ve4(0x0) = CONST 
    0x2b5S0xe4: v2b5Ve4(0x20) = CONST 
    0x2b9S0xe4: v2b9Ve4 = SUB veb, vec(0x4)
    0x2baS0xe4: v2baVe4 = SLT v2b9Ve4, v2b5Ve4(0x20)
    0x2bbS0xe4: v2bbVe4 = ISZERO v2baVe4
    0x2bcS0xe4: v2bcVe4(0x2c4) = CONST 
    0x2bfS0xe4: JUMPI v2bcVe4(0x2c4), v2bbVe4

    Begin block 0x2c0B0xe4
    prev=[0x2b2B0xe4], succ=[]
    =================================
    0x2c0S0xe4: v2c0Ve4(0x0) = CONST 
    0x2c3S0xe4: REVERT v2c0Ve4(0x0), v2c0Ve4(0x0)

    Begin block 0x2c4B0xe4
    prev=[0x2b2B0xe4], succ=[0x2d7B0xe4, 0x2dbB0xe4]
    =================================
    0x2c6S0xe4: v2c6Ve4 = CALLDATALOAD vec(0x4)
    0x2c7S0xe4: v2c7Ve4(0x1) = CONST 
    0x2c9S0xe4: v2c9Ve4(0x1) = CONST 
    0x2cbS0xe4: v2cbVe4(0xa0) = CONST 
    0x2cdS0xe4: v2cdVe4(0x10000000000000000000000000000000000000000) = SHL v2cbVe4(0xa0), v2c9Ve4(0x1)
    0x2ceS0xe4: v2ceVe4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2cdVe4(0x10000000000000000000000000000000000000000), v2c7Ve4(0x1)
    0x2d0S0xe4: v2d0Ve4 = AND v2c6Ve4, v2ceVe4(0xffffffffffffffffffffffffffffffffffffffff)
    0x2d2S0xe4: v2d2Ve4 = EQ v2c6Ve4, v2d0Ve4
    0x2d3S0xe4: v2d3Ve4(0x2db) = CONST 
    0x2d6S0xe4: JUMPI v2d3Ve4(0x2db), v2d2Ve4

    Begin block 0x2d7B0xe4
    prev=[0x2c4B0xe4], succ=[]
    =================================
    0x2d7S0xe4: v2d7Ve4(0x0) = CONST 
    0x2daS0xe4: REVERT v2d7Ve4(0x0), v2d7Ve4(0x0)

    Begin block 0x2dbB0xe4
    prev=[0x2c4B0xe4], succ=[0xf2]
    =================================
    0x2e1S0xe4: JUMP ve8(0xf2)

    Begin block 0xf2
    prev=[0x2dbB0xe4], succ=[0x1c1B0xf2]
    =================================
    0xf3: vf3(0x1c1) = CONST 
    0xf6: JUMP vf3(0x1c1), v2c6Ve4, ve5(0x3eb)

    Begin block 0x1c1B0xf2
    prev=[0xf2], succ=[0x1d4B0xf2, 0x1ebB0xf2]
    =================================
    0x1c2S0xf2: v1c2Vf2(0x0) = CONST 
    0x1c4S0xf2: v1c4Vf2 = SLOAD v1c2Vf2(0x0)
    0x1c5S0xf2: v1c5Vf2(0x1) = CONST 
    0x1c7S0xf2: v1c7Vf2(0x1) = CONST 
    0x1c9S0xf2: v1c9Vf2(0xa0) = CONST 
    0x1cbS0xf2: v1cbVf2(0x10000000000000000000000000000000000000000) = SHL v1c9Vf2(0xa0), v1c7Vf2(0x1)
    0x1ccS0xf2: v1ccVf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1cbVf2(0x10000000000000000000000000000000000000000), v1c5Vf2(0x1)
    0x1cdS0xf2: v1cdVf2 = AND v1ccVf2(0xffffffffffffffffffffffffffffffffffffffff), v1c4Vf2
    0x1ceS0xf2: v1ceVf2 = CALLER 
    0x1cfS0xf2: v1cfVf2 = EQ v1ceVf2, v1cdVf2
    0x1d0S0xf2: v1d0Vf2(0x1eb) = CONST 
    0x1d3S0xf2: JUMPI v1d0Vf2(0x1eb), v1cfVf2

    Begin block 0x1d4B0xf2
    prev=[0x1c1B0xf2], succ=[0x2e2B0x1d4B0xf2]
    =================================
    0x1d4S0xf2: v1d4Vf2(0x40) = CONST 
    0x1d6S0xf2: v1d6Vf2 = MLOAD v1d4Vf2(0x40)
    0x1d7S0xf2: v1d7Vf2(0x461bcd) = CONST 
    0x1dbS0xf2: v1dbVf2(0xe5) = CONST 
    0x1ddS0xf2: v1ddVf2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1dbVf2(0xe5), v1d7Vf2(0x461bcd)
    0x1dfS0xf2: MSTORE v1d6Vf2, v1ddVf2(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1e0S0xf2: v1e0Vf2(0x4) = CONST 
    0x1e2S0xf2: v1e2Vf2 = ADD v1e0Vf2(0x4), v1d6Vf2
    0x1e3S0xf2: v1e3Vf2(0x45c) = CONST 
    0x1e7S0xf2: v1e7Vf2(0x2e2) = CONST 
    0x1eaS0xf2: JUMP v1e7Vf2(0x2e2)

    Begin block 0x2e2B0x1d4B0xf2
    prev=[0x1d4B0xf2], succ=[0x45cB0xf2]
    =================================
    0x2e3S0x1d4S0xf2: v2e3V1d4Vf2(0x20) = CONST 
    0x2e7S0x1d4S0xf2: MSTORE v1e2Vf2, v2e3V1d4Vf2(0x20)
    0x2eaS0x1d4S0xf2: v2eaV1d4Vf2 = ADD v2e3V1d4Vf2(0x20), v1e2Vf2
    0x2ebS0x1d4S0xf2: MSTORE v2eaV1d4Vf2, v2e3V1d4Vf2(0x20)
    0x2ecS0x1d4S0xf2: v2ecV1d4Vf2(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
    0x30dS0x1d4S0xf2: v30dV1d4Vf2(0x40) = CONST 
    0x310S0x1d4S0xf2: v310V1d4Vf2 = ADD v1e2Vf2, v30dV1d4Vf2(0x40)
    0x311S0x1d4S0xf2: MSTORE v310V1d4Vf2, v2ecV1d4Vf2(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x312S0x1d4S0xf2: v312V1d4Vf2(0x60) = CONST 
    0x314S0x1d4S0xf2: v314V1d4Vf2 = ADD v312V1d4Vf2(0x60), v1e2Vf2
    0x316S0x1d4S0xf2: JUMP v1e3Vf2(0x45c)

    Begin block 0x45cB0xf2
    prev=[0x2e2B0x1d4B0xf2], succ=[]
    =================================
    0x45dS0xf2: v45dVf2(0x40) = CONST 
    0x45fS0xf2: v45fVf2 = MLOAD v45dVf2(0x40)
    0x462S0xf2: v462Vf2(0x64) = SUB v314V1d4Vf2, v45fVf2
    0x464S0xf2: REVERT v45fVf2, v462Vf2(0x64)

    Begin block 0x1ebB0xf2
    prev=[0x1c1B0xf2], succ=[0x1faB0xf2, 0x250B0xf2]
    =================================
    0x1ecS0xf2: v1ecVf2(0x1) = CONST 
    0x1eeS0xf2: v1eeVf2(0x1) = CONST 
    0x1f0S0xf2: v1f0Vf2(0xa0) = CONST 
    0x1f2S0xf2: v1f2Vf2(0x10000000000000000000000000000000000000000) = SHL v1f0Vf2(0xa0), v1eeVf2(0x1)
    0x1f3S0xf2: v1f3Vf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1f2Vf2(0x10000000000000000000000000000000000000000), v1ecVf2(0x1)
    0x1f5S0xf2: v1f5Vf2 = AND v2c6Ve4, v1f3Vf2(0xffffffffffffffffffffffffffffffffffffffff)
    0x1f6S0xf2: v1f6Vf2(0x250) = CONST 
    0x1f9S0xf2: JUMPI v1f6Vf2(0x250), v1f5Vf2

    Begin block 0x1faB0xf2
    prev=[0x1ebB0xf2], succ=[0x381B0xf2]
    =================================
    0x1faS0xf2: v1faVf2(0x40) = CONST 
    0x1fcS0xf2: v1fcVf2 = MLOAD v1faVf2(0x40)
    0x1fdS0xf2: v1fdVf2(0x461bcd) = CONST 
    0x201S0xf2: v201Vf2(0xe5) = CONST 
    0x203S0xf2: v203Vf2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v201Vf2(0xe5), v1fdVf2(0x461bcd)
    0x205S0xf2: MSTORE v1fcVf2, v203Vf2(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x206S0xf2: v206Vf2(0x20) = CONST 
    0x208S0xf2: v208Vf2(0x4) = CONST 
    0x20bS0xf2: v20bVf2 = ADD v1fcVf2, v208Vf2(0x4)
    0x20cS0xf2: MSTORE v20bVf2, v206Vf2(0x20)
    0x20dS0xf2: v20dVf2(0x26) = CONST 
    0x20fS0xf2: v20fVf2(0x24) = CONST 
    0x212S0xf2: v212Vf2 = ADD v1fcVf2, v20fVf2(0x24)
    0x213S0xf2: MSTORE v212Vf2, v20dVf2(0x26)
    0x214S0xf2: v214Vf2(0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061) = CONST 
    0x235S0xf2: v235Vf2(0x44) = CONST 
    0x238S0xf2: v238Vf2 = ADD v1fcVf2, v235Vf2(0x44)
    0x239S0xf2: MSTORE v238Vf2, v214Vf2(0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061)
    0x23aS0xf2: v23aVf2(0x646472657373) = CONST 
    0x241S0xf2: v241Vf2(0xd0) = CONST 
    0x243S0xf2: v243Vf2(0x6464726573730000000000000000000000000000000000000000000000000000) = SHL v241Vf2(0xd0), v23aVf2(0x646472657373)
    0x244S0xf2: v244Vf2(0x64) = CONST 
    0x247S0xf2: v247Vf2 = ADD v1fcVf2, v244Vf2(0x64)
    0x248S0xf2: MSTORE v247Vf2, v243Vf2(0x6464726573730000000000000000000000000000000000000000000000000000)
    0x249S0xf2: v249Vf2(0x84) = CONST 
    0x24bS0xf2: v24bVf2 = ADD v249Vf2(0x84), v1fcVf2
    0x24cS0xf2: v24cVf2(0x381) = CONST 
    0x24fS0xf2: JUMP v24cVf2(0x381)

    Begin block 0x381B0xf2
    prev=[0x1faB0xf2], succ=[]
    =================================
    0x382S0xf2: v382Vf2(0x40) = CONST 
    0x384S0xf2: v384Vf2 = MLOAD v382Vf2(0x40)
    0x387S0xf2: v387Vf2(0x84) = SUB v24bVf2, v384Vf2
    0x389S0xf2: REVERT v384Vf2, v387Vf2(0x84)

    Begin block 0x250B0xf2
    prev=[0x1ebB0xf2], succ=[0x262B0x250B0xf2]
    =================================
    0x251S0xf2: v251Vf2(0x259) = CONST 
    0x255S0xf2: v255Vf2(0x262) = CONST 
    0x258S0xf2: JUMP v255Vf2(0x262), v2c6Ve4, v251Vf2(0x259)

    Begin block 0x262B0x250B0xf2
    prev=[0x250B0xf2], succ=[0x259B0xf2]
    =================================
    0x263S0x250S0xf2: v263V250Vf2(0x0) = CONST 
    0x266S0x250S0xf2: v266V250Vf2 = SLOAD v263V250Vf2(0x0)
    0x267S0x250S0xf2: v267V250Vf2(0x1) = CONST 
    0x269S0x250S0xf2: v269V250Vf2(0x1) = CONST 
    0x26bS0x250S0xf2: v26bV250Vf2(0xa0) = CONST 
    0x26dS0x250S0xf2: v26dV250Vf2(0x10000000000000000000000000000000000000000) = SHL v26bV250Vf2(0xa0), v269V250Vf2(0x1)
    0x26eS0x250S0xf2: v26eV250Vf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26dV250Vf2(0x10000000000000000000000000000000000000000), v267V250Vf2(0x1)
    0x271S0x250S0xf2: v271V250Vf2 = AND v26eV250Vf2(0xffffffffffffffffffffffffffffffffffffffff), v2c6Ve4
    0x272S0x250S0xf2: v272V250Vf2(0x1) = CONST 
    0x274S0x250S0xf2: v274V250Vf2(0x1) = CONST 
    0x276S0x250S0xf2: v276V250Vf2(0xa0) = CONST 
    0x278S0x250S0xf2: v278V250Vf2(0x10000000000000000000000000000000000000000) = SHL v276V250Vf2(0xa0), v274V250Vf2(0x1)
    0x279S0x250S0xf2: v279V250Vf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v278V250Vf2(0x10000000000000000000000000000000000000000), v272V250Vf2(0x1)
    0x27aS0x250S0xf2: v27aV250Vf2(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v279V250Vf2(0xffffffffffffffffffffffffffffffffffffffff)
    0x27cS0x250S0xf2: v27cV250Vf2 = AND v266V250Vf2, v27aV250Vf2(0xffffffffffffffffffffffff0000000000000000000000000000000000000000)
    0x27eS0x250S0xf2: v27eV250Vf2 = OR v271V250Vf2, v27cV250Vf2
    0x280S0x250S0xf2: SSTORE v263V250Vf2(0x0), v27eV250Vf2
    0x281S0x250S0xf2: v281V250Vf2(0x40) = CONST 
    0x283S0x250S0xf2: v283V250Vf2 = MLOAD v281V250Vf2(0x40)
    0x287S0x250S0xf2: v287V250Vf2 = AND v266V250Vf2, v26eV250Vf2(0xffffffffffffffffffffffffffffffffffffffff)
    0x28bS0x250S0xf2: v28bV250Vf2(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x2aeS0x250S0xf2: LOG3 v283V250Vf2, v263V250Vf2(0x0), v28bV250Vf2(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v287V250Vf2, v271V250Vf2
    0x2b1S0x250S0xf2: JUMP v251Vf2(0x259)

    Begin block 0x259B0xf2
    prev=[0x262B0x250B0xf2], succ=[0x3eb]
    =================================
    0x25bS0xf2: JUMP ve5(0x3eb)

    Begin block 0x3eb
    prev=[0x259B0xf2], succ=[]
    =================================
    0x3ec: STOP 

}

