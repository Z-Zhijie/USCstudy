function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0xf61]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0xf23: vf23(0xf61) = CONST 
    0xf24: JUMPI vf23(0xf61), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x71, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x9852595c) = CONST 
    0x26: v26 = GT v21(0x9852595c), v1f
    0x27: v27(0x71) = CONST 
    0x2a: JUMPI v27(0x71), v26

    Begin block 0x71
    prev=[0x1a], succ=[0xf3d, 0x7d]
    =================================
    0x73: v73(0x4e71d92d) = CONST 
    0x78: v78 = EQ v73(0x4e71d92d), v1f
    0xf31: vf31(0xf3d) = CONST 
    0xf32: JUMPI vf31(0xf3d), v78

    Begin block 0xf3d
    prev=[0x71], succ=[]
    =================================
    0xf3e: vf3e(0xb9) = CONST 
    0xf3f: CALLPRIVATE vf3e(0xb9)

    Begin block 0x7d
    prev=[0x71], succ=[0xf40, 0x88]
    =================================
    0x7e: v7e(0x766e33f4) = CONST 
    0x83: v83 = EQ v7e(0x766e33f4), v1f
    0xf33: vf33(0xf40) = CONST 
    0xf34: JUMPI vf33(0xf40), v83

    Begin block 0xf40
    prev=[0x7d], succ=[]
    =================================
    0xf41: vf41(0xc3) = CONST 
    0xf42: CALLPRIVATE vf41(0xc3)

    Begin block 0x88
    prev=[0x7d], succ=[0xf43, 0x93]
    =================================
    0x89: v89(0x7e1c0c09) = CONST 
    0x8e: v8e = EQ v89(0x7e1c0c09), v1f
    0xf35: vf35(0xf43) = CONST 
    0xf36: JUMPI vf35(0xf43), v8e

    Begin block 0xf43
    prev=[0x88], succ=[]
    =================================
    0xf44: vf44(0xdd) = CONST 
    0xf45: CALLPRIVATE vf44(0xdd)

    Begin block 0x93
    prev=[0x88], succ=[0xf46, 0x9e]
    =================================
    0x94: v94(0x8033fe49) = CONST 
    0x99: v99 = EQ v94(0x8033fe49), v1f
    0xf37: vf37(0xf46) = CONST 
    0xf38: JUMPI vf37(0xf46), v99

    Begin block 0xf46
    prev=[0x93], succ=[]
    =================================
    0xf47: vf47(0xe5) = CONST 
    0xf48: CALLPRIVATE vf47(0xe5)

    Begin block 0x9e
    prev=[0x93], succ=[0xf49, 0xa9]
    =================================
    0x9f: v9f(0x86a1da9c) = CONST 
    0xa4: va4 = EQ v9f(0x86a1da9c), v1f
    0xf39: vf39(0xf49) = CONST 
    0xf3a: JUMPI vf39(0xf49), va4

    Begin block 0xf49
    prev=[0x9e], succ=[]
    =================================
    0xf4a: vf4a(0xed) = CONST 
    0xf4b: CALLPRIVATE vf4a(0xed)

    Begin block 0xa9
    prev=[0x9e], succ=[0xf4c, 0xb4]
    =================================
    0xaa: vaa(0x89885049) = CONST 
    0xaf: vaf = EQ vaa(0x89885049), v1f
    0xf3b: vf3b(0xf4c) = CONST 
    0xf3c: JUMPI vf3b(0xf4c), vaf

    Begin block 0xf4c
    prev=[0xa9], succ=[]
    =================================
    0xf4d: vf4d(0x113) = CONST 
    0xf4e: CALLPRIVATE vf4d(0x113)

    Begin block 0xb4
    prev=[0xa9], succ=[]
    =================================
    0xb5: vb5(0x0) = CONST 
    0xb8: REVERT vb5(0x0), vb5(0x0)

    Begin block 0x2b
    prev=[0x1a], succ=[0xf4f, 0x36]
    =================================
    0x2c: v2c(0x9852595c) = CONST 
    0x31: v31 = EQ v2c(0x9852595c), v1f
    0xf25: vf25(0xf4f) = CONST 
    0xf26: JUMPI vf25(0xf4f), v31

    Begin block 0xf4f
    prev=[0x2b], succ=[]
    =================================
    0xf50: vf50(0x139) = CONST 
    0xf51: CALLPRIVATE vf50(0x139)

    Begin block 0x36
    prev=[0x2b], succ=[0xf52, 0x41]
    =================================
    0x37: v37(0xa3f8eace) = CONST 
    0x3c: v3c = EQ v37(0xa3f8eace), v1f
    0xf27: vf27(0xf52) = CONST 
    0xf28: JUMPI vf27(0xf52), v3c

    Begin block 0xf52
    prev=[0x36], succ=[]
    =================================
    0xf53: vf53(0x15f) = CONST 
    0xf54: CALLPRIVATE vf53(0x15f)

    Begin block 0x41
    prev=[0x36], succ=[0xf55, 0x4c]
    =================================
    0x42: v42(0xa9059cbb) = CONST 
    0x47: v47 = EQ v42(0xa9059cbb), v1f
    0xf29: vf29(0xf55) = CONST 
    0xf2a: JUMPI vf29(0xf55), v47

    Begin block 0xf55
    prev=[0x41], succ=[]
    =================================
    0xf56: vf56(0x185) = CONST 
    0xf57: CALLPRIVATE vf56(0x185)

    Begin block 0x4c
    prev=[0x41], succ=[0xf58, 0x57]
    =================================
    0x4d: v4d(0xb6c238b5) = CONST 
    0x52: v52 = EQ v4d(0xb6c238b5), v1f
    0xf2b: vf2b(0xf58) = CONST 
    0xf2c: JUMPI vf2b(0xf58), v52

    Begin block 0xf58
    prev=[0x4c], succ=[]
    =================================
    0xf59: vf59(0x1b1) = CONST 
    0xf5a: CALLPRIVATE vf59(0x1b1)

    Begin block 0x57
    prev=[0x4c], succ=[0xf5b, 0x62]
    =================================
    0x58: v58(0xfc0c546a) = CONST 
    0x5d: v5d = EQ v58(0xfc0c546a), v1f
    0xf2d: vf2d(0xf5b) = CONST 
    0xf2e: JUMPI vf2d(0xf5b), v5d

    Begin block 0xf5b
    prev=[0x57], succ=[]
    =================================
    0xf5c: vf5c(0x1d7) = CONST 
    0xf5d: CALLPRIVATE vf5c(0x1d7)

    Begin block 0x62
    prev=[0x57], succ=[0x6d, 0xf5e]
    =================================
    0x63: v63(0xfd536f5d) = CONST 
    0x68: v68 = EQ v63(0xfd536f5d), v1f
    0xf2f: vf2f(0xf5e) = CONST 
    0xf30: JUMPI vf2f(0xf5e), v68

    Begin block 0x6d
    prev=[0x62], succ=[0xc45]
    =================================
    0x6d: v6d(0xc45) = CONST 
    0x70: JUMP v6d(0xc45)

    Begin block 0xc45
    prev=[0x6d], succ=[]
    =================================
    0xc46: vc46(0x0) = CONST 
    0xc49: REVERT vc46(0x0), vc46(0x0)

    Begin block 0xf5e
    prev=[0x62], succ=[]
    =================================
    0xf5f: vf5f(0x1fb) = CONST 
    0xf60: CALLPRIVATE vf5f(0x1fb)

    Begin block 0xf61
    prev=[0x10], succ=[]
    =================================
    0xf62: vf62(0xc21) = CONST 
    0xf63: CALLPRIVATE vf62(0xc21)

}

function claimableAmount(address)() public {
    Begin block 0x113
    prev=[], succ=[0x125, 0x129]
    =================================
    0x114: v114(0xd4e) = CONST 
    0x117: v117(0x4) = CONST 
    0x11a: v11a = CALLDATASIZE 
    0x11b: v11b = SUB v11a, v117(0x4)
    0x11c: v11c(0x20) = CONST 
    0x11f: v11f = LT v11b, v11c(0x20)
    0x120: v120 = ISZERO v11f
    0x121: v121(0x129) = CONST 
    0x124: JUMPI v121(0x129), v120

    Begin block 0x125
    prev=[0x113], succ=[]
    =================================
    0x125: v125(0x0) = CONST 
    0x128: REVERT v125(0x0), v125(0x0)

    Begin block 0x129
    prev=[0x113], succ=[0x51d]
    =================================
    0x12b: v12b = CALLDATALOAD v117(0x4)
    0x12c: v12c(0x1) = CONST 
    0x12e: v12e(0x1) = CONST 
    0x130: v130(0xa0) = CONST 
    0x132: v132(0x10000000000000000000000000000000000000000) = SHL v130(0xa0), v12e(0x1)
    0x133: v133(0xffffffffffffffffffffffffffffffffffffffff) = SUB v132(0x10000000000000000000000000000000000000000), v12c(0x1)
    0x134: v134 = AND v133(0xffffffffffffffffffffffffffffffffffffffff), v12b
    0x135: v135(0x51d) = CONST 
    0x138: JUMP v135(0x51d)

    Begin block 0x51d
    prev=[0x129], succ=[0xe54]
    =================================
    0x51e: v51e(0x0) = CONST 
    0x520: v520(0x54a) = CONST 
    0x523: v523(0xe54) = CONST 
    0x527: v527(0x564) = CONST 
    0x52a: v52a_0 = CALLPRIVATE v527(0x564), v134, v523(0xe54)

    Begin block 0xe54
    prev=[0x51d], succ=[0xb0bB0xe54]
    =================================
    0xe55: ve55(0x1) = CONST 
    0xe57: ve57(0x1) = CONST 
    0xe59: ve59(0xa0) = CONST 
    0xe5b: ve5b(0x10000000000000000000000000000000000000000) = SHL ve59(0xa0), ve57(0x1)
    0xe5c: ve5c(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve5b(0x10000000000000000000000000000000000000000), ve55(0x1)
    0xe5e: ve5e = AND v134, ve5c(0xffffffffffffffffffffffffffffffffffffffff)
    0xe5f: ve5f(0x0) = CONST 
    0xe63: MSTORE ve5f(0x0), ve5e
    0xe64: ve64(0x6) = CONST 
    0xe66: ve66(0x20) = CONST 
    0xe68: MSTORE ve66(0x20), ve64(0x6)
    0xe69: ve69(0x40) = CONST 
    0xe6c: ve6c = SHA3 ve5f(0x0), ve69(0x40)
    0xe6d: ve6d = SLOAD ve6c
    0xe6f: ve6f(0xb0b) = CONST 
    0xe72: JUMP ve6f(0xb0b)

    Begin block 0xb0bB0xe54
    prev=[0xe54], succ=[0xb190xb0bB0xe54, 0xef60xb0bB0xe54]
    =================================
    0xb0cS0xe54: vb0cVe54(0x0) = CONST 
    0xb10S0xe54: vb10Ve54 = ADD v52a_0, ve6d
    0xb13S0xe54: vb13Ve54 = LT vb10Ve54, ve6d
    0xb14S0xe54: vb14Ve54 = ISZERO vb13Ve54
    0xb15S0xe54: vb15Ve54(0xef6) = CONST 
    0xb18S0xe54: JUMPI vb15Ve54(0xef6), vb14Ve54

    Begin block 0xb190xb0bB0xe54
    prev=[0xb0bB0xe54], succ=[]
    =================================
    0xb190xb0bS0xe54: vb0bb19Ve54(0x0) = CONST 
    0xb1c0xb0bS0xe54: REVERT vb0bb19Ve54(0x0), vb0bb19Ve54(0x0)

    Begin block 0xef60xb0bB0xe54
    prev=[0xb0bB0xe54], succ=[0x54a]
    =================================
    0xefc0xb0bS0xe54: JUMP v520(0x54a)

    Begin block 0x54a
    prev=[0xef60xb0bB0xe54], succ=[0x54d0x113]
    =================================

    Begin block 0x54d0x113
    prev=[0x54a], succ=[0xd4e]
    =================================
    0x5510x113: JUMP v114(0xd4e)

    Begin block 0xd4e
    prev=[0x54d0x113], succ=[]
    =================================
    0xd4f: vd4f(0x40) = CONST 
    0xd52: vd52 = MLOAD vd4f(0x40)
    0xd55: MSTORE vd52, vb10Ve54
    0xd56: vd56 = MLOAD vd4f(0x40)
    0xd5a: vd5a(0x0) = SUB vd52, vd56
    0xd5b: vd5b(0x20) = CONST 
    0xd5d: vd5d(0x20) = ADD vd5b(0x20), vd5a(0x0)
    0xd5f: RETURN vd56, vd5d(0x20)

}

function released(address)() public {
    Begin block 0x139
    prev=[], succ=[0x14b, 0x14f]
    =================================
    0x13a: v13a(0xd7f) = CONST 
    0x13d: v13d(0x4) = CONST 
    0x140: v140 = CALLDATASIZE 
    0x141: v141 = SUB v140, v13d(0x4)
    0x142: v142(0x20) = CONST 
    0x145: v145 = LT v141, v142(0x20)
    0x146: v146 = ISZERO v145
    0x147: v147(0x14f) = CONST 
    0x14a: JUMPI v147(0x14f), v146

    Begin block 0x14b
    prev=[0x139], succ=[]
    =================================
    0x14b: v14b(0x0) = CONST 
    0x14e: REVERT v14b(0x0), v14b(0x0)

    Begin block 0x14f
    prev=[0x139], succ=[0x552]
    =================================
    0x151: v151 = CALLDATALOAD v13d(0x4)
    0x152: v152(0x1) = CONST 
    0x154: v154(0x1) = CONST 
    0x156: v156(0xa0) = CONST 
    0x158: v158(0x10000000000000000000000000000000000000000) = SHL v156(0xa0), v154(0x1)
    0x159: v159(0xffffffffffffffffffffffffffffffffffffffff) = SUB v158(0x10000000000000000000000000000000000000000), v152(0x1)
    0x15a: v15a = AND v159(0xffffffffffffffffffffffffffffffffffffffff), v151
    0x15b: v15b(0x552) = CONST 
    0x15e: JUMP v15b(0x552)

    Begin block 0x552
    prev=[0x14f], succ=[0xd7f]
    =================================
    0x553: v553(0x6) = CONST 
    0x555: v555(0x20) = CONST 
    0x557: MSTORE v555(0x20), v553(0x6)
    0x558: v558(0x0) = CONST 
    0x55c: MSTORE v558(0x0), v15a
    0x55d: v55d(0x40) = CONST 
    0x560: v560 = SHA3 v558(0x0), v55d(0x40)
    0x561: v561 = SLOAD v560
    0x563: JUMP v13a(0xd7f)

    Begin block 0xd7f
    prev=[0x552], succ=[]
    =================================
    0xd80: vd80(0x40) = CONST 
    0xd83: vd83 = MLOAD vd80(0x40)
    0xd86: MSTORE vd83, v561
    0xd87: vd87 = MLOAD vd80(0x40)
    0xd8b: vd8b(0x0) = SUB vd83, vd87
    0xd8c: vd8c(0x20) = CONST 
    0xd8e: vd8e(0x20) = ADD vd8c(0x20), vd8b(0x0)
    0xd90: RETURN vd87, vd8e(0x20)

}

function releasable(address)() public {
    Begin block 0x15f
    prev=[], succ=[0x171, 0x175]
    =================================
    0x160: v160(0xdb0) = CONST 
    0x163: v163(0x4) = CONST 
    0x166: v166 = CALLDATASIZE 
    0x167: v167 = SUB v166, v163(0x4)
    0x168: v168(0x20) = CONST 
    0x16b: v16b = LT v167, v168(0x20)
    0x16c: v16c = ISZERO v16b
    0x16d: v16d(0x175) = CONST 
    0x170: JUMPI v16d(0x175), v16c

    Begin block 0x171
    prev=[0x15f], succ=[]
    =================================
    0x171: v171(0x0) = CONST 
    0x174: REVERT v171(0x0), v171(0x0)

    Begin block 0x175
    prev=[0x15f], succ=[0x5640x15f]
    =================================
    0x177: v177 = CALLDATALOAD v163(0x4)
    0x178: v178(0x1) = CONST 
    0x17a: v17a(0x1) = CONST 
    0x17c: v17c(0xa0) = CONST 
    0x17e: v17e(0x10000000000000000000000000000000000000000) = SHL v17c(0xa0), v17a(0x1)
    0x17f: v17f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v17e(0x10000000000000000000000000000000000000000), v178(0x1)
    0x180: v180 = AND v17f(0xffffffffffffffffffffffffffffffffffffffff), v177
    0x181: v181(0x564) = CONST 
    0x184: JUMP v181(0x564)

    Begin block 0x5640x15f
    prev=[0x175], succ=[0x5780x15f, 0x5710x15f]
    =================================
    0x5650x15f: v15f565(0x0) = CONST 
    0x5670x15f: v15f567(0x2) = CONST 
    0x5690x15f: v15f569 = SLOAD v15f567(0x2)
    0x56a0x15f: v15f56a = TIMESTAMP 
    0x56b0x15f: v15f56b = LT v15f56a, v15f569
    0x56c0x15f: v15f56c = ISZERO v15f56b
    0x56d0x15f: v15f56d(0x578) = CONST 
    0x5700x15f: JUMPI v15f56d(0x578), v15f56c

    Begin block 0x5780x15f
    prev=[0x5640x15f], succ=[0x5850x15f, 0x58a0x15f]
    =================================
    0x5790x15f: v15f579(0x0) = CONST 
    0x57b0x15f: v15f57b(0x3) = CONST 
    0x57d0x15f: v15f57d = SLOAD v15f57b(0x3)
    0x57e0x15f: v15f57e = TIMESTAMP 
    0x57f0x15f: v15f57f = LT v15f57e, v15f57d
    0x5800x15f: v15f580 = ISZERO v15f57f
    0x5810x15f: v15f581(0x58a) = CONST 
    0x5840x15f: JUMPI v15f581(0x58a), v15f580

    Begin block 0x5850x15f
    prev=[0x5780x15f], succ=[0x58e0x15f]
    =================================
    0x5850x15f: v15f585 = TIMESTAMP 
    0x5860x15f: v15f586(0x58e) = CONST 
    0x5890x15f: JUMP v15f586(0x58e)

    Begin block 0x58e0x15f
    prev=[0x5850x15f, 0x58a0x15f], succ=[0x5ba0x15f]
    =================================
    0x58f0x15f: v15f58f(0x1) = CONST 
    0x5910x15f: v15f591(0x1) = CONST 
    0x5930x15f: v15f593(0xa0) = CONST 
    0x5950x15f: v15f595(0x10000000000000000000000000000000000000000) = SHL v15f593(0xa0), v15f591(0x1)
    0x5960x15f: v15f596(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f595(0x10000000000000000000000000000000000000000), v15f58f(0x1)
    0x5980x15f: v15f598 = AND v180, v15f596(0xffffffffffffffffffffffffffffffffffffffff)
    0x5990x15f: v15f599(0x0) = CONST 
    0x59d0x15f: MSTORE v15f599(0x0), v15f598
    0x59e0x15f: v15f59e(0x4) = CONST 
    0x5a00x15f: v15f5a0(0x20) = CONST 
    0x5a20x15f: MSTORE v15f5a0(0x20), v15f59e(0x4)
    0x5a30x15f: v15f5a3(0x40) = CONST 
    0x5a60x15f: v15f5a6 = SHA3 v15f599(0x0), v15f5a3(0x40)
    0x5a70x15f: v15f5a7 = SLOAD v15f5a6
    0x5a80x15f: v15f5a8(0x3) = CONST 
    0x5aa0x15f: v15f5aa = SLOAD v15f5a8(0x3)
    0x5ae0x15f: v15f5ae(0xe92) = CONST 
    0x5b20x15f: v15f5b2(0x5ba) = CONST 
    0x5b60x15f: v15f5b6(0xaf1) = CONST 
    0x5b90x15f: v15f5b9_0 = CALLPRIVATE v15f5b6(0xaf1), v15f5a7, v15f5aa, v15f5b2(0x5ba)

    Begin block 0x5ba0x15f
    prev=[0x58e0x15f], succ=[0x5e20x15f]
    =================================
    0x5ba0x15f_0x2: v5ba15f_2 = PHI v15f58d, v15f585
    0x5bb0x15f: v15f5bb(0x1) = CONST 
    0x5bd0x15f: v15f5bd(0x1) = CONST 
    0x5bf0x15f: v15f5bf(0xa0) = CONST 
    0x5c10x15f: v15f5c1(0x10000000000000000000000000000000000000000) = SHL v15f5bf(0xa0), v15f5bd(0x1)
    0x5c20x15f: v15f5c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f5c1(0x10000000000000000000000000000000000000000), v15f5bb(0x1)
    0x5c40x15f: v15f5c4 = AND v180, v15f5c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x5c50x15f: v15f5c5(0x0) = CONST 
    0x5c90x15f: MSTORE v15f5c5(0x0), v15f5c4
    0x5ca0x15f: v15f5ca(0x4) = CONST 
    0x5cc0x15f: v15f5cc(0x20) = CONST 
    0x5ce0x15f: MSTORE v15f5cc(0x20), v15f5ca(0x4)
    0x5cf0x15f: v15f5cf(0x40) = CONST 
    0x5d20x15f: v15f5d2 = SHA3 v15f5c5(0x0), v15f5cf(0x40)
    0x5d30x15f: v15f5d3 = SLOAD v15f5d2
    0x5d40x15f: v15f5d4(0x601) = CONST 
    0x5d80x15f: v15f5d8(0x5e2) = CONST 
    0x5de0x15f: v15f5de(0xaf1) = CONST 
    0x5e10x15f: v15f5e1_0 = CALLPRIVATE v15f5de(0xaf1), v15f5d3, v5ba15f_2, v15f5d8(0x5e2)

    Begin block 0x5e20x15f
    prev=[0x5ba0x15f], succ=[0x6010x15f]
    =================================
    0x5e30x15f: v15f5e3(0x1) = CONST 
    0x5e50x15f: v15f5e5(0x1) = CONST 
    0x5e70x15f: v15f5e7(0xa0) = CONST 
    0x5e90x15f: v15f5e9(0x10000000000000000000000000000000000000000) = SHL v15f5e7(0xa0), v15f5e5(0x1)
    0x5ea0x15f: v15f5ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f5e9(0x10000000000000000000000000000000000000000), v15f5e3(0x1)
    0x5ec0x15f: v15f5ec = AND v180, v15f5ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x5ed0x15f: v15f5ed(0x0) = CONST 
    0x5f10x15f: MSTORE v15f5ed(0x0), v15f5ec
    0x5f20x15f: v15f5f2(0x5) = CONST 
    0x5f40x15f: v15f5f4(0x20) = CONST 
    0x5f60x15f: MSTORE v15f5f4(0x20), v15f5f2(0x5)
    0x5f70x15f: v15f5f7(0x40) = CONST 
    0x5fa0x15f: v15f5fa = SHA3 v15f5ed(0x0), v15f5f7(0x40)
    0x5fb0x15f: v15f5fb = SLOAD v15f5fa
    0x5fd0x15f: v15f5fd(0xb1d) = CONST 
    0x6000x15f: v15f600_0 = CALLPRIVATE v15f5fd(0xb1d), v15f5e1_0, v15f5fb, v15f5d4(0x601)

    Begin block 0x6010x15f
    prev=[0x5e20x15f], succ=[0xb440x15f]
    =================================
    0x6030x15f: v15f603(0xb44) = CONST 
    0x6060x15f: JUMP v15f603(0xb44)

    Begin block 0xb440x15f
    prev=[0x6010x15f], succ=[0xb4e0x15f, 0xb520x15f]
    =================================
    0xb450x15f: v15fb45(0x0) = CONST 
    0xb490x15f: v15fb49 = GT v15f5b9_0, v15fb45(0x0)
    0xb4a0x15f: v15fb4a(0xb52) = CONST 
    0xb4d0x15f: JUMPI v15fb4a(0xb52), v15fb49

    Begin block 0xb4e0x15f
    prev=[0xb440x15f], succ=[]
    =================================
    0xb4e0x15f: v15fb4e(0x0) = CONST 
    0xb510x15f: REVERT v15fb4e(0x0), v15fb4e(0x0)

    Begin block 0xb520x15f
    prev=[0xb440x15f], succ=[0xb5c0x15f, 0xb5d0x15f]
    =================================
    0xb530x15f: v15fb53(0x0) = CONST 
    0xb580x15f: v15fb58(0xb5d) = CONST 
    0xb5b0x15f: JUMPI v15fb58(0xb5d), v15f5b9_0

    Begin block 0xb5c0x15f
    prev=[0xb520x15f], succ=[]
    =================================
    0xb5c0x15f: THROW 

    Begin block 0xb5d0x15f
    prev=[0xb520x15f], succ=[0xe920x15f]
    =================================
    0xb5e0x15f: v15fb5e = DIV v15f600_0, v15f5b9_0
    0xb650x15f: JUMP v15f5ae(0xe92)

    Begin block 0xe920x15f
    prev=[0xb5d0x15f], succ=[0xdb0]
    =================================
    0xe980x15f: JUMP v160(0xdb0)

    Begin block 0xdb0
    prev=[0x54d0x15f, 0xe920x15f], succ=[]
    =================================
    0xdb0_0x0: vdb0_0 = PHI v15fb5e, v15f572(0x0)
    0xdb1: vdb1(0x40) = CONST 
    0xdb4: vdb4 = MLOAD vdb1(0x40)
    0xdb7: MSTORE vdb4, vdb0_0
    0xdb8: vdb8 = MLOAD vdb1(0x40)
    0xdbc: vdbc(0x0) = SUB vdb4, vdb8
    0xdbd: vdbd(0x20) = CONST 
    0xdbf: vdbf(0x20) = ADD vdbd(0x20), vdbc(0x0)
    0xdc1: RETURN vdb8, vdbf(0x20)

    Begin block 0x58a0x15f
    prev=[0x5780x15f], succ=[0x58e0x15f]
    =================================
    0x58b0x15f: v15f58b(0x3) = CONST 
    0x58d0x15f: v15f58d = SLOAD v15f58b(0x3)

    Begin block 0x5710x15f
    prev=[0x5640x15f], succ=[0x54d0x15f]
    =================================
    0x5720x15f: v15f572(0x0) = CONST 
    0x5740x15f: v15f574(0x54d) = CONST 
    0x5770x15f: JUMP v15f574(0x54d)

    Begin block 0x54d0x15f
    prev=[0x5710x15f], succ=[0xdb0]
    =================================
    0x5510x15f: JUMP v160(0xdb0)

}

function transfer(address,uint256)() public {
    Begin block 0x185
    prev=[], succ=[0x197, 0x19b]
    =================================
    0x186: v186(0xde1) = CONST 
    0x189: v189(0x4) = CONST 
    0x18c: v18c = CALLDATASIZE 
    0x18d: v18d = SUB v18c, v189(0x4)
    0x18e: v18e(0x40) = CONST 
    0x191: v191 = LT v18d, v18e(0x40)
    0x192: v192 = ISZERO v191
    0x193: v193(0x19b) = CONST 
    0x196: JUMPI v193(0x19b), v192

    Begin block 0x197
    prev=[0x185], succ=[]
    =================================
    0x197: v197(0x0) = CONST 
    0x19a: REVERT v197(0x0), v197(0x0)

    Begin block 0x19b
    prev=[0x185], succ=[0x60e]
    =================================
    0x19d: v19d(0x1) = CONST 
    0x19f: v19f(0x1) = CONST 
    0x1a1: v1a1(0xa0) = CONST 
    0x1a3: v1a3(0x10000000000000000000000000000000000000000) = SHL v1a1(0xa0), v19f(0x1)
    0x1a4: v1a4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a3(0x10000000000000000000000000000000000000000), v19d(0x1)
    0x1a6: v1a6 = CALLDATALOAD v189(0x4)
    0x1a7: v1a7 = AND v1a6, v1a4(0xffffffffffffffffffffffffffffffffffffffff)
    0x1a9: v1a9(0x20) = CONST 
    0x1ab: v1ab(0x24) = ADD v1a9(0x20), v189(0x4)
    0x1ac: v1ac = CALLDATALOAD v1ab(0x24)
    0x1ad: v1ad(0x60e) = CONST 
    0x1b0: JUMP v1ad(0x60e)

    Begin block 0x60e
    prev=[0x19b], succ=[0x620, 0x66c]
    =================================
    0x60f: v60f(0x1) = CONST 
    0x611: v611(0x1) = CONST 
    0x613: v613(0xa0) = CONST 
    0x615: v615(0x10000000000000000000000000000000000000000) = SHL v613(0xa0), v611(0x1)
    0x616: v616(0xffffffffffffffffffffffffffffffffffffffff) = SUB v615(0x10000000000000000000000000000000000000000), v60f(0x1)
    0x618: v618 = AND v1a7, v616(0xffffffffffffffffffffffffffffffffffffffff)
    0x619: v619 = CALLER 
    0x61a: v61a = EQ v619, v618
    0x61b: v61b = ISZERO v61a
    0x61c: v61c(0x66c) = CONST 
    0x61f: JUMPI v61c(0x66c), v61b

    Begin block 0x620
    prev=[0x60e], succ=[]
    =================================
    0x620: v620(0x40) = CONST 
    0x623: v623 = MLOAD v620(0x40)
    0x624: v624(0x461bcd) = CONST 
    0x628: v628(0xe5) = CONST 
    0x62a: v62a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v628(0xe5), v624(0x461bcd)
    0x62c: MSTORE v623, v62a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x62d: v62d(0x20) = CONST 
    0x62f: v62f(0x4) = CONST 
    0x632: v632 = ADD v623, v62f(0x4)
    0x633: MSTORE v632, v62d(0x20)
    0x634: v634(0x1d) = CONST 
    0x636: v636(0x24) = CONST 
    0x639: v639 = ADD v623, v636(0x24)
    0x63a: MSTORE v639, v634(0x1d)
    0x63b: v63b(0x4d6179206e6f74207472616e7366657220746f20796f757273656c662e000000) = CONST 
    0x65c: v65c(0x44) = CONST 
    0x65f: v65f = ADD v623, v65c(0x44)
    0x660: MSTORE v65f, v63b(0x4d6179206e6f74207472616e7366657220746f20796f757273656c662e000000)
    0x662: v662 = MLOAD v620(0x40)
    0x666: v666(0x0) = SUB v623, v662
    0x667: v667(0x64) = CONST 
    0x669: v669(0x64) = ADD v667(0x64), v666(0x0)
    0x66b: REVERT v662, v669(0x64)

    Begin block 0x66c
    prev=[0x60e], succ=[0x678]
    =================================
    0x66d: v66d(0x68e) = CONST 
    0x670: v670(0x678) = CONST 
    0x673: v673 = CALLER 
    0x674: v674(0x564) = CONST 
    0x677: v677_0 = CALLPRIVATE v674(0x564), v673, v670(0x678)

    Begin block 0x678
    prev=[0x66c], succ=[0xb0bB0x678]
    =================================
    0x679: v679 = CALLER 
    0x67a: v67a(0x0) = CONST 
    0x67e: MSTORE v67a(0x0), v679
    0x67f: v67f(0x6) = CONST 
    0x681: v681(0x20) = CONST 
    0x683: MSTORE v681(0x20), v67f(0x6)
    0x684: v684(0x40) = CONST 
    0x687: v687 = SHA3 v67a(0x0), v684(0x40)
    0x688: v688 = SLOAD v687
    0x68a: v68a(0xb0b) = CONST 
    0x68d: JUMP v68a(0xb0b)

    Begin block 0xb0bB0x678
    prev=[0x678], succ=[0xb190xb0bB0x678, 0xef60xb0bB0x678]
    =================================
    0xb0cS0x678: vb0cV678(0x0) = CONST 
    0xb10S0x678: vb10V678 = ADD v677_0, v688
    0xb13S0x678: vb13V678 = LT vb10V678, v688
    0xb14S0x678: vb14V678 = ISZERO vb13V678
    0xb15S0x678: vb15V678(0xef6) = CONST 
    0xb18S0x678: JUMPI vb15V678(0xef6), vb14V678

    Begin block 0xb190xb0bB0x678
    prev=[0xb0bB0x678], succ=[]
    =================================
    0xb190xb0bS0x678: vb0bb19V678(0x0) = CONST 
    0xb1c0xb0bS0x678: REVERT vb0bb19V678(0x0), vb0bb19V678(0x0)

    Begin block 0xef60xb0bB0x678
    prev=[0xb0bB0x678], succ=[0x68e]
    =================================
    0xefc0xb0bS0x678: JUMP v66d(0x68e)

    Begin block 0x68e
    prev=[0xef60xb0bB0x678], succ=[0xeb8]
    =================================
    0x68f: v68f = CALLER 
    0x690: v690(0x0) = CONST 
    0x694: MSTORE v690(0x0), v68f
    0x695: v695(0x6) = CONST 
    0x697: v697(0x20) = CONST 
    0x699: MSTORE v697(0x20), v695(0x6)
    0x69a: v69a(0x40) = CONST 
    0x69d: v69d = SHA3 v690(0x0), v69a(0x40)
    0x69e: SSTORE v69d, vb10V678
    0x69f: v69f(0x6aa) = CONST 
    0x6a2: v6a2(0xeb8) = CONST 
    0x6a6: v6a6(0x564) = CONST 
    0x6a9: v6a9_0 = CALLPRIVATE v6a6(0x564), v1a7, v6a2(0xeb8)

    Begin block 0xeb8
    prev=[0x68e], succ=[0xb0bB0xeb8]
    =================================
    0xeb9: veb9(0x1) = CONST 
    0xebb: vebb(0x1) = CONST 
    0xebd: vebd(0xa0) = CONST 
    0xebf: vebf(0x10000000000000000000000000000000000000000) = SHL vebd(0xa0), vebb(0x1)
    0xec0: vec0(0xffffffffffffffffffffffffffffffffffffffff) = SUB vebf(0x10000000000000000000000000000000000000000), veb9(0x1)
    0xec2: vec2 = AND v1a7, vec0(0xffffffffffffffffffffffffffffffffffffffff)
    0xec3: vec3(0x0) = CONST 
    0xec7: MSTORE vec3(0x0), vec2
    0xec8: vec8(0x6) = CONST 
    0xeca: veca(0x20) = CONST 
    0xecc: MSTORE veca(0x20), vec8(0x6)
    0xecd: vecd(0x40) = CONST 
    0xed0: ved0 = SHA3 vec3(0x0), vecd(0x40)
    0xed1: ved1 = SLOAD ved0
    0xed3: ved3(0xb0b) = CONST 
    0xed6: JUMP ved3(0xb0b)

    Begin block 0xb0bB0xeb8
    prev=[0xeb8], succ=[0xb190xb0bB0xeb8, 0xef60xb0bB0xeb8]
    =================================
    0xb0cS0xeb8: vb0cVeb8(0x0) = CONST 
    0xb10S0xeb8: vb10Veb8 = ADD v6a9_0, ved1
    0xb13S0xeb8: vb13Veb8 = LT vb10Veb8, ved1
    0xb14S0xeb8: vb14Veb8 = ISZERO vb13Veb8
    0xb15S0xeb8: vb15Veb8(0xef6) = CONST 
    0xb18S0xeb8: JUMPI vb15Veb8(0xef6), vb14Veb8

    Begin block 0xb190xb0bB0xeb8
    prev=[0xb0bB0xeb8], succ=[]
    =================================
    0xb190xb0bS0xeb8: vb0bb19Veb8(0x0) = CONST 
    0xb1c0xb0bS0xeb8: REVERT vb0bb19Veb8(0x0), vb0bb19Veb8(0x0)

    Begin block 0xef60xb0bB0xeb8
    prev=[0xb0bB0xeb8], succ=[0x6aa]
    =================================
    0xefc0xb0bS0xeb8: JUMP v69f(0x6aa)

    Begin block 0x6aa
    prev=[0xef60xb0bB0xeb8], succ=[0x6cf]
    =================================
    0x6ab: v6ab(0x1) = CONST 
    0x6ad: v6ad(0x1) = CONST 
    0x6af: v6af(0xa0) = CONST 
    0x6b1: v6b1(0x10000000000000000000000000000000000000000) = SHL v6af(0xa0), v6ad(0x1)
    0x6b2: v6b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6b1(0x10000000000000000000000000000000000000000), v6ab(0x1)
    0x6b4: v6b4 = AND v1a7, v6b2(0xffffffffffffffffffffffffffffffffffffffff)
    0x6b5: v6b5(0x0) = CONST 
    0x6b9: MSTORE v6b5(0x0), v6b4
    0x6ba: v6ba(0x6) = CONST 
    0x6bc: v6bc(0x20) = CONST 
    0x6be: MSTORE v6bc(0x20), v6ba(0x6)
    0x6bf: v6bf(0x40) = CONST 
    0x6c2: v6c2 = SHA3 v6b5(0x0), v6bf(0x40)
    0x6c3: SSTORE v6c2, vb10Veb8
    0x6c4: v6c4(0x6e5) = CONST 
    0x6c7: v6c7(0x6cf) = CONST 
    0x6ca: v6ca = CALLER 
    0x6cb: v6cb(0x564) = CONST 
    0x6ce: v6ce_0 = CALLPRIVATE v6cb(0x564), v6ca, v6c7(0x6cf)

    Begin block 0x6cf
    prev=[0x6aa], succ=[0x6e5]
    =================================
    0x6d0: v6d0 = CALLER 
    0x6d1: v6d1(0x0) = CONST 
    0x6d5: MSTORE v6d1(0x0), v6d0
    0x6d6: v6d6(0x5) = CONST 
    0x6d8: v6d8(0x20) = CONST 
    0x6da: MSTORE v6d8(0x20), v6d6(0x5)
    0x6db: v6db(0x40) = CONST 
    0x6de: v6de = SHA3 v6d1(0x0), v6db(0x40)
    0x6df: v6df = SLOAD v6de
    0x6e1: v6e1(0xaf1) = CONST 
    0x6e4: v6e4_0 = CALLPRIVATE v6e1(0xaf1), v6ce_0, v6df, v6c4(0x6e5)

    Begin block 0x6e5
    prev=[0x6cf], succ=[0x701]
    =================================
    0x6e6: v6e6 = CALLER 
    0x6e7: v6e7(0x0) = CONST 
    0x6eb: MSTORE v6e7(0x0), v6e6
    0x6ec: v6ec(0x5) = CONST 
    0x6ee: v6ee(0x20) = CONST 
    0x6f0: MSTORE v6ee(0x20), v6ec(0x5)
    0x6f1: v6f1(0x40) = CONST 
    0x6f4: v6f4 = SHA3 v6e7(0x0), v6f1(0x40)
    0x6f5: SSTORE v6f4, v6e4_0
    0x6f6: v6f6(0x720) = CONST 
    0x6f9: v6f9(0x701) = CONST 
    0x6fd: v6fd(0x564) = CONST 
    0x700: v700_0 = CALLPRIVATE v6fd(0x564), v1a7, v6f9(0x701)

    Begin block 0x701
    prev=[0x6e5], succ=[0x720]
    =================================
    0x702: v702(0x1) = CONST 
    0x704: v704(0x1) = CONST 
    0x706: v706(0xa0) = CONST 
    0x708: v708(0x10000000000000000000000000000000000000000) = SHL v706(0xa0), v704(0x1)
    0x709: v709(0xffffffffffffffffffffffffffffffffffffffff) = SUB v708(0x10000000000000000000000000000000000000000), v702(0x1)
    0x70b: v70b = AND v1a7, v709(0xffffffffffffffffffffffffffffffffffffffff)
    0x70c: v70c(0x0) = CONST 
    0x710: MSTORE v70c(0x0), v70b
    0x711: v711(0x5) = CONST 
    0x713: v713(0x20) = CONST 
    0x715: MSTORE v713(0x20), v711(0x5)
    0x716: v716(0x40) = CONST 
    0x719: v719 = SHA3 v70c(0x0), v716(0x40)
    0x71a: v71a = SLOAD v719
    0x71c: v71c(0xaf1) = CONST 
    0x71f: v71f_0 = CALLPRIVATE v71c(0xaf1), v700_0, v71a, v6f6(0x720)

    Begin block 0x720
    prev=[0x701], succ=[0x775]
    =================================
    0x721: v721(0x1) = CONST 
    0x723: v723(0x1) = CONST 
    0x725: v725(0xa0) = CONST 
    0x727: v727(0x10000000000000000000000000000000000000000) = SHL v725(0xa0), v723(0x1)
    0x728: v728(0xffffffffffffffffffffffffffffffffffffffff) = SUB v727(0x10000000000000000000000000000000000000000), v721(0x1)
    0x72a: v72a = AND v1a7, v728(0xffffffffffffffffffffffffffffffffffffffff)
    0x72b: v72b(0x0) = CONST 
    0x72f: MSTORE v72b(0x0), v72a
    0x730: v730(0x5) = CONST 
    0x732: v732(0x20) = CONST 
    0x736: MSTORE v732(0x20), v730(0x5)
    0x737: v737(0x40) = CONST 
    0x73b: v73b = SHA3 v72b(0x0), v737(0x40)
    0x73f: SSTORE v73b, v71f_0
    0x740: v740 = CALLER 
    0x743: MSTORE v72b(0x0), v740
    0x744: v744(0x4) = CONST 
    0x747: MSTORE v732(0x20), v744(0x4)
    0x74a: v74a = SHA3 v72b(0x0), v737(0x40)
    0x74b: v74b = TIMESTAMP 
    0x74f: SSTORE v74a, v74b
    0x752: MSTORE v72b(0x0), v72a
    0x755: v755 = SHA3 v72b(0x0), v737(0x40)
    0x759: SSTORE v755, v74b
    0x75c: MSTORE v72b(0x0), v740
    0x75f: MSTORE v732(0x20), v730(0x5)
    0x762: v762 = SHA3 v72b(0x0), v737(0x40)
    0x763: v763 = SLOAD v762
    0x764: v764(0x775) = CONST 
    0x768: v768(0xde0b6b3a7640000) = CONST 
    0x771: v771(0xb1d) = CONST 
    0x774: v774_0 = CALLPRIVATE v771(0xb1d), v768(0xde0b6b3a7640000), v1ac, v764(0x775)

    Begin block 0x775
    prev=[0x720], succ=[0x77b, 0x791]
    =================================
    0x776: v776 = GT v774_0, v763
    0x777: v777(0x791) = CONST 
    0x77a: JUMPI v777(0x791), v776

    Begin block 0x77b
    prev=[0x775], succ=[0x78c]
    =================================
    0x77b: v77b(0x78c) = CONST 
    0x77f: v77f(0xde0b6b3a7640000) = CONST 
    0x788: v788(0xb1d) = CONST 
    0x78b: v78b_0 = CALLPRIVATE v788(0xb1d), v77f(0xde0b6b3a7640000), v1ac, v77b(0x78c)

    Begin block 0x78c
    prev=[0x77b], succ=[0x7a2]
    =================================
    0x78d: v78d(0x7a2) = CONST 
    0x790: JUMP v78d(0x7a2)

    Begin block 0x7a2
    prev=[0x791, 0x78c], succ=[0x7bf]
    =================================
    0x7a2_0x0: v7a2_0 = PHI v7a1, v78b_0
    0x7a3: v7a3 = CALLER 
    0x7a4: v7a4(0x0) = CONST 
    0x7a8: MSTORE v7a4(0x0), v7a3
    0x7a9: v7a9(0x5) = CONST 
    0x7ab: v7ab(0x20) = CONST 
    0x7ad: MSTORE v7ab(0x20), v7a9(0x5)
    0x7ae: v7ae(0x40) = CONST 
    0x7b1: v7b1 = SHA3 v7a4(0x0), v7ae(0x40)
    0x7b2: v7b2 = SLOAD v7b1
    0x7b6: v7b6(0x7bf) = CONST 
    0x7bb: v7bb(0xaf1) = CONST 
    0x7be: v7be_0 = CALLPRIVATE v7bb(0xaf1), v7a2_0, v7b2, v7b6(0x7bf)

    Begin block 0x7bf
    prev=[0x7a2], succ=[0xb0bB0x7bf]
    =================================
    0x7bf_0x1: v7bf_1 = PHI v7a1, v78b_0
    0x7c0: v7c0 = CALLER 
    0x7c1: v7c1(0x0) = CONST 
    0x7c5: MSTORE v7c1(0x0), v7c0
    0x7c6: v7c6(0x5) = CONST 
    0x7c8: v7c8(0x20) = CONST 
    0x7ca: MSTORE v7c8(0x20), v7c6(0x5)
    0x7cb: v7cb(0x40) = CONST 
    0x7cf: v7cf = SHA3 v7c1(0x0), v7cb(0x40)
    0x7d3: SSTORE v7cf, v7be_0
    0x7d4: v7d4(0x1) = CONST 
    0x7d6: v7d6(0x1) = CONST 
    0x7d8: v7d8(0xa0) = CONST 
    0x7da: v7da(0x10000000000000000000000000000000000000000) = SHL v7d8(0xa0), v7d6(0x1)
    0x7db: v7db(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7da(0x10000000000000000000000000000000000000000), v7d4(0x1)
    0x7dd: v7dd = AND v1a7, v7db(0xffffffffffffffffffffffffffffffffffffffff)
    0x7df: MSTORE v7c1(0x0), v7dd
    0x7e0: v7e0 = SHA3 v7c1(0x0), v7cb(0x40)
    0x7e1: v7e1 = SLOAD v7e0
    0x7e2: v7e2(0x7eb) = CONST 
    0x7e7: v7e7(0xb0b) = CONST 
    0x7ea: JUMP v7e7(0xb0b)

    Begin block 0xb0bB0x7bf
    prev=[0x7bf], succ=[0xb190xb0bB0x7bf, 0xef60xb0bB0x7bf]
    =================================
    0xb0cS0x7bf: vb0cV7bf(0x0) = CONST 
    0xb10S0x7bf: vb10V7bf = ADD v7bf_1, v7e1
    0xb13S0x7bf: vb13V7bf = LT vb10V7bf, v7e1
    0xb14S0x7bf: vb14V7bf = ISZERO vb13V7bf
    0xb15S0x7bf: vb15V7bf(0xef6) = CONST 
    0xb18S0x7bf: JUMPI vb15V7bf(0xef6), vb14V7bf

    Begin block 0xb190xb0bB0x7bf
    prev=[0xb0bB0x7bf], succ=[]
    =================================
    0xb190xb0bS0x7bf: vb0bb19V7bf(0x0) = CONST 
    0xb1c0xb0bS0x7bf: REVERT vb0bb19V7bf(0x0), vb0bb19V7bf(0x0)

    Begin block 0xef60xb0bB0x7bf
    prev=[0xb0bB0x7bf], succ=[0x7eb]
    =================================
    0xefc0xb0bS0x7bf: JUMP v7e2(0x7eb)

    Begin block 0x7eb
    prev=[0xef60xb0bB0x7bf], succ=[0xde1]
    =================================
    0x7eb_0x1: v7eb_1 = PHI v7a1, v78b_0
    0x7ec: v7ec(0x1) = CONST 
    0x7ee: v7ee(0x1) = CONST 
    0x7f0: v7f0(0xa0) = CONST 
    0x7f2: v7f2(0x10000000000000000000000000000000000000000) = SHL v7f0(0xa0), v7ee(0x1)
    0x7f3: v7f3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7f2(0x10000000000000000000000000000000000000000), v7ec(0x1)
    0x7f5: v7f5 = AND v1a7, v7f3(0xffffffffffffffffffffffffffffffffffffffff)
    0x7f6: v7f6(0x0) = CONST 
    0x7fa: MSTORE v7f6(0x0), v7f5
    0x7fb: v7fb(0x5) = CONST 
    0x7fd: v7fd(0x20) = CONST 
    0x801: MSTORE v7fd(0x20), v7fb(0x5)
    0x802: v802(0x40) = CONST 
    0x807: v807 = SHA3 v7f6(0x0), v802(0x40)
    0x80b: SSTORE v807, vb10V7bf
    0x80d: v80d = MLOAD v802(0x40)
    0x810: MSTORE v80d, v7eb_1
    0x811: v811 = TIMESTAMP 
    0x814: v814 = ADD v80d, v7fd(0x20)
    0x818: MSTORE v814, v811
    0x81a: v81a = MLOAD v802(0x40)
    0x81d: v81d = CALLER 
    0x81f: v81f(0x9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44) = CONST 
    0x844: v844(0x0) = SUB v80d, v81a
    0x847: v847(0x40) = ADD v802(0x40), v844(0x0)
    0x849: LOG3 v81a, v847(0x40), v81f(0x9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44), v81d, v7f5
    0x84d: JUMP v186(0xde1)

    Begin block 0xde1
    prev=[0x7eb], succ=[]
    =================================
    0xde2: STOP 

    Begin block 0x791
    prev=[0x775], succ=[0x7a2]
    =================================
    0x792: v792 = CALLER 
    0x793: v793(0x0) = CONST 
    0x797: MSTORE v793(0x0), v792
    0x798: v798(0x5) = CONST 
    0x79a: v79a(0x20) = CONST 
    0x79c: MSTORE v79a(0x20), v798(0x5)
    0x79d: v79d(0x40) = CONST 
    0x7a0: v7a0 = SHA3 v793(0x0), v79d(0x40)
    0x7a1: v7a1 = SLOAD v7a0

}

function starts(address)() public {
    Begin block 0x1b1
    prev=[], succ=[0x1c3, 0x1c7]
    =================================
    0x1b2: v1b2(0xe02) = CONST 
    0x1b5: v1b5(0x4) = CONST 
    0x1b8: v1b8 = CALLDATASIZE 
    0x1b9: v1b9 = SUB v1b8, v1b5(0x4)
    0x1ba: v1ba(0x20) = CONST 
    0x1bd: v1bd = LT v1b9, v1ba(0x20)
    0x1be: v1be = ISZERO v1bd
    0x1bf: v1bf(0x1c7) = CONST 
    0x1c2: JUMPI v1bf(0x1c7), v1be

    Begin block 0x1c3
    prev=[0x1b1], succ=[]
    =================================
    0x1c3: v1c3(0x0) = CONST 
    0x1c6: REVERT v1c3(0x0), v1c3(0x0)

    Begin block 0x1c7
    prev=[0x1b1], succ=[0x84e]
    =================================
    0x1c9: v1c9 = CALLDATALOAD v1b5(0x4)
    0x1ca: v1ca(0x1) = CONST 
    0x1cc: v1cc(0x1) = CONST 
    0x1ce: v1ce(0xa0) = CONST 
    0x1d0: v1d0(0x10000000000000000000000000000000000000000) = SHL v1ce(0xa0), v1cc(0x1)
    0x1d1: v1d1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1d0(0x10000000000000000000000000000000000000000), v1ca(0x1)
    0x1d2: v1d2 = AND v1d1(0xffffffffffffffffffffffffffffffffffffffff), v1c9
    0x1d3: v1d3(0x84e) = CONST 
    0x1d6: JUMP v1d3(0x84e)

    Begin block 0x84e
    prev=[0x1c7], succ=[0xe02]
    =================================
    0x84f: v84f(0x4) = CONST 
    0x851: v851(0x20) = CONST 
    0x853: MSTORE v851(0x20), v84f(0x4)
    0x854: v854(0x0) = CONST 
    0x858: MSTORE v854(0x0), v1d2
    0x859: v859(0x40) = CONST 
    0x85c: v85c = SHA3 v854(0x0), v859(0x40)
    0x85d: v85d = SLOAD v85c
    0x85f: JUMP v1b2(0xe02)

    Begin block 0xe02
    prev=[0x84e], succ=[]
    =================================
    0xe03: ve03(0x40) = CONST 
    0xe06: ve06 = MLOAD ve03(0x40)
    0xe09: MSTORE ve06, v85d
    0xe0a: ve0a = MLOAD ve03(0x40)
    0xe0e: ve0e(0x0) = SUB ve06, ve0a
    0xe0f: ve0f(0x20) = CONST 
    0xe11: ve11(0x20) = ADD ve0f(0x20), ve0e(0x0)
    0xe13: RETURN ve0a, ve11(0x20)

}

function token()() public {
    Begin block 0x1d7
    prev=[], succ=[0x860]
    =================================
    0x1d8: v1d8(0x1df) = CONST 
    0x1db: v1db(0x860) = CONST 
    0x1de: JUMP v1db(0x860)

    Begin block 0x860
    prev=[0x1d7], succ=[0x1df]
    =================================
    0x861: v861(0x0) = CONST 
    0x863: v863 = SLOAD v861(0x0)
    0x864: v864(0x1) = CONST 
    0x866: v866(0x1) = CONST 
    0x868: v868(0xa0) = CONST 
    0x86a: v86a(0x10000000000000000000000000000000000000000) = SHL v868(0xa0), v866(0x1)
    0x86b: v86b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v86a(0x10000000000000000000000000000000000000000), v864(0x1)
    0x86c: v86c = AND v86b(0xffffffffffffffffffffffffffffffffffffffff), v863
    0x86e: JUMP v1d8(0x1df)

    Begin block 0x1df
    prev=[0x860], succ=[]
    =================================
    0x1e0: v1e0(0x40) = CONST 
    0x1e3: v1e3 = MLOAD v1e0(0x40)
    0x1e4: v1e4(0x1) = CONST 
    0x1e6: v1e6(0x1) = CONST 
    0x1e8: v1e8(0xa0) = CONST 
    0x1ea: v1ea(0x10000000000000000000000000000000000000000) = SHL v1e8(0xa0), v1e6(0x1)
    0x1eb: v1eb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1ea(0x10000000000000000000000000000000000000000), v1e4(0x1)
    0x1ee: v1ee = AND v86c, v1eb(0xffffffffffffffffffffffffffffffffffffffff)
    0x1f0: MSTORE v1e3, v1ee
    0x1f1: v1f1 = MLOAD v1e0(0x40)
    0x1f5: v1f5(0x0) = SUB v1e3, v1f1
    0x1f6: v1f6(0x20) = CONST 
    0x1f8: v1f8(0x20) = ADD v1f6(0x20), v1f5(0x0)
    0x1fa: RETURN v1f1, v1f8(0x20)

}

function initialize(address,uint256,uint256,uint256,address[],uint256[])() public {
    Begin block 0x1fb
    prev=[], succ=[0x20d, 0x211]
    =================================
    0x1fc: v1fc(0xe33) = CONST 
    0x1ff: v1ff(0x4) = CONST 
    0x202: v202 = CALLDATASIZE 
    0x203: v203 = SUB v202, v1ff(0x4)
    0x204: v204(0xc0) = CONST 
    0x207: v207 = LT v203, v204(0xc0)
    0x208: v208 = ISZERO v207
    0x209: v209(0x211) = CONST 
    0x20c: JUMPI v209(0x211), v208

    Begin block 0x20d
    prev=[0x1fb], succ=[]
    =================================
    0x20d: v20d(0x0) = CONST 
    0x210: REVERT v20d(0x0), v20d(0x0)

    Begin block 0x211
    prev=[0x1fb], succ=[0x249, 0x24d]
    =================================
    0x212: v212(0x1) = CONST 
    0x214: v214(0x1) = CONST 
    0x216: v216(0xa0) = CONST 
    0x218: v218(0x10000000000000000000000000000000000000000) = SHL v216(0xa0), v214(0x1)
    0x219: v219(0xffffffffffffffffffffffffffffffffffffffff) = SUB v218(0x10000000000000000000000000000000000000000), v212(0x1)
    0x21b: v21b = CALLDATALOAD v1ff(0x4)
    0x21c: v21c = AND v21b, v219(0xffffffffffffffffffffffffffffffffffffffff)
    0x21e: v21e(0x20) = CONST 
    0x221: v221(0x24) = ADD v1ff(0x4), v21e(0x20)
    0x222: v222 = CALLDATALOAD v221(0x24)
    0x224: v224(0x40) = CONST 
    0x227: v227(0x44) = ADD v1ff(0x4), v224(0x40)
    0x228: v228 = CALLDATALOAD v227(0x44)
    0x22a: v22a(0x60) = CONST 
    0x22d: v22d(0x64) = ADD v1ff(0x4), v22a(0x60)
    0x22e: v22e = CALLDATALOAD v22d(0x64)
    0x231: v231 = ADD v1ff(0x4), v203
    0x233: v233(0xa0) = CONST 
    0x236: v236(0xa4) = ADD v1ff(0x4), v233(0xa0)
    0x237: v237(0x80) = CONST 
    0x23a: v23a(0x84) = ADD v1ff(0x4), v237(0x80)
    0x23b: v23b = CALLDATALOAD v23a(0x84)
    0x23c: v23c(0x100000000) = CONST 
    0x243: v243 = GT v23b, v23c(0x100000000)
    0x244: v244 = ISZERO v243
    0x245: v245(0x24d) = CONST 
    0x248: JUMPI v245(0x24d), v244

    Begin block 0x249
    prev=[0x211], succ=[]
    =================================
    0x249: v249(0x0) = CONST 
    0x24c: REVERT v249(0x0), v249(0x0)

    Begin block 0x24d
    prev=[0x211], succ=[0x25b, 0x25f]
    =================================
    0x24f: v24f = ADD v1ff(0x4), v23b
    0x251: v251(0x20) = CONST 
    0x254: v254 = ADD v24f, v251(0x20)
    0x255: v255 = GT v254, v231
    0x256: v256 = ISZERO v255
    0x257: v257(0x25f) = CONST 
    0x25a: JUMPI v257(0x25f), v256

    Begin block 0x25b
    prev=[0x24d], succ=[]
    =================================
    0x25b: v25b(0x0) = CONST 
    0x25e: REVERT v25b(0x0), v25b(0x0)

    Begin block 0x25f
    prev=[0x24d], succ=[0x27d, 0x281]
    =================================
    0x261: v261 = CALLDATALOAD v24f
    0x263: v263(0x20) = CONST 
    0x265: v265 = ADD v263(0x20), v24f
    0x268: v268(0x20) = CONST 
    0x26b: v26b = MUL v261, v268(0x20)
    0x26d: v26d = ADD v265, v26b
    0x26e: v26e = GT v26d, v231
    0x26f: v26f(0x100000000) = CONST 
    0x276: v276 = GT v261, v26f(0x100000000)
    0x277: v277 = OR v276, v26e
    0x278: v278 = ISZERO v277
    0x279: v279(0x281) = CONST 
    0x27c: JUMPI v279(0x281), v278

    Begin block 0x27d
    prev=[0x25f], succ=[]
    =================================
    0x27d: v27d(0x0) = CONST 
    0x280: REVERT v27d(0x0), v27d(0x0)

    Begin block 0x281
    prev=[0x25f], succ=[0x29b, 0x29f]
    =================================
    0x288: v288(0x20) = CONST 
    0x28b: v28b(0xc4) = ADD v236(0xa4), v288(0x20)
    0x28d: v28d = CALLDATALOAD v236(0xa4)
    0x28e: v28e(0x100000000) = CONST 
    0x295: v295 = GT v28d, v28e(0x100000000)
    0x296: v296 = ISZERO v295
    0x297: v297(0x29f) = CONST 
    0x29a: JUMPI v297(0x29f), v296

    Begin block 0x29b
    prev=[0x281], succ=[]
    =================================
    0x29b: v29b(0x0) = CONST 
    0x29e: REVERT v29b(0x0), v29b(0x0)

    Begin block 0x29f
    prev=[0x281], succ=[0x2ad, 0x2b1]
    =================================
    0x2a1: v2a1 = ADD v1ff(0x4), v28d
    0x2a3: v2a3(0x20) = CONST 
    0x2a6: v2a6 = ADD v2a1, v2a3(0x20)
    0x2a7: v2a7 = GT v2a6, v231
    0x2a8: v2a8 = ISZERO v2a7
    0x2a9: v2a9(0x2b1) = CONST 
    0x2ac: JUMPI v2a9(0x2b1), v2a8

    Begin block 0x2ad
    prev=[0x29f], succ=[]
    =================================
    0x2ad: v2ad(0x0) = CONST 
    0x2b0: REVERT v2ad(0x0), v2ad(0x0)

    Begin block 0x2b1
    prev=[0x29f], succ=[0x2cf, 0x2d3]
    =================================
    0x2b3: v2b3 = CALLDATALOAD v2a1
    0x2b5: v2b5(0x20) = CONST 
    0x2b7: v2b7 = ADD v2b5(0x20), v2a1
    0x2ba: v2ba(0x20) = CONST 
    0x2bd: v2bd = MUL v2b3, v2ba(0x20)
    0x2bf: v2bf = ADD v2b7, v2bd
    0x2c0: v2c0 = GT v2bf, v231
    0x2c1: v2c1(0x100000000) = CONST 
    0x2c8: v2c8 = GT v2b3, v2c1(0x100000000)
    0x2c9: v2c9 = OR v2c8, v2c0
    0x2ca: v2ca = ISZERO v2c9
    0x2cb: v2cb(0x2d3) = CONST 
    0x2ce: JUMPI v2cb(0x2d3), v2ca

    Begin block 0x2cf
    prev=[0x2b1], succ=[]
    =================================
    0x2cf: v2cf(0x0) = CONST 
    0x2d2: REVERT v2cf(0x0), v2cf(0x0)

    Begin block 0x2d3
    prev=[0x2b1], succ=[0x86f]
    =================================
    0x2da: v2da(0x86f) = CONST 
    0x2dd: JUMP v2da(0x86f)

    Begin block 0x86f
    prev=[0x2d3], succ=[0x878, 0x8c4]
    =================================
    0x870: v870(0x3) = CONST 
    0x872: v872 = SLOAD v870(0x3)
    0x873: v873 = ISZERO v872
    0x874: v874(0x8c4) = CONST 
    0x877: JUMPI v874(0x8c4), v873

    Begin block 0x878
    prev=[0x86f], succ=[]
    =================================
    0x878: v878(0x40) = CONST 
    0x87b: v87b = MLOAD v878(0x40)
    0x87c: v87c(0x461bcd) = CONST 
    0x880: v880(0xe5) = CONST 
    0x882: v882(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v880(0xe5), v87c(0x461bcd)
    0x884: MSTORE v87b, v882(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x885: v885(0x20) = CONST 
    0x887: v887(0x4) = CONST 
    0x88a: v88a = ADD v87b, v887(0x4)
    0x88d: MSTORE v88a, v885(0x20)
    0x88e: v88e(0x24) = CONST 
    0x891: v891 = ADD v87b, v88e(0x24)
    0x892: MSTORE v891, v885(0x20)
    0x893: v893(0x436f6e747261637420697320616c726561647920696e697469616c697a65642e) = CONST 
    0x8b4: v8b4(0x44) = CONST 
    0x8b7: v8b7 = ADD v87b, v8b4(0x44)
    0x8b8: MSTORE v8b7, v893(0x436f6e747261637420697320616c726561647920696e697469616c697a65642e)
    0x8ba: v8ba = MLOAD v878(0x40)
    0x8be: v8be(0x0) = SUB v87b, v8ba
    0x8bf: v8bf(0x64) = CONST 
    0x8c1: v8c1(0x64) = ADD v8bf(0x64), v8be(0x0)
    0x8c3: REVERT v8ba, v8c1(0x64)

    Begin block 0x8c4
    prev=[0x86f], succ=[0x8cc, 0x918]
    =================================
    0x8c7: v8c7 = EQ v2b3, v261
    0x8c8: v8c8(0x918) = CONST 
    0x8cb: JUMPI v8c8(0x918), v8c7

    Begin block 0x8cc
    prev=[0x8c4], succ=[]
    =================================
    0x8cc: v8cc(0x40) = CONST 
    0x8cf: v8cf = MLOAD v8cc(0x40)
    0x8d0: v8d0(0x461bcd) = CONST 
    0x8d4: v8d4(0xe5) = CONST 
    0x8d6: v8d6(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v8d4(0xe5), v8d0(0x461bcd)
    0x8d8: MSTORE v8cf, v8d6(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x8d9: v8d9(0x20) = CONST 
    0x8db: v8db(0x4) = CONST 
    0x8de: v8de = ADD v8cf, v8db(0x4)
    0x8df: MSTORE v8de, v8d9(0x20)
    0x8e0: v8e0(0x1b) = CONST 
    0x8e2: v8e2(0x24) = CONST 
    0x8e5: v8e5 = ADD v8cf, v8e2(0x24)
    0x8e6: MSTORE v8e5, v8e0(0x1b)
    0x8e7: v8e7(0x4172726179206c656e6774687320646f206e6f74206d617463682e0000000000) = CONST 
    0x908: v908(0x44) = CONST 
    0x90b: v90b = ADD v8cf, v908(0x44)
    0x90c: MSTORE v90b, v8e7(0x4172726179206c656e6774687320646f206e6f74206d617463682e0000000000)
    0x90e: v90e = MLOAD v8cc(0x40)
    0x912: v912(0x0) = SUB v8cf, v90e
    0x913: v913(0x64) = CONST 
    0x915: v915(0x64) = ADD v913(0x64), v912(0x0)
    0x917: REVERT v90e, v915(0x64)

    Begin block 0x918
    prev=[0x8c4], succ=[0xb0bB0x918]
    =================================
    0x919: v919(0x922) = CONST 
    0x91e: v91e(0xb0b) = CONST 
    0x921: JUMP v91e(0xb0b)

    Begin block 0xb0bB0x918
    prev=[0x918], succ=[0xb190xb0bB0x918, 0xef60xb0bB0x918]
    =================================
    0xb0cS0x918: vb0cV918(0x0) = CONST 
    0xb10S0x918: vb10V918 = ADD v22e, v228
    0xb13S0x918: vb13V918 = LT vb10V918, v228
    0xb14S0x918: vb14V918 = ISZERO vb13V918
    0xb15S0x918: vb15V918(0xef6) = CONST 
    0xb18S0x918: JUMPI vb15V918(0xef6), vb14V918

    Begin block 0xb190xb0bB0x918
    prev=[0xb0bB0x918], succ=[]
    =================================
    0xb190xb0bS0x918: vb0bb19V918(0x0) = CONST 
    0xb1c0xb0bS0x918: REVERT vb0bb19V918(0x0), vb0bb19V918(0x0)

    Begin block 0xef60xb0bB0x918
    prev=[0xb0bB0x918], succ=[0x922]
    =================================
    0xefc0xb0bS0x918: JUMP v919(0x922)

    Begin block 0x922
    prev=[0xef60xb0bB0x918], succ=[0x997, 0x99b]
    =================================
    0x923: v923(0x3) = CONST 
    0x925: SSTORE v923(0x3), vb10V918
    0x926: v926(0x2) = CONST 
    0x92a: SSTORE v926(0x2), v228
    0x92b: v92b(0x0) = CONST 
    0x92e: v92e = SLOAD v92b(0x0)
    0x92f: v92f(0x1) = CONST 
    0x931: v931(0x1) = CONST 
    0x933: v933(0xa0) = CONST 
    0x935: v935(0x10000000000000000000000000000000000000000) = SHL v933(0xa0), v931(0x1)
    0x936: v936(0xffffffffffffffffffffffffffffffffffffffff) = SUB v935(0x10000000000000000000000000000000000000000), v92f(0x1)
    0x937: v937(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v936(0xffffffffffffffffffffffffffffffffffffffff)
    0x938: v938 = AND v937(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v92e
    0x939: v939(0x1) = CONST 
    0x93b: v93b(0x1) = CONST 
    0x93d: v93d(0xa0) = CONST 
    0x93f: v93f(0x10000000000000000000000000000000000000000) = SHL v93d(0xa0), v93b(0x1)
    0x940: v940(0xffffffffffffffffffffffffffffffffffffffff) = SUB v93f(0x10000000000000000000000000000000000000000), v939(0x1)
    0x943: v943 = AND v940(0xffffffffffffffffffffffffffffffffffffffff), v21c
    0x947: v947 = OR v943, v938
    0x94a: SSTORE v92b(0x0), v947
    0x94b: v94b(0x40) = CONST 
    0x94e: v94e = MLOAD v94b(0x40)
    0x94f: v94f(0x23b872dd) = CONST 
    0x954: v954(0xe0) = CONST 
    0x956: v956(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v954(0xe0), v94f(0x23b872dd)
    0x958: MSTORE v94e, v956(0x23b872dd00000000000000000000000000000000000000000000000000000000)
    0x959: v959 = CALLER 
    0x95a: v95a(0x4) = CONST 
    0x95d: v95d = ADD v94e, v95a(0x4)
    0x95e: MSTORE v95d, v959
    0x95f: v95f = ADDRESS 
    0x960: v960(0x24) = CONST 
    0x963: v963 = ADD v94e, v960(0x24)
    0x964: MSTORE v963, v95f
    0x965: v965(0x44) = CONST 
    0x968: v968 = ADD v94e, v965(0x44)
    0x96b: MSTORE v968, v222
    0x96d: v96d = MLOAD v94b(0x40)
    0x971: v971 = AND v940(0xffffffffffffffffffffffffffffffffffffffff), v947
    0x973: v973(0x23b872dd) = CONST 
    0x979: v979(0x64) = CONST 
    0x97d: v97d = ADD v94e, v979(0x64)
    0x97f: v97f(0x20) = CONST 
    0x986: v986(0x0) = SUB v94e, v96d
    0x989: v989(0x64) = ADD v979(0x64), v986(0x0)
    0x98f: v98f = EXTCODESIZE v971
    0x990: v990 = ISZERO v98f
    0x992: v992 = ISZERO v990
    0x993: v993(0x99b) = CONST 
    0x996: JUMPI v993(0x99b), v992

    Begin block 0x997
    prev=[0x922], succ=[]
    =================================
    0x997: v997(0x0) = CONST 
    0x99a: REVERT v997(0x0), v997(0x0)

    Begin block 0x99b
    prev=[0x922], succ=[0x9a6, 0x9af]
    =================================
    0x99d: v99d = GAS 
    0x99e: v99e = CALL v99d, v971, v92b(0x0), v96d, v989(0x64), v96d, v97f(0x20)
    0x99f: v99f = ISZERO v99e
    0x9a1: v9a1 = ISZERO v99f
    0x9a2: v9a2(0x9af) = CONST 
    0x9a5: JUMPI v9a2(0x9af), v9a1

    Begin block 0x9a6
    prev=[0x99b], succ=[]
    =================================
    0x9a6: v9a6 = RETURNDATASIZE 
    0x9a7: v9a7(0x0) = CONST 
    0x9aa: RETURNDATACOPY v9a7(0x0), v9a7(0x0), v9a6
    0x9ab: v9ab = RETURNDATASIZE 
    0x9ac: v9ac(0x0) = CONST 
    0x9ae: REVERT v9ac(0x0), v9ab

    Begin block 0x9af
    prev=[0x99b], succ=[0x9c1, 0x9c5]
    =================================
    0x9b4: v9b4(0x40) = CONST 
    0x9b6: v9b6 = MLOAD v9b4(0x40)
    0x9b7: v9b7 = RETURNDATASIZE 
    0x9b8: v9b8(0x20) = CONST 
    0x9bb: v9bb = LT v9b7, v9b8(0x20)
    0x9bc: v9bc = ISZERO v9bb
    0x9bd: v9bd(0x9c5) = CONST 
    0x9c0: JUMPI v9bd(0x9c5), v9bc

    Begin block 0x9c1
    prev=[0x9af], succ=[]
    =================================
    0x9c1: v9c1(0x0) = CONST 
    0x9c4: REVERT v9c1(0x0), v9c1(0x0)

    Begin block 0x9c5
    prev=[0x9af], succ=[0x9d0]
    =================================
    0x9c8: v9c8(0x1) = CONST 
    0x9cc: SSTORE v9c8(0x1), v222
    0x9cd: v9cd(0x0) = CONST 

    Begin block 0x9d0
    prev=[0x9c5, 0xa9b], succ=[0x9d9, 0xaa5]
    =================================
    0x9d0_0x0: v9d0_0 = PHI v9cd(0x0), vaa0
    0x9d3: v9d3 = LT v9d0_0, v261
    0x9d4: v9d4 = ISZERO v9d3
    0x9d5: v9d5(0xaa5) = CONST 
    0x9d8: JUMPI v9d5(0xaa5), v9d4

    Begin block 0x9d9
    prev=[0x9d0], succ=[0x9ea, 0x9eb]
    =================================
    0x9d9: v9d9(0x2) = CONST 
    0x9d9_0x0: v9d9_0 = PHI v9cd(0x0), vaa0
    0x9db: v9db = SLOAD v9d9(0x2)
    0x9dc: v9dc(0x4) = CONST 
    0x9de: v9de(0x0) = CONST 
    0x9e5: v9e5 = LT v9d9_0, v261
    0x9e6: v9e6(0x9eb) = CONST 
    0x9e9: JUMPI v9e6(0x9eb), v9e5

    Begin block 0x9ea
    prev=[0x9d9], succ=[]
    =================================
    0x9ea: THROW 

    Begin block 0x9eb
    prev=[0x9d9], succ=[0xa2a, 0xa2b]
    =================================
    0x9eb_0x0: v9eb_0 = PHI v9cd(0x0), vaa0
    0x9eb_0x6: v9eb_6 = PHI v9cd(0x0), vaa0
    0x9ee: v9ee(0x20) = CONST 
    0x9f0: v9f0 = MUL v9ee(0x20), v9eb_0
    0x9f1: v9f1 = ADD v9f0, v265
    0x9f2: v9f2 = CALLDATALOAD v9f1
    0x9f3: v9f3(0x1) = CONST 
    0x9f5: v9f5(0x1) = CONST 
    0x9f7: v9f7(0xa0) = CONST 
    0x9f9: v9f9(0x10000000000000000000000000000000000000000) = SHL v9f7(0xa0), v9f5(0x1)
    0x9fa: v9fa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9f9(0x10000000000000000000000000000000000000000), v9f3(0x1)
    0x9fb: v9fb = AND v9fa(0xffffffffffffffffffffffffffffffffffffffff), v9f2
    0x9fc: v9fc(0x1) = CONST 
    0x9fe: v9fe(0x1) = CONST 
    0xa00: va00(0xa0) = CONST 
    0xa02: va02(0x10000000000000000000000000000000000000000) = SHL va00(0xa0), v9fe(0x1)
    0xa03: va03(0xffffffffffffffffffffffffffffffffffffffff) = SUB va02(0x10000000000000000000000000000000000000000), v9fc(0x1)
    0xa04: va04 = AND va03(0xffffffffffffffffffffffffffffffffffffffff), v9fb
    0xa05: va05(0x1) = CONST 
    0xa07: va07(0x1) = CONST 
    0xa09: va09(0xa0) = CONST 
    0xa0b: va0b(0x10000000000000000000000000000000000000000) = SHL va09(0xa0), va07(0x1)
    0xa0c: va0c(0xffffffffffffffffffffffffffffffffffffffff) = SUB va0b(0x10000000000000000000000000000000000000000), va05(0x1)
    0xa0d: va0d = AND va0c(0xffffffffffffffffffffffffffffffffffffffff), va04
    0xa0f: MSTORE v9de(0x0), va0d
    0xa10: va10(0x20) = CONST 
    0xa12: va12(0x20) = ADD va10(0x20), v9de(0x0)
    0xa15: MSTORE va12(0x20), v9dc(0x4)
    0xa16: va16(0x20) = CONST 
    0xa18: va18(0x40) = ADD va16(0x20), va12(0x20)
    0xa19: va19(0x0) = CONST 
    0xa1b: va1b = SHA3 va19(0x0), va18(0x40)
    0xa1e: SSTORE va1b, v9db
    0xa25: va25 = LT v9eb_6, v2b3
    0xa26: va26(0xa2b) = CONST 
    0xa29: JUMPI va26(0xa2b), va25

    Begin block 0xa2a
    prev=[0x9eb], succ=[]
    =================================
    0xa2a: THROW 

    Begin block 0xa2b
    prev=[0x9eb], succ=[0xa41, 0xa42]
    =================================
    0xa2b_0x0: va2b_0 = PHI v9cd(0x0), vaa0
    0xa2b_0x3: va2b_3 = PHI v9cd(0x0), vaa0
    0xa2e: va2e(0x20) = CONST 
    0xa30: va30 = MUL va2e(0x20), va2b_0
    0xa31: va31 = ADD va30, v2b7
    0xa32: va32 = CALLDATALOAD va31
    0xa33: va33(0x5) = CONST 
    0xa35: va35(0x0) = CONST 
    0xa3c: va3c = LT va2b_3, v261
    0xa3d: va3d(0xa42) = CONST 
    0xa40: JUMPI va3d(0xa42), va3c

    Begin block 0xa41
    prev=[0xa2b], succ=[]
    =================================
    0xa41: THROW 

    Begin block 0xa42
    prev=[0xa2b], succ=[0xa84, 0xa85]
    =================================
    0xa42_0x0: va42_0 = PHI v9cd(0x0), vaa0
    0xa42_0x6: va42_6 = PHI v9cd(0x0), vaa0
    0xa45: va45(0x20) = CONST 
    0xa47: va47 = MUL va45(0x20), va42_0
    0xa48: va48 = ADD va47, v265
    0xa49: va49 = CALLDATALOAD va48
    0xa4a: va4a(0x1) = CONST 
    0xa4c: va4c(0x1) = CONST 
    0xa4e: va4e(0xa0) = CONST 
    0xa50: va50(0x10000000000000000000000000000000000000000) = SHL va4e(0xa0), va4c(0x1)
    0xa51: va51(0xffffffffffffffffffffffffffffffffffffffff) = SUB va50(0x10000000000000000000000000000000000000000), va4a(0x1)
    0xa52: va52 = AND va51(0xffffffffffffffffffffffffffffffffffffffff), va49
    0xa53: va53(0x1) = CONST 
    0xa55: va55(0x1) = CONST 
    0xa57: va57(0xa0) = CONST 
    0xa59: va59(0x10000000000000000000000000000000000000000) = SHL va57(0xa0), va55(0x1)
    0xa5a: va5a(0xffffffffffffffffffffffffffffffffffffffff) = SUB va59(0x10000000000000000000000000000000000000000), va53(0x1)
    0xa5b: va5b = AND va5a(0xffffffffffffffffffffffffffffffffffffffff), va52
    0xa5c: va5c(0x1) = CONST 
    0xa5e: va5e(0x1) = CONST 
    0xa60: va60(0xa0) = CONST 
    0xa62: va62(0x10000000000000000000000000000000000000000) = SHL va60(0xa0), va5e(0x1)
    0xa63: va63(0xffffffffffffffffffffffffffffffffffffffff) = SUB va62(0x10000000000000000000000000000000000000000), va5c(0x1)
    0xa64: va64 = AND va63(0xffffffffffffffffffffffffffffffffffffffff), va5b
    0xa66: MSTORE va35(0x0), va64
    0xa67: va67(0x20) = CONST 
    0xa69: va69(0x20) = ADD va67(0x20), va35(0x0)
    0xa6c: MSTORE va69(0x20), va33(0x5)
    0xa6d: va6d(0x20) = CONST 
    0xa6f: va6f(0x40) = ADD va6d(0x20), va69(0x20)
    0xa70: va70(0x0) = CONST 
    0xa72: va72 = SHA3 va70(0x0), va6f(0x40)
    0xa75: SSTORE va72, va32
    0xa77: va77(0xa9b) = CONST 
    0xa7f: va7f = LT va42_6, v2b3
    0xa80: va80(0xa85) = CONST 
    0xa83: JUMPI va80(0xa85), va7f

    Begin block 0xa84
    prev=[0xa42], succ=[]
    =================================
    0xa84: THROW 

    Begin block 0xa85
    prev=[0xa42], succ=[0xb0b0x1fb]
    =================================
    0xa85_0x0: va85_0 = PHI v9cd(0x0), vaa0
    0xa88: va88(0x20) = CONST 
    0xa8a: va8a = MUL va88(0x20), va85_0
    0xa8b: va8b = ADD va8a, v2b7
    0xa8c: va8c = CALLDATALOAD va8b
    0xa8e: va8e(0xb0b) = CONST 
    0xa94: va94(0xffffffff) = CONST 
    0xa99: va99(0xb0b) = AND va94(0xffffffff), va8e(0xb0b)
    0xa9a: JUMP va99(0xb0b)

    Begin block 0xb0b0x1fb
    prev=[0xa85], succ=[0xb190x1fb, 0xef60x1fb]
    =================================
    0xb0b0x1fb_0x1: vb0b1fb_1 = PHI v9cd(0x0), v1fbb10
    0xb0c0x1fb: v1fbb0c(0x0) = CONST 
    0xb100x1fb: v1fbb10 = ADD va8c, vb0b1fb_1
    0xb130x1fb: v1fbb13 = LT v1fbb10, vb0b1fb_1
    0xb140x1fb: v1fbb14 = ISZERO v1fbb13
    0xb150x1fb: v1fbb15(0xef6) = CONST 
    0xb180x1fb: JUMPI v1fbb15(0xef6), v1fbb14

    Begin block 0xb190x1fb
    prev=[0xb0b0x1fb], succ=[]
    =================================
    0xb190x1fb: v1fbb19(0x0) = CONST 
    0xb1c0x1fb: REVERT v1fbb19(0x0), v1fbb19(0x0)

    Begin block 0xef60x1fb
    prev=[0xb0b0x1fb], succ=[0xa9b]
    =================================
    0xefc0x1fb: JUMP va77(0xa9b)

    Begin block 0xa9b
    prev=[0xef60x1fb], succ=[0x9d0]
    =================================
    0xa9b_0x1: va9b_1 = PHI v9cd(0x0), vaa0
    0xa9e: va9e(0x1) = CONST 
    0xaa0: vaa0 = ADD va9e(0x1), va9b_1
    0xaa1: vaa1(0x9d0) = CONST 
    0xaa4: JUMP vaa1(0x9d0)

    Begin block 0xaa5
    prev=[0x9d0], succ=[0xab0, 0xae6]
    =================================
    0xaa5_0x1: vaa5_1 = PHI v9cd(0x0), v1fbb10
    0xaa7: vaa7(0x1) = CONST 
    0xaa9: vaa9 = SLOAD vaa7(0x1)
    0xaab: vaab = EQ vaa5_1, vaa9
    0xaac: vaac(0xae6) = CONST 
    0xaaf: JUMPI vaac(0xae6), vaab

    Begin block 0xab0
    prev=[0xaa5], succ=[]
    =================================
    0xab0: vab0(0x40) = CONST 
    0xab2: vab2 = MLOAD vab0(0x40)
    0xab3: vab3(0x461bcd) = CONST 
    0xab7: vab7(0xe5) = CONST 
    0xab9: vab9(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vab7(0xe5), vab3(0x461bcd)
    0xabb: MSTORE vab2, vab9(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xabc: vabc(0x4) = CONST 
    0xabe: vabe = ADD vabc(0x4), vab2
    0xac1: vac1(0x20) = CONST 
    0xac3: vac3 = ADD vac1(0x20), vabe
    0xac6: vac6(0x20) = SUB vac3, vabe
    0xac8: MSTORE vabe, vac6(0x20)
    0xac9: vac9(0x2f) = CONST 
    0xacc: MSTORE vac3, vac9(0x2f)
    0xacd: vacd(0x20) = CONST 
    0xacf: vacf = ADD vacd(0x20), vac3
    0xad1: vad1(0xb67) = CONST 
    0xad4: vad4(0x2f) = CONST 
    0xad7: CODECOPY vacf, vad1(0xb67), vad4(0x2f)
    0xad8: vad8(0x40) = CONST 
    0xada: vada = ADD vad8(0x40), vacf
    0xade: vade(0x40) = CONST 
    0xae0: vae0 = MLOAD vade(0x40)
    0xae3: vae3(0x84) = SUB vada, vae0
    0xae5: REVERT vae0, vae3(0x84)

    Begin block 0xae6
    prev=[0xaa5], succ=[0xe33]
    =================================
    0xaf0: JUMP v1fc(0xe33)

    Begin block 0xe33
    prev=[0xae6], succ=[]
    =================================
    0xe34: STOP 

}

function 0x564(0x564arg0x0, 0x564arg0x1) private {
    Begin block 0x564
    prev=[], succ=[0x5780x564, 0x5710x564]
    =================================
    0x565: v565(0x0) = CONST 
    0x567: v567(0x2) = CONST 
    0x569: v569 = SLOAD v567(0x2)
    0x56a: v56a = TIMESTAMP 
    0x56b: v56b = LT v56a, v569
    0x56c: v56c = ISZERO v56b
    0x56d: v56d(0x578) = CONST 
    0x570: JUMPI v56d(0x578), v56c

    Begin block 0x5780x564
    prev=[0x564], succ=[0x5850x564, 0x58a0x564]
    =================================
    0x5790x564: v564579(0x0) = CONST 
    0x57b0x564: v56457b(0x3) = CONST 
    0x57d0x564: v56457d = SLOAD v56457b(0x3)
    0x57e0x564: v56457e = TIMESTAMP 
    0x57f0x564: v56457f = LT v56457e, v56457d
    0x5800x564: v564580 = ISZERO v56457f
    0x5810x564: v564581(0x58a) = CONST 
    0x5840x564: JUMPI v564581(0x58a), v564580

    Begin block 0x5850x564
    prev=[0x5780x564], succ=[0x58e0x564]
    =================================
    0x5850x564: v564585 = TIMESTAMP 
    0x5860x564: v564586(0x58e) = CONST 
    0x5890x564: JUMP v564586(0x58e)

    Begin block 0x58e0x564
    prev=[0x5850x564, 0x58a0x564], succ=[0x5ba0x564]
    =================================
    0x58f0x564: v56458f(0x1) = CONST 
    0x5910x564: v564591(0x1) = CONST 
    0x5930x564: v564593(0xa0) = CONST 
    0x5950x564: v564595(0x10000000000000000000000000000000000000000) = SHL v564593(0xa0), v564591(0x1)
    0x5960x564: v564596(0xffffffffffffffffffffffffffffffffffffffff) = SUB v564595(0x10000000000000000000000000000000000000000), v56458f(0x1)
    0x5980x564: v564598 = AND v564arg0, v564596(0xffffffffffffffffffffffffffffffffffffffff)
    0x5990x564: v564599(0x0) = CONST 
    0x59d0x564: MSTORE v564599(0x0), v564598
    0x59e0x564: v56459e(0x4) = CONST 
    0x5a00x564: v5645a0(0x20) = CONST 
    0x5a20x564: MSTORE v5645a0(0x20), v56459e(0x4)
    0x5a30x564: v5645a3(0x40) = CONST 
    0x5a60x564: v5645a6 = SHA3 v564599(0x0), v5645a3(0x40)
    0x5a70x564: v5645a7 = SLOAD v5645a6
    0x5a80x564: v5645a8(0x3) = CONST 
    0x5aa0x564: v5645aa = SLOAD v5645a8(0x3)
    0x5ae0x564: v5645ae(0xe92) = CONST 
    0x5b20x564: v5645b2(0x5ba) = CONST 
    0x5b60x564: v5645b6(0xaf1) = CONST 
    0x5b90x564: v5645b9_0 = CALLPRIVATE v5645b6(0xaf1), v5645a7, v5645aa, v5645b2(0x5ba)

    Begin block 0x5ba0x564
    prev=[0x58e0x564], succ=[0x5e20x564]
    =================================
    0x5ba0x564_0x2: v5ba564_2 = PHI v56458d, v564585
    0x5bb0x564: v5645bb(0x1) = CONST 
    0x5bd0x564: v5645bd(0x1) = CONST 
    0x5bf0x564: v5645bf(0xa0) = CONST 
    0x5c10x564: v5645c1(0x10000000000000000000000000000000000000000) = SHL v5645bf(0xa0), v5645bd(0x1)
    0x5c20x564: v5645c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5645c1(0x10000000000000000000000000000000000000000), v5645bb(0x1)
    0x5c40x564: v5645c4 = AND v564arg0, v5645c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x5c50x564: v5645c5(0x0) = CONST 
    0x5c90x564: MSTORE v5645c5(0x0), v5645c4
    0x5ca0x564: v5645ca(0x4) = CONST 
    0x5cc0x564: v5645cc(0x20) = CONST 
    0x5ce0x564: MSTORE v5645cc(0x20), v5645ca(0x4)
    0x5cf0x564: v5645cf(0x40) = CONST 
    0x5d20x564: v5645d2 = SHA3 v5645c5(0x0), v5645cf(0x40)
    0x5d30x564: v5645d3 = SLOAD v5645d2
    0x5d40x564: v5645d4(0x601) = CONST 
    0x5d80x564: v5645d8(0x5e2) = CONST 
    0x5de0x564: v5645de(0xaf1) = CONST 
    0x5e10x564: v5645e1_0 = CALLPRIVATE v5645de(0xaf1), v5645d3, v5ba564_2, v5645d8(0x5e2)

    Begin block 0x5e20x564
    prev=[0x5ba0x564], succ=[0x6010x564]
    =================================
    0x5e30x564: v5645e3(0x1) = CONST 
    0x5e50x564: v5645e5(0x1) = CONST 
    0x5e70x564: v5645e7(0xa0) = CONST 
    0x5e90x564: v5645e9(0x10000000000000000000000000000000000000000) = SHL v5645e7(0xa0), v5645e5(0x1)
    0x5ea0x564: v5645ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5645e9(0x10000000000000000000000000000000000000000), v5645e3(0x1)
    0x5ec0x564: v5645ec = AND v564arg0, v5645ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x5ed0x564: v5645ed(0x0) = CONST 
    0x5f10x564: MSTORE v5645ed(0x0), v5645ec
    0x5f20x564: v5645f2(0x5) = CONST 
    0x5f40x564: v5645f4(0x20) = CONST 
    0x5f60x564: MSTORE v5645f4(0x20), v5645f2(0x5)
    0x5f70x564: v5645f7(0x40) = CONST 
    0x5fa0x564: v5645fa = SHA3 v5645ed(0x0), v5645f7(0x40)
    0x5fb0x564: v5645fb = SLOAD v5645fa
    0x5fd0x564: v5645fd(0xb1d) = CONST 
    0x6000x564: v564600_0 = CALLPRIVATE v5645fd(0xb1d), v5645e1_0, v5645fb, v5645d4(0x601)

    Begin block 0x6010x564
    prev=[0x5e20x564], succ=[0xb440x564]
    =================================
    0x6030x564: v564603(0xb44) = CONST 
    0x6060x564: JUMP v564603(0xb44)

    Begin block 0xb440x564
    prev=[0x6010x564], succ=[0xb4e0x564, 0xb520x564]
    =================================
    0xb450x564: v564b45(0x0) = CONST 
    0xb490x564: v564b49 = GT v5645b9_0, v564b45(0x0)
    0xb4a0x564: v564b4a(0xb52) = CONST 
    0xb4d0x564: JUMPI v564b4a(0xb52), v564b49

    Begin block 0xb4e0x564
    prev=[0xb440x564], succ=[]
    =================================
    0xb4e0x564: v564b4e(0x0) = CONST 
    0xb510x564: REVERT v564b4e(0x0), v564b4e(0x0)

    Begin block 0xb520x564
    prev=[0xb440x564], succ=[0xb5c0x564, 0xb5d0x564]
    =================================
    0xb530x564: v564b53(0x0) = CONST 
    0xb580x564: v564b58(0xb5d) = CONST 
    0xb5b0x564: JUMPI v564b58(0xb5d), v5645b9_0

    Begin block 0xb5c0x564
    prev=[0xb520x564], succ=[]
    =================================
    0xb5c0x564: THROW 

    Begin block 0xb5d0x564
    prev=[0xb520x564], succ=[0xe920x564]
    =================================
    0xb5e0x564: v564b5e = DIV v564600_0, v5645b9_0
    0xb650x564: JUMP v5645ae(0xe92)

    Begin block 0xe920x564
    prev=[0xb5d0x564], succ=[]
    =================================
    0xe980x564: RETURNPRIVATE v564arg1, v564b5e

    Begin block 0x58a0x564
    prev=[0x5780x564], succ=[0x58e0x564]
    =================================
    0x58b0x564: v56458b(0x3) = CONST 
    0x58d0x564: v56458d = SLOAD v56458b(0x3)

    Begin block 0x5710x564
    prev=[0x564], succ=[0x54d0x564]
    =================================
    0x5720x564: v564572(0x0) = CONST 
    0x5740x564: v564574(0x54d) = CONST 
    0x5770x564: JUMP v564574(0x54d)

    Begin block 0x54d0x564
    prev=[0x5710x564], succ=[]
    =================================
    0x5510x564: RETURNPRIVATE v564arg1, v564572(0x0)

}

function 0xaf1(0xaf1arg0x0, 0xaf1arg0x1, 0xaf1arg0x2) private {
    Begin block 0xaf1
    prev=[], succ=[0xafc, 0xb00]
    =================================
    0xaf2: vaf2(0x0) = CONST 
    0xaf6: vaf6 = GT vaf1arg0, vaf1arg1
    0xaf7: vaf7 = ISZERO vaf6
    0xaf8: vaf8(0xb00) = CONST 
    0xafb: JUMPI vaf8(0xb00), vaf7

    Begin block 0xafc
    prev=[0xaf1], succ=[]
    =================================
    0xafc: vafc(0x0) = CONST 
    0xaff: REVERT vafc(0x0), vafc(0x0)

    Begin block 0xb00
    prev=[0xaf1], succ=[0xb050xaf1]
    =================================
    0xb04: vb04 = SUB vaf1arg1, vaf1arg0

    Begin block 0xb050xaf1
    prev=[0xb00], succ=[]
    =================================
    0xb0a0xaf1: RETURNPRIVATE vaf1arg2, vb04

}

function 0xb1d(0xb1darg0x0, 0xb1darg0x1, 0xb1darg0x2) private {
    Begin block 0xb1d
    prev=[], succ=[0xb2c, 0xb25]
    =================================
    0xb1e: vb1e(0x0) = CONST 
    0xb21: vb21(0xb2c) = CONST 
    0xb24: JUMPI vb21(0xb2c), vb1darg1

    Begin block 0xb2c
    prev=[0xb1d], succ=[0xb38, 0xb39]
    =================================
    0xb2f: vb2f = MUL vb1darg0, vb1darg1
    0xb34: vb34(0xb39) = CONST 
    0xb37: JUMPI vb34(0xb39), vb1darg1

    Begin block 0xb38
    prev=[0xb2c], succ=[]
    =================================
    0xb38: THROW 

    Begin block 0xb39
    prev=[0xb2c], succ=[0xb40, 0xf1c]
    =================================
    0xb3a: vb3a = DIV vb2f, vb1darg1
    0xb3b: vb3b = EQ vb3a, vb1darg0
    0xb3c: vb3c(0xf1c) = CONST 
    0xb3f: JUMPI vb3c(0xf1c), vb3b

    Begin block 0xb40
    prev=[0xb39], succ=[]
    =================================
    0xb40: vb40(0x0) = CONST 
    0xb43: REVERT vb40(0x0), vb40(0x0)

    Begin block 0xf1c
    prev=[0xb39], succ=[]
    =================================
    0xf22: RETURNPRIVATE vb1darg2, vb2f

    Begin block 0xb25
    prev=[0xb1d], succ=[0xb050xb1d]
    =================================
    0xb26: vb26(0x0) = CONST 
    0xb28: vb28(0xb05) = CONST 
    0xb2b: JUMP vb28(0xb05)

    Begin block 0xb050xb1d
    prev=[0xb25], succ=[]
    =================================
    0xb0a0xb1d: RETURNPRIVATE vb1darg2, vb26(0x0)

}

function claim()() public {
    Begin block 0xb9
    prev=[], succ=[0x2de]
    =================================
    0xba: vba(0xc69) = CONST 
    0xbd: vbd(0x2de) = CONST 
    0xc0: JUMP vbd(0x2de)

    Begin block 0x2de
    prev=[0xb9], succ=[0x2eb, 0x337]
    =================================
    0x2df: v2df(0x2) = CONST 
    0x2e1: v2e1 = SLOAD v2df(0x2)
    0x2e2: v2e2 = CALLER 
    0x2e4: v2e4 = TIMESTAMP 
    0x2e5: v2e5 = LT v2e4, v2e1
    0x2e6: v2e6 = ISZERO v2e5
    0x2e7: v2e7(0x337) = CONST 
    0x2ea: JUMPI v2e7(0x337), v2e6

    Begin block 0x2eb
    prev=[0x2de], succ=[]
    =================================
    0x2eb: v2eb(0x40) = CONST 
    0x2ee: v2ee = MLOAD v2eb(0x40)
    0x2ef: v2ef(0x461bcd) = CONST 
    0x2f3: v2f3(0xe5) = CONST 
    0x2f5: v2f5(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2f3(0xe5), v2ef(0x461bcd)
    0x2f7: MSTORE v2ee, v2f5(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x2f8: v2f8(0x20) = CONST 
    0x2fa: v2fa(0x4) = CONST 
    0x2fd: v2fd = ADD v2ee, v2fa(0x4)
    0x2fe: MSTORE v2fd, v2f8(0x20)
    0x2ff: v2ff(0x17) = CONST 
    0x301: v301(0x24) = CONST 
    0x304: v304 = ADD v2ee, v301(0x24)
    0x305: MSTORE v304, v2ff(0x17)
    0x306: v306(0x52656c6561736520686173206e6f742073746172746564000000000000000000) = CONST 
    0x327: v327(0x44) = CONST 
    0x32a: v32a = ADD v2ee, v327(0x44)
    0x32b: MSTORE v32a, v306(0x52656c6561736520686173206e6f742073746172746564000000000000000000)
    0x32d: v32d = MLOAD v2eb(0x40)
    0x331: v331(0x0) = SUB v2ee, v32d
    0x332: v332(0x64) = CONST 
    0x334: v334(0x64) = ADD v332(0x64), v331(0x0)
    0x336: REVERT v32d, v334(0x64)

    Begin block 0x337
    prev=[0x2de], succ=[0x374, 0x358]
    =================================
    0x338: v338(0x1) = CONST 
    0x33a: v33a(0x1) = CONST 
    0x33c: v33c(0xa0) = CONST 
    0x33e: v33e(0x10000000000000000000000000000000000000000) = SHL v33c(0xa0), v33a(0x1)
    0x33f: v33f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33e(0x10000000000000000000000000000000000000000), v338(0x1)
    0x341: v341 = AND v2e2, v33f(0xffffffffffffffffffffffffffffffffffffffff)
    0x342: v342(0x0) = CONST 
    0x346: MSTORE v342(0x0), v341
    0x347: v347(0x5) = CONST 
    0x349: v349(0x20) = CONST 
    0x34b: MSTORE v349(0x20), v347(0x5)
    0x34c: v34c(0x40) = CONST 
    0x34f: v34f = SHA3 v342(0x0), v34c(0x40)
    0x350: v350 = SLOAD v34f
    0x351: v351 = ISZERO v350
    0x352: v352 = ISZERO v351
    0x354: v354(0x374) = CONST 
    0x357: JUMPI v354(0x374), v352

    Begin block 0x374
    prev=[0x337, 0x358], succ=[0x379, 0x3af]
    =================================
    0x374_0x0: v374_0 = PHI v352, v373
    0x375: v375(0x3af) = CONST 
    0x378: JUMPI v375(0x3af), v374_0

    Begin block 0x379
    prev=[0x374], succ=[]
    =================================
    0x379: v379(0x40) = CONST 
    0x37b: v37b = MLOAD v379(0x40)
    0x37c: v37c(0x461bcd) = CONST 
    0x380: v380(0xe5) = CONST 
    0x382: v382(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v380(0xe5), v37c(0x461bcd)
    0x384: MSTORE v37b, v382(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x385: v385(0x4) = CONST 
    0x387: v387 = ADD v385(0x4), v37b
    0x38a: v38a(0x20) = CONST 
    0x38c: v38c = ADD v38a(0x20), v387
    0x38f: v38f(0x20) = SUB v38c, v387
    0x391: MSTORE v387, v38f(0x20)
    0x392: v392(0x37) = CONST 
    0x395: MSTORE v38c, v392(0x37)
    0x396: v396(0x20) = CONST 
    0x398: v398 = ADD v396(0x20), v38c
    0x39a: v39a(0xb96) = CONST 
    0x39d: v39d(0x37) = CONST 
    0x3a0: CODECOPY v398, v39a(0xb96), v39d(0x37)
    0x3a1: v3a1(0x40) = CONST 
    0x3a3: v3a3 = ADD v3a1(0x40), v398
    0x3a7: v3a7(0x40) = CONST 
    0x3a9: v3a9 = MLOAD v3a7(0x40)
    0x3ac: v3ac(0x84) = SUB v3a3, v3a9
    0x3ae: REVERT v3a9, v3ac(0x84)

    Begin block 0x3af
    prev=[0x374], succ=[0x3ba]
    =================================
    0x3b0: v3b0(0x0) = CONST 
    0x3b2: v3b2(0x3ba) = CONST 
    0x3b6: v3b6(0x564) = CONST 
    0x3b9: v3b9_0 = CALLPRIVATE v3b6(0x564), v2e2, v3b2(0x3ba)

    Begin block 0x3ba
    prev=[0x3af], succ=[0x3e0]
    =================================
    0x3bb: v3bb(0x1) = CONST 
    0x3bd: v3bd(0x1) = CONST 
    0x3bf: v3bf(0xa0) = CONST 
    0x3c1: v3c1(0x10000000000000000000000000000000000000000) = SHL v3bf(0xa0), v3bd(0x1)
    0x3c2: v3c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c1(0x10000000000000000000000000000000000000000), v3bb(0x1)
    0x3c4: v3c4 = AND v2e2, v3c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x3c5: v3c5(0x0) = CONST 
    0x3c9: MSTORE v3c5(0x0), v3c4
    0x3ca: v3ca(0x5) = CONST 
    0x3cc: v3cc(0x20) = CONST 
    0x3ce: MSTORE v3cc(0x20), v3ca(0x5)
    0x3cf: v3cf(0x40) = CONST 
    0x3d2: v3d2 = SHA3 v3c5(0x0), v3cf(0x40)
    0x3d3: v3d3 = SLOAD v3d2
    0x3d7: v3d7(0x3e0) = CONST 
    0x3dc: v3dc(0xaf1) = CONST 
    0x3df: v3df_0 = CALLPRIVATE v3dc(0xaf1), v3b9_0, v3d3, v3d7(0x3e0)

    Begin block 0x3e0
    prev=[0x3ba], succ=[0xb0bB0x3e0]
    =================================
    0x3e1: v3e1(0x1) = CONST 
    0x3e3: v3e3(0x1) = CONST 
    0x3e5: v3e5(0xa0) = CONST 
    0x3e7: v3e7(0x10000000000000000000000000000000000000000) = SHL v3e5(0xa0), v3e3(0x1)
    0x3e8: v3e8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3e7(0x10000000000000000000000000000000000000000), v3e1(0x1)
    0x3ea: v3ea = AND v2e2, v3e8(0xffffffffffffffffffffffffffffffffffffffff)
    0x3eb: v3eb(0x0) = CONST 
    0x3ef: MSTORE v3eb(0x0), v3ea
    0x3f0: v3f0(0x5) = CONST 
    0x3f2: v3f2(0x20) = CONST 
    0x3f6: MSTORE v3f2(0x20), v3f0(0x5)
    0x3f7: v3f7(0x40) = CONST 
    0x3fb: v3fb = SHA3 v3eb(0x0), v3f7(0x40)
    0x3ff: SSTORE v3fb, v3df_0
    0x400: v400(0x6) = CONST 
    0x403: MSTORE v3f2(0x20), v400(0x6)
    0x406: v406 = SHA3 v3eb(0x0), v3f7(0x40)
    0x407: v407 = SLOAD v406
    0x408: v408(0x411) = CONST 
    0x40d: v40d(0xb0b) = CONST 
    0x410: JUMP v40d(0xb0b)

    Begin block 0xb0bB0x3e0
    prev=[0x3e0], succ=[0xb190xb0bB0x3e0, 0xef60xb0bB0x3e0]
    =================================
    0xb0cS0x3e0: vb0cV3e0(0x0) = CONST 
    0xb10S0x3e0: vb10V3e0 = ADD v3b9_0, v407
    0xb13S0x3e0: vb13V3e0 = LT vb10V3e0, v407
    0xb14S0x3e0: vb14V3e0 = ISZERO vb13V3e0
    0xb15S0x3e0: vb15V3e0(0xef6) = CONST 
    0xb18S0x3e0: JUMPI vb15V3e0(0xef6), vb14V3e0

    Begin block 0xb190xb0bB0x3e0
    prev=[0xb0bB0x3e0], succ=[]
    =================================
    0xb190xb0bS0x3e0: vb0bb19V3e0(0x0) = CONST 
    0xb1c0xb0bS0x3e0: REVERT vb0bb19V3e0(0x0), vb0bb19V3e0(0x0)

    Begin block 0xef60xb0bB0x3e0
    prev=[0xb0bB0x3e0], succ=[0x411]
    =================================
    0xefc0xb0bS0x3e0: JUMP v408(0x411)

    Begin block 0x411
    prev=[0xef60xb0bB0x3e0], succ=[0x482, 0x486]
    =================================
    0x412: v412(0x1) = CONST 
    0x414: v414(0x1) = CONST 
    0x416: v416(0xa0) = CONST 
    0x418: v418(0x10000000000000000000000000000000000000000) = SHL v416(0xa0), v414(0x1)
    0x419: v419(0xffffffffffffffffffffffffffffffffffffffff) = SUB v418(0x10000000000000000000000000000000000000000), v412(0x1)
    0x41c: v41c = AND v2e2, v419(0xffffffffffffffffffffffffffffffffffffffff)
    0x41d: v41d(0x0) = CONST 
    0x421: MSTORE v41d(0x0), v41c
    0x422: v422(0x6) = CONST 
    0x424: v424(0x20) = CONST 
    0x428: MSTORE v424(0x20), v422(0x6)
    0x429: v429(0x40) = CONST 
    0x42d: v42d = SHA3 v41d(0x0), v429(0x40)
    0x430: SSTORE v42d, v41d(0x0)
    0x431: v431(0x4) = CONST 
    0x435: MSTORE v424(0x20), v431(0x4)
    0x438: v438 = SHA3 v41d(0x0), v429(0x40)
    0x439: v439 = TIMESTAMP 
    0x43b: SSTORE v438, v439
    0x43d: v43d = SLOAD v41d(0x0)
    0x43f: v43f = MLOAD v429(0x40)
    0x440: v440(0xa9059cbb) = CONST 
    0x445: v445(0xe0) = CONST 
    0x447: v447(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v445(0xe0), v440(0xa9059cbb)
    0x449: MSTORE v43f, v447(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
    0x44c: v44c = ADD v43f, v431(0x4)
    0x450: MSTORE v44c, v41c
    0x451: v451(0x24) = CONST 
    0x454: v454 = ADD v43f, v451(0x24)
    0x457: MSTORE v454, vb10V3e0
    0x459: v459 = MLOAD v429(0x40)
    0x460: v460 = AND v419(0xffffffffffffffffffffffffffffffffffffffff), v43d
    0x462: v462(0xa9059cbb) = CONST 
    0x468: v468(0x44) = CONST 
    0x46c: v46c = ADD v43f, v468(0x44)
    0x473: v473(0x0) = SUB v43f, v459
    0x474: v474(0x44) = ADD v473(0x0), v468(0x44)
    0x47a: v47a = EXTCODESIZE v460
    0x47b: v47b = ISZERO v47a
    0x47d: v47d = ISZERO v47b
    0x47e: v47e(0x486) = CONST 
    0x481: JUMPI v47e(0x486), v47d

    Begin block 0x482
    prev=[0x411], succ=[]
    =================================
    0x482: v482(0x0) = CONST 
    0x485: REVERT v482(0x0), v482(0x0)

    Begin block 0x486
    prev=[0x411], succ=[0x491, 0x49a]
    =================================
    0x488: v488 = GAS 
    0x489: v489 = CALL v488, v460, v41d(0x0), v459, v474(0x44), v459, v424(0x20)
    0x48a: v48a = ISZERO v489
    0x48c: v48c = ISZERO v48a
    0x48d: v48d(0x49a) = CONST 
    0x490: JUMPI v48d(0x49a), v48c

    Begin block 0x491
    prev=[0x486], succ=[]
    =================================
    0x491: v491 = RETURNDATASIZE 
    0x492: v492(0x0) = CONST 
    0x495: RETURNDATACOPY v492(0x0), v492(0x0), v491
    0x496: v496 = RETURNDATASIZE 
    0x497: v497(0x0) = CONST 
    0x499: REVERT v497(0x0), v496

    Begin block 0x49a
    prev=[0x486], succ=[0x4ac, 0x4b0]
    =================================
    0x49f: v49f(0x40) = CONST 
    0x4a1: v4a1 = MLOAD v49f(0x40)
    0x4a2: v4a2 = RETURNDATASIZE 
    0x4a3: v4a3(0x20) = CONST 
    0x4a6: v4a6 = LT v4a2, v4a3(0x20)
    0x4a7: v4a7 = ISZERO v4a6
    0x4a8: v4a8(0x4b0) = CONST 
    0x4ab: JUMPI v4a8(0x4b0), v4a7

    Begin block 0x4ac
    prev=[0x49a], succ=[]
    =================================
    0x4ac: v4ac(0x0) = CONST 
    0x4af: REVERT v4ac(0x0), v4ac(0x0)

    Begin block 0x4b0
    prev=[0x49a], succ=[0xc69]
    =================================
    0x4b3: v4b3(0x40) = CONST 
    0x4b6: v4b6 = MLOAD v4b3(0x40)
    0x4b9: MSTORE v4b6, vb10V3e0
    0x4ba: v4ba = TIMESTAMP 
    0x4bb: v4bb(0x20) = CONST 
    0x4be: v4be = ADD v4b6, v4bb(0x20)
    0x4bf: MSTORE v4be, v4ba
    0x4c1: v4c1 = MLOAD v4b3(0x40)
    0x4c2: v4c2(0x1) = CONST 
    0x4c4: v4c4(0x1) = CONST 
    0x4c6: v4c6(0xa0) = CONST 
    0x4c8: v4c8(0x10000000000000000000000000000000000000000) = SHL v4c6(0xa0), v4c4(0x1)
    0x4c9: v4c9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4c8(0x10000000000000000000000000000000000000000), v4c2(0x1)
    0x4cb: v4cb = AND v2e2, v4c9(0xffffffffffffffffffffffffffffffffffffffff)
    0x4cd: v4cd(0x987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a) = CONST 
    0x4f1: v4f1(0x0) = SUB v4b6, v4c1
    0x4f2: v4f2(0x40) = ADD v4f1(0x0), v4b3(0x40)
    0x4f4: LOG2 v4c1, v4f2(0x40), v4cd(0x987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a), v4cb
    0x4f8: JUMP vba(0xc69)

    Begin block 0xc69
    prev=[0x4b0], succ=[]
    =================================
    0xc6a: STOP 

    Begin block 0x358
    prev=[0x337], succ=[0x374]
    =================================
    0x359: v359(0x1) = CONST 
    0x35b: v35b(0x1) = CONST 
    0x35d: v35d(0xa0) = CONST 
    0x35f: v35f(0x10000000000000000000000000000000000000000) = SHL v35d(0xa0), v35b(0x1)
    0x360: v360(0xffffffffffffffffffffffffffffffffffffffff) = SUB v35f(0x10000000000000000000000000000000000000000), v359(0x1)
    0x362: v362 = AND v2e2, v360(0xffffffffffffffffffffffffffffffffffffffff)
    0x363: v363(0x0) = CONST 
    0x367: MSTORE v363(0x0), v362
    0x368: v368(0x6) = CONST 
    0x36a: v36a(0x20) = CONST 
    0x36c: MSTORE v36a(0x20), v368(0x6)
    0x36d: v36d(0x40) = CONST 
    0x370: v370 = SHA3 v363(0x0), v36d(0x40)
    0x371: v371 = SLOAD v370
    0x372: v372 = ISZERO v371
    0x373: v373 = ISZERO v372

}

function fallback()() public {
    Begin block 0xc21
    prev=[], succ=[]
    =================================
    0xc22: vc22(0x0) = CONST 
    0xc25: REVERT vc22(0x0), vc22(0x0)

}

function releaseStart()() public {
    Begin block 0xc3
    prev=[], succ=[0x4f9]
    =================================
    0xc4: vc4(0xc8a) = CONST 
    0xc7: vc7(0x4f9) = CONST 
    0xca: JUMP vc7(0x4f9)

    Begin block 0x4f9
    prev=[0xc3], succ=[0xc8a]
    =================================
    0x4fa: v4fa(0x2) = CONST 
    0x4fc: v4fc = SLOAD v4fa(0x2)
    0x4fe: JUMP vc4(0xc8a)

    Begin block 0xc8a
    prev=[0x4f9], succ=[]
    =================================
    0xc8b: vc8b(0x40) = CONST 
    0xc8e: vc8e = MLOAD vc8b(0x40)
    0xc91: MSTORE vc8e, v4fc
    0xc92: vc92 = MLOAD vc8b(0x40)
    0xc96: vc96(0x0) = SUB vc8e, vc92
    0xc97: vc97(0x20) = CONST 
    0xc99: vc99(0x20) = ADD vc97(0x20), vc96(0x0)
    0xc9b: RETURN vc92, vc99(0x20)

}

function totalTokens()() public {
    Begin block 0xdd
    prev=[], succ=[0x4ff]
    =================================
    0xde: vde(0xcbb) = CONST 
    0xe1: ve1(0x4ff) = CONST 
    0xe4: JUMP ve1(0x4ff)

    Begin block 0x4ff
    prev=[0xdd], succ=[0xcbb]
    =================================
    0x500: v500(0x1) = CONST 
    0x502: v502 = SLOAD v500(0x1)
    0x504: JUMP vde(0xcbb)

    Begin block 0xcbb
    prev=[0x4ff], succ=[]
    =================================
    0xcbc: vcbc(0x40) = CONST 
    0xcbf: vcbf = MLOAD vcbc(0x40)
    0xcc2: MSTORE vcbf, v502
    0xcc3: vcc3 = MLOAD vcbc(0x40)
    0xcc7: vcc7(0x0) = SUB vcbf, vcc3
    0xcc8: vcc8(0x20) = CONST 
    0xcca: vcca(0x20) = ADD vcc8(0x20), vcc7(0x0)
    0xccc: RETURN vcc3, vcca(0x20)

}

function releaseEnd()() public {
    Begin block 0xe5
    prev=[], succ=[0x505]
    =================================
    0xe6: ve6(0xcec) = CONST 
    0xe9: ve9(0x505) = CONST 
    0xec: JUMP ve9(0x505)

    Begin block 0x505
    prev=[0xe5], succ=[0xcec]
    =================================
    0x506: v506(0x3) = CONST 
    0x508: v508 = SLOAD v506(0x3)
    0x50a: JUMP ve6(0xcec)

    Begin block 0xcec
    prev=[0x505], succ=[]
    =================================
    0xced: vced(0x40) = CONST 
    0xcf0: vcf0 = MLOAD vced(0x40)
    0xcf3: MSTORE vcf0, v508
    0xcf4: vcf4 = MLOAD vced(0x40)
    0xcf8: vcf8(0x0) = SUB vcf0, vcf4
    0xcf9: vcf9(0x20) = CONST 
    0xcfb: vcfb(0x20) = ADD vcf9(0x20), vcf8(0x0)
    0xcfd: RETURN vcf4, vcfb(0x20)

}

function grantedToken(address)() public {
    Begin block 0xed
    prev=[], succ=[0xff, 0x103]
    =================================
    0xee: vee(0xd1d) = CONST 
    0xf1: vf1(0x4) = CONST 
    0xf4: vf4 = CALLDATASIZE 
    0xf5: vf5 = SUB vf4, vf1(0x4)
    0xf6: vf6(0x20) = CONST 
    0xf9: vf9 = LT vf5, vf6(0x20)
    0xfa: vfa = ISZERO vf9
    0xfb: vfb(0x103) = CONST 
    0xfe: JUMPI vfb(0x103), vfa

    Begin block 0xff
    prev=[0xed], succ=[]
    =================================
    0xff: vff(0x0) = CONST 
    0x102: REVERT vff(0x0), vff(0x0)

    Begin block 0x103
    prev=[0xed], succ=[0x50b]
    =================================
    0x105: v105 = CALLDATALOAD vf1(0x4)
    0x106: v106(0x1) = CONST 
    0x108: v108(0x1) = CONST 
    0x10a: v10a(0xa0) = CONST 
    0x10c: v10c(0x10000000000000000000000000000000000000000) = SHL v10a(0xa0), v108(0x1)
    0x10d: v10d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10c(0x10000000000000000000000000000000000000000), v106(0x1)
    0x10e: v10e = AND v10d(0xffffffffffffffffffffffffffffffffffffffff), v105
    0x10f: v10f(0x50b) = CONST 
    0x112: JUMP v10f(0x50b)

    Begin block 0x50b
    prev=[0x103], succ=[0xd1d]
    =================================
    0x50c: v50c(0x5) = CONST 
    0x50e: v50e(0x20) = CONST 
    0x510: MSTORE v50e(0x20), v50c(0x5)
    0x511: v511(0x0) = CONST 
    0x515: MSTORE v511(0x0), v10e
    0x516: v516(0x40) = CONST 
    0x519: v519 = SHA3 v511(0x0), v516(0x40)
    0x51a: v51a = SLOAD v519
    0x51c: JUMP vee(0xd1d)

    Begin block 0xd1d
    prev=[0x50b], succ=[]
    =================================
    0xd1e: vd1e(0x40) = CONST 
    0xd21: vd21 = MLOAD vd1e(0x40)
    0xd24: MSTORE vd21, v51a
    0xd25: vd25 = MLOAD vd1e(0x40)
    0xd29: vd29(0x0) = SUB vd21, vd25
    0xd2a: vd2a(0x20) = CONST 
    0xd2c: vd2c(0x20) = ADD vd2a(0x20), vd29(0x0)
    0xd2e: RETURN vd25, vd2c(0x20)

}

