function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0xf03]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0xec5: vec5(0xf03) = CONST 
    0xec6: JUMPI vec5(0xf03), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x71, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x9852595c) = CONST 
    0x26: v26 = GT v21(0x9852595c), v1f
    0x27: v27(0x71) = CONST 
    0x2a: JUMPI v27(0x71), v26

    Begin block 0x71
    prev=[0x1a], succ=[0xedf, 0x7d]
    =================================
    0x73: v73(0x4e71d92d) = CONST 
    0x78: v78 = EQ v73(0x4e71d92d), v1f
    0xed3: ved3(0xedf) = CONST 
    0xed4: JUMPI ved3(0xedf), v78

    Begin block 0xedf
    prev=[0x71], succ=[]
    =================================
    0xee0: vee0(0xb9) = CONST 
    0xee1: CALLPRIVATE vee0(0xb9)

    Begin block 0x7d
    prev=[0x71], succ=[0xee2, 0x88]
    =================================
    0x7e: v7e(0x766e33f4) = CONST 
    0x83: v83 = EQ v7e(0x766e33f4), v1f
    0xed5: ved5(0xee2) = CONST 
    0xed6: JUMPI ved5(0xee2), v83

    Begin block 0xee2
    prev=[0x7d], succ=[]
    =================================
    0xee3: vee3(0xc3) = CONST 
    0xee4: CALLPRIVATE vee3(0xc3)

    Begin block 0x88
    prev=[0x7d], succ=[0xee5, 0x93]
    =================================
    0x89: v89(0x7e1c0c09) = CONST 
    0x8e: v8e = EQ v89(0x7e1c0c09), v1f
    0xed7: ved7(0xee5) = CONST 
    0xed8: JUMPI ved7(0xee5), v8e

    Begin block 0xee5
    prev=[0x88], succ=[]
    =================================
    0xee6: vee6(0xdd) = CONST 
    0xee7: CALLPRIVATE vee6(0xdd)

    Begin block 0x93
    prev=[0x88], succ=[0xee8, 0x9e]
    =================================
    0x94: v94(0x8033fe49) = CONST 
    0x99: v99 = EQ v94(0x8033fe49), v1f
    0xed9: ved9(0xee8) = CONST 
    0xeda: JUMPI ved9(0xee8), v99

    Begin block 0xee8
    prev=[0x93], succ=[]
    =================================
    0xee9: vee9(0xe5) = CONST 
    0xeea: CALLPRIVATE vee9(0xe5)

    Begin block 0x9e
    prev=[0x93], succ=[0xeeb, 0xa9]
    =================================
    0x9f: v9f(0x86a1da9c) = CONST 
    0xa4: va4 = EQ v9f(0x86a1da9c), v1f
    0xedb: vedb(0xeeb) = CONST 
    0xedc: JUMPI vedb(0xeeb), va4

    Begin block 0xeeb
    prev=[0x9e], succ=[]
    =================================
    0xeec: veec(0xed) = CONST 
    0xeed: CALLPRIVATE veec(0xed)

    Begin block 0xa9
    prev=[0x9e], succ=[0xeee, 0xb4]
    =================================
    0xaa: vaa(0x89885049) = CONST 
    0xaf: vaf = EQ vaa(0x89885049), v1f
    0xedd: vedd(0xeee) = CONST 
    0xede: JUMPI vedd(0xeee), vaf

    Begin block 0xeee
    prev=[0xa9], succ=[]
    =================================
    0xeef: veef(0x113) = CONST 
    0xef0: CALLPRIVATE veef(0x113)

    Begin block 0xb4
    prev=[0xa9], succ=[]
    =================================
    0xb5: vb5(0x0) = CONST 
    0xb8: REVERT vb5(0x0), vb5(0x0)

    Begin block 0x2b
    prev=[0x1a], succ=[0xef1, 0x36]
    =================================
    0x2c: v2c(0x9852595c) = CONST 
    0x31: v31 = EQ v2c(0x9852595c), v1f
    0xec7: vec7(0xef1) = CONST 
    0xec8: JUMPI vec7(0xef1), v31

    Begin block 0xef1
    prev=[0x2b], succ=[]
    =================================
    0xef2: vef2(0x139) = CONST 
    0xef3: CALLPRIVATE vef2(0x139)

    Begin block 0x36
    prev=[0x2b], succ=[0xef4, 0x41]
    =================================
    0x37: v37(0xa3f8eace) = CONST 
    0x3c: v3c = EQ v37(0xa3f8eace), v1f
    0xec9: vec9(0xef4) = CONST 
    0xeca: JUMPI vec9(0xef4), v3c

    Begin block 0xef4
    prev=[0x36], succ=[]
    =================================
    0xef5: vef5(0x15f) = CONST 
    0xef6: CALLPRIVATE vef5(0x15f)

    Begin block 0x41
    prev=[0x36], succ=[0xef7, 0x4c]
    =================================
    0x42: v42(0xa9059cbb) = CONST 
    0x47: v47 = EQ v42(0xa9059cbb), v1f
    0xecb: vecb(0xef7) = CONST 
    0xecc: JUMPI vecb(0xef7), v47

    Begin block 0xef7
    prev=[0x41], succ=[]
    =================================
    0xef8: vef8(0x185) = CONST 
    0xef9: CALLPRIVATE vef8(0x185)

    Begin block 0x4c
    prev=[0x41], succ=[0xefa, 0x57]
    =================================
    0x4d: v4d(0xb6c238b5) = CONST 
    0x52: v52 = EQ v4d(0xb6c238b5), v1f
    0xecd: vecd(0xefa) = CONST 
    0xece: JUMPI vecd(0xefa), v52

    Begin block 0xefa
    prev=[0x4c], succ=[]
    =================================
    0xefb: vefb(0x1b1) = CONST 
    0xefc: CALLPRIVATE vefb(0x1b1)

    Begin block 0x57
    prev=[0x4c], succ=[0xefd, 0x62]
    =================================
    0x58: v58(0xfc0c546a) = CONST 
    0x5d: v5d = EQ v58(0xfc0c546a), v1f
    0xecf: vecf(0xefd) = CONST 
    0xed0: JUMPI vecf(0xefd), v5d

    Begin block 0xefd
    prev=[0x57], succ=[]
    =================================
    0xefe: vefe(0x1d7) = CONST 
    0xeff: CALLPRIVATE vefe(0x1d7)

    Begin block 0x62
    prev=[0x57], succ=[0x6d, 0xf00]
    =================================
    0x63: v63(0xfd536f5d) = CONST 
    0x68: v68 = EQ v63(0xfd536f5d), v1f
    0xed1: ved1(0xf00) = CONST 
    0xed2: JUMPI ved1(0xf00), v68

    Begin block 0x6d
    prev=[0x62], succ=[0xbe7]
    =================================
    0x6d: v6d(0xbe7) = CONST 
    0x70: JUMP v6d(0xbe7)

    Begin block 0xbe7
    prev=[0x6d], succ=[]
    =================================
    0xbe8: vbe8(0x0) = CONST 
    0xbeb: REVERT vbe8(0x0), vbe8(0x0)

    Begin block 0xf00
    prev=[0x62], succ=[]
    =================================
    0xf01: vf01(0x1fb) = CONST 
    0xf02: CALLPRIVATE vf01(0x1fb)

    Begin block 0xf03
    prev=[0x10], succ=[]
    =================================
    0xf04: vf04(0xbc3) = CONST 
    0xf05: CALLPRIVATE vf04(0xbc3)

}

function claimableAmount(address)() public {
    Begin block 0x113
    prev=[], succ=[0x125, 0x129]
    =================================
    0x114: v114(0xcf0) = CONST 
    0x117: v117(0x4) = CONST 
    0x11a: v11a = CALLDATASIZE 
    0x11b: v11b = SUB v11a, v117(0x4)
    0x11c: v11c(0x20) = CONST 
    0x11f: v11f = LT v11b, v11c(0x20)
    0x120: v120 = ISZERO v11f
    0x121: v121(0x129) = CONST 
    0x124: JUMPI v121(0x129), v120

    Begin block 0x125
    prev=[0x113], succ=[]
    =================================
    0x125: v125(0x0) = CONST 
    0x128: REVERT v125(0x0), v125(0x0)

    Begin block 0x129
    prev=[0x113], succ=[0x51d]
    =================================
    0x12b: v12b = CALLDATALOAD v117(0x4)
    0x12c: v12c(0x1) = CONST 
    0x12e: v12e(0x1) = CONST 
    0x130: v130(0xa0) = CONST 
    0x132: v132(0x10000000000000000000000000000000000000000) = SHL v130(0xa0), v12e(0x1)
    0x133: v133(0xffffffffffffffffffffffffffffffffffffffff) = SUB v132(0x10000000000000000000000000000000000000000), v12c(0x1)
    0x134: v134 = AND v133(0xffffffffffffffffffffffffffffffffffffffff), v12b
    0x135: v135(0x51d) = CONST 
    0x138: JUMP v135(0x51d)

    Begin block 0x51d
    prev=[0x129], succ=[0xdf6]
    =================================
    0x51e: v51e(0x0) = CONST 
    0x520: v520(0x54a) = CONST 
    0x523: v523(0xdf6) = CONST 
    0x527: v527(0x564) = CONST 
    0x52a: v52a_0 = CALLPRIVATE v527(0x564), v134, v523(0xdf6)

    Begin block 0xdf6
    prev=[0x51d], succ=[0xaadB0xdf6]
    =================================
    0xdf7: vdf7(0x1) = CONST 
    0xdf9: vdf9(0x1) = CONST 
    0xdfb: vdfb(0xa0) = CONST 
    0xdfd: vdfd(0x10000000000000000000000000000000000000000) = SHL vdfb(0xa0), vdf9(0x1)
    0xdfe: vdfe(0xffffffffffffffffffffffffffffffffffffffff) = SUB vdfd(0x10000000000000000000000000000000000000000), vdf7(0x1)
    0xe00: ve00 = AND v134, vdfe(0xffffffffffffffffffffffffffffffffffffffff)
    0xe01: ve01(0x0) = CONST 
    0xe05: MSTORE ve01(0x0), ve00
    0xe06: ve06(0x6) = CONST 
    0xe08: ve08(0x20) = CONST 
    0xe0a: MSTORE ve08(0x20), ve06(0x6)
    0xe0b: ve0b(0x40) = CONST 
    0xe0e: ve0e = SHA3 ve01(0x0), ve0b(0x40)
    0xe0f: ve0f = SLOAD ve0e
    0xe11: ve11(0xaad) = CONST 
    0xe14: JUMP ve11(0xaad)

    Begin block 0xaadB0xdf6
    prev=[0xdf6], succ=[0xabb0xaadB0xdf6, 0xe980xaadB0xdf6]
    =================================
    0xaaeS0xdf6: vaaeVdf6(0x0) = CONST 
    0xab2S0xdf6: vab2Vdf6 = ADD v52a_0, ve0f
    0xab5S0xdf6: vab5Vdf6 = LT vab2Vdf6, ve0f
    0xab6S0xdf6: vab6Vdf6 = ISZERO vab5Vdf6
    0xab7S0xdf6: vab7Vdf6(0xe98) = CONST 
    0xabaS0xdf6: JUMPI vab7Vdf6(0xe98), vab6Vdf6

    Begin block 0xabb0xaadB0xdf6
    prev=[0xaadB0xdf6], succ=[]
    =================================
    0xabb0xaadS0xdf6: vaadabbVdf6(0x0) = CONST 
    0xabe0xaadS0xdf6: REVERT vaadabbVdf6(0x0), vaadabbVdf6(0x0)

    Begin block 0xe980xaadB0xdf6
    prev=[0xaadB0xdf6], succ=[0x54a]
    =================================
    0xe9e0xaadS0xdf6: JUMP v520(0x54a)

    Begin block 0x54a
    prev=[0xe980xaadB0xdf6], succ=[0x54d0x113]
    =================================

    Begin block 0x54d0x113
    prev=[0x54a], succ=[0xcf0]
    =================================
    0x5510x113: JUMP v114(0xcf0)

    Begin block 0xcf0
    prev=[0x54d0x113], succ=[]
    =================================
    0xcf1: vcf1(0x40) = CONST 
    0xcf4: vcf4 = MLOAD vcf1(0x40)
    0xcf7: MSTORE vcf4, vab2Vdf6
    0xcf8: vcf8 = MLOAD vcf1(0x40)
    0xcfc: vcfc(0x0) = SUB vcf4, vcf8
    0xcfd: vcfd(0x20) = CONST 
    0xcff: vcff(0x20) = ADD vcfd(0x20), vcfc(0x0)
    0xd01: RETURN vcf8, vcff(0x20)

}

function released(address)() public {
    Begin block 0x139
    prev=[], succ=[0x14b, 0x14f]
    =================================
    0x13a: v13a(0xd21) = CONST 
    0x13d: v13d(0x4) = CONST 
    0x140: v140 = CALLDATASIZE 
    0x141: v141 = SUB v140, v13d(0x4)
    0x142: v142(0x20) = CONST 
    0x145: v145 = LT v141, v142(0x20)
    0x146: v146 = ISZERO v145
    0x147: v147(0x14f) = CONST 
    0x14a: JUMPI v147(0x14f), v146

    Begin block 0x14b
    prev=[0x139], succ=[]
    =================================
    0x14b: v14b(0x0) = CONST 
    0x14e: REVERT v14b(0x0), v14b(0x0)

    Begin block 0x14f
    prev=[0x139], succ=[0x552]
    =================================
    0x151: v151 = CALLDATALOAD v13d(0x4)
    0x152: v152(0x1) = CONST 
    0x154: v154(0x1) = CONST 
    0x156: v156(0xa0) = CONST 
    0x158: v158(0x10000000000000000000000000000000000000000) = SHL v156(0xa0), v154(0x1)
    0x159: v159(0xffffffffffffffffffffffffffffffffffffffff) = SUB v158(0x10000000000000000000000000000000000000000), v152(0x1)
    0x15a: v15a = AND v159(0xffffffffffffffffffffffffffffffffffffffff), v151
    0x15b: v15b(0x552) = CONST 
    0x15e: JUMP v15b(0x552)

    Begin block 0x552
    prev=[0x14f], succ=[0xd21]
    =================================
    0x553: v553(0x6) = CONST 
    0x555: v555(0x20) = CONST 
    0x557: MSTORE v555(0x20), v553(0x6)
    0x558: v558(0x0) = CONST 
    0x55c: MSTORE v558(0x0), v15a
    0x55d: v55d(0x40) = CONST 
    0x560: v560 = SHA3 v558(0x0), v55d(0x40)
    0x561: v561 = SLOAD v560
    0x563: JUMP v13a(0xd21)

    Begin block 0xd21
    prev=[0x552], succ=[]
    =================================
    0xd22: vd22(0x40) = CONST 
    0xd25: vd25 = MLOAD vd22(0x40)
    0xd28: MSTORE vd25, v561
    0xd29: vd29 = MLOAD vd22(0x40)
    0xd2d: vd2d(0x0) = SUB vd25, vd29
    0xd2e: vd2e(0x20) = CONST 
    0xd30: vd30(0x20) = ADD vd2e(0x20), vd2d(0x0)
    0xd32: RETURN vd29, vd30(0x20)

}

function releasable(address)() public {
    Begin block 0x15f
    prev=[], succ=[0x171, 0x175]
    =================================
    0x160: v160(0xd52) = CONST 
    0x163: v163(0x4) = CONST 
    0x166: v166 = CALLDATASIZE 
    0x167: v167 = SUB v166, v163(0x4)
    0x168: v168(0x20) = CONST 
    0x16b: v16b = LT v167, v168(0x20)
    0x16c: v16c = ISZERO v16b
    0x16d: v16d(0x175) = CONST 
    0x170: JUMPI v16d(0x175), v16c

    Begin block 0x171
    prev=[0x15f], succ=[]
    =================================
    0x171: v171(0x0) = CONST 
    0x174: REVERT v171(0x0), v171(0x0)

    Begin block 0x175
    prev=[0x15f], succ=[0x5640x15f]
    =================================
    0x177: v177 = CALLDATALOAD v163(0x4)
    0x178: v178(0x1) = CONST 
    0x17a: v17a(0x1) = CONST 
    0x17c: v17c(0xa0) = CONST 
    0x17e: v17e(0x10000000000000000000000000000000000000000) = SHL v17c(0xa0), v17a(0x1)
    0x17f: v17f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v17e(0x10000000000000000000000000000000000000000), v178(0x1)
    0x180: v180 = AND v17f(0xffffffffffffffffffffffffffffffffffffffff), v177
    0x181: v181(0x564) = CONST 
    0x184: JUMP v181(0x564)

    Begin block 0x5640x15f
    prev=[0x175], succ=[0x5780x15f, 0x5710x15f]
    =================================
    0x5650x15f: v15f565(0x0) = CONST 
    0x5670x15f: v15f567(0x2) = CONST 
    0x5690x15f: v15f569 = SLOAD v15f567(0x2)
    0x56a0x15f: v15f56a = TIMESTAMP 
    0x56b0x15f: v15f56b = LT v15f56a, v15f569
    0x56c0x15f: v15f56c = ISZERO v15f56b
    0x56d0x15f: v15f56d(0x578) = CONST 
    0x5700x15f: JUMPI v15f56d(0x578), v15f56c

    Begin block 0x5780x15f
    prev=[0x5640x15f], succ=[0x5850x15f, 0x58a0x15f]
    =================================
    0x5790x15f: v15f579(0x0) = CONST 
    0x57b0x15f: v15f57b(0x3) = CONST 
    0x57d0x15f: v15f57d = SLOAD v15f57b(0x3)
    0x57e0x15f: v15f57e = TIMESTAMP 
    0x57f0x15f: v15f57f = LT v15f57e, v15f57d
    0x5800x15f: v15f580 = ISZERO v15f57f
    0x5810x15f: v15f581(0x58a) = CONST 
    0x5840x15f: JUMPI v15f581(0x58a), v15f580

    Begin block 0x5850x15f
    prev=[0x5780x15f], succ=[0x58e0x15f]
    =================================
    0x5850x15f: v15f585 = TIMESTAMP 
    0x5860x15f: v15f586(0x58e) = CONST 
    0x5890x15f: JUMP v15f586(0x58e)

    Begin block 0x58e0x15f
    prev=[0x5850x15f, 0x58a0x15f], succ=[0x5ba0x15f]
    =================================
    0x58f0x15f: v15f58f(0x1) = CONST 
    0x5910x15f: v15f591(0x1) = CONST 
    0x5930x15f: v15f593(0xa0) = CONST 
    0x5950x15f: v15f595(0x10000000000000000000000000000000000000000) = SHL v15f593(0xa0), v15f591(0x1)
    0x5960x15f: v15f596(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f595(0x10000000000000000000000000000000000000000), v15f58f(0x1)
    0x5980x15f: v15f598 = AND v180, v15f596(0xffffffffffffffffffffffffffffffffffffffff)
    0x5990x15f: v15f599(0x0) = CONST 
    0x59d0x15f: MSTORE v15f599(0x0), v15f598
    0x59e0x15f: v15f59e(0x4) = CONST 
    0x5a00x15f: v15f5a0(0x20) = CONST 
    0x5a20x15f: MSTORE v15f5a0(0x20), v15f59e(0x4)
    0x5a30x15f: v15f5a3(0x40) = CONST 
    0x5a60x15f: v15f5a6 = SHA3 v15f599(0x0), v15f5a3(0x40)
    0x5a70x15f: v15f5a7 = SLOAD v15f5a6
    0x5a80x15f: v15f5a8(0x3) = CONST 
    0x5aa0x15f: v15f5aa = SLOAD v15f5a8(0x3)
    0x5ae0x15f: v15f5ae(0xe34) = CONST 
    0x5b20x15f: v15f5b2(0x5ba) = CONST 
    0x5b60x15f: v15f5b6(0xa93) = CONST 
    0x5b90x15f: v15f5b9_0 = CALLPRIVATE v15f5b6(0xa93), v15f5a7, v15f5aa, v15f5b2(0x5ba)

    Begin block 0x5ba0x15f
    prev=[0x58e0x15f], succ=[0x5e20x15f]
    =================================
    0x5ba0x15f_0x2: v5ba15f_2 = PHI v15f58d, v15f585
    0x5bb0x15f: v15f5bb(0x1) = CONST 
    0x5bd0x15f: v15f5bd(0x1) = CONST 
    0x5bf0x15f: v15f5bf(0xa0) = CONST 
    0x5c10x15f: v15f5c1(0x10000000000000000000000000000000000000000) = SHL v15f5bf(0xa0), v15f5bd(0x1)
    0x5c20x15f: v15f5c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f5c1(0x10000000000000000000000000000000000000000), v15f5bb(0x1)
    0x5c40x15f: v15f5c4 = AND v180, v15f5c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x5c50x15f: v15f5c5(0x0) = CONST 
    0x5c90x15f: MSTORE v15f5c5(0x0), v15f5c4
    0x5ca0x15f: v15f5ca(0x4) = CONST 
    0x5cc0x15f: v15f5cc(0x20) = CONST 
    0x5ce0x15f: MSTORE v15f5cc(0x20), v15f5ca(0x4)
    0x5cf0x15f: v15f5cf(0x40) = CONST 
    0x5d20x15f: v15f5d2 = SHA3 v15f5c5(0x0), v15f5cf(0x40)
    0x5d30x15f: v15f5d3 = SLOAD v15f5d2
    0x5d40x15f: v15f5d4(0x601) = CONST 
    0x5d80x15f: v15f5d8(0x5e2) = CONST 
    0x5de0x15f: v15f5de(0xa93) = CONST 
    0x5e10x15f: v15f5e1_0 = CALLPRIVATE v15f5de(0xa93), v15f5d3, v5ba15f_2, v15f5d8(0x5e2)

    Begin block 0x5e20x15f
    prev=[0x5ba0x15f], succ=[0x6010x15f]
    =================================
    0x5e30x15f: v15f5e3(0x1) = CONST 
    0x5e50x15f: v15f5e5(0x1) = CONST 
    0x5e70x15f: v15f5e7(0xa0) = CONST 
    0x5e90x15f: v15f5e9(0x10000000000000000000000000000000000000000) = SHL v15f5e7(0xa0), v15f5e5(0x1)
    0x5ea0x15f: v15f5ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15f5e9(0x10000000000000000000000000000000000000000), v15f5e3(0x1)
    0x5ec0x15f: v15f5ec = AND v180, v15f5ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x5ed0x15f: v15f5ed(0x0) = CONST 
    0x5f10x15f: MSTORE v15f5ed(0x0), v15f5ec
    0x5f20x15f: v15f5f2(0x5) = CONST 
    0x5f40x15f: v15f5f4(0x20) = CONST 
    0x5f60x15f: MSTORE v15f5f4(0x20), v15f5f2(0x5)
    0x5f70x15f: v15f5f7(0x40) = CONST 
    0x5fa0x15f: v15f5fa = SHA3 v15f5ed(0x0), v15f5f7(0x40)
    0x5fb0x15f: v15f5fb = SLOAD v15f5fa
    0x5fd0x15f: v15f5fd(0xabf) = CONST 
    0x6000x15f: v15f600_0 = CALLPRIVATE v15f5fd(0xabf), v15f5e1_0, v15f5fb, v15f5d4(0x601)

    Begin block 0x6010x15f
    prev=[0x5e20x15f], succ=[0xae60x15f]
    =================================
    0x6030x15f: v15f603(0xae6) = CONST 
    0x6060x15f: JUMP v15f603(0xae6)

    Begin block 0xae60x15f
    prev=[0x6010x15f], succ=[0xaf00x15f, 0xaf40x15f]
    =================================
    0xae70x15f: v15fae7(0x0) = CONST 
    0xaeb0x15f: v15faeb = GT v15f5b9_0, v15fae7(0x0)
    0xaec0x15f: v15faec(0xaf4) = CONST 
    0xaef0x15f: JUMPI v15faec(0xaf4), v15faeb

    Begin block 0xaf00x15f
    prev=[0xae60x15f], succ=[]
    =================================
    0xaf00x15f: v15faf0(0x0) = CONST 
    0xaf30x15f: REVERT v15faf0(0x0), v15faf0(0x0)

    Begin block 0xaf40x15f
    prev=[0xae60x15f], succ=[0xafe0x15f, 0xaff0x15f]
    =================================
    0xaf50x15f: v15faf5(0x0) = CONST 
    0xafa0x15f: v15fafa(0xaff) = CONST 
    0xafd0x15f: JUMPI v15fafa(0xaff), v15f5b9_0

    Begin block 0xafe0x15f
    prev=[0xaf40x15f], succ=[]
    =================================
    0xafe0x15f: THROW 

    Begin block 0xaff0x15f
    prev=[0xaf40x15f], succ=[0xe340x15f]
    =================================
    0xb000x15f: v15fb00 = DIV v15f600_0, v15f5b9_0
    0xb070x15f: JUMP v15f5ae(0xe34)

    Begin block 0xe340x15f
    prev=[0xaff0x15f], succ=[0xd52]
    =================================
    0xe3a0x15f: JUMP v160(0xd52)

    Begin block 0xd52
    prev=[0x54d0x15f, 0xe340x15f], succ=[]
    =================================
    0xd52_0x0: vd52_0 = PHI v15fb00, v15f572(0x0)
    0xd53: vd53(0x40) = CONST 
    0xd56: vd56 = MLOAD vd53(0x40)
    0xd59: MSTORE vd56, vd52_0
    0xd5a: vd5a = MLOAD vd53(0x40)
    0xd5e: vd5e(0x0) = SUB vd56, vd5a
    0xd5f: vd5f(0x20) = CONST 
    0xd61: vd61(0x20) = ADD vd5f(0x20), vd5e(0x0)
    0xd63: RETURN vd5a, vd61(0x20)

    Begin block 0x58a0x15f
    prev=[0x5780x15f], succ=[0x58e0x15f]
    =================================
    0x58b0x15f: v15f58b(0x3) = CONST 
    0x58d0x15f: v15f58d = SLOAD v15f58b(0x3)

    Begin block 0x5710x15f
    prev=[0x5640x15f], succ=[0x54d0x15f]
    =================================
    0x5720x15f: v15f572(0x0) = CONST 
    0x5740x15f: v15f574(0x54d) = CONST 
    0x5770x15f: JUMP v15f574(0x54d)

    Begin block 0x54d0x15f
    prev=[0x5710x15f], succ=[0xd52]
    =================================
    0x5510x15f: JUMP v160(0xd52)

}

function transfer(address,uint256)() public {
    Begin block 0x185
    prev=[], succ=[0x197, 0x19b]
    =================================
    0x186: v186(0xd83) = CONST 
    0x189: v189(0x4) = CONST 
    0x18c: v18c = CALLDATASIZE 
    0x18d: v18d = SUB v18c, v189(0x4)
    0x18e: v18e(0x40) = CONST 
    0x191: v191 = LT v18d, v18e(0x40)
    0x192: v192 = ISZERO v191
    0x193: v193(0x19b) = CONST 
    0x196: JUMPI v193(0x19b), v192

    Begin block 0x197
    prev=[0x185], succ=[]
    =================================
    0x197: v197(0x0) = CONST 
    0x19a: REVERT v197(0x0), v197(0x0)

    Begin block 0x19b
    prev=[0x185], succ=[0x60e]
    =================================
    0x19d: v19d(0x1) = CONST 
    0x19f: v19f(0x1) = CONST 
    0x1a1: v1a1(0xa0) = CONST 
    0x1a3: v1a3(0x10000000000000000000000000000000000000000) = SHL v1a1(0xa0), v19f(0x1)
    0x1a4: v1a4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a3(0x10000000000000000000000000000000000000000), v19d(0x1)
    0x1a6: v1a6 = CALLDATALOAD v189(0x4)
    0x1a7: v1a7 = AND v1a6, v1a4(0xffffffffffffffffffffffffffffffffffffffff)
    0x1a9: v1a9(0x20) = CONST 
    0x1ab: v1ab(0x24) = ADD v1a9(0x20), v189(0x4)
    0x1ac: v1ac = CALLDATALOAD v1ab(0x24)
    0x1ad: v1ad(0x60e) = CONST 
    0x1b0: JUMP v1ad(0x60e)

    Begin block 0x60e
    prev=[0x19b], succ=[0x61a]
    =================================
    0x60f: v60f(0x630) = CONST 
    0x612: v612(0x61a) = CONST 
    0x615: v615 = CALLER 
    0x616: v616(0x564) = CONST 
    0x619: v619_0 = CALLPRIVATE v616(0x564), v615, v612(0x61a)

    Begin block 0x61a
    prev=[0x60e], succ=[0xaadB0x61a]
    =================================
    0x61b: v61b = CALLER 
    0x61c: v61c(0x0) = CONST 
    0x620: MSTORE v61c(0x0), v61b
    0x621: v621(0x6) = CONST 
    0x623: v623(0x20) = CONST 
    0x625: MSTORE v623(0x20), v621(0x6)
    0x626: v626(0x40) = CONST 
    0x629: v629 = SHA3 v61c(0x0), v626(0x40)
    0x62a: v62a = SLOAD v629
    0x62c: v62c(0xaad) = CONST 
    0x62f: JUMP v62c(0xaad)

    Begin block 0xaadB0x61a
    prev=[0x61a], succ=[0xabb0xaadB0x61a, 0xe980xaadB0x61a]
    =================================
    0xaaeS0x61a: vaaeV61a(0x0) = CONST 
    0xab2S0x61a: vab2V61a = ADD v619_0, v62a
    0xab5S0x61a: vab5V61a = LT vab2V61a, v62a
    0xab6S0x61a: vab6V61a = ISZERO vab5V61a
    0xab7S0x61a: vab7V61a(0xe98) = CONST 
    0xabaS0x61a: JUMPI vab7V61a(0xe98), vab6V61a

    Begin block 0xabb0xaadB0x61a
    prev=[0xaadB0x61a], succ=[]
    =================================
    0xabb0xaadS0x61a: vaadabbV61a(0x0) = CONST 
    0xabe0xaadS0x61a: REVERT vaadabbV61a(0x0), vaadabbV61a(0x0)

    Begin block 0xe980xaadB0x61a
    prev=[0xaadB0x61a], succ=[0x630]
    =================================
    0xe9e0xaadS0x61a: JUMP v60f(0x630)

    Begin block 0x630
    prev=[0xe980xaadB0x61a], succ=[0xe5a]
    =================================
    0x631: v631 = CALLER 
    0x632: v632(0x0) = CONST 
    0x636: MSTORE v632(0x0), v631
    0x637: v637(0x6) = CONST 
    0x639: v639(0x20) = CONST 
    0x63b: MSTORE v639(0x20), v637(0x6)
    0x63c: v63c(0x40) = CONST 
    0x63f: v63f = SHA3 v632(0x0), v63c(0x40)
    0x640: SSTORE v63f, vab2V61a
    0x641: v641(0x64c) = CONST 
    0x644: v644(0xe5a) = CONST 
    0x648: v648(0x564) = CONST 
    0x64b: v64b_0 = CALLPRIVATE v648(0x564), v1a7, v644(0xe5a)

    Begin block 0xe5a
    prev=[0x630], succ=[0xaadB0xe5a]
    =================================
    0xe5b: ve5b(0x1) = CONST 
    0xe5d: ve5d(0x1) = CONST 
    0xe5f: ve5f(0xa0) = CONST 
    0xe61: ve61(0x10000000000000000000000000000000000000000) = SHL ve5f(0xa0), ve5d(0x1)
    0xe62: ve62(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve61(0x10000000000000000000000000000000000000000), ve5b(0x1)
    0xe64: ve64 = AND v1a7, ve62(0xffffffffffffffffffffffffffffffffffffffff)
    0xe65: ve65(0x0) = CONST 
    0xe69: MSTORE ve65(0x0), ve64
    0xe6a: ve6a(0x6) = CONST 
    0xe6c: ve6c(0x20) = CONST 
    0xe6e: MSTORE ve6c(0x20), ve6a(0x6)
    0xe6f: ve6f(0x40) = CONST 
    0xe72: ve72 = SHA3 ve65(0x0), ve6f(0x40)
    0xe73: ve73 = SLOAD ve72
    0xe75: ve75(0xaad) = CONST 
    0xe78: JUMP ve75(0xaad)

    Begin block 0xaadB0xe5a
    prev=[0xe5a], succ=[0xabb0xaadB0xe5a, 0xe980xaadB0xe5a]
    =================================
    0xaaeS0xe5a: vaaeVe5a(0x0) = CONST 
    0xab2S0xe5a: vab2Ve5a = ADD v64b_0, ve73
    0xab5S0xe5a: vab5Ve5a = LT vab2Ve5a, ve73
    0xab6S0xe5a: vab6Ve5a = ISZERO vab5Ve5a
    0xab7S0xe5a: vab7Ve5a(0xe98) = CONST 
    0xabaS0xe5a: JUMPI vab7Ve5a(0xe98), vab6Ve5a

    Begin block 0xabb0xaadB0xe5a
    prev=[0xaadB0xe5a], succ=[]
    =================================
    0xabb0xaadS0xe5a: vaadabbVe5a(0x0) = CONST 
    0xabe0xaadS0xe5a: REVERT vaadabbVe5a(0x0), vaadabbVe5a(0x0)

    Begin block 0xe980xaadB0xe5a
    prev=[0xaadB0xe5a], succ=[0x64c]
    =================================
    0xe9e0xaadS0xe5a: JUMP v641(0x64c)

    Begin block 0x64c
    prev=[0xe980xaadB0xe5a], succ=[0x671]
    =================================
    0x64d: v64d(0x1) = CONST 
    0x64f: v64f(0x1) = CONST 
    0x651: v651(0xa0) = CONST 
    0x653: v653(0x10000000000000000000000000000000000000000) = SHL v651(0xa0), v64f(0x1)
    0x654: v654(0xffffffffffffffffffffffffffffffffffffffff) = SUB v653(0x10000000000000000000000000000000000000000), v64d(0x1)
    0x656: v656 = AND v1a7, v654(0xffffffffffffffffffffffffffffffffffffffff)
    0x657: v657(0x0) = CONST 
    0x65b: MSTORE v657(0x0), v656
    0x65c: v65c(0x6) = CONST 
    0x65e: v65e(0x20) = CONST 
    0x660: MSTORE v65e(0x20), v65c(0x6)
    0x661: v661(0x40) = CONST 
    0x664: v664 = SHA3 v657(0x0), v661(0x40)
    0x665: SSTORE v664, vab2Ve5a
    0x666: v666(0x687) = CONST 
    0x669: v669(0x671) = CONST 
    0x66c: v66c = CALLER 
    0x66d: v66d(0x564) = CONST 
    0x670: v670_0 = CALLPRIVATE v66d(0x564), v66c, v669(0x671)

    Begin block 0x671
    prev=[0x64c], succ=[0x687]
    =================================
    0x672: v672 = CALLER 
    0x673: v673(0x0) = CONST 
    0x677: MSTORE v673(0x0), v672
    0x678: v678(0x5) = CONST 
    0x67a: v67a(0x20) = CONST 
    0x67c: MSTORE v67a(0x20), v678(0x5)
    0x67d: v67d(0x40) = CONST 
    0x680: v680 = SHA3 v673(0x0), v67d(0x40)
    0x681: v681 = SLOAD v680
    0x683: v683(0xa93) = CONST 
    0x686: v686_0 = CALLPRIVATE v683(0xa93), v670_0, v681, v666(0x687)

    Begin block 0x687
    prev=[0x671], succ=[0x6a3]
    =================================
    0x688: v688 = CALLER 
    0x689: v689(0x0) = CONST 
    0x68d: MSTORE v689(0x0), v688
    0x68e: v68e(0x5) = CONST 
    0x690: v690(0x20) = CONST 
    0x692: MSTORE v690(0x20), v68e(0x5)
    0x693: v693(0x40) = CONST 
    0x696: v696 = SHA3 v689(0x0), v693(0x40)
    0x697: SSTORE v696, v686_0
    0x698: v698(0x6c2) = CONST 
    0x69b: v69b(0x6a3) = CONST 
    0x69f: v69f(0x564) = CONST 
    0x6a2: v6a2_0 = CALLPRIVATE v69f(0x564), v1a7, v69b(0x6a3)

    Begin block 0x6a3
    prev=[0x687], succ=[0x6c2]
    =================================
    0x6a4: v6a4(0x1) = CONST 
    0x6a6: v6a6(0x1) = CONST 
    0x6a8: v6a8(0xa0) = CONST 
    0x6aa: v6aa(0x10000000000000000000000000000000000000000) = SHL v6a8(0xa0), v6a6(0x1)
    0x6ab: v6ab(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6aa(0x10000000000000000000000000000000000000000), v6a4(0x1)
    0x6ad: v6ad = AND v1a7, v6ab(0xffffffffffffffffffffffffffffffffffffffff)
    0x6ae: v6ae(0x0) = CONST 
    0x6b2: MSTORE v6ae(0x0), v6ad
    0x6b3: v6b3(0x5) = CONST 
    0x6b5: v6b5(0x20) = CONST 
    0x6b7: MSTORE v6b5(0x20), v6b3(0x5)
    0x6b8: v6b8(0x40) = CONST 
    0x6bb: v6bb = SHA3 v6ae(0x0), v6b8(0x40)
    0x6bc: v6bc = SLOAD v6bb
    0x6be: v6be(0xa93) = CONST 
    0x6c1: v6c1_0 = CALLPRIVATE v6be(0xa93), v6a2_0, v6bc, v698(0x6c2)

    Begin block 0x6c2
    prev=[0x6a3], succ=[0x717]
    =================================
    0x6c3: v6c3(0x1) = CONST 
    0x6c5: v6c5(0x1) = CONST 
    0x6c7: v6c7(0xa0) = CONST 
    0x6c9: v6c9(0x10000000000000000000000000000000000000000) = SHL v6c7(0xa0), v6c5(0x1)
    0x6ca: v6ca(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6c9(0x10000000000000000000000000000000000000000), v6c3(0x1)
    0x6cc: v6cc = AND v1a7, v6ca(0xffffffffffffffffffffffffffffffffffffffff)
    0x6cd: v6cd(0x0) = CONST 
    0x6d1: MSTORE v6cd(0x0), v6cc
    0x6d2: v6d2(0x5) = CONST 
    0x6d4: v6d4(0x20) = CONST 
    0x6d8: MSTORE v6d4(0x20), v6d2(0x5)
    0x6d9: v6d9(0x40) = CONST 
    0x6dd: v6dd = SHA3 v6cd(0x0), v6d9(0x40)
    0x6e1: SSTORE v6dd, v6c1_0
    0x6e2: v6e2 = CALLER 
    0x6e5: MSTORE v6cd(0x0), v6e2
    0x6e6: v6e6(0x4) = CONST 
    0x6e9: MSTORE v6d4(0x20), v6e6(0x4)
    0x6ec: v6ec = SHA3 v6cd(0x0), v6d9(0x40)
    0x6ed: v6ed = TIMESTAMP 
    0x6f1: SSTORE v6ec, v6ed
    0x6f4: MSTORE v6cd(0x0), v6cc
    0x6f7: v6f7 = SHA3 v6cd(0x0), v6d9(0x40)
    0x6fb: SSTORE v6f7, v6ed
    0x6fe: MSTORE v6cd(0x0), v6e2
    0x701: MSTORE v6d4(0x20), v6d2(0x5)
    0x704: v704 = SHA3 v6cd(0x0), v6d9(0x40)
    0x705: v705 = SLOAD v704
    0x706: v706(0x717) = CONST 
    0x70a: v70a(0xde0b6b3a7640000) = CONST 
    0x713: v713(0xabf) = CONST 
    0x716: v716_0 = CALLPRIVATE v713(0xabf), v70a(0xde0b6b3a7640000), v1ac, v706(0x717)

    Begin block 0x717
    prev=[0x6c2], succ=[0x71d, 0x733]
    =================================
    0x718: v718 = GT v716_0, v705
    0x719: v719(0x733) = CONST 
    0x71c: JUMPI v719(0x733), v718

    Begin block 0x71d
    prev=[0x717], succ=[0x72e]
    =================================
    0x71d: v71d(0x72e) = CONST 
    0x721: v721(0xde0b6b3a7640000) = CONST 
    0x72a: v72a(0xabf) = CONST 
    0x72d: v72d_0 = CALLPRIVATE v72a(0xabf), v721(0xde0b6b3a7640000), v1ac, v71d(0x72e)

    Begin block 0x72e
    prev=[0x71d], succ=[0x744]
    =================================
    0x72f: v72f(0x744) = CONST 
    0x732: JUMP v72f(0x744)

    Begin block 0x744
    prev=[0x733, 0x72e], succ=[0x761]
    =================================
    0x744_0x0: v744_0 = PHI v743, v72d_0
    0x745: v745 = CALLER 
    0x746: v746(0x0) = CONST 
    0x74a: MSTORE v746(0x0), v745
    0x74b: v74b(0x5) = CONST 
    0x74d: v74d(0x20) = CONST 
    0x74f: MSTORE v74d(0x20), v74b(0x5)
    0x750: v750(0x40) = CONST 
    0x753: v753 = SHA3 v746(0x0), v750(0x40)
    0x754: v754 = SLOAD v753
    0x758: v758(0x761) = CONST 
    0x75d: v75d(0xa93) = CONST 
    0x760: v760_0 = CALLPRIVATE v75d(0xa93), v744_0, v754, v758(0x761)

    Begin block 0x761
    prev=[0x744], succ=[0xaadB0x761]
    =================================
    0x761_0x1: v761_1 = PHI v743, v72d_0
    0x762: v762 = CALLER 
    0x763: v763(0x0) = CONST 
    0x767: MSTORE v763(0x0), v762
    0x768: v768(0x5) = CONST 
    0x76a: v76a(0x20) = CONST 
    0x76c: MSTORE v76a(0x20), v768(0x5)
    0x76d: v76d(0x40) = CONST 
    0x771: v771 = SHA3 v763(0x0), v76d(0x40)
    0x775: SSTORE v771, v760_0
    0x776: v776(0x1) = CONST 
    0x778: v778(0x1) = CONST 
    0x77a: v77a(0xa0) = CONST 
    0x77c: v77c(0x10000000000000000000000000000000000000000) = SHL v77a(0xa0), v778(0x1)
    0x77d: v77d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v77c(0x10000000000000000000000000000000000000000), v776(0x1)
    0x77f: v77f = AND v1a7, v77d(0xffffffffffffffffffffffffffffffffffffffff)
    0x781: MSTORE v763(0x0), v77f
    0x782: v782 = SHA3 v763(0x0), v76d(0x40)
    0x783: v783 = SLOAD v782
    0x784: v784(0x78d) = CONST 
    0x789: v789(0xaad) = CONST 
    0x78c: JUMP v789(0xaad)

    Begin block 0xaadB0x761
    prev=[0x761], succ=[0xabb0xaadB0x761, 0xe980xaadB0x761]
    =================================
    0xaaeS0x761: vaaeV761(0x0) = CONST 
    0xab2S0x761: vab2V761 = ADD v761_1, v783
    0xab5S0x761: vab5V761 = LT vab2V761, v783
    0xab6S0x761: vab6V761 = ISZERO vab5V761
    0xab7S0x761: vab7V761(0xe98) = CONST 
    0xabaS0x761: JUMPI vab7V761(0xe98), vab6V761

    Begin block 0xabb0xaadB0x761
    prev=[0xaadB0x761], succ=[]
    =================================
    0xabb0xaadS0x761: vaadabbV761(0x0) = CONST 
    0xabe0xaadS0x761: REVERT vaadabbV761(0x0), vaadabbV761(0x0)

    Begin block 0xe980xaadB0x761
    prev=[0xaadB0x761], succ=[0x78d]
    =================================
    0xe9e0xaadS0x761: JUMP v784(0x78d)

    Begin block 0x78d
    prev=[0xe980xaadB0x761], succ=[0xd83]
    =================================
    0x78d_0x1: v78d_1 = PHI v743, v72d_0
    0x78e: v78e(0x1) = CONST 
    0x790: v790(0x1) = CONST 
    0x792: v792(0xa0) = CONST 
    0x794: v794(0x10000000000000000000000000000000000000000) = SHL v792(0xa0), v790(0x1)
    0x795: v795(0xffffffffffffffffffffffffffffffffffffffff) = SUB v794(0x10000000000000000000000000000000000000000), v78e(0x1)
    0x797: v797 = AND v1a7, v795(0xffffffffffffffffffffffffffffffffffffffff)
    0x798: v798(0x0) = CONST 
    0x79c: MSTORE v798(0x0), v797
    0x79d: v79d(0x5) = CONST 
    0x79f: v79f(0x20) = CONST 
    0x7a3: MSTORE v79f(0x20), v79d(0x5)
    0x7a4: v7a4(0x40) = CONST 
    0x7a9: v7a9 = SHA3 v798(0x0), v7a4(0x40)
    0x7ad: SSTORE v7a9, vab2V761
    0x7af: v7af = MLOAD v7a4(0x40)
    0x7b2: MSTORE v7af, v78d_1
    0x7b3: v7b3 = TIMESTAMP 
    0x7b6: v7b6 = ADD v7af, v79f(0x20)
    0x7ba: MSTORE v7b6, v7b3
    0x7bc: v7bc = MLOAD v7a4(0x40)
    0x7bf: v7bf = CALLER 
    0x7c1: v7c1(0x9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44) = CONST 
    0x7e6: v7e6(0x0) = SUB v7af, v7bc
    0x7e9: v7e9(0x40) = ADD v7a4(0x40), v7e6(0x0)
    0x7eb: LOG3 v7bc, v7e9(0x40), v7c1(0x9ed053bb818ff08b8353cd46f78db1f0799f31c9e4458fdb425c10eccd2efc44), v7bf, v797
    0x7ef: JUMP v186(0xd83)

    Begin block 0xd83
    prev=[0x78d], succ=[]
    =================================
    0xd84: STOP 

    Begin block 0x733
    prev=[0x717], succ=[0x744]
    =================================
    0x734: v734 = CALLER 
    0x735: v735(0x0) = CONST 
    0x739: MSTORE v735(0x0), v734
    0x73a: v73a(0x5) = CONST 
    0x73c: v73c(0x20) = CONST 
    0x73e: MSTORE v73c(0x20), v73a(0x5)
    0x73f: v73f(0x40) = CONST 
    0x742: v742 = SHA3 v735(0x0), v73f(0x40)
    0x743: v743 = SLOAD v742

}

function starts(address)() public {
    Begin block 0x1b1
    prev=[], succ=[0x1c3, 0x1c7]
    =================================
    0x1b2: v1b2(0xda4) = CONST 
    0x1b5: v1b5(0x4) = CONST 
    0x1b8: v1b8 = CALLDATASIZE 
    0x1b9: v1b9 = SUB v1b8, v1b5(0x4)
    0x1ba: v1ba(0x20) = CONST 
    0x1bd: v1bd = LT v1b9, v1ba(0x20)
    0x1be: v1be = ISZERO v1bd
    0x1bf: v1bf(0x1c7) = CONST 
    0x1c2: JUMPI v1bf(0x1c7), v1be

    Begin block 0x1c3
    prev=[0x1b1], succ=[]
    =================================
    0x1c3: v1c3(0x0) = CONST 
    0x1c6: REVERT v1c3(0x0), v1c3(0x0)

    Begin block 0x1c7
    prev=[0x1b1], succ=[0x7f0]
    =================================
    0x1c9: v1c9 = CALLDATALOAD v1b5(0x4)
    0x1ca: v1ca(0x1) = CONST 
    0x1cc: v1cc(0x1) = CONST 
    0x1ce: v1ce(0xa0) = CONST 
    0x1d0: v1d0(0x10000000000000000000000000000000000000000) = SHL v1ce(0xa0), v1cc(0x1)
    0x1d1: v1d1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1d0(0x10000000000000000000000000000000000000000), v1ca(0x1)
    0x1d2: v1d2 = AND v1d1(0xffffffffffffffffffffffffffffffffffffffff), v1c9
    0x1d3: v1d3(0x7f0) = CONST 
    0x1d6: JUMP v1d3(0x7f0)

    Begin block 0x7f0
    prev=[0x1c7], succ=[0xda4]
    =================================
    0x7f1: v7f1(0x4) = CONST 
    0x7f3: v7f3(0x20) = CONST 
    0x7f5: MSTORE v7f3(0x20), v7f1(0x4)
    0x7f6: v7f6(0x0) = CONST 
    0x7fa: MSTORE v7f6(0x0), v1d2
    0x7fb: v7fb(0x40) = CONST 
    0x7fe: v7fe = SHA3 v7f6(0x0), v7fb(0x40)
    0x7ff: v7ff = SLOAD v7fe
    0x801: JUMP v1b2(0xda4)

    Begin block 0xda4
    prev=[0x7f0], succ=[]
    =================================
    0xda5: vda5(0x40) = CONST 
    0xda8: vda8 = MLOAD vda5(0x40)
    0xdab: MSTORE vda8, v7ff
    0xdac: vdac = MLOAD vda5(0x40)
    0xdb0: vdb0(0x0) = SUB vda8, vdac
    0xdb1: vdb1(0x20) = CONST 
    0xdb3: vdb3(0x20) = ADD vdb1(0x20), vdb0(0x0)
    0xdb5: RETURN vdac, vdb3(0x20)

}

function token()() public {
    Begin block 0x1d7
    prev=[], succ=[0x802]
    =================================
    0x1d8: v1d8(0x1df) = CONST 
    0x1db: v1db(0x802) = CONST 
    0x1de: JUMP v1db(0x802)

    Begin block 0x802
    prev=[0x1d7], succ=[0x1df]
    =================================
    0x803: v803(0x0) = CONST 
    0x805: v805 = SLOAD v803(0x0)
    0x806: v806(0x1) = CONST 
    0x808: v808(0x1) = CONST 
    0x80a: v80a(0xa0) = CONST 
    0x80c: v80c(0x10000000000000000000000000000000000000000) = SHL v80a(0xa0), v808(0x1)
    0x80d: v80d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v80c(0x10000000000000000000000000000000000000000), v806(0x1)
    0x80e: v80e = AND v80d(0xffffffffffffffffffffffffffffffffffffffff), v805
    0x810: JUMP v1d8(0x1df)

    Begin block 0x1df
    prev=[0x802], succ=[]
    =================================
    0x1e0: v1e0(0x40) = CONST 
    0x1e3: v1e3 = MLOAD v1e0(0x40)
    0x1e4: v1e4(0x1) = CONST 
    0x1e6: v1e6(0x1) = CONST 
    0x1e8: v1e8(0xa0) = CONST 
    0x1ea: v1ea(0x10000000000000000000000000000000000000000) = SHL v1e8(0xa0), v1e6(0x1)
    0x1eb: v1eb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1ea(0x10000000000000000000000000000000000000000), v1e4(0x1)
    0x1ee: v1ee = AND v80e, v1eb(0xffffffffffffffffffffffffffffffffffffffff)
    0x1f0: MSTORE v1e3, v1ee
    0x1f1: v1f1 = MLOAD v1e0(0x40)
    0x1f5: v1f5(0x0) = SUB v1e3, v1f1
    0x1f6: v1f6(0x20) = CONST 
    0x1f8: v1f8(0x20) = ADD v1f6(0x20), v1f5(0x0)
    0x1fa: RETURN v1f1, v1f8(0x20)

}

function initialize(address,uint256,uint256,uint256,address[],uint256[])() public {
    Begin block 0x1fb
    prev=[], succ=[0x20d, 0x211]
    =================================
    0x1fc: v1fc(0xdd5) = CONST 
    0x1ff: v1ff(0x4) = CONST 
    0x202: v202 = CALLDATASIZE 
    0x203: v203 = SUB v202, v1ff(0x4)
    0x204: v204(0xc0) = CONST 
    0x207: v207 = LT v203, v204(0xc0)
    0x208: v208 = ISZERO v207
    0x209: v209(0x211) = CONST 
    0x20c: JUMPI v209(0x211), v208

    Begin block 0x20d
    prev=[0x1fb], succ=[]
    =================================
    0x20d: v20d(0x0) = CONST 
    0x210: REVERT v20d(0x0), v20d(0x0)

    Begin block 0x211
    prev=[0x1fb], succ=[0x249, 0x24d]
    =================================
    0x212: v212(0x1) = CONST 
    0x214: v214(0x1) = CONST 
    0x216: v216(0xa0) = CONST 
    0x218: v218(0x10000000000000000000000000000000000000000) = SHL v216(0xa0), v214(0x1)
    0x219: v219(0xffffffffffffffffffffffffffffffffffffffff) = SUB v218(0x10000000000000000000000000000000000000000), v212(0x1)
    0x21b: v21b = CALLDATALOAD v1ff(0x4)
    0x21c: v21c = AND v21b, v219(0xffffffffffffffffffffffffffffffffffffffff)
    0x21e: v21e(0x20) = CONST 
    0x221: v221(0x24) = ADD v1ff(0x4), v21e(0x20)
    0x222: v222 = CALLDATALOAD v221(0x24)
    0x224: v224(0x40) = CONST 
    0x227: v227(0x44) = ADD v1ff(0x4), v224(0x40)
    0x228: v228 = CALLDATALOAD v227(0x44)
    0x22a: v22a(0x60) = CONST 
    0x22d: v22d(0x64) = ADD v1ff(0x4), v22a(0x60)
    0x22e: v22e = CALLDATALOAD v22d(0x64)
    0x231: v231 = ADD v1ff(0x4), v203
    0x233: v233(0xa0) = CONST 
    0x236: v236(0xa4) = ADD v1ff(0x4), v233(0xa0)
    0x237: v237(0x80) = CONST 
    0x23a: v23a(0x84) = ADD v1ff(0x4), v237(0x80)
    0x23b: v23b = CALLDATALOAD v23a(0x84)
    0x23c: v23c(0x100000000) = CONST 
    0x243: v243 = GT v23b, v23c(0x100000000)
    0x244: v244 = ISZERO v243
    0x245: v245(0x24d) = CONST 
    0x248: JUMPI v245(0x24d), v244

    Begin block 0x249
    prev=[0x211], succ=[]
    =================================
    0x249: v249(0x0) = CONST 
    0x24c: REVERT v249(0x0), v249(0x0)

    Begin block 0x24d
    prev=[0x211], succ=[0x25b, 0x25f]
    =================================
    0x24f: v24f = ADD v1ff(0x4), v23b
    0x251: v251(0x20) = CONST 
    0x254: v254 = ADD v24f, v251(0x20)
    0x255: v255 = GT v254, v231
    0x256: v256 = ISZERO v255
    0x257: v257(0x25f) = CONST 
    0x25a: JUMPI v257(0x25f), v256

    Begin block 0x25b
    prev=[0x24d], succ=[]
    =================================
    0x25b: v25b(0x0) = CONST 
    0x25e: REVERT v25b(0x0), v25b(0x0)

    Begin block 0x25f
    prev=[0x24d], succ=[0x27d, 0x281]
    =================================
    0x261: v261 = CALLDATALOAD v24f
    0x263: v263(0x20) = CONST 
    0x265: v265 = ADD v263(0x20), v24f
    0x268: v268(0x20) = CONST 
    0x26b: v26b = MUL v261, v268(0x20)
    0x26d: v26d = ADD v265, v26b
    0x26e: v26e = GT v26d, v231
    0x26f: v26f(0x100000000) = CONST 
    0x276: v276 = GT v261, v26f(0x100000000)
    0x277: v277 = OR v276, v26e
    0x278: v278 = ISZERO v277
    0x279: v279(0x281) = CONST 
    0x27c: JUMPI v279(0x281), v278

    Begin block 0x27d
    prev=[0x25f], succ=[]
    =================================
    0x27d: v27d(0x0) = CONST 
    0x280: REVERT v27d(0x0), v27d(0x0)

    Begin block 0x281
    prev=[0x25f], succ=[0x29b, 0x29f]
    =================================
    0x288: v288(0x20) = CONST 
    0x28b: v28b(0xc4) = ADD v236(0xa4), v288(0x20)
    0x28d: v28d = CALLDATALOAD v236(0xa4)
    0x28e: v28e(0x100000000) = CONST 
    0x295: v295 = GT v28d, v28e(0x100000000)
    0x296: v296 = ISZERO v295
    0x297: v297(0x29f) = CONST 
    0x29a: JUMPI v297(0x29f), v296

    Begin block 0x29b
    prev=[0x281], succ=[]
    =================================
    0x29b: v29b(0x0) = CONST 
    0x29e: REVERT v29b(0x0), v29b(0x0)

    Begin block 0x29f
    prev=[0x281], succ=[0x2ad, 0x2b1]
    =================================
    0x2a1: v2a1 = ADD v1ff(0x4), v28d
    0x2a3: v2a3(0x20) = CONST 
    0x2a6: v2a6 = ADD v2a1, v2a3(0x20)
    0x2a7: v2a7 = GT v2a6, v231
    0x2a8: v2a8 = ISZERO v2a7
    0x2a9: v2a9(0x2b1) = CONST 
    0x2ac: JUMPI v2a9(0x2b1), v2a8

    Begin block 0x2ad
    prev=[0x29f], succ=[]
    =================================
    0x2ad: v2ad(0x0) = CONST 
    0x2b0: REVERT v2ad(0x0), v2ad(0x0)

    Begin block 0x2b1
    prev=[0x29f], succ=[0x2cf, 0x2d3]
    =================================
    0x2b3: v2b3 = CALLDATALOAD v2a1
    0x2b5: v2b5(0x20) = CONST 
    0x2b7: v2b7 = ADD v2b5(0x20), v2a1
    0x2ba: v2ba(0x20) = CONST 
    0x2bd: v2bd = MUL v2b3, v2ba(0x20)
    0x2bf: v2bf = ADD v2b7, v2bd
    0x2c0: v2c0 = GT v2bf, v231
    0x2c1: v2c1(0x100000000) = CONST 
    0x2c8: v2c8 = GT v2b3, v2c1(0x100000000)
    0x2c9: v2c9 = OR v2c8, v2c0
    0x2ca: v2ca = ISZERO v2c9
    0x2cb: v2cb(0x2d3) = CONST 
    0x2ce: JUMPI v2cb(0x2d3), v2ca

    Begin block 0x2cf
    prev=[0x2b1], succ=[]
    =================================
    0x2cf: v2cf(0x0) = CONST 
    0x2d2: REVERT v2cf(0x0), v2cf(0x0)

    Begin block 0x2d3
    prev=[0x2b1], succ=[0x811]
    =================================
    0x2da: v2da(0x811) = CONST 
    0x2dd: JUMP v2da(0x811)

    Begin block 0x811
    prev=[0x2d3], succ=[0x81a, 0x866]
    =================================
    0x812: v812(0x3) = CONST 
    0x814: v814 = SLOAD v812(0x3)
    0x815: v815 = ISZERO v814
    0x816: v816(0x866) = CONST 
    0x819: JUMPI v816(0x866), v815

    Begin block 0x81a
    prev=[0x811], succ=[]
    =================================
    0x81a: v81a(0x40) = CONST 
    0x81d: v81d = MLOAD v81a(0x40)
    0x81e: v81e(0x461bcd) = CONST 
    0x822: v822(0xe5) = CONST 
    0x824: v824(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v822(0xe5), v81e(0x461bcd)
    0x826: MSTORE v81d, v824(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x827: v827(0x20) = CONST 
    0x829: v829(0x4) = CONST 
    0x82c: v82c = ADD v81d, v829(0x4)
    0x82f: MSTORE v82c, v827(0x20)
    0x830: v830(0x24) = CONST 
    0x833: v833 = ADD v81d, v830(0x24)
    0x834: MSTORE v833, v827(0x20)
    0x835: v835(0x436f6e747261637420697320616c726561647920696e697469616c697a65642e) = CONST 
    0x856: v856(0x44) = CONST 
    0x859: v859 = ADD v81d, v856(0x44)
    0x85a: MSTORE v859, v835(0x436f6e747261637420697320616c726561647920696e697469616c697a65642e)
    0x85c: v85c = MLOAD v81a(0x40)
    0x860: v860(0x0) = SUB v81d, v85c
    0x861: v861(0x64) = CONST 
    0x863: v863(0x64) = ADD v861(0x64), v860(0x0)
    0x865: REVERT v85c, v863(0x64)

    Begin block 0x866
    prev=[0x811], succ=[0x86e, 0x8ba]
    =================================
    0x869: v869 = EQ v2b3, v261
    0x86a: v86a(0x8ba) = CONST 
    0x86d: JUMPI v86a(0x8ba), v869

    Begin block 0x86e
    prev=[0x866], succ=[]
    =================================
    0x86e: v86e(0x40) = CONST 
    0x871: v871 = MLOAD v86e(0x40)
    0x872: v872(0x461bcd) = CONST 
    0x876: v876(0xe5) = CONST 
    0x878: v878(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v876(0xe5), v872(0x461bcd)
    0x87a: MSTORE v871, v878(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x87b: v87b(0x20) = CONST 
    0x87d: v87d(0x4) = CONST 
    0x880: v880 = ADD v871, v87d(0x4)
    0x881: MSTORE v880, v87b(0x20)
    0x882: v882(0x1b) = CONST 
    0x884: v884(0x24) = CONST 
    0x887: v887 = ADD v871, v884(0x24)
    0x888: MSTORE v887, v882(0x1b)
    0x889: v889(0x4172726179206c656e6774687320646f206e6f74206d617463682e0000000000) = CONST 
    0x8aa: v8aa(0x44) = CONST 
    0x8ad: v8ad = ADD v871, v8aa(0x44)
    0x8ae: MSTORE v8ad, v889(0x4172726179206c656e6774687320646f206e6f74206d617463682e0000000000)
    0x8b0: v8b0 = MLOAD v86e(0x40)
    0x8b4: v8b4(0x0) = SUB v871, v8b0
    0x8b5: v8b5(0x64) = CONST 
    0x8b7: v8b7(0x64) = ADD v8b5(0x64), v8b4(0x0)
    0x8b9: REVERT v8b0, v8b7(0x64)

    Begin block 0x8ba
    prev=[0x866], succ=[0xaadB0x8ba]
    =================================
    0x8bb: v8bb(0x8c4) = CONST 
    0x8c0: v8c0(0xaad) = CONST 
    0x8c3: JUMP v8c0(0xaad)

    Begin block 0xaadB0x8ba
    prev=[0x8ba], succ=[0xabb0xaadB0x8ba, 0xe980xaadB0x8ba]
    =================================
    0xaaeS0x8ba: vaaeV8ba(0x0) = CONST 
    0xab2S0x8ba: vab2V8ba = ADD v22e, v228
    0xab5S0x8ba: vab5V8ba = LT vab2V8ba, v228
    0xab6S0x8ba: vab6V8ba = ISZERO vab5V8ba
    0xab7S0x8ba: vab7V8ba(0xe98) = CONST 
    0xabaS0x8ba: JUMPI vab7V8ba(0xe98), vab6V8ba

    Begin block 0xabb0xaadB0x8ba
    prev=[0xaadB0x8ba], succ=[]
    =================================
    0xabb0xaadS0x8ba: vaadabbV8ba(0x0) = CONST 
    0xabe0xaadS0x8ba: REVERT vaadabbV8ba(0x0), vaadabbV8ba(0x0)

    Begin block 0xe980xaadB0x8ba
    prev=[0xaadB0x8ba], succ=[0x8c4]
    =================================
    0xe9e0xaadS0x8ba: JUMP v8bb(0x8c4)

    Begin block 0x8c4
    prev=[0xe980xaadB0x8ba], succ=[0x939, 0x93d]
    =================================
    0x8c5: v8c5(0x3) = CONST 
    0x8c7: SSTORE v8c5(0x3), vab2V8ba
    0x8c8: v8c8(0x2) = CONST 
    0x8cc: SSTORE v8c8(0x2), v228
    0x8cd: v8cd(0x0) = CONST 
    0x8d0: v8d0 = SLOAD v8cd(0x0)
    0x8d1: v8d1(0x1) = CONST 
    0x8d3: v8d3(0x1) = CONST 
    0x8d5: v8d5(0xa0) = CONST 
    0x8d7: v8d7(0x10000000000000000000000000000000000000000) = SHL v8d5(0xa0), v8d3(0x1)
    0x8d8: v8d8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8d7(0x10000000000000000000000000000000000000000), v8d1(0x1)
    0x8d9: v8d9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v8d8(0xffffffffffffffffffffffffffffffffffffffff)
    0x8da: v8da = AND v8d9(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v8d0
    0x8db: v8db(0x1) = CONST 
    0x8dd: v8dd(0x1) = CONST 
    0x8df: v8df(0xa0) = CONST 
    0x8e1: v8e1(0x10000000000000000000000000000000000000000) = SHL v8df(0xa0), v8dd(0x1)
    0x8e2: v8e2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8e1(0x10000000000000000000000000000000000000000), v8db(0x1)
    0x8e5: v8e5 = AND v8e2(0xffffffffffffffffffffffffffffffffffffffff), v21c
    0x8e9: v8e9 = OR v8e5, v8da
    0x8ec: SSTORE v8cd(0x0), v8e9
    0x8ed: v8ed(0x40) = CONST 
    0x8f0: v8f0 = MLOAD v8ed(0x40)
    0x8f1: v8f1(0x23b872dd) = CONST 
    0x8f6: v8f6(0xe0) = CONST 
    0x8f8: v8f8(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v8f6(0xe0), v8f1(0x23b872dd)
    0x8fa: MSTORE v8f0, v8f8(0x23b872dd00000000000000000000000000000000000000000000000000000000)
    0x8fb: v8fb = CALLER 
    0x8fc: v8fc(0x4) = CONST 
    0x8ff: v8ff = ADD v8f0, v8fc(0x4)
    0x900: MSTORE v8ff, v8fb
    0x901: v901 = ADDRESS 
    0x902: v902(0x24) = CONST 
    0x905: v905 = ADD v8f0, v902(0x24)
    0x906: MSTORE v905, v901
    0x907: v907(0x44) = CONST 
    0x90a: v90a = ADD v8f0, v907(0x44)
    0x90d: MSTORE v90a, v222
    0x90f: v90f = MLOAD v8ed(0x40)
    0x913: v913 = AND v8e2(0xffffffffffffffffffffffffffffffffffffffff), v8e9
    0x915: v915(0x23b872dd) = CONST 
    0x91b: v91b(0x64) = CONST 
    0x91f: v91f = ADD v8f0, v91b(0x64)
    0x921: v921(0x20) = CONST 
    0x928: v928(0x0) = SUB v8f0, v90f
    0x92b: v92b(0x64) = ADD v91b(0x64), v928(0x0)
    0x931: v931 = EXTCODESIZE v913
    0x932: v932 = ISZERO v931
    0x934: v934 = ISZERO v932
    0x935: v935(0x93d) = CONST 
    0x938: JUMPI v935(0x93d), v934

    Begin block 0x939
    prev=[0x8c4], succ=[]
    =================================
    0x939: v939(0x0) = CONST 
    0x93c: REVERT v939(0x0), v939(0x0)

    Begin block 0x93d
    prev=[0x8c4], succ=[0x948, 0x951]
    =================================
    0x93f: v93f = GAS 
    0x940: v940 = CALL v93f, v913, v8cd(0x0), v90f, v92b(0x64), v90f, v921(0x20)
    0x941: v941 = ISZERO v940
    0x943: v943 = ISZERO v941
    0x944: v944(0x951) = CONST 
    0x947: JUMPI v944(0x951), v943

    Begin block 0x948
    prev=[0x93d], succ=[]
    =================================
    0x948: v948 = RETURNDATASIZE 
    0x949: v949(0x0) = CONST 
    0x94c: RETURNDATACOPY v949(0x0), v949(0x0), v948
    0x94d: v94d = RETURNDATASIZE 
    0x94e: v94e(0x0) = CONST 
    0x950: REVERT v94e(0x0), v94d

    Begin block 0x951
    prev=[0x93d], succ=[0x963, 0x967]
    =================================
    0x956: v956(0x40) = CONST 
    0x958: v958 = MLOAD v956(0x40)
    0x959: v959 = RETURNDATASIZE 
    0x95a: v95a(0x20) = CONST 
    0x95d: v95d = LT v959, v95a(0x20)
    0x95e: v95e = ISZERO v95d
    0x95f: v95f(0x967) = CONST 
    0x962: JUMPI v95f(0x967), v95e

    Begin block 0x963
    prev=[0x951], succ=[]
    =================================
    0x963: v963(0x0) = CONST 
    0x966: REVERT v963(0x0), v963(0x0)

    Begin block 0x967
    prev=[0x951], succ=[0x972]
    =================================
    0x96a: v96a(0x1) = CONST 
    0x96e: SSTORE v96a(0x1), v222
    0x96f: v96f(0x0) = CONST 

    Begin block 0x972
    prev=[0x967, 0xa3d], succ=[0x97b, 0xa47]
    =================================
    0x972_0x0: v972_0 = PHI v96f(0x0), va42
    0x975: v975 = LT v972_0, v261
    0x976: v976 = ISZERO v975
    0x977: v977(0xa47) = CONST 
    0x97a: JUMPI v977(0xa47), v976

    Begin block 0x97b
    prev=[0x972], succ=[0x98c, 0x98d]
    =================================
    0x97b: v97b(0x2) = CONST 
    0x97b_0x0: v97b_0 = PHI v96f(0x0), va42
    0x97d: v97d = SLOAD v97b(0x2)
    0x97e: v97e(0x4) = CONST 
    0x980: v980(0x0) = CONST 
    0x987: v987 = LT v97b_0, v261
    0x988: v988(0x98d) = CONST 
    0x98b: JUMPI v988(0x98d), v987

    Begin block 0x98c
    prev=[0x97b], succ=[]
    =================================
    0x98c: THROW 

    Begin block 0x98d
    prev=[0x97b], succ=[0x9cc, 0x9cd]
    =================================
    0x98d_0x0: v98d_0 = PHI v96f(0x0), va42
    0x98d_0x6: v98d_6 = PHI v96f(0x0), va42
    0x990: v990(0x20) = CONST 
    0x992: v992 = MUL v990(0x20), v98d_0
    0x993: v993 = ADD v992, v265
    0x994: v994 = CALLDATALOAD v993
    0x995: v995(0x1) = CONST 
    0x997: v997(0x1) = CONST 
    0x999: v999(0xa0) = CONST 
    0x99b: v99b(0x10000000000000000000000000000000000000000) = SHL v999(0xa0), v997(0x1)
    0x99c: v99c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v99b(0x10000000000000000000000000000000000000000), v995(0x1)
    0x99d: v99d = AND v99c(0xffffffffffffffffffffffffffffffffffffffff), v994
    0x99e: v99e(0x1) = CONST 
    0x9a0: v9a0(0x1) = CONST 
    0x9a2: v9a2(0xa0) = CONST 
    0x9a4: v9a4(0x10000000000000000000000000000000000000000) = SHL v9a2(0xa0), v9a0(0x1)
    0x9a5: v9a5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9a4(0x10000000000000000000000000000000000000000), v99e(0x1)
    0x9a6: v9a6 = AND v9a5(0xffffffffffffffffffffffffffffffffffffffff), v99d
    0x9a7: v9a7(0x1) = CONST 
    0x9a9: v9a9(0x1) = CONST 
    0x9ab: v9ab(0xa0) = CONST 
    0x9ad: v9ad(0x10000000000000000000000000000000000000000) = SHL v9ab(0xa0), v9a9(0x1)
    0x9ae: v9ae(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9ad(0x10000000000000000000000000000000000000000), v9a7(0x1)
    0x9af: v9af = AND v9ae(0xffffffffffffffffffffffffffffffffffffffff), v9a6
    0x9b1: MSTORE v980(0x0), v9af
    0x9b2: v9b2(0x20) = CONST 
    0x9b4: v9b4(0x20) = ADD v9b2(0x20), v980(0x0)
    0x9b7: MSTORE v9b4(0x20), v97e(0x4)
    0x9b8: v9b8(0x20) = CONST 
    0x9ba: v9ba(0x40) = ADD v9b8(0x20), v9b4(0x20)
    0x9bb: v9bb(0x0) = CONST 
    0x9bd: v9bd = SHA3 v9bb(0x0), v9ba(0x40)
    0x9c0: SSTORE v9bd, v97d
    0x9c7: v9c7 = LT v98d_6, v2b3
    0x9c8: v9c8(0x9cd) = CONST 
    0x9cb: JUMPI v9c8(0x9cd), v9c7

    Begin block 0x9cc
    prev=[0x98d], succ=[]
    =================================
    0x9cc: THROW 

    Begin block 0x9cd
    prev=[0x98d], succ=[0x9e3, 0x9e4]
    =================================
    0x9cd_0x0: v9cd_0 = PHI v96f(0x0), va42
    0x9cd_0x3: v9cd_3 = PHI v96f(0x0), va42
    0x9d0: v9d0(0x20) = CONST 
    0x9d2: v9d2 = MUL v9d0(0x20), v9cd_0
    0x9d3: v9d3 = ADD v9d2, v2b7
    0x9d4: v9d4 = CALLDATALOAD v9d3
    0x9d5: v9d5(0x5) = CONST 
    0x9d7: v9d7(0x0) = CONST 
    0x9de: v9de = LT v9cd_3, v261
    0x9df: v9df(0x9e4) = CONST 
    0x9e2: JUMPI v9df(0x9e4), v9de

    Begin block 0x9e3
    prev=[0x9cd], succ=[]
    =================================
    0x9e3: THROW 

    Begin block 0x9e4
    prev=[0x9cd], succ=[0xa26, 0xa27]
    =================================
    0x9e4_0x0: v9e4_0 = PHI v96f(0x0), va42
    0x9e4_0x6: v9e4_6 = PHI v96f(0x0), va42
    0x9e7: v9e7(0x20) = CONST 
    0x9e9: v9e9 = MUL v9e7(0x20), v9e4_0
    0x9ea: v9ea = ADD v9e9, v265
    0x9eb: v9eb = CALLDATALOAD v9ea
    0x9ec: v9ec(0x1) = CONST 
    0x9ee: v9ee(0x1) = CONST 
    0x9f0: v9f0(0xa0) = CONST 
    0x9f2: v9f2(0x10000000000000000000000000000000000000000) = SHL v9f0(0xa0), v9ee(0x1)
    0x9f3: v9f3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9f2(0x10000000000000000000000000000000000000000), v9ec(0x1)
    0x9f4: v9f4 = AND v9f3(0xffffffffffffffffffffffffffffffffffffffff), v9eb
    0x9f5: v9f5(0x1) = CONST 
    0x9f7: v9f7(0x1) = CONST 
    0x9f9: v9f9(0xa0) = CONST 
    0x9fb: v9fb(0x10000000000000000000000000000000000000000) = SHL v9f9(0xa0), v9f7(0x1)
    0x9fc: v9fc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9fb(0x10000000000000000000000000000000000000000), v9f5(0x1)
    0x9fd: v9fd = AND v9fc(0xffffffffffffffffffffffffffffffffffffffff), v9f4
    0x9fe: v9fe(0x1) = CONST 
    0xa00: va00(0x1) = CONST 
    0xa02: va02(0xa0) = CONST 
    0xa04: va04(0x10000000000000000000000000000000000000000) = SHL va02(0xa0), va00(0x1)
    0xa05: va05(0xffffffffffffffffffffffffffffffffffffffff) = SUB va04(0x10000000000000000000000000000000000000000), v9fe(0x1)
    0xa06: va06 = AND va05(0xffffffffffffffffffffffffffffffffffffffff), v9fd
    0xa08: MSTORE v9d7(0x0), va06
    0xa09: va09(0x20) = CONST 
    0xa0b: va0b(0x20) = ADD va09(0x20), v9d7(0x0)
    0xa0e: MSTORE va0b(0x20), v9d5(0x5)
    0xa0f: va0f(0x20) = CONST 
    0xa11: va11(0x40) = ADD va0f(0x20), va0b(0x20)
    0xa12: va12(0x0) = CONST 
    0xa14: va14 = SHA3 va12(0x0), va11(0x40)
    0xa17: SSTORE va14, v9d4
    0xa19: va19(0xa3d) = CONST 
    0xa21: va21 = LT v9e4_6, v2b3
    0xa22: va22(0xa27) = CONST 
    0xa25: JUMPI va22(0xa27), va21

    Begin block 0xa26
    prev=[0x9e4], succ=[]
    =================================
    0xa26: THROW 

    Begin block 0xa27
    prev=[0x9e4], succ=[0xaad0x1fb]
    =================================
    0xa27_0x0: va27_0 = PHI v96f(0x0), va42
    0xa2a: va2a(0x20) = CONST 
    0xa2c: va2c = MUL va2a(0x20), va27_0
    0xa2d: va2d = ADD va2c, v2b7
    0xa2e: va2e = CALLDATALOAD va2d
    0xa30: va30(0xaad) = CONST 
    0xa36: va36(0xffffffff) = CONST 
    0xa3b: va3b(0xaad) = AND va36(0xffffffff), va30(0xaad)
    0xa3c: JUMP va3b(0xaad)

    Begin block 0xaad0x1fb
    prev=[0xa27], succ=[0xabb0x1fb, 0xe980x1fb]
    =================================
    0xaad0x1fb_0x1: vaad1fb_1 = PHI v96f(0x0), v1fbab2
    0xaae0x1fb: v1fbaae(0x0) = CONST 
    0xab20x1fb: v1fbab2 = ADD va2e, vaad1fb_1
    0xab50x1fb: v1fbab5 = LT v1fbab2, vaad1fb_1
    0xab60x1fb: v1fbab6 = ISZERO v1fbab5
    0xab70x1fb: v1fbab7(0xe98) = CONST 
    0xaba0x1fb: JUMPI v1fbab7(0xe98), v1fbab6

    Begin block 0xabb0x1fb
    prev=[0xaad0x1fb], succ=[]
    =================================
    0xabb0x1fb: v1fbabb(0x0) = CONST 
    0xabe0x1fb: REVERT v1fbabb(0x0), v1fbabb(0x0)

    Begin block 0xe980x1fb
    prev=[0xaad0x1fb], succ=[0xa3d]
    =================================
    0xe9e0x1fb: JUMP va19(0xa3d)

    Begin block 0xa3d
    prev=[0xe980x1fb], succ=[0x972]
    =================================
    0xa3d_0x1: va3d_1 = PHI v96f(0x0), va42
    0xa40: va40(0x1) = CONST 
    0xa42: va42 = ADD va40(0x1), va3d_1
    0xa43: va43(0x972) = CONST 
    0xa46: JUMP va43(0x972)

    Begin block 0xa47
    prev=[0x972], succ=[0xa52, 0xa88]
    =================================
    0xa47_0x1: va47_1 = PHI v96f(0x0), v1fbab2
    0xa49: va49(0x1) = CONST 
    0xa4b: va4b = SLOAD va49(0x1)
    0xa4d: va4d = EQ va47_1, va4b
    0xa4e: va4e(0xa88) = CONST 
    0xa51: JUMPI va4e(0xa88), va4d

    Begin block 0xa52
    prev=[0xa47], succ=[]
    =================================
    0xa52: va52(0x40) = CONST 
    0xa54: va54 = MLOAD va52(0x40)
    0xa55: va55(0x461bcd) = CONST 
    0xa59: va59(0xe5) = CONST 
    0xa5b: va5b(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va59(0xe5), va55(0x461bcd)
    0xa5d: MSTORE va54, va5b(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xa5e: va5e(0x4) = CONST 
    0xa60: va60 = ADD va5e(0x4), va54
    0xa63: va63(0x20) = CONST 
    0xa65: va65 = ADD va63(0x20), va60
    0xa68: va68(0x20) = SUB va65, va60
    0xa6a: MSTORE va60, va68(0x20)
    0xa6b: va6b(0x2f) = CONST 
    0xa6e: MSTORE va65, va6b(0x2f)
    0xa6f: va6f(0x20) = CONST 
    0xa71: va71 = ADD va6f(0x20), va65
    0xa73: va73(0xb09) = CONST 
    0xa76: va76(0x2f) = CONST 
    0xa79: CODECOPY va71, va73(0xb09), va76(0x2f)
    0xa7a: va7a(0x40) = CONST 
    0xa7c: va7c = ADD va7a(0x40), va71
    0xa80: va80(0x40) = CONST 
    0xa82: va82 = MLOAD va80(0x40)
    0xa85: va85(0x84) = SUB va7c, va82
    0xa87: REVERT va82, va85(0x84)

    Begin block 0xa88
    prev=[0xa47], succ=[0xdd5]
    =================================
    0xa92: JUMP v1fc(0xdd5)

    Begin block 0xdd5
    prev=[0xa88], succ=[]
    =================================
    0xdd6: STOP 

}

function 0x564(0x564arg0x0, 0x564arg0x1) private {
    Begin block 0x564
    prev=[], succ=[0x5780x564, 0x5710x564]
    =================================
    0x565: v565(0x0) = CONST 
    0x567: v567(0x2) = CONST 
    0x569: v569 = SLOAD v567(0x2)
    0x56a: v56a = TIMESTAMP 
    0x56b: v56b = LT v56a, v569
    0x56c: v56c = ISZERO v56b
    0x56d: v56d(0x578) = CONST 
    0x570: JUMPI v56d(0x578), v56c

    Begin block 0x5780x564
    prev=[0x564], succ=[0x5850x564, 0x58a0x564]
    =================================
    0x5790x564: v564579(0x0) = CONST 
    0x57b0x564: v56457b(0x3) = CONST 
    0x57d0x564: v56457d = SLOAD v56457b(0x3)
    0x57e0x564: v56457e = TIMESTAMP 
    0x57f0x564: v56457f = LT v56457e, v56457d
    0x5800x564: v564580 = ISZERO v56457f
    0x5810x564: v564581(0x58a) = CONST 
    0x5840x564: JUMPI v564581(0x58a), v564580

    Begin block 0x5850x564
    prev=[0x5780x564], succ=[0x58e0x564]
    =================================
    0x5850x564: v564585 = TIMESTAMP 
    0x5860x564: v564586(0x58e) = CONST 
    0x5890x564: JUMP v564586(0x58e)

    Begin block 0x58e0x564
    prev=[0x5850x564, 0x58a0x564], succ=[0x5ba0x564]
    =================================
    0x58f0x564: v56458f(0x1) = CONST 
    0x5910x564: v564591(0x1) = CONST 
    0x5930x564: v564593(0xa0) = CONST 
    0x5950x564: v564595(0x10000000000000000000000000000000000000000) = SHL v564593(0xa0), v564591(0x1)
    0x5960x564: v564596(0xffffffffffffffffffffffffffffffffffffffff) = SUB v564595(0x10000000000000000000000000000000000000000), v56458f(0x1)
    0x5980x564: v564598 = AND v564arg0, v564596(0xffffffffffffffffffffffffffffffffffffffff)
    0x5990x564: v564599(0x0) = CONST 
    0x59d0x564: MSTORE v564599(0x0), v564598
    0x59e0x564: v56459e(0x4) = CONST 
    0x5a00x564: v5645a0(0x20) = CONST 
    0x5a20x564: MSTORE v5645a0(0x20), v56459e(0x4)
    0x5a30x564: v5645a3(0x40) = CONST 
    0x5a60x564: v5645a6 = SHA3 v564599(0x0), v5645a3(0x40)
    0x5a70x564: v5645a7 = SLOAD v5645a6
    0x5a80x564: v5645a8(0x3) = CONST 
    0x5aa0x564: v5645aa = SLOAD v5645a8(0x3)
    0x5ae0x564: v5645ae(0xe34) = CONST 
    0x5b20x564: v5645b2(0x5ba) = CONST 
    0x5b60x564: v5645b6(0xa93) = CONST 
    0x5b90x564: v5645b9_0 = CALLPRIVATE v5645b6(0xa93), v5645a7, v5645aa, v5645b2(0x5ba)

    Begin block 0x5ba0x564
    prev=[0x58e0x564], succ=[0x5e20x564]
    =================================
    0x5ba0x564_0x2: v5ba564_2 = PHI v56458d, v564585
    0x5bb0x564: v5645bb(0x1) = CONST 
    0x5bd0x564: v5645bd(0x1) = CONST 
    0x5bf0x564: v5645bf(0xa0) = CONST 
    0x5c10x564: v5645c1(0x10000000000000000000000000000000000000000) = SHL v5645bf(0xa0), v5645bd(0x1)
    0x5c20x564: v5645c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5645c1(0x10000000000000000000000000000000000000000), v5645bb(0x1)
    0x5c40x564: v5645c4 = AND v564arg0, v5645c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x5c50x564: v5645c5(0x0) = CONST 
    0x5c90x564: MSTORE v5645c5(0x0), v5645c4
    0x5ca0x564: v5645ca(0x4) = CONST 
    0x5cc0x564: v5645cc(0x20) = CONST 
    0x5ce0x564: MSTORE v5645cc(0x20), v5645ca(0x4)
    0x5cf0x564: v5645cf(0x40) = CONST 
    0x5d20x564: v5645d2 = SHA3 v5645c5(0x0), v5645cf(0x40)
    0x5d30x564: v5645d3 = SLOAD v5645d2
    0x5d40x564: v5645d4(0x601) = CONST 
    0x5d80x564: v5645d8(0x5e2) = CONST 
    0x5de0x564: v5645de(0xa93) = CONST 
    0x5e10x564: v5645e1_0 = CALLPRIVATE v5645de(0xa93), v5645d3, v5ba564_2, v5645d8(0x5e2)

    Begin block 0x5e20x564
    prev=[0x5ba0x564], succ=[0x6010x564]
    =================================
    0x5e30x564: v5645e3(0x1) = CONST 
    0x5e50x564: v5645e5(0x1) = CONST 
    0x5e70x564: v5645e7(0xa0) = CONST 
    0x5e90x564: v5645e9(0x10000000000000000000000000000000000000000) = SHL v5645e7(0xa0), v5645e5(0x1)
    0x5ea0x564: v5645ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5645e9(0x10000000000000000000000000000000000000000), v5645e3(0x1)
    0x5ec0x564: v5645ec = AND v564arg0, v5645ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x5ed0x564: v5645ed(0x0) = CONST 
    0x5f10x564: MSTORE v5645ed(0x0), v5645ec
    0x5f20x564: v5645f2(0x5) = CONST 
    0x5f40x564: v5645f4(0x20) = CONST 
    0x5f60x564: MSTORE v5645f4(0x20), v5645f2(0x5)
    0x5f70x564: v5645f7(0x40) = CONST 
    0x5fa0x564: v5645fa = SHA3 v5645ed(0x0), v5645f7(0x40)
    0x5fb0x564: v5645fb = SLOAD v5645fa
    0x5fd0x564: v5645fd(0xabf) = CONST 
    0x6000x564: v564600_0 = CALLPRIVATE v5645fd(0xabf), v5645e1_0, v5645fb, v5645d4(0x601)

    Begin block 0x6010x564
    prev=[0x5e20x564], succ=[0xae60x564]
    =================================
    0x6030x564: v564603(0xae6) = CONST 
    0x6060x564: JUMP v564603(0xae6)

    Begin block 0xae60x564
    prev=[0x6010x564], succ=[0xaf00x564, 0xaf40x564]
    =================================
    0xae70x564: v564ae7(0x0) = CONST 
    0xaeb0x564: v564aeb = GT v5645b9_0, v564ae7(0x0)
    0xaec0x564: v564aec(0xaf4) = CONST 
    0xaef0x564: JUMPI v564aec(0xaf4), v564aeb

    Begin block 0xaf00x564
    prev=[0xae60x564], succ=[]
    =================================
    0xaf00x564: v564af0(0x0) = CONST 
    0xaf30x564: REVERT v564af0(0x0), v564af0(0x0)

    Begin block 0xaf40x564
    prev=[0xae60x564], succ=[0xafe0x564, 0xaff0x564]
    =================================
    0xaf50x564: v564af5(0x0) = CONST 
    0xafa0x564: v564afa(0xaff) = CONST 
    0xafd0x564: JUMPI v564afa(0xaff), v5645b9_0

    Begin block 0xafe0x564
    prev=[0xaf40x564], succ=[]
    =================================
    0xafe0x564: THROW 

    Begin block 0xaff0x564
    prev=[0xaf40x564], succ=[0xe340x564]
    =================================
    0xb000x564: v564b00 = DIV v564600_0, v5645b9_0
    0xb070x564: JUMP v5645ae(0xe34)

    Begin block 0xe340x564
    prev=[0xaff0x564], succ=[]
    =================================
    0xe3a0x564: RETURNPRIVATE v564arg1, v564b00

    Begin block 0x58a0x564
    prev=[0x5780x564], succ=[0x58e0x564]
    =================================
    0x58b0x564: v56458b(0x3) = CONST 
    0x58d0x564: v56458d = SLOAD v56458b(0x3)

    Begin block 0x5710x564
    prev=[0x564], succ=[0x54d0x564]
    =================================
    0x5720x564: v564572(0x0) = CONST 
    0x5740x564: v564574(0x54d) = CONST 
    0x5770x564: JUMP v564574(0x54d)

    Begin block 0x54d0x564
    prev=[0x5710x564], succ=[]
    =================================
    0x5510x564: RETURNPRIVATE v564arg1, v564572(0x0)

}

function 0xa93(0xa93arg0x0, 0xa93arg0x1, 0xa93arg0x2) private {
    Begin block 0xa93
    prev=[], succ=[0xa9e, 0xaa2]
    =================================
    0xa94: va94(0x0) = CONST 
    0xa98: va98 = GT va93arg0, va93arg1
    0xa99: va99 = ISZERO va98
    0xa9a: va9a(0xaa2) = CONST 
    0xa9d: JUMPI va9a(0xaa2), va99

    Begin block 0xa9e
    prev=[0xa93], succ=[]
    =================================
    0xa9e: va9e(0x0) = CONST 
    0xaa1: REVERT va9e(0x0), va9e(0x0)

    Begin block 0xaa2
    prev=[0xa93], succ=[0xaa70xa93]
    =================================
    0xaa6: vaa6 = SUB va93arg1, va93arg0

    Begin block 0xaa70xa93
    prev=[0xaa2], succ=[]
    =================================
    0xaac0xa93: RETURNPRIVATE va93arg2, vaa6

}

function 0xabf(0xabfarg0x0, 0xabfarg0x1, 0xabfarg0x2) private {
    Begin block 0xabf
    prev=[], succ=[0xace, 0xac7]
    =================================
    0xac0: vac0(0x0) = CONST 
    0xac3: vac3(0xace) = CONST 
    0xac6: JUMPI vac3(0xace), vabfarg1

    Begin block 0xace
    prev=[0xabf], succ=[0xada, 0xadb]
    =================================
    0xad1: vad1 = MUL vabfarg0, vabfarg1
    0xad6: vad6(0xadb) = CONST 
    0xad9: JUMPI vad6(0xadb), vabfarg1

    Begin block 0xada
    prev=[0xace], succ=[]
    =================================
    0xada: THROW 

    Begin block 0xadb
    prev=[0xace], succ=[0xae2, 0xebe]
    =================================
    0xadc: vadc = DIV vad1, vabfarg1
    0xadd: vadd = EQ vadc, vabfarg0
    0xade: vade(0xebe) = CONST 
    0xae1: JUMPI vade(0xebe), vadd

    Begin block 0xae2
    prev=[0xadb], succ=[]
    =================================
    0xae2: vae2(0x0) = CONST 
    0xae5: REVERT vae2(0x0), vae2(0x0)

    Begin block 0xebe
    prev=[0xadb], succ=[]
    =================================
    0xec4: RETURNPRIVATE vabfarg2, vad1

    Begin block 0xac7
    prev=[0xabf], succ=[0xaa70xabf]
    =================================
    0xac8: vac8(0x0) = CONST 
    0xaca: vaca(0xaa7) = CONST 
    0xacd: JUMP vaca(0xaa7)

    Begin block 0xaa70xabf
    prev=[0xac7], succ=[]
    =================================
    0xaac0xabf: RETURNPRIVATE vabfarg2, vac8(0x0)

}

function claim()() public {
    Begin block 0xb9
    prev=[], succ=[0x2de]
    =================================
    0xba: vba(0xc0b) = CONST 
    0xbd: vbd(0x2de) = CONST 
    0xc0: JUMP vbd(0x2de)

    Begin block 0x2de
    prev=[0xb9], succ=[0x2eb, 0x337]
    =================================
    0x2df: v2df(0x2) = CONST 
    0x2e1: v2e1 = SLOAD v2df(0x2)
    0x2e2: v2e2 = CALLER 
    0x2e4: v2e4 = TIMESTAMP 
    0x2e5: v2e5 = LT v2e4, v2e1
    0x2e6: v2e6 = ISZERO v2e5
    0x2e7: v2e7(0x337) = CONST 
    0x2ea: JUMPI v2e7(0x337), v2e6

    Begin block 0x2eb
    prev=[0x2de], succ=[]
    =================================
    0x2eb: v2eb(0x40) = CONST 
    0x2ee: v2ee = MLOAD v2eb(0x40)
    0x2ef: v2ef(0x461bcd) = CONST 
    0x2f3: v2f3(0xe5) = CONST 
    0x2f5: v2f5(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2f3(0xe5), v2ef(0x461bcd)
    0x2f7: MSTORE v2ee, v2f5(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x2f8: v2f8(0x20) = CONST 
    0x2fa: v2fa(0x4) = CONST 
    0x2fd: v2fd = ADD v2ee, v2fa(0x4)
    0x2fe: MSTORE v2fd, v2f8(0x20)
    0x2ff: v2ff(0x17) = CONST 
    0x301: v301(0x24) = CONST 
    0x304: v304 = ADD v2ee, v301(0x24)
    0x305: MSTORE v304, v2ff(0x17)
    0x306: v306(0x52656c6561736520686173206e6f742073746172746564000000000000000000) = CONST 
    0x327: v327(0x44) = CONST 
    0x32a: v32a = ADD v2ee, v327(0x44)
    0x32b: MSTORE v32a, v306(0x52656c6561736520686173206e6f742073746172746564000000000000000000)
    0x32d: v32d = MLOAD v2eb(0x40)
    0x331: v331(0x0) = SUB v2ee, v32d
    0x332: v332(0x64) = CONST 
    0x334: v334(0x64) = ADD v332(0x64), v331(0x0)
    0x336: REVERT v32d, v334(0x64)

    Begin block 0x337
    prev=[0x2de], succ=[0x374, 0x358]
    =================================
    0x338: v338(0x1) = CONST 
    0x33a: v33a(0x1) = CONST 
    0x33c: v33c(0xa0) = CONST 
    0x33e: v33e(0x10000000000000000000000000000000000000000) = SHL v33c(0xa0), v33a(0x1)
    0x33f: v33f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33e(0x10000000000000000000000000000000000000000), v338(0x1)
    0x341: v341 = AND v2e2, v33f(0xffffffffffffffffffffffffffffffffffffffff)
    0x342: v342(0x0) = CONST 
    0x346: MSTORE v342(0x0), v341
    0x347: v347(0x5) = CONST 
    0x349: v349(0x20) = CONST 
    0x34b: MSTORE v349(0x20), v347(0x5)
    0x34c: v34c(0x40) = CONST 
    0x34f: v34f = SHA3 v342(0x0), v34c(0x40)
    0x350: v350 = SLOAD v34f
    0x351: v351 = ISZERO v350
    0x352: v352 = ISZERO v351
    0x354: v354(0x374) = CONST 
    0x357: JUMPI v354(0x374), v352

    Begin block 0x374
    prev=[0x337, 0x358], succ=[0x379, 0x3af]
    =================================
    0x374_0x0: v374_0 = PHI v352, v373
    0x375: v375(0x3af) = CONST 
    0x378: JUMPI v375(0x3af), v374_0

    Begin block 0x379
    prev=[0x374], succ=[]
    =================================
    0x379: v379(0x40) = CONST 
    0x37b: v37b = MLOAD v379(0x40)
    0x37c: v37c(0x461bcd) = CONST 
    0x380: v380(0xe5) = CONST 
    0x382: v382(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v380(0xe5), v37c(0x461bcd)
    0x384: MSTORE v37b, v382(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x385: v385(0x4) = CONST 
    0x387: v387 = ADD v385(0x4), v37b
    0x38a: v38a(0x20) = CONST 
    0x38c: v38c = ADD v38a(0x20), v387
    0x38f: v38f(0x20) = SUB v38c, v387
    0x391: MSTORE v387, v38f(0x20)
    0x392: v392(0x37) = CONST 
    0x395: MSTORE v38c, v392(0x37)
    0x396: v396(0x20) = CONST 
    0x398: v398 = ADD v396(0x20), v38c
    0x39a: v39a(0xb38) = CONST 
    0x39d: v39d(0x37) = CONST 
    0x3a0: CODECOPY v398, v39a(0xb38), v39d(0x37)
    0x3a1: v3a1(0x40) = CONST 
    0x3a3: v3a3 = ADD v3a1(0x40), v398
    0x3a7: v3a7(0x40) = CONST 
    0x3a9: v3a9 = MLOAD v3a7(0x40)
    0x3ac: v3ac(0x84) = SUB v3a3, v3a9
    0x3ae: REVERT v3a9, v3ac(0x84)

    Begin block 0x3af
    prev=[0x374], succ=[0x3ba]
    =================================
    0x3b0: v3b0(0x0) = CONST 
    0x3b2: v3b2(0x3ba) = CONST 
    0x3b6: v3b6(0x564) = CONST 
    0x3b9: v3b9_0 = CALLPRIVATE v3b6(0x564), v2e2, v3b2(0x3ba)

    Begin block 0x3ba
    prev=[0x3af], succ=[0x3e0]
    =================================
    0x3bb: v3bb(0x1) = CONST 
    0x3bd: v3bd(0x1) = CONST 
    0x3bf: v3bf(0xa0) = CONST 
    0x3c1: v3c1(0x10000000000000000000000000000000000000000) = SHL v3bf(0xa0), v3bd(0x1)
    0x3c2: v3c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c1(0x10000000000000000000000000000000000000000), v3bb(0x1)
    0x3c4: v3c4 = AND v2e2, v3c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x3c5: v3c5(0x0) = CONST 
    0x3c9: MSTORE v3c5(0x0), v3c4
    0x3ca: v3ca(0x5) = CONST 
    0x3cc: v3cc(0x20) = CONST 
    0x3ce: MSTORE v3cc(0x20), v3ca(0x5)
    0x3cf: v3cf(0x40) = CONST 
    0x3d2: v3d2 = SHA3 v3c5(0x0), v3cf(0x40)
    0x3d3: v3d3 = SLOAD v3d2
    0x3d7: v3d7(0x3e0) = CONST 
    0x3dc: v3dc(0xa93) = CONST 
    0x3df: v3df_0 = CALLPRIVATE v3dc(0xa93), v3b9_0, v3d3, v3d7(0x3e0)

    Begin block 0x3e0
    prev=[0x3ba], succ=[0xaadB0x3e0]
    =================================
    0x3e1: v3e1(0x1) = CONST 
    0x3e3: v3e3(0x1) = CONST 
    0x3e5: v3e5(0xa0) = CONST 
    0x3e7: v3e7(0x10000000000000000000000000000000000000000) = SHL v3e5(0xa0), v3e3(0x1)
    0x3e8: v3e8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3e7(0x10000000000000000000000000000000000000000), v3e1(0x1)
    0x3ea: v3ea = AND v2e2, v3e8(0xffffffffffffffffffffffffffffffffffffffff)
    0x3eb: v3eb(0x0) = CONST 
    0x3ef: MSTORE v3eb(0x0), v3ea
    0x3f0: v3f0(0x5) = CONST 
    0x3f2: v3f2(0x20) = CONST 
    0x3f6: MSTORE v3f2(0x20), v3f0(0x5)
    0x3f7: v3f7(0x40) = CONST 
    0x3fb: v3fb = SHA3 v3eb(0x0), v3f7(0x40)
    0x3ff: SSTORE v3fb, v3df_0
    0x400: v400(0x6) = CONST 
    0x403: MSTORE v3f2(0x20), v400(0x6)
    0x406: v406 = SHA3 v3eb(0x0), v3f7(0x40)
    0x407: v407 = SLOAD v406
    0x408: v408(0x411) = CONST 
    0x40d: v40d(0xaad) = CONST 
    0x410: JUMP v40d(0xaad)

    Begin block 0xaadB0x3e0
    prev=[0x3e0], succ=[0xabb0xaadB0x3e0, 0xe980xaadB0x3e0]
    =================================
    0xaaeS0x3e0: vaaeV3e0(0x0) = CONST 
    0xab2S0x3e0: vab2V3e0 = ADD v3b9_0, v407
    0xab5S0x3e0: vab5V3e0 = LT vab2V3e0, v407
    0xab6S0x3e0: vab6V3e0 = ISZERO vab5V3e0
    0xab7S0x3e0: vab7V3e0(0xe98) = CONST 
    0xabaS0x3e0: JUMPI vab7V3e0(0xe98), vab6V3e0

    Begin block 0xabb0xaadB0x3e0
    prev=[0xaadB0x3e0], succ=[]
    =================================
    0xabb0xaadS0x3e0: vaadabbV3e0(0x0) = CONST 
    0xabe0xaadS0x3e0: REVERT vaadabbV3e0(0x0), vaadabbV3e0(0x0)

    Begin block 0xe980xaadB0x3e0
    prev=[0xaadB0x3e0], succ=[0x411]
    =================================
    0xe9e0xaadS0x3e0: JUMP v408(0x411)

    Begin block 0x411
    prev=[0xe980xaadB0x3e0], succ=[0x482, 0x486]
    =================================
    0x412: v412(0x1) = CONST 
    0x414: v414(0x1) = CONST 
    0x416: v416(0xa0) = CONST 
    0x418: v418(0x10000000000000000000000000000000000000000) = SHL v416(0xa0), v414(0x1)
    0x419: v419(0xffffffffffffffffffffffffffffffffffffffff) = SUB v418(0x10000000000000000000000000000000000000000), v412(0x1)
    0x41c: v41c = AND v2e2, v419(0xffffffffffffffffffffffffffffffffffffffff)
    0x41d: v41d(0x0) = CONST 
    0x421: MSTORE v41d(0x0), v41c
    0x422: v422(0x6) = CONST 
    0x424: v424(0x20) = CONST 
    0x428: MSTORE v424(0x20), v422(0x6)
    0x429: v429(0x40) = CONST 
    0x42d: v42d = SHA3 v41d(0x0), v429(0x40)
    0x430: SSTORE v42d, v41d(0x0)
    0x431: v431(0x4) = CONST 
    0x435: MSTORE v424(0x20), v431(0x4)
    0x438: v438 = SHA3 v41d(0x0), v429(0x40)
    0x439: v439 = TIMESTAMP 
    0x43b: SSTORE v438, v439
    0x43d: v43d = SLOAD v41d(0x0)
    0x43f: v43f = MLOAD v429(0x40)
    0x440: v440(0xa9059cbb) = CONST 
    0x445: v445(0xe0) = CONST 
    0x447: v447(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v445(0xe0), v440(0xa9059cbb)
    0x449: MSTORE v43f, v447(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
    0x44c: v44c = ADD v43f, v431(0x4)
    0x450: MSTORE v44c, v41c
    0x451: v451(0x24) = CONST 
    0x454: v454 = ADD v43f, v451(0x24)
    0x457: MSTORE v454, vab2V3e0
    0x459: v459 = MLOAD v429(0x40)
    0x460: v460 = AND v419(0xffffffffffffffffffffffffffffffffffffffff), v43d
    0x462: v462(0xa9059cbb) = CONST 
    0x468: v468(0x44) = CONST 
    0x46c: v46c = ADD v43f, v468(0x44)
    0x473: v473(0x0) = SUB v43f, v459
    0x474: v474(0x44) = ADD v473(0x0), v468(0x44)
    0x47a: v47a = EXTCODESIZE v460
    0x47b: v47b = ISZERO v47a
    0x47d: v47d = ISZERO v47b
    0x47e: v47e(0x486) = CONST 
    0x481: JUMPI v47e(0x486), v47d

    Begin block 0x482
    prev=[0x411], succ=[]
    =================================
    0x482: v482(0x0) = CONST 
    0x485: REVERT v482(0x0), v482(0x0)

    Begin block 0x486
    prev=[0x411], succ=[0x491, 0x49a]
    =================================
    0x488: v488 = GAS 
    0x489: v489 = CALL v488, v460, v41d(0x0), v459, v474(0x44), v459, v424(0x20)
    0x48a: v48a = ISZERO v489
    0x48c: v48c = ISZERO v48a
    0x48d: v48d(0x49a) = CONST 
    0x490: JUMPI v48d(0x49a), v48c

    Begin block 0x491
    prev=[0x486], succ=[]
    =================================
    0x491: v491 = RETURNDATASIZE 
    0x492: v492(0x0) = CONST 
    0x495: RETURNDATACOPY v492(0x0), v492(0x0), v491
    0x496: v496 = RETURNDATASIZE 
    0x497: v497(0x0) = CONST 
    0x499: REVERT v497(0x0), v496

    Begin block 0x49a
    prev=[0x486], succ=[0x4ac, 0x4b0]
    =================================
    0x49f: v49f(0x40) = CONST 
    0x4a1: v4a1 = MLOAD v49f(0x40)
    0x4a2: v4a2 = RETURNDATASIZE 
    0x4a3: v4a3(0x20) = CONST 
    0x4a6: v4a6 = LT v4a2, v4a3(0x20)
    0x4a7: v4a7 = ISZERO v4a6
    0x4a8: v4a8(0x4b0) = CONST 
    0x4ab: JUMPI v4a8(0x4b0), v4a7

    Begin block 0x4ac
    prev=[0x49a], succ=[]
    =================================
    0x4ac: v4ac(0x0) = CONST 
    0x4af: REVERT v4ac(0x0), v4ac(0x0)

    Begin block 0x4b0
    prev=[0x49a], succ=[0xc0b]
    =================================
    0x4b3: v4b3(0x40) = CONST 
    0x4b6: v4b6 = MLOAD v4b3(0x40)
    0x4b9: MSTORE v4b6, vab2V3e0
    0x4ba: v4ba = TIMESTAMP 
    0x4bb: v4bb(0x20) = CONST 
    0x4be: v4be = ADD v4b6, v4bb(0x20)
    0x4bf: MSTORE v4be, v4ba
    0x4c1: v4c1 = MLOAD v4b3(0x40)
    0x4c2: v4c2(0x1) = CONST 
    0x4c4: v4c4(0x1) = CONST 
    0x4c6: v4c6(0xa0) = CONST 
    0x4c8: v4c8(0x10000000000000000000000000000000000000000) = SHL v4c6(0xa0), v4c4(0x1)
    0x4c9: v4c9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4c8(0x10000000000000000000000000000000000000000), v4c2(0x1)
    0x4cb: v4cb = AND v2e2, v4c9(0xffffffffffffffffffffffffffffffffffffffff)
    0x4cd: v4cd(0x987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a) = CONST 
    0x4f1: v4f1(0x0) = SUB v4b6, v4c1
    0x4f2: v4f2(0x40) = ADD v4f1(0x0), v4b3(0x40)
    0x4f4: LOG2 v4c1, v4f2(0x40), v4cd(0x987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a), v4cb
    0x4f8: JUMP vba(0xc0b)

    Begin block 0xc0b
    prev=[0x4b0], succ=[]
    =================================
    0xc0c: STOP 

    Begin block 0x358
    prev=[0x337], succ=[0x374]
    =================================
    0x359: v359(0x1) = CONST 
    0x35b: v35b(0x1) = CONST 
    0x35d: v35d(0xa0) = CONST 
    0x35f: v35f(0x10000000000000000000000000000000000000000) = SHL v35d(0xa0), v35b(0x1)
    0x360: v360(0xffffffffffffffffffffffffffffffffffffffff) = SUB v35f(0x10000000000000000000000000000000000000000), v359(0x1)
    0x362: v362 = AND v2e2, v360(0xffffffffffffffffffffffffffffffffffffffff)
    0x363: v363(0x0) = CONST 
    0x367: MSTORE v363(0x0), v362
    0x368: v368(0x6) = CONST 
    0x36a: v36a(0x20) = CONST 
    0x36c: MSTORE v36a(0x20), v368(0x6)
    0x36d: v36d(0x40) = CONST 
    0x370: v370 = SHA3 v363(0x0), v36d(0x40)
    0x371: v371 = SLOAD v370
    0x372: v372 = ISZERO v371
    0x373: v373 = ISZERO v372

}

function fallback()() public {
    Begin block 0xbc3
    prev=[], succ=[]
    =================================
    0xbc4: vbc4(0x0) = CONST 
    0xbc7: REVERT vbc4(0x0), vbc4(0x0)

}

function releaseStart()() public {
    Begin block 0xc3
    prev=[], succ=[0x4f9]
    =================================
    0xc4: vc4(0xc2c) = CONST 
    0xc7: vc7(0x4f9) = CONST 
    0xca: JUMP vc7(0x4f9)

    Begin block 0x4f9
    prev=[0xc3], succ=[0xc2c]
    =================================
    0x4fa: v4fa(0x2) = CONST 
    0x4fc: v4fc = SLOAD v4fa(0x2)
    0x4fe: JUMP vc4(0xc2c)

    Begin block 0xc2c
    prev=[0x4f9], succ=[]
    =================================
    0xc2d: vc2d(0x40) = CONST 
    0xc30: vc30 = MLOAD vc2d(0x40)
    0xc33: MSTORE vc30, v4fc
    0xc34: vc34 = MLOAD vc2d(0x40)
    0xc38: vc38(0x0) = SUB vc30, vc34
    0xc39: vc39(0x20) = CONST 
    0xc3b: vc3b(0x20) = ADD vc39(0x20), vc38(0x0)
    0xc3d: RETURN vc34, vc3b(0x20)

}

function totalTokens()() public {
    Begin block 0xdd
    prev=[], succ=[0x4ff]
    =================================
    0xde: vde(0xc5d) = CONST 
    0xe1: ve1(0x4ff) = CONST 
    0xe4: JUMP ve1(0x4ff)

    Begin block 0x4ff
    prev=[0xdd], succ=[0xc5d]
    =================================
    0x500: v500(0x1) = CONST 
    0x502: v502 = SLOAD v500(0x1)
    0x504: JUMP vde(0xc5d)

    Begin block 0xc5d
    prev=[0x4ff], succ=[]
    =================================
    0xc5e: vc5e(0x40) = CONST 
    0xc61: vc61 = MLOAD vc5e(0x40)
    0xc64: MSTORE vc61, v502
    0xc65: vc65 = MLOAD vc5e(0x40)
    0xc69: vc69(0x0) = SUB vc61, vc65
    0xc6a: vc6a(0x20) = CONST 
    0xc6c: vc6c(0x20) = ADD vc6a(0x20), vc69(0x0)
    0xc6e: RETURN vc65, vc6c(0x20)

}

function releaseEnd()() public {
    Begin block 0xe5
    prev=[], succ=[0x505]
    =================================
    0xe6: ve6(0xc8e) = CONST 
    0xe9: ve9(0x505) = CONST 
    0xec: JUMP ve9(0x505)

    Begin block 0x505
    prev=[0xe5], succ=[0xc8e]
    =================================
    0x506: v506(0x3) = CONST 
    0x508: v508 = SLOAD v506(0x3)
    0x50a: JUMP ve6(0xc8e)

    Begin block 0xc8e
    prev=[0x505], succ=[]
    =================================
    0xc8f: vc8f(0x40) = CONST 
    0xc92: vc92 = MLOAD vc8f(0x40)
    0xc95: MSTORE vc92, v508
    0xc96: vc96 = MLOAD vc8f(0x40)
    0xc9a: vc9a(0x0) = SUB vc92, vc96
    0xc9b: vc9b(0x20) = CONST 
    0xc9d: vc9d(0x20) = ADD vc9b(0x20), vc9a(0x0)
    0xc9f: RETURN vc96, vc9d(0x20)

}

function grantedToken(address)() public {
    Begin block 0xed
    prev=[], succ=[0xff, 0x103]
    =================================
    0xee: vee(0xcbf) = CONST 
    0xf1: vf1(0x4) = CONST 
    0xf4: vf4 = CALLDATASIZE 
    0xf5: vf5 = SUB vf4, vf1(0x4)
    0xf6: vf6(0x20) = CONST 
    0xf9: vf9 = LT vf5, vf6(0x20)
    0xfa: vfa = ISZERO vf9
    0xfb: vfb(0x103) = CONST 
    0xfe: JUMPI vfb(0x103), vfa

    Begin block 0xff
    prev=[0xed], succ=[]
    =================================
    0xff: vff(0x0) = CONST 
    0x102: REVERT vff(0x0), vff(0x0)

    Begin block 0x103
    prev=[0xed], succ=[0x50b]
    =================================
    0x105: v105 = CALLDATALOAD vf1(0x4)
    0x106: v106(0x1) = CONST 
    0x108: v108(0x1) = CONST 
    0x10a: v10a(0xa0) = CONST 
    0x10c: v10c(0x10000000000000000000000000000000000000000) = SHL v10a(0xa0), v108(0x1)
    0x10d: v10d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10c(0x10000000000000000000000000000000000000000), v106(0x1)
    0x10e: v10e = AND v10d(0xffffffffffffffffffffffffffffffffffffffff), v105
    0x10f: v10f(0x50b) = CONST 
    0x112: JUMP v10f(0x50b)

    Begin block 0x50b
    prev=[0x103], succ=[0xcbf]
    =================================
    0x50c: v50c(0x5) = CONST 
    0x50e: v50e(0x20) = CONST 
    0x510: MSTORE v50e(0x20), v50c(0x5)
    0x511: v511(0x0) = CONST 
    0x515: MSTORE v511(0x0), v10e
    0x516: v516(0x40) = CONST 
    0x519: v519 = SHA3 v511(0x0), v516(0x40)
    0x51a: v51a = SLOAD v519
    0x51c: JUMP vee(0xcbf)

    Begin block 0xcbf
    prev=[0x50b], succ=[]
    =================================
    0xcc0: vcc0(0x40) = CONST 
    0xcc3: vcc3 = MLOAD vcc0(0x40)
    0xcc6: MSTORE vcc3, v51a
    0xcc7: vcc7 = MLOAD vcc0(0x40)
    0xccb: vccb(0x0) = SUB vcc3, vcc7
    0xccc: vccc(0x20) = CONST 
    0xcce: vcce(0x20) = ADD vccc(0x20), vccb(0x0)
    0xcd0: RETURN vcc7, vcce(0x20)

}

