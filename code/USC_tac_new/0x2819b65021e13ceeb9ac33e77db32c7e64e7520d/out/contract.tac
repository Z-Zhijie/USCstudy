function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x728]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x71a: v71a(0x728) = CONST 
    0x71b: JUMPI v71a(0x728), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x72b, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x13af4035) = CONST 
    0x26: v26 = EQ v21(0x13af4035), v1f
    0x71c: v71c(0x72b) = CONST 
    0x71d: JUMPI v71c(0x72b), v26

    Begin block 0x72b
    prev=[0x1a], succ=[]
    =================================
    0x72c: v72c(0x67) = CONST 
    0x72d: CALLPRIVATE v72c(0x67)

    Begin block 0x2b
    prev=[0x1a], succ=[0x72e, 0x36]
    =================================
    0x2c: v2c(0x1e83409a) = CONST 
    0x31: v31 = EQ v2c(0x1e83409a), v1f
    0x71e: v71e(0x72e) = CONST 
    0x71f: JUMPI v71e(0x72e), v31

    Begin block 0x72e
    prev=[0x2b], succ=[]
    =================================
    0x72f: v72f(0x7c) = CONST 
    0x730: CALLPRIVATE v72f(0x7c)

    Begin block 0x36
    prev=[0x2b], succ=[0x731, 0x41]
    =================================
    0x37: v37(0x8848ac03) = CONST 
    0x3c: v3c = EQ v37(0x8848ac03), v1f
    0x720: v720(0x731) = CONST 
    0x721: JUMPI v720(0x731), v3c

    Begin block 0x731
    prev=[0x36], succ=[]
    =================================
    0x732: v732(0x8f) = CONST 
    0x733: CALLPRIVATE v732(0x8f)

    Begin block 0x41
    prev=[0x36], succ=[0x734, 0x4c]
    =================================
    0x42: v42(0x8da5cb5b) = CONST 
    0x47: v47 = EQ v42(0x8da5cb5b), v1f
    0x722: v722(0x734) = CONST 
    0x723: JUMPI v722(0x734), v47

    Begin block 0x734
    prev=[0x41], succ=[]
    =================================
    0x735: v735(0xa2) = CONST 
    0x736: CALLPRIVATE v735(0xa2)

    Begin block 0x4c
    prev=[0x41], succ=[0x737, 0x57]
    =================================
    0x4d: v4d(0xc4d66de8) = CONST 
    0x52: v52 = EQ v4d(0xc4d66de8), v1f
    0x724: v724(0x737) = CONST 
    0x725: JUMPI v724(0x737), v52

    Begin block 0x737
    prev=[0x4c], succ=[]
    =================================
    0x738: v738(0xd1) = CONST 
    0x739: CALLPRIVATE v738(0xd1)

    Begin block 0x57
    prev=[0x4c], succ=[0x728, 0x73a]
    =================================
    0x58: v58(0xc9a6964a) = CONST 
    0x5d: v5d = EQ v58(0xc9a6964a), v1f
    0x726: v726(0x73a) = CONST 
    0x727: JUMPI v726(0x73a), v5d

    Begin block 0x728
    prev=[0x10, 0x57], succ=[]
    =================================
    0x729: v729(0x62) = CONST 
    0x72a: CALLPRIVATE v729(0x62)

    Begin block 0x73a
    prev=[0x57], succ=[]
    =================================
    0x73b: v73b(0xe4) = CONST 
    0x73c: CALLPRIVATE v73b(0xe4)

}

function fallback()() public {
    Begin block 0x62
    prev=[], succ=[]
    =================================
    0x63: v63(0x0) = CONST 
    0x66: REVERT v63(0x0), v63(0x0)

}

function setOwner(address)() public {
    Begin block 0x67
    prev=[], succ=[0x41fB0x67]
    =================================
    0x68: v68(0x564) = CONST 
    0x6b: v6b(0x75) = CONST 
    0x6e: v6e = CALLDATASIZE 
    0x6f: v6f(0x4) = CONST 
    0x71: v71(0x41f) = CONST 
    0x74: JUMP v71(0x41f)

    Begin block 0x41fB0x67
    prev=[0x67], succ=[0x430B0x67, 0x42dB0x67]
    =================================
    0x420S0x67: v420V67(0x0) = CONST 
    0x422S0x67: v422V67(0x20) = CONST 
    0x426S0x67: v426V67 = SUB v6e, v6f(0x4)
    0x427S0x67: v427V67 = SLT v426V67, v422V67(0x20)
    0x428S0x67: v428V67 = ISZERO v427V67
    0x429S0x67: v429V67(0x430) = CONST 
    0x42cS0x67: JUMPI v429V67(0x430), v428V67

    Begin block 0x430B0x67
    prev=[0x41fB0x67], succ=[0x501B0x430B0x67]
    =================================
    0x432S0x67: v432V67 = CALLDATALOAD v6f(0x4)
    0x433S0x67: v433V67(0x6cb) = CONST 
    0x437S0x67: v437V67(0x501) = CONST 
    0x43aS0x67: JUMP v437V67(0x501), v432V67, v433V67(0x6cb)

    Begin block 0x501B0x430B0x67
    prev=[0x430B0x67], succ=[0x512B0x430B0x67, 0x717B0x430B0x67]
    =================================
    0x502S0x430S0x67: v502V430V67(0x1) = CONST 
    0x504S0x430S0x67: v504V430V67(0x1) = CONST 
    0x506S0x430S0x67: v506V430V67(0xa0) = CONST 
    0x508S0x430S0x67: v508V430V67(0x10000000000000000000000000000000000000000) = SHL v506V430V67(0xa0), v504V430V67(0x1)
    0x509S0x430S0x67: v509V430V67(0xffffffffffffffffffffffffffffffffffffffff) = SUB v508V430V67(0x10000000000000000000000000000000000000000), v502V430V67(0x1)
    0x50bS0x430S0x67: v50bV430V67 = AND v432V67, v509V430V67(0xffffffffffffffffffffffffffffffffffffffff)
    0x50dS0x430S0x67: v50dV430V67 = EQ v432V67, v50bV430V67
    0x50eS0x430S0x67: v50eV430V67(0x717) = CONST 
    0x511S0x430S0x67: JUMPI v50eV430V67(0x717), v50dV430V67

    Begin block 0x512B0x430B0x67
    prev=[0x501B0x430B0x67], succ=[]
    =================================
    0x512S0x430S0x67: v512V430V67(0x0) = CONST 
    0x515S0x430S0x67: REVERT v512V430V67(0x0), v512V430V67(0x0)

    Begin block 0x717B0x430B0x67
    prev=[0x501B0x430B0x67], succ=[0x6cbB0x67]
    =================================
    0x719S0x430S0x67: JUMP v433V67(0x6cb)

    Begin block 0x6cbB0x67
    prev=[0x717B0x430B0x67], succ=[0x75]
    =================================
    0x6d1S0x67: JUMP v6b(0x75)

    Begin block 0x75
    prev=[0x6cbB0x67], succ=[0xf7B0x75]
    =================================
    0x76: v76(0xf7) = CONST 
    0x79: JUMP v76(0xf7), v432V67, v68(0x564)

    Begin block 0xf7B0x75
    prev=[0x75], succ=[0x10aB0x75, 0x12a0xf7B0x75]
    =================================
    0xf8S0x75: vf8V75(0x0) = CONST 
    0xfaS0x75: vfaV75 = SLOAD vf8V75(0x0)
    0xfbS0x75: vfbV75(0x1) = CONST 
    0xfdS0x75: vfdV75(0x1) = CONST 
    0xffS0x75: vffV75(0xa0) = CONST 
    0x101S0x75: v101V75(0x10000000000000000000000000000000000000000) = SHL vffV75(0xa0), vfdV75(0x1)
    0x102S0x75: v102V75(0xffffffffffffffffffffffffffffffffffffffff) = SUB v101V75(0x10000000000000000000000000000000000000000), vfbV75(0x1)
    0x103S0x75: v103V75 = AND v102V75(0xffffffffffffffffffffffffffffffffffffffff), vfaV75
    0x104S0x75: v104V75 = CALLER 
    0x105S0x75: v105V75 = EQ v104V75, v103V75
    0x106S0x75: v106V75(0x12a) = CONST 
    0x109S0x75: JUMPI v106V75(0x12a), v105V75

    Begin block 0x10aB0x75
    prev=[0xf7B0x75], succ=[0x4b2B0x10aB0x75]
    =================================
    0x10aS0x75: v10aV75(0x40) = CONST 
    0x10cS0x75: v10cV75 = MLOAD v10aV75(0x40)
    0x10dS0x75: v10dV75(0x461bcd) = CONST 
    0x111S0x75: v111V75(0xe5) = CONST 
    0x113S0x75: v113V75(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v111V75(0xe5), v10dV75(0x461bcd)
    0x115S0x75: MSTORE v10cV75, v113V75(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x116S0x75: v116V75(0x4) = CONST 
    0x118S0x75: v118V75 = ADD v116V75(0x4), v10cV75
    0x119S0x75: v119V75(0x609) = CONST 
    0x11dS0x75: v11dV75(0x4b2) = CONST 
    0x120S0x75: JUMP v11dV75(0x4b2)

    Begin block 0x4b2B0x10aB0x75
    prev=[0x10aB0x75], succ=[0x609B0x75]
    =================================
    0x4b3S0x10aS0x75: v4b3V10aV75(0x20) = CONST 
    0x4b7S0x10aS0x75: MSTORE v118V75, v4b3V10aV75(0x20)
    0x4b8S0x10aS0x75: v4b8V10aV75(0x2f) = CONST 
    0x4bcS0x10aS0x75: v4bcV10aV75 = ADD v118V75, v4b3V10aV75(0x20)
    0x4bdS0x10aS0x75: MSTORE v4bcV10aV75, v4b8V10aV75(0x2f)
    0x4beS0x10aS0x75: v4beV10aV75(0x4f6e6c792074686520636f6e7472616374206f776e6572206d61792070657266) = CONST 
    0x4dfS0x10aS0x75: v4dfV10aV75(0x40) = CONST 
    0x4e2S0x10aS0x75: v4e2V10aV75 = ADD v118V75, v4dfV10aV75(0x40)
    0x4e3S0x10aS0x75: MSTORE v4e2V10aV75, v4beV10aV75(0x4f6e6c792074686520636f6e7472616374206f776e6572206d61792070657266)
    0x4e4S0x10aS0x75: v4e4V10aV75(0x37b936903a3434b99030b1ba34b7b7) = CONST 
    0x4f4S0x10aS0x75: v4f4V10aV75(0x89) = CONST 
    0x4f6S0x10aS0x75: v4f6V10aV75(0x6f726d207468697320616374696f6e0000000000000000000000000000000000) = SHL v4f4V10aV75(0x89), v4e4V10aV75(0x37b936903a3434b99030b1ba34b7b7)
    0x4f7S0x10aS0x75: v4f7V10aV75(0x60) = CONST 
    0x4faS0x10aS0x75: v4faV10aV75 = ADD v118V75, v4f7V10aV75(0x60)
    0x4fbS0x10aS0x75: MSTORE v4faV10aV75, v4f6V10aV75(0x6f726d207468697320616374696f6e0000000000000000000000000000000000)
    0x4fcS0x10aS0x75: v4fcV10aV75(0x80) = CONST 
    0x4feS0x10aS0x75: v4feV10aV75 = ADD v4fcV10aV75(0x80), v118V75
    0x500S0x10aS0x75: JUMP v119V75(0x609)

    Begin block 0x609B0x75
    prev=[0x4b2B0x10aB0x75], succ=[]
    =================================
    0x60aS0x75: v60aV75(0x40) = CONST 
    0x60cS0x75: v60cV75 = MLOAD v60aV75(0x40)
    0x60fS0x75: v60fV75(0x84) = SUB v4feV10aV75, v60cV75
    0x611S0x75: REVERT v60cV75, v60fV75(0x84)

    Begin block 0x12a0xf7B0x75
    prev=[0xf7B0x75], succ=[0x564]
    =================================
    0x12b0xf7S0x75: vf712bV75(0x0) = CONST 
    0x12e0xf7S0x75: vf712eV75 = SLOAD vf712bV75(0x0)
    0x12f0xf7S0x75: vf712fV75(0x1) = CONST 
    0x1310xf7S0x75: vf7131V75(0x1) = CONST 
    0x1330xf7S0x75: vf7133V75(0xa0) = CONST 
    0x1350xf7S0x75: vf7135V75(0x10000000000000000000000000000000000000000) = SHL vf7133V75(0xa0), vf7131V75(0x1)
    0x1360xf7S0x75: vf7136V75(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf7135V75(0x10000000000000000000000000000000000000000), vf712fV75(0x1)
    0x1370xf7S0x75: vf7137V75(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vf7136V75(0xffffffffffffffffffffffffffffffffffffffff)
    0x1380xf7S0x75: vf7138V75 = AND vf7137V75(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vf712eV75
    0x1390xf7S0x75: vf7139V75(0x1) = CONST 
    0x13b0xf7S0x75: vf713bV75(0x1) = CONST 
    0x13d0xf7S0x75: vf713dV75(0xa0) = CONST 
    0x13f0xf7S0x75: vf713fV75(0x10000000000000000000000000000000000000000) = SHL vf713dV75(0xa0), vf713bV75(0x1)
    0x1400xf7S0x75: vf7140V75(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf713fV75(0x10000000000000000000000000000000000000000), vf7139V75(0x1)
    0x1420xf7S0x75: vf7142V75 = AND v432V67, vf7140V75(0xffffffffffffffffffffffffffffffffffffffff)
    0x1450xf7S0x75: vf7145V75 = OR vf7142V75, vf7138V75
    0x1480xf7S0x75: SSTORE vf712bV75(0x0), vf7145V75
    0x1490xf7S0x75: vf7149V75(0x40) = CONST 
    0x14b0xf7S0x75: vf714bV75 = MLOAD vf7149V75(0x40)
    0x14e0xf7S0x75: MSTORE vf714bV75, vf7142V75
    0x14f0xf7S0x75: vf714fV75(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36) = CONST 
    0x1710xf7S0x75: vf7171V75(0x20) = CONST 
    0x1730xf7S0x75: vf7173V75 = ADD vf7171V75(0x20), vf714bV75
    0x1740xf7S0x75: vf7174V75(0x40) = CONST 
    0x1760xf7S0x75: vf7176V75 = MLOAD vf7174V75(0x40)
    0x1790xf7S0x75: vf7179V75(0x20) = SUB vf7173V75, vf7176V75
    0x17b0xf7S0x75: LOG1 vf7176V75, vf7179V75(0x20), vf714fV75(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36)
    0x17d0xf7S0x75: JUMP v68(0x564)

    Begin block 0x564
    prev=[0x12a0xf7B0x75], succ=[]
    =================================
    0x565: STOP 

    Begin block 0x42dB0x67
    prev=[0x41fB0x67], succ=[]
    =================================
    0x42fS0x67: REVERT v420V67(0x0), v420V67(0x0)

}

function claim(address)() public {
    Begin block 0x7c
    prev=[], succ=[0x41fB0x7c]
    =================================
    0x7d: v7d(0x585) = CONST 
    0x80: v80(0x8a) = CONST 
    0x83: v83 = CALLDATASIZE 
    0x84: v84(0x4) = CONST 
    0x86: v86(0x41f) = CONST 
    0x89: JUMP v86(0x41f)

    Begin block 0x41fB0x7c
    prev=[0x7c], succ=[0x430B0x7c, 0x42dB0x7c]
    =================================
    0x420S0x7c: v420V7c(0x0) = CONST 
    0x422S0x7c: v422V7c(0x20) = CONST 
    0x426S0x7c: v426V7c = SUB v83, v84(0x4)
    0x427S0x7c: v427V7c = SLT v426V7c, v422V7c(0x20)
    0x428S0x7c: v428V7c = ISZERO v427V7c
    0x429S0x7c: v429V7c(0x430) = CONST 
    0x42cS0x7c: JUMPI v429V7c(0x430), v428V7c

    Begin block 0x430B0x7c
    prev=[0x41fB0x7c], succ=[0x501B0x430B0x7c]
    =================================
    0x432S0x7c: v432V7c = CALLDATALOAD v84(0x4)
    0x433S0x7c: v433V7c(0x6cb) = CONST 
    0x437S0x7c: v437V7c(0x501) = CONST 
    0x43aS0x7c: JUMP v437V7c(0x501), v432V7c, v433V7c(0x6cb)

    Begin block 0x501B0x430B0x7c
    prev=[0x430B0x7c], succ=[0x512B0x430B0x7c, 0x717B0x430B0x7c]
    =================================
    0x502S0x430S0x7c: v502V430V7c(0x1) = CONST 
    0x504S0x430S0x7c: v504V430V7c(0x1) = CONST 
    0x506S0x430S0x7c: v506V430V7c(0xa0) = CONST 
    0x508S0x430S0x7c: v508V430V7c(0x10000000000000000000000000000000000000000) = SHL v506V430V7c(0xa0), v504V430V7c(0x1)
    0x509S0x430S0x7c: v509V430V7c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v508V430V7c(0x10000000000000000000000000000000000000000), v502V430V7c(0x1)
    0x50bS0x430S0x7c: v50bV430V7c = AND v432V7c, v509V430V7c(0xffffffffffffffffffffffffffffffffffffffff)
    0x50dS0x430S0x7c: v50dV430V7c = EQ v432V7c, v50bV430V7c
    0x50eS0x430S0x7c: v50eV430V7c(0x717) = CONST 
    0x511S0x430S0x7c: JUMPI v50eV430V7c(0x717), v50dV430V7c

    Begin block 0x512B0x430B0x7c
    prev=[0x501B0x430B0x7c], succ=[]
    =================================
    0x512S0x430S0x7c: v512V430V7c(0x0) = CONST 
    0x515S0x430S0x7c: REVERT v512V430V7c(0x0), v512V430V7c(0x0)

    Begin block 0x717B0x430B0x7c
    prev=[0x501B0x430B0x7c], succ=[0x6cbB0x7c]
    =================================
    0x719S0x430S0x7c: JUMP v433V7c(0x6cb)

    Begin block 0x6cbB0x7c
    prev=[0x717B0x430B0x7c], succ=[0x8a]
    =================================
    0x6d1S0x7c: JUMP v80(0x8a)

    Begin block 0x8a
    prev=[0x6cbB0x7c], succ=[0x17eB0x8a]
    =================================
    0x8b: v8b(0x17e) = CONST 
    0x8e: JUMP v8b(0x17e), v432V7c, v7d(0x585)

    Begin block 0x17eB0x8a
    prev=[0x8a], succ=[0x191B0x8a, 0x1a8B0x8a]
    =================================
    0x17fS0x8a: v17fV8a(0x0) = CONST 
    0x181S0x8a: v181V8a = SLOAD v17fV8a(0x0)
    0x182S0x8a: v182V8a(0x1) = CONST 
    0x184S0x8a: v184V8a(0x1) = CONST 
    0x186S0x8a: v186V8a(0xa0) = CONST 
    0x188S0x8a: v188V8a(0x10000000000000000000000000000000000000000) = SHL v186V8a(0xa0), v184V8a(0x1)
    0x189S0x8a: v189V8a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v188V8a(0x10000000000000000000000000000000000000000), v182V8a(0x1)
    0x18aS0x8a: v18aV8a = AND v189V8a(0xffffffffffffffffffffffffffffffffffffffff), v181V8a
    0x18bS0x8a: v18bV8a = CALLER 
    0x18cS0x8a: v18cV8a = EQ v18bV8a, v18aV8a
    0x18dS0x8a: v18dV8a(0x1a8) = CONST 
    0x190S0x8a: JUMPI v18dV8a(0x1a8), v18cV8a

    Begin block 0x191B0x8a
    prev=[0x17eB0x8a], succ=[0x4b2B0x191B0x8a]
    =================================
    0x191S0x8a: v191V8a(0x40) = CONST 
    0x193S0x8a: v193V8a = MLOAD v191V8a(0x40)
    0x194S0x8a: v194V8a(0x461bcd) = CONST 
    0x198S0x8a: v198V8a(0xe5) = CONST 
    0x19aS0x8a: v19aV8a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v198V8a(0xe5), v194V8a(0x461bcd)
    0x19cS0x8a: MSTORE v193V8a, v19aV8a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x19dS0x8a: v19dV8a(0x4) = CONST 
    0x19fS0x8a: v19fV8a = ADD v19dV8a(0x4), v193V8a
    0x1a0S0x8a: v1a0V8a(0x631) = CONST 
    0x1a4S0x8a: v1a4V8a(0x4b2) = CONST 
    0x1a7S0x8a: JUMP v1a4V8a(0x4b2)

    Begin block 0x4b2B0x191B0x8a
    prev=[0x191B0x8a], succ=[0x631B0x8a]
    =================================
    0x4b3S0x191S0x8a: v4b3V191V8a(0x20) = CONST 
    0x4b7S0x191S0x8a: MSTORE v19fV8a, v4b3V191V8a(0x20)
    0x4b8S0x191S0x8a: v4b8V191V8a(0x2f) = CONST 
    0x4bcS0x191S0x8a: v4bcV191V8a = ADD v19fV8a, v4b3V191V8a(0x20)
    0x4bdS0x191S0x8a: MSTORE v4bcV191V8a, v4b8V191V8a(0x2f)
    0x4beS0x191S0x8a: v4beV191V8a(0x4f6e6c792074686520636f6e7472616374206f776e6572206d61792070657266) = CONST 
    0x4dfS0x191S0x8a: v4dfV191V8a(0x40) = CONST 
    0x4e2S0x191S0x8a: v4e2V191V8a = ADD v19fV8a, v4dfV191V8a(0x40)
    0x4e3S0x191S0x8a: MSTORE v4e2V191V8a, v4beV191V8a(0x4f6e6c792074686520636f6e7472616374206f776e6572206d61792070657266)
    0x4e4S0x191S0x8a: v4e4V191V8a(0x37b936903a3434b99030b1ba34b7b7) = CONST 
    0x4f4S0x191S0x8a: v4f4V191V8a(0x89) = CONST 
    0x4f6S0x191S0x8a: v4f6V191V8a(0x6f726d207468697320616374696f6e0000000000000000000000000000000000) = SHL v4f4V191V8a(0x89), v4e4V191V8a(0x37b936903a3434b99030b1ba34b7b7)
    0x4f7S0x191S0x8a: v4f7V191V8a(0x60) = CONST 
    0x4faS0x191S0x8a: v4faV191V8a = ADD v19fV8a, v4f7V191V8a(0x60)
    0x4fbS0x191S0x8a: MSTORE v4faV191V8a, v4f6V191V8a(0x6f726d207468697320616374696f6e0000000000000000000000000000000000)
    0x4fcS0x191S0x8a: v4fcV191V8a(0x80) = CONST 
    0x4feS0x191S0x8a: v4feV191V8a = ADD v4fcV191V8a(0x80), v19fV8a
    0x500S0x191S0x8a: JUMP v1a0V8a(0x631)

    Begin block 0x631B0x8a
    prev=[0x4b2B0x191B0x8a], succ=[]
    =================================
    0x632S0x8a: v632V8a(0x40) = CONST 
    0x634S0x8a: v634V8a = MLOAD v632V8a(0x40)
    0x637S0x8a: v637V8a(0x84) = SUB v4feV191V8a, v634V8a
    0x639S0x8a: REVERT v634V8a, v637V8a(0x84)

    Begin block 0x1a8B0x8a
    prev=[0x17eB0x8a], succ=[0x1d4B0x8a, 0x1f5B0x8a]
    =================================
    0x1a9S0x8a: v1a9V8a(0x40) = CONST 
    0x1abS0x8a: v1abV8a = MLOAD v1a9V8a(0x40)
    0x1acS0x8a: v1acV8a = SELFBALANCE 
    0x1aeS0x8a: v1aeV8a(0x0) = CONST 
    0x1b1S0x8a: v1b1V8a(0x1) = CONST 
    0x1b3S0x8a: v1b3V8a(0x1) = CONST 
    0x1b5S0x8a: v1b5V8a(0xa0) = CONST 
    0x1b7S0x8a: v1b7V8a(0x10000000000000000000000000000000000000000) = SHL v1b5V8a(0xa0), v1b3V8a(0x1)
    0x1b8S0x8a: v1b8V8a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1b7V8a(0x10000000000000000000000000000000000000000), v1b1V8a(0x1)
    0x1baS0x8a: v1baV8a = AND v432V7c, v1b8V8a(0xffffffffffffffffffffffffffffffffffffffff)
    0x1c4S0x8a: v1c4V8a = GAS 
    0x1c5S0x8a: v1c5V8a = CALL v1c4V8a, v1baV8a, v1acV8a, v1abV8a, v1aeV8a(0x0), v1abV8a, v1aeV8a(0x0)
    0x1caS0x8a: v1caV8a = RETURNDATASIZE 
    0x1ccS0x8a: v1ccV8a(0x0) = CONST 
    0x1cfS0x8a: v1cfV8a = EQ v1caV8a, v1ccV8a(0x0)
    0x1d0S0x8a: v1d0V8a(0x1f5) = CONST 
    0x1d3S0x8a: JUMPI v1d0V8a(0x1f5), v1cfV8a

    Begin block 0x1d4B0x8a
    prev=[0x1a8B0x8a], succ=[0x1faB0x8a]
    =================================
    0x1d4S0x8a: v1d4V8a(0x40) = CONST 
    0x1d6S0x8a: v1d6V8a = MLOAD v1d4V8a(0x40)
    0x1d9S0x8a: v1d9V8a(0x1f) = CONST 
    0x1dbS0x8a: v1dbV8a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1d9V8a(0x1f)
    0x1dcS0x8a: v1dcV8a(0x3f) = CONST 
    0x1deS0x8a: v1deV8a = RETURNDATASIZE 
    0x1dfS0x8a: v1dfV8a = ADD v1deV8a, v1dcV8a(0x3f)
    0x1e0S0x8a: v1e0V8a = AND v1dfV8a, v1dbV8a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x1e2S0x8a: v1e2V8a = ADD v1d6V8a, v1e0V8a
    0x1e3S0x8a: v1e3V8a(0x40) = CONST 
    0x1e5S0x8a: MSTORE v1e3V8a(0x40), v1e2V8a
    0x1e6S0x8a: v1e6V8a = RETURNDATASIZE 
    0x1e8S0x8a: MSTORE v1d6V8a, v1e6V8a
    0x1e9S0x8a: v1e9V8a = RETURNDATASIZE 
    0x1eaS0x8a: v1eaV8a(0x0) = CONST 
    0x1ecS0x8a: v1ecV8a(0x20) = CONST 
    0x1efS0x8a: v1efV8a = ADD v1d6V8a, v1ecV8a(0x20)
    0x1f0S0x8a: RETURNDATACOPY v1efV8a, v1eaV8a(0x0), v1e9V8a
    0x1f1S0x8a: v1f1V8a(0x1fa) = CONST 
    0x1f4S0x8a: JUMP v1f1V8a(0x1fa)

    Begin block 0x1faB0x8a
    prev=[0x1d4B0x8a, 0x1f5B0x8a], succ=[0x204B0x8a, 0x242B0x8a]
    =================================
    0x200S0x8a: v200V8a(0x242) = CONST 
    0x203S0x8a: JUMPI v200V8a(0x242), v1c5V8a

    Begin block 0x204B0x8a
    prev=[0x1faB0x8a], succ=[0x659B0x8a]
    =================================
    0x204S0x8a: v204V8a(0x40) = CONST 
    0x206S0x8a: v206V8a = MLOAD v204V8a(0x40)
    0x207S0x8a: v207V8a(0x461bcd) = CONST 
    0x20bS0x8a: v20bV8a(0xe5) = CONST 
    0x20dS0x8a: v20dV8a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v20bV8a(0xe5), v207V8a(0x461bcd)
    0x20fS0x8a: MSTORE v206V8a, v20dV8a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x210S0x8a: v210V8a(0x20) = CONST 
    0x212S0x8a: v212V8a(0x4) = CONST 
    0x215S0x8a: v215V8a = ADD v206V8a, v212V8a(0x4)
    0x216S0x8a: MSTORE v215V8a, v210V8a(0x20)
    0x217S0x8a: v217V8a(0x14) = CONST 
    0x219S0x8a: v219V8a(0x24) = CONST 
    0x21cS0x8a: v21cV8a = ADD v206V8a, v219V8a(0x24)
    0x21dS0x8a: MSTORE v21cV8a, v217V8a(0x14)
    0x21eS0x8a: v21eV8a(0x2330b4b632b2103a379039b2b7321022ba3432b9) = CONST 
    0x233S0x8a: v233V8a(0x61) = CONST 
    0x235S0x8a: v235V8a(0x4661696c656420746f2073656e64204574686572000000000000000000000000) = SHL v233V8a(0x61), v21eV8a(0x2330b4b632b2103a379039b2b7321022ba3432b9)
    0x236S0x8a: v236V8a(0x44) = CONST 
    0x239S0x8a: v239V8a = ADD v206V8a, v236V8a(0x44)
    0x23aS0x8a: MSTORE v239V8a, v235V8a(0x4661696c656420746f2073656e64204574686572000000000000000000000000)
    0x23bS0x8a: v23bV8a(0x64) = CONST 
    0x23dS0x8a: v23dV8a = ADD v23bV8a(0x64), v206V8a
    0x23eS0x8a: v23eV8a(0x659) = CONST 
    0x241S0x8a: JUMP v23eV8a(0x659)

    Begin block 0x659B0x8a
    prev=[0x204B0x8a], succ=[]
    =================================
    0x65aS0x8a: v65aV8a(0x40) = CONST 
    0x65cS0x8a: v65cV8a = MLOAD v65aV8a(0x40)
    0x65fS0x8a: v65fV8a(0x64) = SUB v23dV8a, v65cV8a
    0x661S0x8a: REVERT v65cV8a, v65fV8a(0x64)

    Begin block 0x242B0x8a
    prev=[0x1faB0x8a], succ=[0x27d0x17eB0x8a]
    =================================
    0x243S0x8a: v243V8a(0x40) = CONST 
    0x246S0x8a: v246V8a = MLOAD v243V8a(0x40)
    0x247S0x8a: v247V8a(0x1) = CONST 
    0x249S0x8a: v249V8a(0x1) = CONST 
    0x24bS0x8a: v24bV8a(0xa0) = CONST 
    0x24dS0x8a: v24dV8a(0x10000000000000000000000000000000000000000) = SHL v24bV8a(0xa0), v249V8a(0x1)
    0x24eS0x8a: v24eV8a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v24dV8a(0x10000000000000000000000000000000000000000), v247V8a(0x1)
    0x250S0x8a: v250V8a = AND v432V7c, v24eV8a(0xffffffffffffffffffffffffffffffffffffffff)
    0x252S0x8a: MSTORE v246V8a, v250V8a
    0x253S0x8a: v253V8a(0x20) = CONST 
    0x256S0x8a: v256V8a = ADD v246V8a, v253V8a(0x20)
    0x259S0x8a: MSTORE v256V8a, v1acV8a
    0x25aS0x8a: v25aV8a(0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a) = CONST 
    0x27cS0x8a: v27cV8a = ADD v243V8a(0x40), v246V8a

    Begin block 0x27d0x17eB0x8a
    prev=[0x242B0x8a], succ=[0x585]
    =================================
    0x27e0x17eS0x8a: v17e27eV8a(0x40) = CONST 
    0x2800x17eS0x8a: v17e280V8a = MLOAD v17e27eV8a(0x40)
    0x2830x17eS0x8a: v17e283V8a(0x40) = SUB v27cV8a, v17e280V8a
    0x2850x17eS0x8a: LOG1 v17e280V8a, v17e283V8a(0x40), v25aV8a(0xd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a)
    0x2890x17eS0x8a: JUMP v7d(0x585)

    Begin block 0x585
    prev=[0x27d0x17eB0x8a], succ=[]
    =================================
    0x586: STOP 

    Begin block 0x1f5B0x8a
    prev=[0x1a8B0x8a], succ=[0x1faB0x8a]
    =================================
    0x1f6S0x8a: v1f6V8a(0x60) = CONST 

    Begin block 0x42dB0x7c
    prev=[0x41fB0x7c], succ=[]
    =================================
    0x42fS0x7c: REVERT v420V7c(0x0), v420V7c(0x0)

}

function claimERC20(address,address)() public {
    Begin block 0x8f
    prev=[], succ=[0x442B0x8f]
    =================================
    0x90: v90(0x5a6) = CONST 
    0x93: v93(0x9d) = CONST 
    0x96: v96 = CALLDATASIZE 
    0x97: v97(0x4) = CONST 
    0x99: v99(0x442) = CONST 
    0x9c: JUMP v99(0x442)

    Begin block 0x442B0x8f
    prev=[0x8f], succ=[0x454B0x8f, 0x451B0x8f]
    =================================
    0x443S0x8f: v443V8f(0x0) = CONST 
    0x446S0x8f: v446V8f(0x40) = CONST 
    0x44aS0x8f: v44aV8f = SUB v96, v97(0x4)
    0x44bS0x8f: v44bV8f = SLT v44aV8f, v446V8f(0x40)
    0x44cS0x8f: v44cV8f = ISZERO v44bV8f
    0x44dS0x8f: v44dV8f(0x454) = CONST 
    0x450S0x8f: JUMPI v44dV8f(0x454), v44cV8f

    Begin block 0x454B0x8f
    prev=[0x442B0x8f], succ=[0x501B0x454B0x8f]
    =================================
    0x456S0x8f: v456V8f = CALLDATALOAD v97(0x4)
    0x457S0x8f: v457V8f(0x45f) = CONST 
    0x45bS0x8f: v45bV8f(0x501) = CONST 
    0x45eS0x8f: JUMP v45bV8f(0x501), v456V8f, v457V8f(0x45f)

    Begin block 0x501B0x454B0x8f
    prev=[0x454B0x8f], succ=[0x512B0x454B0x8f, 0x717B0x454B0x8f]
    =================================
    0x502S0x454S0x8f: v502V454V8f(0x1) = CONST 
    0x504S0x454S0x8f: v504V454V8f(0x1) = CONST 
    0x506S0x454S0x8f: v506V454V8f(0xa0) = CONST 
    0x508S0x454S0x8f: v508V454V8f(0x10000000000000000000000000000000000000000) = SHL v506V454V8f(0xa0), v504V454V8f(0x1)
    0x509S0x454S0x8f: v509V454V8f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v508V454V8f(0x10000000000000000000000000000000000000000), v502V454V8f(0x1)
    0x50bS0x454S0x8f: v50bV454V8f = AND v456V8f, v509V454V8f(0xffffffffffffffffffffffffffffffffffffffff)
    0x50dS0x454S0x8f: v50dV454V8f = EQ v456V8f, v50bV454V8f
    0x50eS0x454S0x8f: v50eV454V8f(0x717) = CONST 
    0x511S0x454S0x8f: JUMPI v50eV454V8f(0x717), v50dV454V8f

    Begin block 0x512B0x454B0x8f
    prev=[0x501B0x454B0x8f], succ=[]
    =================================
    0x512S0x454S0x8f: v512V454V8f(0x0) = CONST 
    0x515S0x454S0x8f: REVERT v512V454V8f(0x0), v512V454V8f(0x0)

    Begin block 0x717B0x454B0x8f
    prev=[0x501B0x454B0x8f], succ=[0x45fB0x8f]
    =================================
    0x719S0x454S0x8f: JUMP v457V8f(0x45f)

    Begin block 0x45fB0x8f
    prev=[0x717B0x454B0x8f], succ=[0x501B0x45fB0x8f]
    =================================
    0x462S0x8f: v462V8f(0x20) = CONST 
    0x465S0x8f: v465V8f(0x24) = ADD v97(0x4), v462V8f(0x20)
    0x466S0x8f: v466V8f = CALLDATALOAD v465V8f(0x24)
    0x467S0x8f: v467V8f(0x46f) = CONST 
    0x46bS0x8f: v46bV8f(0x501) = CONST 
    0x46eS0x8f: JUMP v46bV8f(0x501), v466V8f, v467V8f(0x46f)

    Begin block 0x501B0x45fB0x8f
    prev=[0x45fB0x8f], succ=[0x512B0x45fB0x8f, 0x717B0x45fB0x8f]
    =================================
    0x502S0x45fS0x8f: v502V45fV8f(0x1) = CONST 
    0x504S0x45fS0x8f: v504V45fV8f(0x1) = CONST 
    0x506S0x45fS0x8f: v506V45fV8f(0xa0) = CONST 
    0x508S0x45fS0x8f: v508V45fV8f(0x10000000000000000000000000000000000000000) = SHL v506V45fV8f(0xa0), v504V45fV8f(0x1)
    0x509S0x45fS0x8f: v509V45fV8f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v508V45fV8f(0x10000000000000000000000000000000000000000), v502V45fV8f(0x1)
    0x50bS0x45fS0x8f: v50bV45fV8f = AND v466V8f, v509V45fV8f(0xffffffffffffffffffffffffffffffffffffffff)
    0x50dS0x45fS0x8f: v50dV45fV8f = EQ v466V8f, v50bV45fV8f
    0x50eS0x45fS0x8f: v50eV45fV8f(0x717) = CONST 
    0x511S0x45fS0x8f: JUMPI v50eV45fV8f(0x717), v50dV45fV8f

    Begin block 0x512B0x45fB0x8f
    prev=[0x501B0x45fB0x8f], succ=[]
    =================================
    0x512S0x45fS0x8f: v512V45fV8f(0x0) = CONST 
    0x515S0x45fS0x8f: REVERT v512V45fV8f(0x0), v512V45fV8f(0x0)

    Begin block 0x717B0x45fB0x8f
    prev=[0x501B0x45fB0x8f], succ=[0x46fB0x8f]
    =================================
    0x719S0x45fS0x8f: JUMP v467V8f(0x46f)

    Begin block 0x46fB0x8f
    prev=[0x717B0x45fB0x8f], succ=[0x9d]
    =================================
    0x479S0x8f: JUMP v93(0x9d)

    Begin block 0x9d
    prev=[0x46fB0x8f], succ=[0x28aB0x9d]
    =================================
    0x9e: v9e(0x28a) = CONST 
    0xa1: JUMP v9e(0x28a), v466V8f, v456V8f, v90(0x5a6)

    Begin block 0x28aB0x9d
    prev=[0x9d], succ=[0x29dB0x9d, 0x2b4B0x9d]
    =================================
    0x28bS0x9d: v28bV9d(0x0) = CONST 
    0x28dS0x9d: v28dV9d = SLOAD v28bV9d(0x0)
    0x28eS0x9d: v28eV9d(0x1) = CONST 
    0x290S0x9d: v290V9d(0x1) = CONST 
    0x292S0x9d: v292V9d(0xa0) = CONST 
    0x294S0x9d: v294V9d(0x10000000000000000000000000000000000000000) = SHL v292V9d(0xa0), v290V9d(0x1)
    0x295S0x9d: v295V9d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v294V9d(0x10000000000000000000000000000000000000000), v28eV9d(0x1)
    0x296S0x9d: v296V9d = AND v295V9d(0xffffffffffffffffffffffffffffffffffffffff), v28dV9d
    0x297S0x9d: v297V9d = CALLER 
    0x298S0x9d: v298V9d = EQ v297V9d, v296V9d
    0x299S0x9d: v299V9d(0x2b4) = CONST 
    0x29cS0x9d: JUMPI v299V9d(0x2b4), v298V9d

    Begin block 0x29dB0x9d
    prev=[0x28aB0x9d], succ=[0x4b2B0x29dB0x9d]
    =================================
    0x29dS0x9d: v29dV9d(0x40) = CONST 
    0x29fS0x9d: v29fV9d = MLOAD v29dV9d(0x40)
    0x2a0S0x9d: v2a0V9d(0x461bcd) = CONST 
    0x2a4S0x9d: v2a4V9d(0xe5) = CONST 
    0x2a6S0x9d: v2a6V9d(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2a4V9d(0xe5), v2a0V9d(0x461bcd)
    0x2a8S0x9d: MSTORE v29fV9d, v2a6V9d(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x2a9S0x9d: v2a9V9d(0x4) = CONST 
    0x2abS0x9d: v2abV9d = ADD v2a9V9d(0x4), v29fV9d
    0x2acS0x9d: v2acV9d(0x681) = CONST 
    0x2b0S0x9d: v2b0V9d(0x4b2) = CONST 
    0x2b3S0x9d: JUMP v2b0V9d(0x4b2)

    Begin block 0x4b2B0x29dB0x9d
    prev=[0x29dB0x9d], succ=[0x681B0x9d]
    =================================
    0x4b3S0x29dS0x9d: v4b3V29dV9d(0x20) = CONST 
    0x4b7S0x29dS0x9d: MSTORE v2abV9d, v4b3V29dV9d(0x20)
    0x4b8S0x29dS0x9d: v4b8V29dV9d(0x2f) = CONST 
    0x4bcS0x29dS0x9d: v4bcV29dV9d = ADD v2abV9d, v4b3V29dV9d(0x20)
    0x4bdS0x29dS0x9d: MSTORE v4bcV29dV9d, v4b8V29dV9d(0x2f)
    0x4beS0x29dS0x9d: v4beV29dV9d(0x4f6e6c792074686520636f6e7472616374206f776e6572206d61792070657266) = CONST 
    0x4dfS0x29dS0x9d: v4dfV29dV9d(0x40) = CONST 
    0x4e2S0x29dS0x9d: v4e2V29dV9d = ADD v2abV9d, v4dfV29dV9d(0x40)
    0x4e3S0x29dS0x9d: MSTORE v4e2V29dV9d, v4beV29dV9d(0x4f6e6c792074686520636f6e7472616374206f776e6572206d61792070657266)
    0x4e4S0x29dS0x9d: v4e4V29dV9d(0x37b936903a3434b99030b1ba34b7b7) = CONST 
    0x4f4S0x29dS0x9d: v4f4V29dV9d(0x89) = CONST 
    0x4f6S0x29dS0x9d: v4f6V29dV9d(0x6f726d207468697320616374696f6e0000000000000000000000000000000000) = SHL v4f4V29dV9d(0x89), v4e4V29dV9d(0x37b936903a3434b99030b1ba34b7b7)
    0x4f7S0x29dS0x9d: v4f7V29dV9d(0x60) = CONST 
    0x4faS0x29dS0x9d: v4faV29dV9d = ADD v2abV9d, v4f7V29dV9d(0x60)
    0x4fbS0x29dS0x9d: MSTORE v4faV29dV9d, v4f6V29dV9d(0x6f726d207468697320616374696f6e0000000000000000000000000000000000)
    0x4fcS0x29dS0x9d: v4fcV29dV9d(0x80) = CONST 
    0x4feS0x29dS0x9d: v4feV29dV9d = ADD v4fcV29dV9d(0x80), v2abV9d
    0x500S0x29dS0x9d: JUMP v2acV9d(0x681)

    Begin block 0x681B0x9d
    prev=[0x4b2B0x29dB0x9d], succ=[]
    =================================
    0x682S0x9d: v682V9d(0x40) = CONST 
    0x684S0x9d: v684V9d = MLOAD v682V9d(0x40)
    0x687S0x9d: v687V9d(0x84) = SUB v4feV29dV9d, v684V9d
    0x689S0x9d: REVERT v684V9d, v687V9d(0x84)

    Begin block 0x2b4B0x9d
    prev=[0x28aB0x9d], succ=[0x2f2B0x9d, 0x2f6B0x9d]
    =================================
    0x2b5S0x9d: v2b5V9d(0x40) = CONST 
    0x2b7S0x9d: v2b7V9d = MLOAD v2b5V9d(0x40)
    0x2b8S0x9d: v2b8V9d(0x70a08231) = CONST 
    0x2bdS0x9d: v2bdV9d(0xe0) = CONST 
    0x2bfS0x9d: v2bfV9d(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL v2bdV9d(0xe0), v2b8V9d(0x70a08231)
    0x2c1S0x9d: MSTORE v2b7V9d, v2bfV9d(0x70a0823100000000000000000000000000000000000000000000000000000000)
    0x2c2S0x9d: v2c2V9d = ADDRESS 
    0x2c3S0x9d: v2c3V9d(0x4) = CONST 
    0x2c6S0x9d: v2c6V9d = ADD v2b7V9d, v2c3V9d(0x4)
    0x2c7S0x9d: MSTORE v2c6V9d, v2c2V9d
    0x2c8S0x9d: v2c8V9d(0x0) = CONST 
    0x2cbS0x9d: v2cbV9d(0x1) = CONST 
    0x2cdS0x9d: v2cdV9d(0x1) = CONST 
    0x2cfS0x9d: v2cfV9d(0xa0) = CONST 
    0x2d1S0x9d: v2d1V9d(0x10000000000000000000000000000000000000000) = SHL v2cfV9d(0xa0), v2cdV9d(0x1)
    0x2d2S0x9d: v2d2V9d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2d1V9d(0x10000000000000000000000000000000000000000), v2cbV9d(0x1)
    0x2d4S0x9d: v2d4V9d = AND v466V8f, v2d2V9d(0xffffffffffffffffffffffffffffffffffffffff)
    0x2d6S0x9d: v2d6V9d(0x70a08231) = CONST 
    0x2dcS0x9d: v2dcV9d(0x24) = CONST 
    0x2deS0x9d: v2deV9d = ADD v2dcV9d(0x24), v2b7V9d
    0x2dfS0x9d: v2dfV9d(0x20) = CONST 
    0x2e1S0x9d: v2e1V9d(0x40) = CONST 
    0x2e3S0x9d: v2e3V9d = MLOAD v2e1V9d(0x40)
    0x2e6S0x9d: v2e6V9d(0x24) = SUB v2deV9d, v2e3V9d
    0x2eaS0x9d: v2eaV9d = EXTCODESIZE v2d4V9d
    0x2ebS0x9d: v2ebV9d = ISZERO v2eaV9d
    0x2edS0x9d: v2edV9d = ISZERO v2ebV9d
    0x2eeS0x9d: v2eeV9d(0x2f6) = CONST 
    0x2f1S0x9d: JUMPI v2eeV9d(0x2f6), v2edV9d

    Begin block 0x2f2B0x9d
    prev=[0x2b4B0x9d], succ=[]
    =================================
    0x2f2S0x9d: v2f2V9d(0x0) = CONST 
    0x2f5S0x9d: REVERT v2f2V9d(0x0), v2f2V9d(0x0)

    Begin block 0x2f6B0x9d
    prev=[0x2b4B0x9d], succ=[0x301B0x9d, 0x30aB0x9d]
    =================================
    0x2f8S0x9d: v2f8V9d = GAS 
    0x2f9S0x9d: v2f9V9d = STATICCALL v2f8V9d, v2d4V9d, v2e3V9d, v2e6V9d(0x24), v2e3V9d, v2dfV9d(0x20)
    0x2faS0x9d: v2faV9d = ISZERO v2f9V9d
    0x2fcS0x9d: v2fcV9d = ISZERO v2faV9d
    0x2fdS0x9d: v2fdV9d(0x30a) = CONST 
    0x300S0x9d: JUMPI v2fdV9d(0x30a), v2fcV9d

    Begin block 0x301B0x9d
    prev=[0x2f6B0x9d], succ=[]
    =================================
    0x301S0x9d: v301V9d = RETURNDATASIZE 
    0x302S0x9d: v302V9d(0x0) = CONST 
    0x305S0x9d: RETURNDATACOPY v302V9d(0x0), v302V9d(0x0), v301V9d
    0x306S0x9d: v306V9d = RETURNDATASIZE 
    0x307S0x9d: v307V9d(0x0) = CONST 
    0x309S0x9d: REVERT v307V9d(0x0), v306V9d

    Begin block 0x30aB0x9d
    prev=[0x2f6B0x9d], succ=[0x49aB0x9d]
    =================================
    0x30fS0x9d: v30fV9d(0x40) = CONST 
    0x311S0x9d: v311V9d = MLOAD v30fV9d(0x40)
    0x312S0x9d: v312V9d = RETURNDATASIZE 
    0x313S0x9d: v313V9d(0x1f) = CONST 
    0x315S0x9d: v315V9d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v313V9d(0x1f)
    0x316S0x9d: v316V9d(0x1f) = CONST 
    0x319S0x9d: v319V9d = ADD v312V9d, v316V9d(0x1f)
    0x31aS0x9d: v31aV9d = AND v319V9d, v315V9d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x31cS0x9d: v31cV9d = ADD v311V9d, v31aV9d
    0x31eS0x9d: v31eV9d(0x40) = CONST 
    0x320S0x9d: MSTORE v31eV9d(0x40), v31cV9d
    0x323S0x9d: v323V9d = ADD v311V9d, v312V9d
    0x325S0x9d: v325V9d(0x32e) = CONST 
    0x32aS0x9d: v32aV9d(0x49a) = CONST 
    0x32dS0x9d: JUMP v32aV9d(0x49a)

    Begin block 0x49aB0x9d
    prev=[0x30aB0x9d], succ=[0x4abB0x9d, 0x4a8B0x9d]
    =================================
    0x49bS0x9d: v49bV9d(0x0) = CONST 
    0x49dS0x9d: v49dV9d(0x20) = CONST 
    0x4a1S0x9d: v4a1V9d = SUB v323V9d, v311V9d
    0x4a2S0x9d: v4a2V9d = SLT v4a1V9d, v49dV9d(0x20)
    0x4a3S0x9d: v4a3V9d = ISZERO v4a2V9d
    0x4a4S0x9d: v4a4V9d(0x4ab) = CONST 
    0x4a7S0x9d: JUMPI v4a4V9d(0x4ab), v4a3V9d

    Begin block 0x4abB0x9d
    prev=[0x49aB0x9d], succ=[0x32eB0x9d]
    =================================
    0x4adS0x9d: v4adV9d = MLOAD v311V9d
    0x4b1S0x9d: JUMP v325V9d(0x32e)

    Begin block 0x32eB0x9d
    prev=[0x4abB0x9d], succ=[0x378B0x9d, 0x37cB0x9d]
    =================================
    0x32fS0x9d: v32fV9d(0x40) = CONST 
    0x331S0x9d: v331V9d = MLOAD v32fV9d(0x40)
    0x332S0x9d: v332V9d(0xa9059cbb) = CONST 
    0x337S0x9d: v337V9d(0xe0) = CONST 
    0x339S0x9d: v339V9d(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v337V9d(0xe0), v332V9d(0xa9059cbb)
    0x33bS0x9d: MSTORE v331V9d, v339V9d(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
    0x33cS0x9d: v33cV9d(0x1) = CONST 
    0x33eS0x9d: v33eV9d(0x1) = CONST 
    0x340S0x9d: v340V9d(0xa0) = CONST 
    0x342S0x9d: v342V9d(0x10000000000000000000000000000000000000000) = SHL v340V9d(0xa0), v33eV9d(0x1)
    0x343S0x9d: v343V9d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v342V9d(0x10000000000000000000000000000000000000000), v33cV9d(0x1)
    0x346S0x9d: v346V9d = AND v343V9d(0xffffffffffffffffffffffffffffffffffffffff), v456V8f
    0x347S0x9d: v347V9d(0x4) = CONST 
    0x34aS0x9d: v34aV9d = ADD v331V9d, v347V9d(0x4)
    0x34bS0x9d: MSTORE v34aV9d, v346V9d
    0x34cS0x9d: v34cV9d(0x24) = CONST 
    0x34fS0x9d: v34fV9d = ADD v331V9d, v34cV9d(0x24)
    0x352S0x9d: MSTORE v34fV9d, v4adV9d
    0x358S0x9d: v358V9d = AND v466V8f, v343V9d(0xffffffffffffffffffffffffffffffffffffffff)
    0x35aS0x9d: v35aV9d(0xa9059cbb) = CONST 
    0x360S0x9d: v360V9d(0x44) = CONST 
    0x362S0x9d: v362V9d = ADD v360V9d(0x44), v331V9d
    0x363S0x9d: v363V9d(0x20) = CONST 
    0x365S0x9d: v365V9d(0x40) = CONST 
    0x367S0x9d: v367V9d = MLOAD v365V9d(0x40)
    0x36aS0x9d: v36aV9d(0x44) = SUB v362V9d, v367V9d
    0x36cS0x9d: v36cV9d(0x0) = CONST 
    0x370S0x9d: v370V9d = EXTCODESIZE v358V9d
    0x371S0x9d: v371V9d = ISZERO v370V9d
    0x373S0x9d: v373V9d = ISZERO v371V9d
    0x374S0x9d: v374V9d(0x37c) = CONST 
    0x377S0x9d: JUMPI v374V9d(0x37c), v373V9d

    Begin block 0x378B0x9d
    prev=[0x32eB0x9d], succ=[]
    =================================
    0x378S0x9d: v378V9d(0x0) = CONST 
    0x37bS0x9d: REVERT v378V9d(0x0), v378V9d(0x0)

    Begin block 0x37cB0x9d
    prev=[0x32eB0x9d], succ=[0x387B0x9d, 0x390B0x9d]
    =================================
    0x37eS0x9d: v37eV9d = GAS 
    0x37fS0x9d: v37fV9d = CALL v37eV9d, v358V9d, v36cV9d(0x0), v367V9d, v36aV9d(0x44), v367V9d, v363V9d(0x20)
    0x380S0x9d: v380V9d = ISZERO v37fV9d
    0x382S0x9d: v382V9d = ISZERO v380V9d
    0x383S0x9d: v383V9d(0x390) = CONST 
    0x386S0x9d: JUMPI v383V9d(0x390), v382V9d

    Begin block 0x387B0x9d
    prev=[0x37cB0x9d], succ=[]
    =================================
    0x387S0x9d: v387V9d = RETURNDATASIZE 
    0x388S0x9d: v388V9d(0x0) = CONST 
    0x38bS0x9d: RETURNDATACOPY v388V9d(0x0), v388V9d(0x0), v387V9d
    0x38cS0x9d: v38cV9d = RETURNDATASIZE 
    0x38dS0x9d: v38dV9d(0x0) = CONST 
    0x38fS0x9d: REVERT v38dV9d(0x0), v38cV9d

    Begin block 0x390B0x9d
    prev=[0x37cB0x9d], succ=[0x47aB0x390B0x9d]
    =================================
    0x395S0x9d: v395V9d(0x40) = CONST 
    0x397S0x9d: v397V9d = MLOAD v395V9d(0x40)
    0x398S0x9d: v398V9d = RETURNDATASIZE 
    0x399S0x9d: v399V9d(0x1f) = CONST 
    0x39bS0x9d: v39bV9d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v399V9d(0x1f)
    0x39cS0x9d: v39cV9d(0x1f) = CONST 
    0x39fS0x9d: v39fV9d = ADD v398V9d, v39cV9d(0x1f)
    0x3a0S0x9d: v3a0V9d = AND v39fV9d, v39bV9d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x3a2S0x9d: v3a2V9d = ADD v397V9d, v3a0V9d
    0x3a4S0x9d: v3a4V9d(0x40) = CONST 
    0x3a6S0x9d: MSTORE v3a4V9d(0x40), v3a2V9d
    0x3a9S0x9d: v3a9V9d = ADD v397V9d, v398V9d
    0x3abS0x9d: v3abV9d(0x3b4) = CONST 
    0x3b0S0x9d: v3b0V9d(0x47a) = CONST 
    0x3b3S0x9d: JUMP v3b0V9d(0x47a)

    Begin block 0x47aB0x390B0x9d
    prev=[0x390B0x9d], succ=[0x48bB0x390B0x9d, 0x488B0x390B0x9d]
    =================================
    0x47bS0x390S0x9d: v47bV390V9d(0x0) = CONST 
    0x47dS0x390S0x9d: v47dV390V9d(0x20) = CONST 
    0x481S0x390S0x9d: v481V390V9d = SUB v3a9V9d, v397V9d
    0x482S0x390S0x9d: v482V390V9d = SLT v481V390V9d, v47dV390V9d(0x20)
    0x483S0x390S0x9d: v483V390V9d = ISZERO v482V390V9d
    0x484S0x390S0x9d: v484V390V9d(0x48b) = CONST 
    0x487S0x390S0x9d: JUMPI v484V390V9d(0x48b), v483V390V9d

    Begin block 0x48bB0x390B0x9d
    prev=[0x47aB0x390B0x9d], succ=[0x6f1B0x390B0x9d, 0x497B0x390B0x9d]
    =================================
    0x48dS0x390S0x9d: v48dV390V9d = MLOAD v397V9d
    0x48fS0x390S0x9d: v48fV390V9d = ISZERO v48dV390V9d
    0x490S0x390S0x9d: v490V390V9d = ISZERO v48fV390V9d
    0x492S0x390S0x9d: v492V390V9d = EQ v48dV390V9d, v490V390V9d
    0x493S0x390S0x9d: v493V390V9d(0x6f1) = CONST 
    0x496S0x390S0x9d: JUMPI v493V390V9d(0x6f1), v492V390V9d

    Begin block 0x6f1B0x390B0x9d
    prev=[0x48bB0x390B0x9d], succ=[0x3b4B0x9d]
    =================================
    0x6f7S0x390S0x9d: JUMP v3abV9d(0x3b4)

    Begin block 0x3b4B0x9d
    prev=[0x6f1B0x390B0x9d], succ=[0x27d0x28aB0x9d]
    =================================
    0x3b6S0x9d: v3b6V9d(0x40) = CONST 
    0x3b9S0x9d: v3b9V9d = MLOAD v3b6V9d(0x40)
    0x3baS0x9d: v3baV9d(0x1) = CONST 
    0x3bcS0x9d: v3bcV9d(0x1) = CONST 
    0x3beS0x9d: v3beV9d(0xa0) = CONST 
    0x3c0S0x9d: v3c0V9d(0x10000000000000000000000000000000000000000) = SHL v3beV9d(0xa0), v3bcV9d(0x1)
    0x3c1S0x9d: v3c1V9d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c0V9d(0x10000000000000000000000000000000000000000), v3baV9d(0x1)
    0x3c4S0x9d: v3c4V9d = AND v456V8f, v3c1V9d(0xffffffffffffffffffffffffffffffffffffffff)
    0x3c6S0x9d: MSTORE v3b9V9d, v3c4V9d
    0x3c8S0x9d: v3c8V9d = AND v466V8f, v3c1V9d(0xffffffffffffffffffffffffffffffffffffffff)
    0x3c9S0x9d: v3c9V9d(0x20) = CONST 
    0x3ccS0x9d: v3ccV9d = ADD v3b9V9d, v3c9V9d(0x20)
    0x3cdS0x9d: MSTORE v3ccV9d, v3c8V9d
    0x3d0S0x9d: v3d0V9d = ADD v3b9V9d, v3b6V9d(0x40)
    0x3d3S0x9d: MSTORE v3d0V9d, v4adV9d
    0x3d4S0x9d: v3d4V9d(0x4eefa56849dacb2860ab097a8f5e2b6e9a9269c2c6f43f13e475a827edb3793c) = CONST 
    0x3f6S0x9d: v3f6V9d(0x60) = CONST 
    0x3f8S0x9d: v3f8V9d = ADD v3f6V9d(0x60), v3b9V9d
    0x3f9S0x9d: v3f9V9d(0x27d) = CONST 
    0x3fcS0x9d: JUMP v3f9V9d(0x27d)

    Begin block 0x27d0x28aB0x9d
    prev=[0x3b4B0x9d], succ=[0x5a6]
    =================================
    0x27e0x28aS0x9d: v28a27eV9d(0x40) = CONST 
    0x2800x28aS0x9d: v28a280V9d = MLOAD v28a27eV9d(0x40)
    0x2830x28aS0x9d: v28a283V9d(0x60) = SUB v3f8V9d, v28a280V9d
    0x2850x28aS0x9d: LOG1 v28a280V9d, v28a283V9d(0x60), v3d4V9d(0x4eefa56849dacb2860ab097a8f5e2b6e9a9269c2c6f43f13e475a827edb3793c)
    0x2890x28aS0x9d: JUMP v90(0x5a6)

    Begin block 0x5a6
    prev=[0x27d0x28aB0x9d], succ=[]
    =================================
    0x5a7: STOP 

    Begin block 0x497B0x390B0x9d
    prev=[0x48bB0x390B0x9d], succ=[]
    =================================
    0x499S0x390S0x9d: REVERT v47bV390V9d(0x0), v47bV390V9d(0x0)

    Begin block 0x488B0x390B0x9d
    prev=[0x47aB0x390B0x9d], succ=[]
    =================================
    0x48aS0x390S0x9d: REVERT v47bV390V9d(0x0), v47bV390V9d(0x0)

    Begin block 0x4a8B0x9d
    prev=[0x49aB0x9d], succ=[]
    =================================
    0x4aaS0x9d: REVERT v49bV9d(0x0), v49bV9d(0x0)

    Begin block 0x451B0x8f
    prev=[0x442B0x8f], succ=[]
    =================================
    0x453S0x8f: REVERT v443V8f(0x0), v443V8f(0x0)

}

function owner()() public {
    Begin block 0xa2
    prev=[], succ=[0xb5]
    =================================
    0xa3: va3(0x0) = CONST 
    0xa5: va5 = SLOAD va3(0x0)
    0xa6: va6(0xb5) = CONST 
    0xaa: vaa(0x1) = CONST 
    0xac: vac(0x1) = CONST 
    0xae: vae(0xa0) = CONST 
    0xb0: vb0(0x10000000000000000000000000000000000000000) = SHL vae(0xa0), vac(0x1)
    0xb1: vb1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb0(0x10000000000000000000000000000000000000000), vaa(0x1)
    0xb2: vb2 = AND vb1(0xffffffffffffffffffffffffffffffffffffffff), va5
    0xb4: JUMP va6(0xb5)

    Begin block 0xb5
    prev=[0xa2], succ=[]
    =================================
    0xb6: vb6(0x40) = CONST 
    0xb8: vb8 = MLOAD vb6(0x40)
    0xb9: vb9(0x1) = CONST 
    0xbb: vbb(0x1) = CONST 
    0xbd: vbd(0xa0) = CONST 
    0xbf: vbf(0x10000000000000000000000000000000000000000) = SHL vbd(0xa0), vbb(0x1)
    0xc0: vc0(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbf(0x10000000000000000000000000000000000000000), vb9(0x1)
    0xc3: vc3 = AND vb2, vc0(0xffffffffffffffffffffffffffffffffffffffff)
    0xc5: MSTORE vb8, vc3
    0xc6: vc6(0x20) = CONST 
    0xc8: vc8 = ADD vc6(0x20), vb8
    0xc9: vc9(0x40) = CONST 
    0xcb: vcb = MLOAD vc9(0x40)
    0xce: vce(0x20) = SUB vc8, vcb
    0xd0: RETURN vcb, vce(0x20)

}

function initialize(address)() public {
    Begin block 0xd1
    prev=[], succ=[0x41fB0xd1]
    =================================
    0xd2: vd2(0x5c7) = CONST 
    0xd5: vd5(0xdf) = CONST 
    0xd8: vd8 = CALLDATASIZE 
    0xd9: vd9(0x4) = CONST 
    0xdb: vdb(0x41f) = CONST 
    0xde: JUMP vdb(0x41f)

    Begin block 0x41fB0xd1
    prev=[0xd1], succ=[0x430B0xd1, 0x42dB0xd1]
    =================================
    0x420S0xd1: v420Vd1(0x0) = CONST 
    0x422S0xd1: v422Vd1(0x20) = CONST 
    0x426S0xd1: v426Vd1 = SUB vd8, vd9(0x4)
    0x427S0xd1: v427Vd1 = SLT v426Vd1, v422Vd1(0x20)
    0x428S0xd1: v428Vd1 = ISZERO v427Vd1
    0x429S0xd1: v429Vd1(0x430) = CONST 
    0x42cS0xd1: JUMPI v429Vd1(0x430), v428Vd1

    Begin block 0x430B0xd1
    prev=[0x41fB0xd1], succ=[0x501B0x430B0xd1]
    =================================
    0x432S0xd1: v432Vd1 = CALLDATALOAD vd9(0x4)
    0x433S0xd1: v433Vd1(0x6cb) = CONST 
    0x437S0xd1: v437Vd1(0x501) = CONST 
    0x43aS0xd1: JUMP v437Vd1(0x501), v432Vd1, v433Vd1(0x6cb)

    Begin block 0x501B0x430B0xd1
    prev=[0x430B0xd1], succ=[0x512B0x430B0xd1, 0x717B0x430B0xd1]
    =================================
    0x502S0x430S0xd1: v502V430Vd1(0x1) = CONST 
    0x504S0x430S0xd1: v504V430Vd1(0x1) = CONST 
    0x506S0x430S0xd1: v506V430Vd1(0xa0) = CONST 
    0x508S0x430S0xd1: v508V430Vd1(0x10000000000000000000000000000000000000000) = SHL v506V430Vd1(0xa0), v504V430Vd1(0x1)
    0x509S0x430S0xd1: v509V430Vd1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v508V430Vd1(0x10000000000000000000000000000000000000000), v502V430Vd1(0x1)
    0x50bS0x430S0xd1: v50bV430Vd1 = AND v432Vd1, v509V430Vd1(0xffffffffffffffffffffffffffffffffffffffff)
    0x50dS0x430S0xd1: v50dV430Vd1 = EQ v432Vd1, v50bV430Vd1
    0x50eS0x430S0xd1: v50eV430Vd1(0x717) = CONST 
    0x511S0x430S0xd1: JUMPI v50eV430Vd1(0x717), v50dV430Vd1

    Begin block 0x512B0x430B0xd1
    prev=[0x501B0x430B0xd1], succ=[]
    =================================
    0x512S0x430S0xd1: v512V430Vd1(0x0) = CONST 
    0x515S0x430S0xd1: REVERT v512V430Vd1(0x0), v512V430Vd1(0x0)

    Begin block 0x717B0x430B0xd1
    prev=[0x501B0x430B0xd1], succ=[0x6cbB0xd1]
    =================================
    0x719S0x430S0xd1: JUMP v433Vd1(0x6cb)

    Begin block 0x6cbB0xd1
    prev=[0x717B0x430B0xd1], succ=[0xdf]
    =================================
    0x6d1S0xd1: JUMP vd5(0xdf)

    Begin block 0xdf
    prev=[0x6cbB0xd1], succ=[0x3fdB0xdf]
    =================================
    0xe0: ve0(0x3fd) = CONST 
    0xe3: JUMP ve0(0x3fd), v432Vd1, vd2(0x5c7)

    Begin block 0x3fdB0xdf
    prev=[0xdf], succ=[0x40fB0xdf, 0x413B0xdf]
    =================================
    0x3feS0xdf: v3feVdf(0x0) = CONST 
    0x400S0xdf: v400Vdf = SLOAD v3feVdf(0x0)
    0x401S0xdf: v401Vdf(0x1) = CONST 
    0x403S0xdf: v403Vdf(0x1) = CONST 
    0x405S0xdf: v405Vdf(0xa0) = CONST 
    0x407S0xdf: v407Vdf(0x10000000000000000000000000000000000000000) = SHL v405Vdf(0xa0), v403Vdf(0x1)
    0x408S0xdf: v408Vdf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v407Vdf(0x10000000000000000000000000000000000000000), v401Vdf(0x1)
    0x409S0xdf: v409Vdf = AND v408Vdf(0xffffffffffffffffffffffffffffffffffffffff), v400Vdf
    0x40aS0xdf: v40aVdf = ISZERO v409Vdf
    0x40bS0xdf: v40bVdf(0x413) = CONST 
    0x40eS0xdf: JUMPI v40bVdf(0x413), v40aVdf

    Begin block 0x40fB0xdf
    prev=[0x3fdB0xdf], succ=[]
    =================================
    0x40fS0xdf: v40fVdf(0x0) = CONST 
    0x412S0xdf: REVERT v40fVdf(0x0), v40fVdf(0x0)

    Begin block 0x413B0xdf
    prev=[0x3fdB0xdf], succ=[0x12aB0x413B0xdf]
    =================================
    0x414S0xdf: v414Vdf(0x6a9) = CONST 
    0x418S0xdf: v418Vdf(0x12a) = CONST 
    0x41bS0xdf: JUMP v418Vdf(0x12a), v432Vd1, v414Vdf(0x6a9)

    Begin block 0x12aB0x413B0xdf
    prev=[0x413B0xdf], succ=[0x6a9B0xdf]
    =================================
    0x12bS0x413S0xdf: v12bV413Vdf(0x0) = CONST 
    0x12eS0x413S0xdf: v12eV413Vdf = SLOAD v12bV413Vdf(0x0)
    0x12fS0x413S0xdf: v12fV413Vdf(0x1) = CONST 
    0x131S0x413S0xdf: v131V413Vdf(0x1) = CONST 
    0x133S0x413S0xdf: v133V413Vdf(0xa0) = CONST 
    0x135S0x413S0xdf: v135V413Vdf(0x10000000000000000000000000000000000000000) = SHL v133V413Vdf(0xa0), v131V413Vdf(0x1)
    0x136S0x413S0xdf: v136V413Vdf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v135V413Vdf(0x10000000000000000000000000000000000000000), v12fV413Vdf(0x1)
    0x137S0x413S0xdf: v137V413Vdf(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v136V413Vdf(0xffffffffffffffffffffffffffffffffffffffff)
    0x138S0x413S0xdf: v138V413Vdf = AND v137V413Vdf(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v12eV413Vdf
    0x139S0x413S0xdf: v139V413Vdf(0x1) = CONST 
    0x13bS0x413S0xdf: v13bV413Vdf(0x1) = CONST 
    0x13dS0x413S0xdf: v13dV413Vdf(0xa0) = CONST 
    0x13fS0x413S0xdf: v13fV413Vdf(0x10000000000000000000000000000000000000000) = SHL v13dV413Vdf(0xa0), v13bV413Vdf(0x1)
    0x140S0x413S0xdf: v140V413Vdf(0xffffffffffffffffffffffffffffffffffffffff) = SUB v13fV413Vdf(0x10000000000000000000000000000000000000000), v139V413Vdf(0x1)
    0x142S0x413S0xdf: v142V413Vdf = AND v432Vd1, v140V413Vdf(0xffffffffffffffffffffffffffffffffffffffff)
    0x145S0x413S0xdf: v145V413Vdf = OR v142V413Vdf, v138V413Vdf
    0x148S0x413S0xdf: SSTORE v12bV413Vdf(0x0), v145V413Vdf
    0x149S0x413S0xdf: v149V413Vdf(0x40) = CONST 
    0x14bS0x413S0xdf: v14bV413Vdf = MLOAD v149V413Vdf(0x40)
    0x14eS0x413S0xdf: MSTORE v14bV413Vdf, v142V413Vdf
    0x14fS0x413S0xdf: v14fV413Vdf(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36) = CONST 
    0x171S0x413S0xdf: v171V413Vdf(0x20) = CONST 
    0x173S0x413S0xdf: v173V413Vdf = ADD v171V413Vdf(0x20), v14bV413Vdf
    0x174S0x413S0xdf: v174V413Vdf(0x40) = CONST 
    0x176S0x413S0xdf: v176V413Vdf = MLOAD v174V413Vdf(0x40)
    0x179S0x413S0xdf: v179V413Vdf(0x20) = SUB v173V413Vdf, v176V413Vdf
    0x17bS0x413S0xdf: LOG1 v176V413Vdf, v179V413Vdf(0x20), v14fV413Vdf(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36)
    0x17dS0x413S0xdf: JUMP v414Vdf(0x6a9)

    Begin block 0x6a9B0xdf
    prev=[0x12aB0x413B0xdf], succ=[0x5c7]
    =================================
    0x6abS0xdf: JUMP vd2(0x5c7)

    Begin block 0x5c7
    prev=[0x6a9B0xdf], succ=[]
    =================================
    0x5c8: STOP 

    Begin block 0x42dB0xd1
    prev=[0x41fB0xd1], succ=[]
    =================================
    0x42fS0xd1: REVERT v420Vd1(0x0), v420Vd1(0x0)

}

function initializeOwnable(address)() public {
    Begin block 0xe4
    prev=[], succ=[0x41fB0xe4]
    =================================
    0xe5: ve5(0x5e8) = CONST 
    0xe8: ve8(0xf2) = CONST 
    0xeb: veb = CALLDATASIZE 
    0xec: vec(0x4) = CONST 
    0xee: vee(0x41f) = CONST 
    0xf1: JUMP vee(0x41f)

    Begin block 0x41fB0xe4
    prev=[0xe4], succ=[0x430B0xe4, 0x42dB0xe4]
    =================================
    0x420S0xe4: v420Ve4(0x0) = CONST 
    0x422S0xe4: v422Ve4(0x20) = CONST 
    0x426S0xe4: v426Ve4 = SUB veb, vec(0x4)
    0x427S0xe4: v427Ve4 = SLT v426Ve4, v422Ve4(0x20)
    0x428S0xe4: v428Ve4 = ISZERO v427Ve4
    0x429S0xe4: v429Ve4(0x430) = CONST 
    0x42cS0xe4: JUMPI v429Ve4(0x430), v428Ve4

    Begin block 0x430B0xe4
    prev=[0x41fB0xe4], succ=[0x501B0x430B0xe4]
    =================================
    0x432S0xe4: v432Ve4 = CALLDATALOAD vec(0x4)
    0x433S0xe4: v433Ve4(0x6cb) = CONST 
    0x437S0xe4: v437Ve4(0x501) = CONST 
    0x43aS0xe4: JUMP v437Ve4(0x501), v432Ve4, v433Ve4(0x6cb)

    Begin block 0x501B0x430B0xe4
    prev=[0x430B0xe4], succ=[0x512B0x430B0xe4, 0x717B0x430B0xe4]
    =================================
    0x502S0x430S0xe4: v502V430Ve4(0x1) = CONST 
    0x504S0x430S0xe4: v504V430Ve4(0x1) = CONST 
    0x506S0x430S0xe4: v506V430Ve4(0xa0) = CONST 
    0x508S0x430S0xe4: v508V430Ve4(0x10000000000000000000000000000000000000000) = SHL v506V430Ve4(0xa0), v504V430Ve4(0x1)
    0x509S0x430S0xe4: v509V430Ve4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v508V430Ve4(0x10000000000000000000000000000000000000000), v502V430Ve4(0x1)
    0x50bS0x430S0xe4: v50bV430Ve4 = AND v432Ve4, v509V430Ve4(0xffffffffffffffffffffffffffffffffffffffff)
    0x50dS0x430S0xe4: v50dV430Ve4 = EQ v432Ve4, v50bV430Ve4
    0x50eS0x430S0xe4: v50eV430Ve4(0x717) = CONST 
    0x511S0x430S0xe4: JUMPI v50eV430Ve4(0x717), v50dV430Ve4

    Begin block 0x512B0x430B0xe4
    prev=[0x501B0x430B0xe4], succ=[]
    =================================
    0x512S0x430S0xe4: v512V430Ve4(0x0) = CONST 
    0x515S0x430S0xe4: REVERT v512V430Ve4(0x0), v512V430Ve4(0x0)

    Begin block 0x717B0x430B0xe4
    prev=[0x501B0x430B0xe4], succ=[0x6cbB0xe4]
    =================================
    0x719S0x430S0xe4: JUMP v433Ve4(0x6cb)

    Begin block 0x6cbB0xe4
    prev=[0x717B0x430B0xe4], succ=[0xf2]
    =================================
    0x6d1S0xe4: JUMP ve8(0xf2)

    Begin block 0xf2
    prev=[0x6cbB0xe4], succ=[0x12aB0xf2]
    =================================
    0xf3: vf3(0x12a) = CONST 
    0xf6: JUMP vf3(0x12a), v432Ve4, ve5(0x5e8)

    Begin block 0x12aB0xf2
    prev=[0xf2], succ=[0x5e8]
    =================================
    0x12bS0xf2: v12bVf2(0x0) = CONST 
    0x12eS0xf2: v12eVf2 = SLOAD v12bVf2(0x0)
    0x12fS0xf2: v12fVf2(0x1) = CONST 
    0x131S0xf2: v131Vf2(0x1) = CONST 
    0x133S0xf2: v133Vf2(0xa0) = CONST 
    0x135S0xf2: v135Vf2(0x10000000000000000000000000000000000000000) = SHL v133Vf2(0xa0), v131Vf2(0x1)
    0x136S0xf2: v136Vf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v135Vf2(0x10000000000000000000000000000000000000000), v12fVf2(0x1)
    0x137S0xf2: v137Vf2(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v136Vf2(0xffffffffffffffffffffffffffffffffffffffff)
    0x138S0xf2: v138Vf2 = AND v137Vf2(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v12eVf2
    0x139S0xf2: v139Vf2(0x1) = CONST 
    0x13bS0xf2: v13bVf2(0x1) = CONST 
    0x13dS0xf2: v13dVf2(0xa0) = CONST 
    0x13fS0xf2: v13fVf2(0x10000000000000000000000000000000000000000) = SHL v13dVf2(0xa0), v13bVf2(0x1)
    0x140S0xf2: v140Vf2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v13fVf2(0x10000000000000000000000000000000000000000), v139Vf2(0x1)
    0x142S0xf2: v142Vf2 = AND v432Ve4, v140Vf2(0xffffffffffffffffffffffffffffffffffffffff)
    0x145S0xf2: v145Vf2 = OR v142Vf2, v138Vf2
    0x148S0xf2: SSTORE v12bVf2(0x0), v145Vf2
    0x149S0xf2: v149Vf2(0x40) = CONST 
    0x14bS0xf2: v14bVf2 = MLOAD v149Vf2(0x40)
    0x14eS0xf2: MSTORE v14bVf2, v142Vf2
    0x14fS0xf2: v14fVf2(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36) = CONST 
    0x171S0xf2: v171Vf2(0x20) = CONST 
    0x173S0xf2: v173Vf2 = ADD v171Vf2(0x20), v14bVf2
    0x174S0xf2: v174Vf2(0x40) = CONST 
    0x176S0xf2: v176Vf2 = MLOAD v174Vf2(0x40)
    0x179S0xf2: v179Vf2(0x20) = SUB v173Vf2, v176Vf2
    0x17bS0xf2: LOG1 v176Vf2, v179Vf2(0x20), v14fVf2(0xa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36)
    0x17dS0xf2: JUMP ve5(0x5e8)

    Begin block 0x5e8
    prev=[0x12aB0xf2], succ=[]
    =================================
    0x5e9: STOP 

    Begin block 0x42dB0xe4
    prev=[0x41fB0xe4], succ=[]
    =================================
    0x42fS0xe4: REVERT v420Ve4(0x0), v420Ve4(0x0)

}

