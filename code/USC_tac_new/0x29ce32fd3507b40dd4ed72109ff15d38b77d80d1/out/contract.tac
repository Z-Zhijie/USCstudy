function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xd, 0xe1]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5(0x4) = CONST 
    0x7: v7 = CALLDATASIZE 
    0x8: v8 = LT v7, v5(0x4)
    0x9: v9(0xe1) = CONST 
    0xc: JUMPI v9(0xe1), v8

    Begin block 0xd
    prev=[0x0], succ=[0x7f, 0x1e]
    =================================
    0xd: vd(0x0) = CONST 
    0xf: vf = CALLDATALOAD vd(0x0)
    0x10: v10(0xe0) = CONST 
    0x12: v12 = SHR v10(0xe0), vf
    0x14: v14(0x82c947b7) = CONST 
    0x19: v19 = GT v14(0x82c947b7), v12
    0x1a: v1a(0x7f) = CONST 
    0x1d: JUMPI v1a(0x7f), v19

    Begin block 0x7f
    prev=[0xd], succ=[0xbb, 0x8b]
    =================================
    0x81: v81(0x37a440e6) = CONST 
    0x86: v86 = GT v81(0x37a440e6), v12
    0x87: v87(0xbb) = CONST 
    0x8a: JUMPI v87(0xbb), v86

    Begin block 0xbb
    prev=[0x7f], succ=[0xf59, 0xc7]
    =================================
    0xbd: vbd(0x16c38b3c) = CONST 
    0xc2: vc2 = EQ vbd(0x16c38b3c), v12
    0xf50: vf50(0xf59) = CONST 
    0xf51: JUMPI vf50(0xf59), vc2

    Begin block 0xf59
    prev=[0xbb], succ=[]
    =================================
    0xf5a: vf5a(0xf8) = CONST 
    0xf5b: CALLPRIVATE vf5a(0xf8)

    Begin block 0xc7
    prev=[0xbb], succ=[0xf5c, 0xd2]
    =================================
    0xc8: vc8(0x17b857dd) = CONST 
    0xcd: vcd = EQ vc8(0x17b857dd), v12
    0xf52: vf52(0xf5c) = CONST 
    0xf53: JUMPI vf52(0xf5c), vcd

    Begin block 0xf5c
    prev=[0xc7], succ=[]
    =================================
    0xf5d: vf5d(0x124) = CONST 
    0xf5e: CALLPRIVATE vf5d(0x124)

    Begin block 0xd2
    prev=[0xc7], succ=[0xdd, 0xf5f]
    =================================
    0xd3: vd3(0x1ab7710d) = CONST 
    0xd8: vd8 = EQ vd3(0x1ab7710d), v12
    0xf54: vf54(0xf5f) = CONST 
    0xf55: JUMPI vf54(0xf5f), vd8

    Begin block 0xdd
    prev=[0xd2], succ=[0xf0]
    =================================
    0xdd: vdd(0xf0) = CONST 
    0xe0: JUMP vdd(0xf0)

    Begin block 0xf0
    prev=[0x55, 0x7b, 0xb7, 0xdd, 0xe1], succ=[0x3430x0]
    =================================
    0xf1: vf1(0xa9d) = CONST 
    0xf4: vf4(0x343) = CONST 
    0xf7: JUMP vf4(0x343)

    Begin block 0x3430x0
    prev=[0xf0], succ=[0x75bB0x3430x0]
    =================================
    0x3440x0: v0344(0x380) = CONST 
    0x3470x0: v0347(0x40) = CONST 
    0x3490x0: v0349 = MLOAD v0347(0x40)
    0x34a0x0: v034a(0x20) = CONST 
    0x34c0x0: v034c = ADD v034a(0x20), v0349
    0x34f0x0: v034f(0x14105554d15117d4d313d5) = CONST 
    0x35b0x0: v035b(0xaa) = CONST 
    0x35d0x0: v035d(0x5041555345445f534c4f54000000000000000000000000000000000000000000) = SHL v035b(0xaa), v034f(0x14105554d15117d4d313d5)
    0x35f0x0: MSTORE v034c, v035d(0x5041555345445f534c4f54000000000000000000000000000000000000000000)
    0x3610x0: v0361(0xb) = CONST 
    0x3630x0: v0363 = ADD v0361(0xb), v034c
    0x3660x0: v0366(0x40) = CONST 
    0x3680x0: v0368 = MLOAD v0366(0x40)
    0x3690x0: v0369(0x20) = CONST 
    0x36d0x0: v036d(0x2b) = SUB v0363, v0368
    0x36e0x0: v036e(0xb) = SUB v036d(0x2b), v0369(0x20)
    0x3700x0: MSTORE v0368, v036e(0xb)
    0x3720x0: v0372(0x40) = CONST 
    0x3740x0: MSTORE v0372(0x40), v0363
    0x3760x0: v0376(0xb) = MLOAD v0368
    0x3780x0: v0378(0x20) = CONST 
    0x37a0x0: v037a = ADD v0378(0x20), v0368
    0x37b0x0: v037b = SHA3 v037a, v0376(0xb)
    0x37c0x0: v037c(0x75b) = CONST 
    0x37f0x0: JUMP v037c(0x75b)

    Begin block 0x75bB0x3430x0
    prev=[0x3430x0], succ=[0x5a1B0x75bB0x3430x0]
    =================================
    0x75cS0x3430x0: v75cV3430(0x0) = CONST 
    0x75eS0x3430x0: v75eV3430(0x1) = CONST 
    0x760S0x3430x0: v760V3430(0x768) = CONST 
    0x764S0x3430x0: v764V3430(0x5a1) = CONST 
    0x767S0x3430x0: JUMP v764V3430(0x5a1)

    Begin block 0x5a1B0x75bB0x3430x0
    prev=[0x75bB0x3430x0], succ=[0x7680x75bB0x3430x0]
    =================================
    0x5a2S0x75bS0x3430x0: v5a2V75bV3430 = SLOAD v037b
    0x5a4S0x75bS0x3430x0: JUMP v760V3430(0x768)

    Begin block 0x7680x75bB0x3430x0
    prev=[0x5a1B0x75bB0x3430x0], succ=[0x3800x0]
    =================================
    0x7690x75bS0x3430x0: v75b769V3430 = EQ v5a2V75bV3430, v75eV3430(0x1)
    0x76e0x75bS0x3430x0: JUMP v0344(0x380)

    Begin block 0x3800x0
    prev=[0x7680x75bB0x3430x0], succ=[0x3860x0, 0x3bc0x0]
    =================================
    0x3810x0: v0381 = ISZERO v75b769V3430
    0x3820x0: v0382(0x3bc) = CONST 
    0x3850x0: JUMPI v0382(0x3bc), v0381

    Begin block 0x3860x0
    prev=[0x3800x0], succ=[]
    =================================
    0x3860x0: v0386(0x40) = CONST 
    0x3880x0: v0388 = MLOAD v0386(0x40)
    0x3890x0: v0389(0x461bcd) = CONST 
    0x38d0x0: v038d(0xe5) = CONST 
    0x38f0x0: v038f(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v038d(0xe5), v0389(0x461bcd)
    0x3910x0: MSTORE v0388, v038f(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x3920x0: v0392(0x4) = CONST 
    0x3940x0: v0394 = ADD v0392(0x4), v0388
    0x3970x0: v0397(0x20) = CONST 
    0x3990x0: v0399 = ADD v0397(0x20), v0394
    0x39c0x0: v039c(0x20) = SUB v0399, v0394
    0x39e0x0: MSTORE v0394, v039c(0x20)
    0x39f0x0: v039f(0x2b) = CONST 
    0x3a20x0: MSTORE v0399, v039f(0x2b)
    0x3a30x0: v03a3(0x20) = CONST 
    0x3a50x0: v03a5 = ADD v03a3(0x20), v0399
    0x3a70x0: v03a7(0xa06) = CONST 
    0x3aa0x0: v03aa(0x2b) = CONST 
    0x3ad0x0: CODECOPY v03a5, v03a7(0xa06), v03aa(0x2b)
    0x3ae0x0: v03ae(0x40) = CONST 
    0x3b00x0: v03b0 = ADD v03ae(0x40), v03a5
    0x3b40x0: v03b4(0x40) = CONST 
    0x3b60x0: v03b6 = MLOAD v03b4(0x40)
    0x3b90x0: v03b9(0x84) = SUB v03b0, v03b6
    0x3bb0x0: REVERT v03b6, v03b9(0x84)

    Begin block 0x3bc0x0
    prev=[0x3800x0], succ=[0x9080x0]
    =================================
    0x3bd0x0: v03bd(0xd74) = CONST 
    0x3c00x0: v03c0(0x908) = CONST 
    0x3c30x0: JUMP v03c0(0x908)

    Begin block 0x9080x0
    prev=[0x3bc0x0], succ=[0x6fbB0x9080x0]
    =================================
    0x9090x0: v0909(0x0) = CONST 
    0x90b0x0: v090b(0x94f) = CONST 
    0x90e0x0: v090e(0x40) = CONST 
    0x9100x0: v0910 = MLOAD v090e(0x40)
    0x9110x0: v0911(0x20) = CONST 
    0x9130x0: v0913 = ADD v0911(0x20), v0910
    0x9160x0: v0916(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x92a0x0: v092a(0x6a) = CONST 
    0x92c0x0: v092c(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL v092a(0x6a), v0916(0x12535413115351539510551253d397d4d313d5)
    0x92e0x0: MSTORE v0913, v092c(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x9300x0: v0930(0x13) = CONST 
    0x9320x0: v0932 = ADD v0930(0x13), v0913
    0x9350x0: v0935(0x40) = CONST 
    0x9370x0: v0937 = MLOAD v0935(0x40)
    0x9380x0: v0938(0x20) = CONST 
    0x93c0x0: v093c(0x33) = SUB v0932, v0937
    0x93d0x0: v093d(0x13) = SUB v093c(0x33), v0938(0x20)
    0x93f0x0: MSTORE v0937, v093d(0x13)
    0x9410x0: v0941(0x40) = CONST 
    0x9430x0: MSTORE v0941(0x40), v0932
    0x9450x0: v0945(0x13) = MLOAD v0937
    0x9470x0: v0947(0x20) = CONST 
    0x9490x0: v0949 = ADD v0947(0x20), v0937
    0x94a0x0: v094a = SHA3 v0949, v0945(0x13)
    0x94b0x0: v094b(0x6fb) = CONST 
    0x94e0x0: JUMP v094b(0x6fb)

    Begin block 0x6fbB0x9080x0
    prev=[0x9080x0], succ=[0x5a1B0x6fbB0x9080x0]
    =================================
    0x6fcS0x9080x0: v6fcV9080(0x0) = CONST 
    0x6feS0x9080x0: v6feV9080(0x70e) = CONST 
    0x701S0x9080x0: v701V9080(0x709) = CONST 
    0x705S0x9080x0: v705V9080(0x5a1) = CONST 
    0x708S0x9080x0: JUMP v705V9080(0x5a1)

    Begin block 0x5a1B0x6fbB0x9080x0
    prev=[0x6fbB0x9080x0], succ=[0x7090x6fbB0x9080x0]
    =================================
    0x5a2S0x6fbS0x9080x0: v5a2V6fbV9080 = SLOAD v094a
    0x5a4S0x6fbS0x9080x0: JUMP v701V9080(0x709)

    Begin block 0x7090x6fbB0x9080x0
    prev=[0x5a1B0x6fbB0x9080x0], succ=[0xe66B0x7090x6fbB0x9080x0]
    =================================
    0x70a0x6fbS0x9080x0: v6fb70aV9080(0xe66) = CONST 
    0x70d0x6fbS0x9080x0: JUMP v6fb70aV9080(0xe66)

    Begin block 0xe66B0x7090x6fbB0x9080x0
    prev=[0x7090x6fbB0x9080x0], succ=[0x70e0x6fbB0x9080x0]
    =================================
    0xe68S0x7090x6fbS0x9080x0: JUMP v6feV9080(0x70e)

    Begin block 0x70e0x6fbB0x9080x0
    prev=[0xe66B0x7090x6fbB0x9080x0], succ=[0x94f0x0]
    =================================
    0x7130x6fbS0x9080x0: JUMP v090b(0x94f)

    Begin block 0x94f0x0
    prev=[0x70e0x6fbB0x9080x0], succ=[0x96f0x0, 0x9720x0]
    =================================
    0x9520x0: v0952(0x40) = CONST 
    0x9540x0: v0954 = MLOAD v0952(0x40)
    0x9550x0: v0955 = CALLDATASIZE 
    0x9560x0: v0956(0x0) = CONST 
    0x9590x0: CALLDATACOPY v0954, v0956(0x0), v0955
    0x95a0x0: v095a(0x0) = CONST 
    0x95d0x0: v095d = CALLDATASIZE 
    0x9600x0: v0960 = GAS 
    0x9610x0: v0961 = DELEGATECALL v0960, v5a2V6fbV9080, v0954, v095d, v095a(0x0), v095a(0x0)
    0x9620x0: v0962 = RETURNDATASIZE 
    0x9640x0: v0964(0x0) = CONST 
    0x9670x0: RETURNDATACOPY v0954, v0964(0x0), v0962
    0x96a0x0: v096a = ISZERO v0961
    0x96b0x0: v096b(0x972) = CONST 
    0x96e0x0: JUMPI v096b(0x972), v096a

    Begin block 0x96f0x0
    prev=[0x94f0x0], succ=[]
    =================================
    0x9710x0: RETURN v0954, v0962

    Begin block 0x9720x0
    prev=[0x94f0x0], succ=[]
    =================================
    0x9750x0: REVERT v0954, v0962

    Begin block 0xf5f
    prev=[0xd2], succ=[]
    =================================
    0xf60: vf60(0x139) = CONST 
    0xf61: CALLPRIVATE vf60(0x139)

    Begin block 0x8b
    prev=[0x7f], succ=[0xf62, 0x96]
    =================================
    0x8c: v8c(0x37a440e6) = CONST 
    0x91: v91 = EQ v8c(0x37a440e6), v12
    0xf48: vf48(0xf62) = CONST 
    0xf49: JUMPI vf48(0xf62), v91

    Begin block 0xf62
    prev=[0x8b], succ=[]
    =================================
    0xf63: vf63(0x16a) = CONST 
    0xf64: CALLPRIVATE vf63(0x16a)

    Begin block 0x96
    prev=[0x8b], succ=[0xf65, 0xa1]
    =================================
    0x97: v97(0x4bde4b2e) = CONST 
    0x9c: v9c = EQ v97(0x4bde4b2e), v12
    0xf4a: vf4a(0xf65) = CONST 
    0xf4b: JUMPI vf4a(0xf65), v9c

    Begin block 0xf65
    prev=[0x96], succ=[]
    =================================
    0xf66: vf66(0x1a6) = CONST 
    0xf67: CALLPRIVATE vf66(0x1a6)

    Begin block 0xa1
    prev=[0x96], succ=[0xf68, 0xac]
    =================================
    0xa2: va2(0x5ced058e) = CONST 
    0xa7: va7 = EQ va2(0x5ced058e), v12
    0xf4c: vf4c(0xf68) = CONST 
    0xf4d: JUMPI vf4c(0xf68), va7

    Begin block 0xf68
    prev=[0xa1], succ=[]
    =================================
    0xf69: vf69(0x1bb) = CONST 
    0xf6a: CALLPRIVATE vf69(0x1bb)

    Begin block 0xac
    prev=[0xa1], succ=[0xb7, 0xf6b]
    =================================
    0xad: vad(0x6805b84b) = CONST 
    0xb2: vb2 = EQ vad(0x6805b84b), v12
    0xf4e: vf4e(0xf6b) = CONST 
    0xf4f: JUMPI vf4e(0xf6b), vb2

    Begin block 0xb7
    prev=[0xac], succ=[0xf0]
    =================================
    0xb7: vb7(0xf0) = CONST 
    0xba: JUMP vb7(0xf0)

    Begin block 0xf6b
    prev=[0xac], succ=[]
    =================================
    0xf6c: vf6c(0x1e5) = CONST 
    0xf6d: CALLPRIVATE vf6c(0x1e5)

    Begin block 0x1e
    prev=[0xd], succ=[0x59, 0x29]
    =================================
    0x1f: v1f(0xaaf10f42) = CONST 
    0x24: v24 = GT v1f(0xaaf10f42), v12
    0x25: v25(0x59) = CONST 
    0x28: JUMPI v25(0x59), v24

    Begin block 0x59
    prev=[0x1e], succ=[0xf6e, 0x65]
    =================================
    0x5b: v5b(0x82c947b7) = CONST 
    0x60: v60 = EQ v5b(0x82c947b7), v12
    0xf42: vf42(0xf6e) = CONST 
    0xf43: JUMPI vf42(0xf6e), v60

    Begin block 0xf6e
    prev=[0x59], succ=[]
    =================================
    0xf6f: vf6f(0x20e) = CONST 
    0xf70: CALLPRIVATE vf6f(0x20e)

    Begin block 0x65
    prev=[0x59], succ=[0xf71, 0x70]
    =================================
    0x66: v66(0x8f4edfe2) = CONST 
    0x6b: v6b = EQ v66(0x8f4edfe2), v12
    0xf44: vf44(0xf71) = CONST 
    0xf45: JUMPI vf44(0xf71), v6b

    Begin block 0xf71
    prev=[0x65], succ=[]
    =================================
    0xf72: vf72(0x241) = CONST 
    0xf73: CALLPRIVATE vf72(0x241)

    Begin block 0x70
    prev=[0x65], succ=[0x7b, 0xf74]
    =================================
    0x71: v71(0x9d84ae69) = CONST 
    0x76: v76 = EQ v71(0x9d84ae69), v12
    0xf46: vf46(0xf74) = CONST 
    0xf47: JUMPI vf46(0xf74), v76

    Begin block 0x7b
    prev=[0x70], succ=[0xf0]
    =================================
    0x7b: v7b(0xf0) = CONST 
    0x7e: JUMP v7b(0xf0)

    Begin block 0xf74
    prev=[0x70], succ=[]
    =================================
    0xf75: vf75(0x274) = CONST 
    0xf76: CALLPRIVATE vf75(0x274)

    Begin block 0x29
    prev=[0x1e], succ=[0xf77, 0x34]
    =================================
    0x2a: v2a(0xaaf10f42) = CONST 
    0x2f: v2f = EQ v2a(0xaaf10f42), v12
    0xf3a: vf3a(0xf77) = CONST 
    0xf3b: JUMPI vf3a(0xf77), v2f

    Begin block 0xf77
    prev=[0x29], succ=[]
    =================================
    0xf78: vf78(0x29e) = CONST 
    0xf79: CALLPRIVATE vf78(0x29e)

    Begin block 0x34
    prev=[0x29], succ=[0x3f, 0xf7a]
    =================================
    0x35: v35(0xbb15ac8e) = CONST 
    0x3a: v3a = EQ v35(0xbb15ac8e), v12
    0xf3c: vf3c(0xf7a) = CONST 
    0xf3d: JUMPI vf3c(0xf7a), v3a

    Begin block 0x3f
    prev=[0x34], succ=[0xf7d, 0x4a]
    =================================
    0x40: v40(0xcaaee91c) = CONST 
    0x45: v45 = EQ v40(0xcaaee91c), v12
    0xf3e: vf3e(0xf7d) = CONST 
    0xf3f: JUMPI vf3e(0xf7d), v45

    Begin block 0xf7d
    prev=[0x3f], succ=[]
    =================================
    0xf7e: vf7e(0x2dd) = CONST 
    0xf7f: CALLPRIVATE vf7e(0x2dd)

    Begin block 0x4a
    prev=[0x3f], succ=[0x55, 0xf80]
    =================================
    0x4b: v4b(0xd784d426) = CONST 
    0x50: v50 = EQ v4b(0xd784d426), v12
    0xf40: vf40(0xf80) = CONST 
    0xf41: JUMPI vf40(0xf80), v50

    Begin block 0x55
    prev=[0x4a], succ=[0xf0]
    =================================
    0x55: v55(0xf0) = CONST 
    0x58: JUMP v55(0xf0)

    Begin block 0xf80
    prev=[0x4a], succ=[]
    =================================
    0xf81: vf81(0x310) = CONST 
    0xf82: CALLPRIVATE vf81(0x310)

    Begin block 0xf7a
    prev=[0x34], succ=[]
    =================================
    0xf7b: vf7b(0x2b3) = CONST 
    0xf7c: CALLPRIVATE vf7b(0x2b3)

    Begin block 0xe1
    prev=[0x0], succ=[0xf56, 0xf0]
    =================================
    0xe2: ve2 = CALLDATASIZE 
    0xe3: ve3(0xf0) = CONST 
    0xe6: JUMPI ve3(0xf0), ve2

    Begin block 0xf56
    prev=[0xe1], succ=[]
    =================================
    0xf56: vf56(0xf58) = CONST 
    0xf57: CALLPRIVATE vf56(0xf58)

}

function renouncePauzer()() public {
    Begin block 0x124
    prev=[], succ=[0x12c, 0x130]
    =================================
    0x125: v125 = CALLVALUE 
    0x127: v127 = ISZERO v125
    0x128: v128(0x130) = CONST 
    0x12b: JUMPI v128(0x130), v127

    Begin block 0x12c
    prev=[0x124], succ=[]
    =================================
    0x12c: v12c(0x0) = CONST 
    0x12f: REVERT v12c(0x0), v12c(0x0)

    Begin block 0x130
    prev=[0x124], succ=[0x493B0x130]
    =================================
    0x132: v132(0xadf) = CONST 
    0x135: v135(0x493) = CONST 
    0x138: JUMP v135(0x493), v132(0xadf)

    Begin block 0x493B0x130
    prev=[0x130], succ=[0x6fbB0x493B0x130]
    =================================
    0x494S0x130: v494V130(0x4d0) = CONST 
    0x497S0x130: v497V130(0x40) = CONST 
    0x499S0x130: v499V130 = MLOAD v497V130(0x40)
    0x49aS0x130: v49aV130(0x20) = CONST 
    0x49cS0x130: v49cV130 = ADD v49aV130(0x20), v499V130
    0x49fS0x130: v49fV130(0x14105556915497d4d313d5) = CONST 
    0x4abS0x130: v4abV130(0xaa) = CONST 
    0x4adS0x130: v4adV130(0x5041555a45525f534c4f54000000000000000000000000000000000000000000) = SHL v4abV130(0xaa), v49fV130(0x14105556915497d4d313d5)
    0x4afS0x130: MSTORE v49cV130, v4adV130(0x5041555a45525f534c4f54000000000000000000000000000000000000000000)
    0x4b1S0x130: v4b1V130(0xb) = CONST 
    0x4b3S0x130: v4b3V130 = ADD v4b1V130(0xb), v49cV130
    0x4b6S0x130: v4b6V130(0x40) = CONST 
    0x4b8S0x130: v4b8V130 = MLOAD v4b6V130(0x40)
    0x4b9S0x130: v4b9V130(0x20) = CONST 
    0x4bdS0x130: v4bdV130(0x2b) = SUB v4b3V130, v4b8V130
    0x4beS0x130: v4beV130(0xb) = SUB v4bdV130(0x2b), v4b9V130(0x20)
    0x4c0S0x130: MSTORE v4b8V130, v4beV130(0xb)
    0x4c2S0x130: v4c2V130(0x40) = CONST 
    0x4c4S0x130: MSTORE v4c2V130(0x40), v4b3V130
    0x4c6S0x130: v4c6V130(0xb) = MLOAD v4b8V130
    0x4c8S0x130: v4c8V130(0x20) = CONST 
    0x4caS0x130: v4caV130 = ADD v4c8V130(0x20), v4b8V130
    0x4cbS0x130: v4cbV130 = SHA3 v4caV130, v4c6V130(0xb)
    0x4ccS0x130: v4ccV130(0x6fb) = CONST 
    0x4cfS0x130: JUMP v4ccV130(0x6fb)

    Begin block 0x6fbB0x493B0x130
    prev=[0x493B0x130], succ=[0x5a1B0x6fbB0x493B0x130]
    =================================
    0x6fcS0x493S0x130: v6fcV493V130(0x0) = CONST 
    0x6feS0x493S0x130: v6feV493V130(0x70e) = CONST 
    0x701S0x493S0x130: v701V493V130(0x709) = CONST 
    0x705S0x493S0x130: v705V493V130(0x5a1) = CONST 
    0x708S0x493S0x130: JUMP v705V493V130(0x5a1)

    Begin block 0x5a1B0x6fbB0x493B0x130
    prev=[0x6fbB0x493B0x130], succ=[0x7090x6fbB0x493B0x130]
    =================================
    0x5a2S0x6fbS0x493S0x130: v5a2V6fbV493V130 = SLOAD v4cbV130
    0x5a4S0x6fbS0x493S0x130: JUMP v701V493V130(0x709)

    Begin block 0x7090x6fbB0x493B0x130
    prev=[0x5a1B0x6fbB0x493B0x130], succ=[0xe66B0x7090x6fbB0x493B0x130]
    =================================
    0x70a0x6fbS0x493S0x130: v6fb70aV493V130(0xe66) = CONST 
    0x70d0x6fbS0x493S0x130: JUMP v6fb70aV493V130(0xe66)

    Begin block 0xe66B0x7090x6fbB0x493B0x130
    prev=[0x7090x6fbB0x493B0x130], succ=[0x70e0x6fbB0x493B0x130]
    =================================
    0xe68S0x7090x6fbS0x493S0x130: JUMP v6feV493V130(0x70e)

    Begin block 0x70e0x6fbB0x493B0x130
    prev=[0xe66B0x7090x6fbB0x493B0x130], succ=[0x4d0B0x130]
    =================================
    0x7130x6fbS0x493S0x130: JUMP v494V130(0x4d0)

    Begin block 0x4d0B0x130
    prev=[0x70e0x6fbB0x493B0x130], succ=[0x4e9B0x130, 0x51fB0x130]
    =================================
    0x4d1S0x130: v4d1V130(0x1) = CONST 
    0x4d3S0x130: v4d3V130(0x1) = CONST 
    0x4d5S0x130: v4d5V130(0xa0) = CONST 
    0x4d7S0x130: v4d7V130(0x10000000000000000000000000000000000000000) = SHL v4d5V130(0xa0), v4d3V130(0x1)
    0x4d8S0x130: v4d8V130(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4d7V130(0x10000000000000000000000000000000000000000), v4d1V130(0x1)
    0x4d9S0x130: v4d9V130 = AND v4d8V130(0xffffffffffffffffffffffffffffffffffffffff), v5a2V6fbV493V130
    0x4daS0x130: v4daV130 = CALLER 
    0x4dbS0x130: v4dbV130(0x1) = CONST 
    0x4ddS0x130: v4ddV130(0x1) = CONST 
    0x4dfS0x130: v4dfV130(0xa0) = CONST 
    0x4e1S0x130: v4e1V130(0x10000000000000000000000000000000000000000) = SHL v4dfV130(0xa0), v4ddV130(0x1)
    0x4e2S0x130: v4e2V130(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4e1V130(0x10000000000000000000000000000000000000000), v4dbV130(0x1)
    0x4e3S0x130: v4e3V130 = AND v4e2V130(0xffffffffffffffffffffffffffffffffffffffff), v4daV130
    0x4e4S0x130: v4e4V130 = EQ v4e3V130, v4d9V130
    0x4e5S0x130: v4e5V130(0x51f) = CONST 
    0x4e8S0x130: JUMPI v4e5V130(0x51f), v4e4V130

    Begin block 0x4e9B0x130
    prev=[0x4d0B0x130], succ=[]
    =================================
    0x4e9S0x130: v4e9V130(0x40) = CONST 
    0x4ebS0x130: v4ebV130 = MLOAD v4e9V130(0x40)
    0x4ecS0x130: v4ecV130(0x461bcd) = CONST 
    0x4f0S0x130: v4f0V130(0xe5) = CONST 
    0x4f2S0x130: v4f2V130(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v4f0V130(0xe5), v4ecV130(0x461bcd)
    0x4f4S0x130: MSTORE v4ebV130, v4f2V130(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x4f5S0x130: v4f5V130(0x4) = CONST 
    0x4f7S0x130: v4f7V130 = ADD v4f5V130(0x4), v4ebV130
    0x4faS0x130: v4faV130(0x20) = CONST 
    0x4fcS0x130: v4fcV130 = ADD v4faV130(0x20), v4f7V130
    0x4ffS0x130: v4ffV130(0x20) = SUB v4fcV130, v4f7V130
    0x501S0x130: MSTORE v4f7V130, v4ffV130(0x20)
    0x502S0x130: v502V130(0x2f) = CONST 
    0x505S0x130: MSTORE v4fcV130, v502V130(0x2f)
    0x506S0x130: v506V130(0x20) = CONST 
    0x508S0x130: v508V130 = ADD v506V130(0x20), v4fcV130
    0x50aS0x130: v50aV130(0x9d7) = CONST 
    0x50dS0x130: v50dV130(0x2f) = CONST 
    0x510S0x130: CODECOPY v508V130, v50aV130(0x9d7), v50dV130(0x2f)
    0x511S0x130: v511V130(0x40) = CONST 
    0x513S0x130: v513V130 = ADD v511V130(0x40), v508V130
    0x517S0x130: v517V130(0x40) = CONST 
    0x519S0x130: v519V130 = MLOAD v517V130(0x40)
    0x51cS0x130: v51cV130(0x84) = SUB v513V130, v519V130
    0x51eS0x130: REVERT v519V130, v51cV130(0x84)

    Begin block 0x51fB0x130
    prev=[0x4d0B0x130], succ=[0x99bB0x51fB0x130]
    =================================
    0x520S0x130: v520V130(0xdb7) = CONST 
    0x523S0x130: v523V130(0x40) = CONST 
    0x525S0x130: v525V130 = MLOAD v523V130(0x40)
    0x526S0x130: v526V130(0x20) = CONST 
    0x528S0x130: v528V130 = ADD v526V130(0x20), v525V130
    0x52bS0x130: v52bV130(0x14105556915497d4d313d5) = CONST 
    0x537S0x130: v537V130(0xaa) = CONST 
    0x539S0x130: v539V130(0x5041555a45525f534c4f54000000000000000000000000000000000000000000) = SHL v537V130(0xaa), v52bV130(0x14105556915497d4d313d5)
    0x53bS0x130: MSTORE v528V130, v539V130(0x5041555a45525f534c4f54000000000000000000000000000000000000000000)
    0x53dS0x130: v53dV130(0xb) = CONST 
    0x53fS0x130: v53fV130 = ADD v53dV130(0xb), v528V130
    0x542S0x130: v542V130(0x40) = CONST 
    0x544S0x130: v544V130 = MLOAD v542V130(0x40)
    0x545S0x130: v545V130(0x20) = CONST 
    0x549S0x130: v549V130(0x2b) = SUB v53fV130, v544V130
    0x54aS0x130: v54aV130(0xb) = SUB v549V130(0x2b), v545V130(0x20)
    0x54cS0x130: MSTORE v544V130, v54aV130(0xb)
    0x54eS0x130: v54eV130(0x40) = CONST 
    0x550S0x130: MSTORE v54eV130(0x40), v53fV130
    0x552S0x130: v552V130(0xb) = MLOAD v544V130
    0x554S0x130: v554V130(0x20) = CONST 
    0x556S0x130: v556V130 = ADD v554V130(0x20), v544V130
    0x557S0x130: v557V130 = SHA3 v556V130, v552V130(0xb)
    0x558S0x130: v558V130(0x0) = CONST 
    0x55aS0x130: v55aV130(0x99b) = CONST 
    0x55dS0x130: JUMP v55aV130(0x99b), v558V130(0x0), v557V130, v520V130(0xdb7)

    Begin block 0x99bB0x51fB0x130
    prev=[0x51fB0x130], succ=[0x6260x99bB0x51fB0x130]
    =================================
    0x99cS0x51fS0x130: v99cV51fV130(0xf36) = CONST 
    0x9a0S0x51fS0x130: v9a0V51fV130(0x9a8) = CONST 
    0x9a4S0x51fS0x130: v9a4V51fV130(0x626) = CONST 
    0x9a7S0x51fS0x130: JUMP v9a4V51fV130(0x626)

    Begin block 0x6260x99bB0x51fB0x130
    prev=[0x99bB0x51fB0x130], succ=[0x9a80x99bB0x51fB0x130]
    =================================
    0x6270x99bS0x51fS0x130: v99b627V51fV130(0x1) = CONST 
    0x6290x99bS0x51fS0x130: v99b629V51fV130(0x1) = CONST 
    0x62b0x99bS0x51fS0x130: v99b62bV51fV130(0xa0) = CONST 
    0x62d0x99bS0x51fS0x130: v99b62dV51fV130(0x10000000000000000000000000000000000000000) = SHL v99b62bV51fV130(0xa0), v99b629V51fV130(0x1)
    0x62e0x99bS0x51fS0x130: v99b62eV51fV130(0xffffffffffffffffffffffffffffffffffffffff) = SUB v99b62dV51fV130(0x10000000000000000000000000000000000000000), v99b627V51fV130(0x1)
    0x62f0x99bS0x51fS0x130: v99b62fV51fV130(0x0) = AND v99b62eV51fV130(0xffffffffffffffffffffffffffffffffffffffff), v558V130(0x0)
    0x6310x99bS0x51fS0x130: JUMP v9a0V51fV130(0x9a8)

    Begin block 0x9a80x99bB0x51fB0x130
    prev=[0x6260x99bB0x51fB0x130], succ=[0xf36B0x51fB0x130]
    =================================
    0x9aa0x99bS0x51fS0x130: SSTORE v557V130, v99b62fV51fV130(0x0)
    0x9ab0x99bS0x51fS0x130: JUMP v99cV51fV130(0xf36)

    Begin block 0xf36B0x51fB0x130
    prev=[0x9a80x99bB0x51fB0x130], succ=[0xdb7B0x130]
    =================================
    0xf39S0x51fS0x130: JUMP v520V130(0xdb7)

    Begin block 0xdb7B0x130
    prev=[0xf36B0x51fB0x130], succ=[0xadf]
    =================================
    0xdb8S0x130: JUMP v132(0xadf)

    Begin block 0xadf
    prev=[0xdb7B0x130], succ=[]
    =================================
    0xae0: STOP 

}

function getProxyOwner()() public {
    Begin block 0x139
    prev=[], succ=[0x141, 0x145]
    =================================
    0x13a: v13a = CALLVALUE 
    0x13c: v13c = ISZERO v13a
    0x13d: v13d(0x145) = CONST 
    0x140: JUMPI v13d(0x145), v13c

    Begin block 0x141
    prev=[0x139], succ=[]
    =================================
    0x141: v141(0x0) = CONST 
    0x144: REVERT v141(0x0), v141(0x0)

    Begin block 0x145
    prev=[0x139], succ=[0x55eB0x145]
    =================================
    0x147: v147(0xb00) = CONST 
    0x14a: v14a(0x55e) = CONST 
    0x14d: JUMP v14a(0x55e)

    Begin block 0x55eB0x145
    prev=[0x145], succ=[0x6fbB0x55eB0x145]
    =================================
    0x55fS0x145: v55fV145(0x0) = CONST 
    0x561S0x145: v561V145(0xdd8) = CONST 
    0x564S0x145: v564V145(0x40) = CONST 
    0x566S0x145: v566V145 = MLOAD v564V145(0x40)
    0x567S0x145: v567V145(0x20) = CONST 
    0x569S0x145: v569V145 = ADD v567V145(0x20), v566V145
    0x56cS0x145: v56cV145(0x13d5d3915497d4d313d5) = CONST 
    0x577S0x145: v577V145(0xb2) = CONST 
    0x579S0x145: v579V145(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v577V145(0xb2), v56cV145(0x13d5d3915497d4d313d5)
    0x57bS0x145: MSTORE v569V145, v579V145(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x57dS0x145: v57dV145(0xa) = CONST 
    0x57fS0x145: v57fV145 = ADD v57dV145(0xa), v569V145
    0x582S0x145: v582V145(0x40) = CONST 
    0x584S0x145: v584V145 = MLOAD v582V145(0x40)
    0x585S0x145: v585V145(0x20) = CONST 
    0x589S0x145: v589V145(0x2a) = SUB v57fV145, v584V145
    0x58aS0x145: v58aV145(0xa) = SUB v589V145(0x2a), v585V145(0x20)
    0x58cS0x145: MSTORE v584V145, v58aV145(0xa)
    0x58eS0x145: v58eV145(0x40) = CONST 
    0x590S0x145: MSTORE v58eV145(0x40), v57fV145
    0x592S0x145: v592V145(0xa) = MLOAD v584V145
    0x594S0x145: v594V145(0x20) = CONST 
    0x596S0x145: v596V145 = ADD v594V145(0x20), v584V145
    0x597S0x145: v597V145 = SHA3 v596V145, v592V145(0xa)
    0x598S0x145: v598V145(0x6fb) = CONST 
    0x59bS0x145: JUMP v598V145(0x6fb)

    Begin block 0x6fbB0x55eB0x145
    prev=[0x55eB0x145], succ=[0x5a1B0x6fbB0x55eB0x145]
    =================================
    0x6fcS0x55eS0x145: v6fcV55eV145(0x0) = CONST 
    0x6feS0x55eS0x145: v6feV55eV145(0x70e) = CONST 
    0x701S0x55eS0x145: v701V55eV145(0x709) = CONST 
    0x705S0x55eS0x145: v705V55eV145(0x5a1) = CONST 
    0x708S0x55eS0x145: JUMP v705V55eV145(0x5a1)

    Begin block 0x5a1B0x6fbB0x55eB0x145
    prev=[0x6fbB0x55eB0x145], succ=[0x7090x6fbB0x55eB0x145]
    =================================
    0x5a2S0x6fbS0x55eS0x145: v5a2V6fbV55eV145 = SLOAD v597V145
    0x5a4S0x6fbS0x55eS0x145: JUMP v701V55eV145(0x709)

    Begin block 0x7090x6fbB0x55eB0x145
    prev=[0x5a1B0x6fbB0x55eB0x145], succ=[0xe66B0x7090x6fbB0x55eB0x145]
    =================================
    0x70a0x6fbS0x55eS0x145: v6fb70aV55eV145(0xe66) = CONST 
    0x70d0x6fbS0x55eS0x145: JUMP v6fb70aV55eV145(0xe66)

    Begin block 0xe66B0x7090x6fbB0x55eB0x145
    prev=[0x7090x6fbB0x55eB0x145], succ=[0x70e0x6fbB0x55eB0x145]
    =================================
    0xe68S0x7090x6fbS0x55eS0x145: JUMP v6feV55eV145(0x70e)

    Begin block 0x70e0x6fbB0x55eB0x145
    prev=[0xe66B0x7090x6fbB0x55eB0x145], succ=[0xdd8B0x145]
    =================================
    0x7130x6fbS0x55eS0x145: JUMP v561V145(0xdd8)

    Begin block 0xdd8B0x145
    prev=[0x70e0x6fbB0x55eB0x145], succ=[0xb00]
    =================================
    0xddcS0x145: JUMP v147(0xb00)

    Begin block 0xb00
    prev=[0xdd8B0x145], succ=[]
    =================================
    0xb01: vb01(0x40) = CONST 
    0xb04: vb04 = MLOAD vb01(0x40)
    0xb05: vb05(0x1) = CONST 
    0xb07: vb07(0x1) = CONST 
    0xb09: vb09(0xa0) = CONST 
    0xb0b: vb0b(0x10000000000000000000000000000000000000000) = SHL vb09(0xa0), vb07(0x1)
    0xb0c: vb0c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb0b(0x10000000000000000000000000000000000000000), vb05(0x1)
    0xb0f: vb0f = AND v5a2V6fbV55eV145, vb0c(0xffffffffffffffffffffffffffffffffffffffff)
    0xb11: MSTORE vb04, vb0f
    0xb12: vb12 = MLOAD vb01(0x40)
    0xb16: vb16(0x0) = SUB vb04, vb12
    0xb17: vb17(0x20) = CONST 
    0xb19: vb19(0x20) = ADD vb17(0x20), vb16(0x0)
    0xb1b: RETURN vb12, vb19(0x20)

}

function storageRead(bytes32)() public {
    Begin block 0x16a
    prev=[], succ=[0x172, 0x176]
    =================================
    0x16b: v16b = CALLVALUE 
    0x16d: v16d = ISZERO v16b
    0x16e: v16e(0x176) = CONST 
    0x171: JUMPI v16e(0x176), v16d

    Begin block 0x172
    prev=[0x16a], succ=[]
    =================================
    0x172: v172(0x0) = CONST 
    0x175: REVERT v172(0x0), v172(0x0)

    Begin block 0x176
    prev=[0x16a], succ=[0x189, 0x18d]
    =================================
    0x178: v178(0xb3b) = CONST 
    0x17b: v17b(0x4) = CONST 
    0x17e: v17e = CALLDATASIZE 
    0x17f: v17f = SUB v17e, v17b(0x4)
    0x180: v180(0x20) = CONST 
    0x183: v183 = LT v17f, v180(0x20)
    0x184: v184 = ISZERO v183
    0x185: v185(0x18d) = CONST 
    0x188: JUMPI v185(0x18d), v184

    Begin block 0x189
    prev=[0x176], succ=[]
    =================================
    0x189: v189(0x0) = CONST 
    0x18c: REVERT v189(0x0), v189(0x0)

    Begin block 0x18d
    prev=[0x176], succ=[0x5a10x16a]
    =================================
    0x18f: v18f = CALLDATALOAD v17b(0x4)
    0x190: v190(0x5a1) = CONST 
    0x193: JUMP v190(0x5a1)

    Begin block 0x5a10x16a
    prev=[0x18d], succ=[0xb3b]
    =================================
    0x5a20x16a: v16a5a2 = SLOAD v18f
    0x5a40x16a: JUMP v178(0xb3b)

    Begin block 0xb3b
    prev=[0x5a10x16a], succ=[]
    =================================
    0xb3c: vb3c(0x40) = CONST 
    0xb3f: vb3f = MLOAD vb3c(0x40)
    0xb42: MSTORE vb3f, v16a5a2
    0xb43: vb43 = MLOAD vb3c(0x40)
    0xb47: vb47(0x0) = SUB vb3f, vb43
    0xb48: vb48(0x20) = CONST 
    0xb4a: vb4a(0x20) = ADD vb48(0x20), vb47(0x0)
    0xb4c: RETURN vb43, vb4a(0x20)

}

function getPauzer()() public {
    Begin block 0x1a6
    prev=[], succ=[0x1ae, 0x1b2]
    =================================
    0x1a7: v1a7 = CALLVALUE 
    0x1a9: v1a9 = ISZERO v1a7
    0x1aa: v1aa(0x1b2) = CONST 
    0x1ad: JUMPI v1aa(0x1b2), v1a9

    Begin block 0x1ae
    prev=[0x1a6], succ=[]
    =================================
    0x1ae: v1ae(0x0) = CONST 
    0x1b1: REVERT v1ae(0x0), v1ae(0x0)

    Begin block 0x1b2
    prev=[0x1a6], succ=[0x5a5B0x1b2]
    =================================
    0x1b4: v1b4(0xb6c) = CONST 
    0x1b7: v1b7(0x5a5) = CONST 
    0x1ba: JUMP v1b7(0x5a5)

    Begin block 0x5a5B0x1b2
    prev=[0x1b2], succ=[0x6fbB0x5a5B0x1b2]
    =================================
    0x5a6S0x1b2: v5a6V1b2(0x0) = CONST 
    0x5a8S0x1b2: v5a8V1b2(0xdfc) = CONST 
    0x5abS0x1b2: v5abV1b2(0x40) = CONST 
    0x5adS0x1b2: v5adV1b2 = MLOAD v5abV1b2(0x40)
    0x5aeS0x1b2: v5aeV1b2(0x20) = CONST 
    0x5b0S0x1b2: v5b0V1b2 = ADD v5aeV1b2(0x20), v5adV1b2
    0x5b3S0x1b2: v5b3V1b2(0x14105556915497d4d313d5) = CONST 
    0x5bfS0x1b2: v5bfV1b2(0xaa) = CONST 
    0x5c1S0x1b2: v5c1V1b2(0x5041555a45525f534c4f54000000000000000000000000000000000000000000) = SHL v5bfV1b2(0xaa), v5b3V1b2(0x14105556915497d4d313d5)
    0x5c3S0x1b2: MSTORE v5b0V1b2, v5c1V1b2(0x5041555a45525f534c4f54000000000000000000000000000000000000000000)
    0x5c5S0x1b2: v5c5V1b2(0xb) = CONST 
    0x5c7S0x1b2: v5c7V1b2 = ADD v5c5V1b2(0xb), v5b0V1b2
    0x5caS0x1b2: v5caV1b2(0x40) = CONST 
    0x5ccS0x1b2: v5ccV1b2 = MLOAD v5caV1b2(0x40)
    0x5cdS0x1b2: v5cdV1b2(0x20) = CONST 
    0x5d1S0x1b2: v5d1V1b2(0x2b) = SUB v5c7V1b2, v5ccV1b2
    0x5d2S0x1b2: v5d2V1b2(0xb) = SUB v5d1V1b2(0x2b), v5cdV1b2(0x20)
    0x5d4S0x1b2: MSTORE v5ccV1b2, v5d2V1b2(0xb)
    0x5d6S0x1b2: v5d6V1b2(0x40) = CONST 
    0x5d8S0x1b2: MSTORE v5d6V1b2(0x40), v5c7V1b2
    0x5daS0x1b2: v5daV1b2(0xb) = MLOAD v5ccV1b2
    0x5dcS0x1b2: v5dcV1b2(0x20) = CONST 
    0x5deS0x1b2: v5deV1b2 = ADD v5dcV1b2(0x20), v5ccV1b2
    0x5dfS0x1b2: v5dfV1b2 = SHA3 v5deV1b2, v5daV1b2(0xb)
    0x5e0S0x1b2: v5e0V1b2(0x6fb) = CONST 
    0x5e3S0x1b2: JUMP v5e0V1b2(0x6fb)

    Begin block 0x6fbB0x5a5B0x1b2
    prev=[0x5a5B0x1b2], succ=[0x5a1B0x6fbB0x5a5B0x1b2]
    =================================
    0x6fcS0x5a5S0x1b2: v6fcV5a5V1b2(0x0) = CONST 
    0x6feS0x5a5S0x1b2: v6feV5a5V1b2(0x70e) = CONST 
    0x701S0x5a5S0x1b2: v701V5a5V1b2(0x709) = CONST 
    0x705S0x5a5S0x1b2: v705V5a5V1b2(0x5a1) = CONST 
    0x708S0x5a5S0x1b2: JUMP v705V5a5V1b2(0x5a1)

    Begin block 0x5a1B0x6fbB0x5a5B0x1b2
    prev=[0x6fbB0x5a5B0x1b2], succ=[0x7090x6fbB0x5a5B0x1b2]
    =================================
    0x5a2S0x6fbS0x5a5S0x1b2: v5a2V6fbV5a5V1b2 = SLOAD v5dfV1b2
    0x5a4S0x6fbS0x5a5S0x1b2: JUMP v701V5a5V1b2(0x709)

    Begin block 0x7090x6fbB0x5a5B0x1b2
    prev=[0x5a1B0x6fbB0x5a5B0x1b2], succ=[0xe66B0x7090x6fbB0x5a5B0x1b2]
    =================================
    0x70a0x6fbS0x5a5S0x1b2: v6fb70aV5a5V1b2(0xe66) = CONST 
    0x70d0x6fbS0x5a5S0x1b2: JUMP v6fb70aV5a5V1b2(0xe66)

    Begin block 0xe66B0x7090x6fbB0x5a5B0x1b2
    prev=[0x7090x6fbB0x5a5B0x1b2], succ=[0x70e0x6fbB0x5a5B0x1b2]
    =================================
    0xe68S0x7090x6fbS0x5a5S0x1b2: JUMP v6feV5a5V1b2(0x70e)

    Begin block 0x70e0x6fbB0x5a5B0x1b2
    prev=[0xe66B0x7090x6fbB0x5a5B0x1b2], succ=[0xdfcB0x1b2]
    =================================
    0x7130x6fbS0x5a5S0x1b2: JUMP v5a8V1b2(0xdfc)

    Begin block 0xdfcB0x1b2
    prev=[0x70e0x6fbB0x5a5B0x1b2], succ=[0xb6c]
    =================================
    0xe00S0x1b2: JUMP v1b4(0xb6c)

    Begin block 0xb6c
    prev=[0xdfcB0x1b2], succ=[]
    =================================
    0xb6d: vb6d(0x40) = CONST 
    0xb70: vb70 = MLOAD vb6d(0x40)
    0xb71: vb71(0x1) = CONST 
    0xb73: vb73(0x1) = CONST 
    0xb75: vb75(0xa0) = CONST 
    0xb77: vb77(0x10000000000000000000000000000000000000000) = SHL vb75(0xa0), vb73(0x1)
    0xb78: vb78(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb77(0x10000000000000000000000000000000000000000), vb71(0x1)
    0xb7b: vb7b = AND v5a2V6fbV5a5V1b2, vb78(0xffffffffffffffffffffffffffffffffffffffff)
    0xb7d: MSTORE vb70, vb7b
    0xb7e: vb7e = MLOAD vb6d(0x40)
    0xb82: vb82(0x0) = SUB vb70, vb7e
    0xb83: vb83(0x20) = CONST 
    0xb85: vb85(0x20) = ADD vb83(0x20), vb82(0x0)
    0xb87: RETURN vb7e, vb85(0x20)

}

function bytes32ToAddress(bytes32)() public {
    Begin block 0x1bb
    prev=[], succ=[0x1c3, 0x1c7]
    =================================
    0x1bc: v1bc = CALLVALUE 
    0x1be: v1be = ISZERO v1bc
    0x1bf: v1bf(0x1c7) = CONST 
    0x1c2: JUMPI v1bf(0x1c7), v1be

    Begin block 0x1c3
    prev=[0x1bb], succ=[]
    =================================
    0x1c3: v1c3(0x0) = CONST 
    0x1c6: REVERT v1c3(0x0), v1c3(0x0)

    Begin block 0x1c7
    prev=[0x1bb], succ=[0x1da, 0x1de]
    =================================
    0x1c9: v1c9(0xba7) = CONST 
    0x1cc: v1cc(0x4) = CONST 
    0x1cf: v1cf = CALLDATASIZE 
    0x1d0: v1d0 = SUB v1cf, v1cc(0x4)
    0x1d1: v1d1(0x20) = CONST 
    0x1d4: v1d4 = LT v1d0, v1d1(0x20)
    0x1d5: v1d5 = ISZERO v1d4
    0x1d6: v1d6(0x1de) = CONST 
    0x1d9: JUMPI v1d6(0x1de), v1d5

    Begin block 0x1da
    prev=[0x1c7], succ=[]
    =================================
    0x1da: v1da(0x0) = CONST 
    0x1dd: REVERT v1da(0x0), v1da(0x0)

    Begin block 0x1de
    prev=[0x1c7], succ=[0xbe2]
    =================================
    0x1e0: v1e0 = CALLDATALOAD v1cc(0x4)
    0x1e1: v1e1(0xbe2) = CONST 
    0x1e4: JUMP v1e1(0xbe2)

    Begin block 0xbe2
    prev=[0x1de], succ=[0xba7]
    =================================
    0xbe4: JUMP v1c9(0xba7)

    Begin block 0xba7
    prev=[0xbe2], succ=[]
    =================================
    0xba8: vba8(0x40) = CONST 
    0xbab: vbab = MLOAD vba8(0x40)
    0xbac: vbac(0x1) = CONST 
    0xbae: vbae(0x1) = CONST 
    0xbb0: vbb0(0xa0) = CONST 
    0xbb2: vbb2(0x10000000000000000000000000000000000000000) = SHL vbb0(0xa0), vbae(0x1)
    0xbb3: vbb3(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbb2(0x10000000000000000000000000000000000000000), vbac(0x1)
    0xbb6: vbb6 = AND v1e0, vbb3(0xffffffffffffffffffffffffffffffffffffffff)
    0xbb8: MSTORE vbab, vbb6
    0xbb9: vbb9 = MLOAD vba8(0x40)
    0xbbd: vbbd(0x0) = SUB vbab, vbb9
    0xbbe: vbbe(0x20) = CONST 
    0xbc0: vbc0(0x20) = ADD vbbe(0x20), vbbd(0x0)
    0xbc2: RETURN vbb9, vbc0(0x20)

}

function getPaused()() public {
    Begin block 0x1e5
    prev=[], succ=[0x1ed, 0x1f1]
    =================================
    0x1e6: v1e6 = CALLVALUE 
    0x1e8: v1e8 = ISZERO v1e6
    0x1e9: v1e9(0x1f1) = CONST 
    0x1ec: JUMPI v1e9(0x1f1), v1e8

    Begin block 0x1ed
    prev=[0x1e5], succ=[]
    =================================
    0x1ed: v1ed(0x0) = CONST 
    0x1f0: REVERT v1ed(0x0), v1ed(0x0)

    Begin block 0x1f1
    prev=[0x1e5], succ=[0x5e7B0x1f1]
    =================================
    0x1f3: v1f3(0xc04) = CONST 
    0x1f6: v1f6(0x5e7) = CONST 
    0x1f9: JUMP v1f6(0x5e7)

    Begin block 0x5e7B0x1f1
    prev=[0x1f1], succ=[0x75bB0x5e7B0x1f1]
    =================================
    0x5e8S0x1f1: v5e8V1f1(0x0) = CONST 
    0x5eaS0x1f1: v5eaV1f1(0xe20) = CONST 
    0x5edS0x1f1: v5edV1f1(0x40) = CONST 
    0x5efS0x1f1: v5efV1f1 = MLOAD v5edV1f1(0x40)
    0x5f0S0x1f1: v5f0V1f1(0x20) = CONST 
    0x5f2S0x1f1: v5f2V1f1 = ADD v5f0V1f1(0x20), v5efV1f1
    0x5f5S0x1f1: v5f5V1f1(0x14105554d15117d4d313d5) = CONST 
    0x601S0x1f1: v601V1f1(0xaa) = CONST 
    0x603S0x1f1: v603V1f1(0x5041555345445f534c4f54000000000000000000000000000000000000000000) = SHL v601V1f1(0xaa), v5f5V1f1(0x14105554d15117d4d313d5)
    0x605S0x1f1: MSTORE v5f2V1f1, v603V1f1(0x5041555345445f534c4f54000000000000000000000000000000000000000000)
    0x607S0x1f1: v607V1f1(0xb) = CONST 
    0x609S0x1f1: v609V1f1 = ADD v607V1f1(0xb), v5f2V1f1
    0x60cS0x1f1: v60cV1f1(0x40) = CONST 
    0x60eS0x1f1: v60eV1f1 = MLOAD v60cV1f1(0x40)
    0x60fS0x1f1: v60fV1f1(0x20) = CONST 
    0x613S0x1f1: v613V1f1(0x2b) = SUB v609V1f1, v60eV1f1
    0x614S0x1f1: v614V1f1(0xb) = SUB v613V1f1(0x2b), v60fV1f1(0x20)
    0x616S0x1f1: MSTORE v60eV1f1, v614V1f1(0xb)
    0x618S0x1f1: v618V1f1(0x40) = CONST 
    0x61aS0x1f1: MSTORE v618V1f1(0x40), v609V1f1
    0x61cS0x1f1: v61cV1f1(0xb) = MLOAD v60eV1f1
    0x61eS0x1f1: v61eV1f1(0x20) = CONST 
    0x620S0x1f1: v620V1f1 = ADD v61eV1f1(0x20), v60eV1f1
    0x621S0x1f1: v621V1f1 = SHA3 v620V1f1, v61cV1f1(0xb)
    0x622S0x1f1: v622V1f1(0x75b) = CONST 
    0x625S0x1f1: JUMP v622V1f1(0x75b)

    Begin block 0x75bB0x5e7B0x1f1
    prev=[0x5e7B0x1f1], succ=[0x5a1B0x75bB0x5e7B0x1f1]
    =================================
    0x75cS0x5e7S0x1f1: v75cV5e7V1f1(0x0) = CONST 
    0x75eS0x5e7S0x1f1: v75eV5e7V1f1(0x1) = CONST 
    0x760S0x5e7S0x1f1: v760V5e7V1f1(0x768) = CONST 
    0x764S0x5e7S0x1f1: v764V5e7V1f1(0x5a1) = CONST 
    0x767S0x5e7S0x1f1: JUMP v764V5e7V1f1(0x5a1)

    Begin block 0x5a1B0x75bB0x5e7B0x1f1
    prev=[0x75bB0x5e7B0x1f1], succ=[0x7680x75bB0x5e7B0x1f1]
    =================================
    0x5a2S0x75bS0x5e7S0x1f1: v5a2V75bV5e7V1f1 = SLOAD v621V1f1
    0x5a4S0x75bS0x5e7S0x1f1: JUMP v760V5e7V1f1(0x768)

    Begin block 0x7680x75bB0x5e7B0x1f1
    prev=[0x5a1B0x75bB0x5e7B0x1f1], succ=[0xe20B0x1f1]
    =================================
    0x7690x75bS0x5e7S0x1f1: v75b769V5e7V1f1 = EQ v5a2V75bV5e7V1f1, v75eV5e7V1f1(0x1)
    0x76e0x75bS0x5e7S0x1f1: JUMP v5eaV1f1(0xe20)

    Begin block 0xe20B0x1f1
    prev=[0x7680x75bB0x5e7B0x1f1], succ=[0xc04]
    =================================
    0xe24S0x1f1: JUMP v1f3(0xc04)

    Begin block 0xc04
    prev=[0xe20B0x1f1], succ=[]
    =================================
    0xc05: vc05(0x40) = CONST 
    0xc08: vc08 = MLOAD vc05(0x40)
    0xc0a: vc0a = ISZERO v75b769V5e7V1f1
    0xc0b: vc0b = ISZERO vc0a
    0xc0d: MSTORE vc08, vc0b
    0xc0e: vc0e = MLOAD vc05(0x40)
    0xc12: vc12(0x0) = SUB vc08, vc0e
    0xc13: vc13(0x20) = CONST 
    0xc15: vc15(0x20) = ADD vc13(0x20), vc12(0x0)
    0xc17: RETURN vc0e, vc15(0x20)

}

function addressToBytes32(address)() public {
    Begin block 0x20e
    prev=[], succ=[0x216, 0x21a]
    =================================
    0x20f: v20f = CALLVALUE 
    0x211: v211 = ISZERO v20f
    0x212: v212(0x21a) = CONST 
    0x215: JUMPI v212(0x21a), v211

    Begin block 0x216
    prev=[0x20e], succ=[]
    =================================
    0x216: v216(0x0) = CONST 
    0x219: REVERT v216(0x0), v216(0x0)

    Begin block 0x21a
    prev=[0x20e], succ=[0x22d, 0x231]
    =================================
    0x21c: v21c(0xc37) = CONST 
    0x21f: v21f(0x4) = CONST 
    0x222: v222 = CALLDATASIZE 
    0x223: v223 = SUB v222, v21f(0x4)
    0x224: v224(0x20) = CONST 
    0x227: v227 = LT v223, v224(0x20)
    0x228: v228 = ISZERO v227
    0x229: v229(0x231) = CONST 
    0x22c: JUMPI v229(0x231), v228

    Begin block 0x22d
    prev=[0x21a], succ=[]
    =================================
    0x22d: v22d(0x0) = CONST 
    0x230: REVERT v22d(0x0), v22d(0x0)

    Begin block 0x231
    prev=[0x21a], succ=[0x6260x20e]
    =================================
    0x233: v233 = CALLDATALOAD v21f(0x4)
    0x234: v234(0x1) = CONST 
    0x236: v236(0x1) = CONST 
    0x238: v238(0xa0) = CONST 
    0x23a: v23a(0x10000000000000000000000000000000000000000) = SHL v238(0xa0), v236(0x1)
    0x23b: v23b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v23a(0x10000000000000000000000000000000000000000), v234(0x1)
    0x23c: v23c = AND v23b(0xffffffffffffffffffffffffffffffffffffffff), v233
    0x23d: v23d(0x626) = CONST 
    0x240: JUMP v23d(0x626)

    Begin block 0x6260x20e
    prev=[0x231], succ=[0xc37]
    =================================
    0x6270x20e: v20e627(0x1) = CONST 
    0x6290x20e: v20e629(0x1) = CONST 
    0x62b0x20e: v20e62b(0xa0) = CONST 
    0x62d0x20e: v20e62d(0x10000000000000000000000000000000000000000) = SHL v20e62b(0xa0), v20e629(0x1)
    0x62e0x20e: v20e62e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v20e62d(0x10000000000000000000000000000000000000000), v20e627(0x1)
    0x62f0x20e: v20e62f = AND v20e62e(0xffffffffffffffffffffffffffffffffffffffff), v23c
    0x6310x20e: JUMP v21c(0xc37)

    Begin block 0xc37
    prev=[0x6260x20e], succ=[]
    =================================
    0xc38: vc38(0x40) = CONST 
    0xc3b: vc3b = MLOAD vc38(0x40)
    0xc3e: MSTORE vc3b, v20e62f
    0xc3f: vc3f = MLOAD vc38(0x40)
    0xc43: vc43(0x0) = SUB vc3b, vc3f
    0xc44: vc44(0x20) = CONST 
    0xc46: vc46(0x20) = ADD vc44(0x20), vc43(0x0)
    0xc48: RETURN vc3f, vc46(0x20)

}

function setPauzer(address)() public {
    Begin block 0x241
    prev=[], succ=[0x249, 0x24d]
    =================================
    0x242: v242 = CALLVALUE 
    0x244: v244 = ISZERO v242
    0x245: v245(0x24d) = CONST 
    0x248: JUMPI v245(0x24d), v244

    Begin block 0x249
    prev=[0x241], succ=[]
    =================================
    0x249: v249(0x0) = CONST 
    0x24c: REVERT v249(0x0), v249(0x0)

    Begin block 0x24d
    prev=[0x241], succ=[0x260, 0x264]
    =================================
    0x24f: v24f(0xc68) = CONST 
    0x252: v252(0x4) = CONST 
    0x255: v255 = CALLDATASIZE 
    0x256: v256 = SUB v255, v252(0x4)
    0x257: v257(0x20) = CONST 
    0x25a: v25a = LT v256, v257(0x20)
    0x25b: v25b = ISZERO v25a
    0x25c: v25c(0x264) = CONST 
    0x25f: JUMPI v25c(0x264), v25b

    Begin block 0x260
    prev=[0x24d], succ=[]
    =================================
    0x260: v260(0x0) = CONST 
    0x263: REVERT v260(0x0), v260(0x0)

    Begin block 0x264
    prev=[0x24d], succ=[0x632]
    =================================
    0x266: v266 = CALLDATALOAD v252(0x4)
    0x267: v267(0x1) = CONST 
    0x269: v269(0x1) = CONST 
    0x26b: v26b(0xa0) = CONST 
    0x26d: v26d(0x10000000000000000000000000000000000000000) = SHL v26b(0xa0), v269(0x1)
    0x26e: v26e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26d(0x10000000000000000000000000000000000000000), v267(0x1)
    0x26f: v26f = AND v26e(0xffffffffffffffffffffffffffffffffffffffff), v266
    0x270: v270(0x632) = CONST 
    0x273: JUMP v270(0x632)

    Begin block 0x632
    prev=[0x264], succ=[0x6fbB0x632]
    =================================
    0x633: v633(0x66e) = CONST 
    0x636: v636(0x40) = CONST 
    0x638: v638 = MLOAD v636(0x40)
    0x639: v639(0x20) = CONST 
    0x63b: v63b = ADD v639(0x20), v638
    0x63e: v63e(0x13d5d3915497d4d313d5) = CONST 
    0x649: v649(0xb2) = CONST 
    0x64b: v64b(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v649(0xb2), v63e(0x13d5d3915497d4d313d5)
    0x64d: MSTORE v63b, v64b(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x64f: v64f(0xa) = CONST 
    0x651: v651 = ADD v64f(0xa), v63b
    0x654: v654(0x40) = CONST 
    0x656: v656 = MLOAD v654(0x40)
    0x657: v657(0x20) = CONST 
    0x65b: v65b(0x2a) = SUB v651, v656
    0x65c: v65c(0xa) = SUB v65b(0x2a), v657(0x20)
    0x65e: MSTORE v656, v65c(0xa)
    0x660: v660(0x40) = CONST 
    0x662: MSTORE v660(0x40), v651
    0x664: v664(0xa) = MLOAD v656
    0x666: v666(0x20) = CONST 
    0x668: v668 = ADD v666(0x20), v656
    0x669: v669 = SHA3 v668, v664(0xa)
    0x66a: v66a(0x6fb) = CONST 
    0x66d: JUMP v66a(0x6fb)

    Begin block 0x6fbB0x632
    prev=[0x632], succ=[0x5a1B0x6fbB0x632]
    =================================
    0x6fcS0x632: v6fcV632(0x0) = CONST 
    0x6feS0x632: v6feV632(0x70e) = CONST 
    0x701S0x632: v701V632(0x709) = CONST 
    0x705S0x632: v705V632(0x5a1) = CONST 
    0x708S0x632: JUMP v705V632(0x5a1)

    Begin block 0x5a1B0x6fbB0x632
    prev=[0x6fbB0x632], succ=[0x7090x6fbB0x632]
    =================================
    0x5a2S0x6fbS0x632: v5a2V6fbV632 = SLOAD v669
    0x5a4S0x6fbS0x632: JUMP v701V632(0x709)

    Begin block 0x7090x6fbB0x632
    prev=[0x5a1B0x6fbB0x632], succ=[0xe66B0x7090x6fbB0x632]
    =================================
    0x70a0x6fbS0x632: v6fb70aV632(0xe66) = CONST 
    0x70d0x6fbS0x632: JUMP v6fb70aV632(0xe66)

    Begin block 0xe66B0x7090x6fbB0x632
    prev=[0x7090x6fbB0x632], succ=[0x70e0x6fbB0x632]
    =================================
    0xe68S0x7090x6fbS0x632: JUMP v6feV632(0x70e)

    Begin block 0x70e0x6fbB0x632
    prev=[0xe66B0x7090x6fbB0x632], succ=[0x66e]
    =================================
    0x7130x6fbS0x632: JUMP v633(0x66e)

    Begin block 0x66e
    prev=[0x70e0x6fbB0x632], succ=[0x687, 0x6bd]
    =================================
    0x66f: v66f(0x1) = CONST 
    0x671: v671(0x1) = CONST 
    0x673: v673(0xa0) = CONST 
    0x675: v675(0x10000000000000000000000000000000000000000) = SHL v673(0xa0), v671(0x1)
    0x676: v676(0xffffffffffffffffffffffffffffffffffffffff) = SUB v675(0x10000000000000000000000000000000000000000), v66f(0x1)
    0x677: v677 = AND v676(0xffffffffffffffffffffffffffffffffffffffff), v5a2V6fbV632
    0x678: v678 = CALLER 
    0x679: v679(0x1) = CONST 
    0x67b: v67b(0x1) = CONST 
    0x67d: v67d(0xa0) = CONST 
    0x67f: v67f(0x10000000000000000000000000000000000000000) = SHL v67d(0xa0), v67b(0x1)
    0x680: v680(0xffffffffffffffffffffffffffffffffffffffff) = SUB v67f(0x10000000000000000000000000000000000000000), v679(0x1)
    0x681: v681 = AND v680(0xffffffffffffffffffffffffffffffffffffffff), v678
    0x682: v682 = EQ v681, v677
    0x683: v683(0x6bd) = CONST 
    0x686: JUMPI v683(0x6bd), v682

    Begin block 0x687
    prev=[0x66e], succ=[]
    =================================
    0x687: v687(0x40) = CONST 
    0x689: v689 = MLOAD v687(0x40)
    0x68a: v68a(0x461bcd) = CONST 
    0x68e: v68e(0xe5) = CONST 
    0x690: v690(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v68e(0xe5), v68a(0x461bcd)
    0x692: MSTORE v689, v690(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x693: v693(0x4) = CONST 
    0x695: v695 = ADD v693(0x4), v689
    0x698: v698(0x20) = CONST 
    0x69a: v69a = ADD v698(0x20), v695
    0x69d: v69d(0x20) = SUB v69a, v695
    0x69f: MSTORE v695, v69d(0x20)
    0x6a0: v6a0(0x2a) = CONST 
    0x6a3: MSTORE v69a, v6a0(0x2a)
    0x6a4: v6a4(0x20) = CONST 
    0x6a6: v6a6 = ADD v6a4(0x20), v69a
    0x6a8: v6a8(0x9ad) = CONST 
    0x6ab: v6ab(0x2a) = CONST 
    0x6ae: CODECOPY v6a6, v6a8(0x9ad), v6ab(0x2a)
    0x6af: v6af(0x40) = CONST 
    0x6b1: v6b1 = ADD v6af(0x40), v6a6
    0x6b5: v6b5(0x40) = CONST 
    0x6b7: v6b7 = MLOAD v6b5(0x40)
    0x6ba: v6ba(0x84) = SUB v6b1, v6b7
    0x6bc: REVERT v6b7, v6ba(0x84)

    Begin block 0x6bd
    prev=[0x66e], succ=[0x99bB0x6bd]
    =================================
    0x6be: v6be(0xe44) = CONST 
    0x6c1: v6c1(0x40) = CONST 
    0x6c3: v6c3 = MLOAD v6c1(0x40)
    0x6c4: v6c4(0x20) = CONST 
    0x6c6: v6c6 = ADD v6c4(0x20), v6c3
    0x6c9: v6c9(0x14105556915497d4d313d5) = CONST 
    0x6d5: v6d5(0xaa) = CONST 
    0x6d7: v6d7(0x5041555a45525f534c4f54000000000000000000000000000000000000000000) = SHL v6d5(0xaa), v6c9(0x14105556915497d4d313d5)
    0x6d9: MSTORE v6c6, v6d7(0x5041555a45525f534c4f54000000000000000000000000000000000000000000)
    0x6db: v6db(0xb) = CONST 
    0x6dd: v6dd = ADD v6db(0xb), v6c6
    0x6e0: v6e0(0x40) = CONST 
    0x6e2: v6e2 = MLOAD v6e0(0x40)
    0x6e3: v6e3(0x20) = CONST 
    0x6e7: v6e7(0x2b) = SUB v6dd, v6e2
    0x6e8: v6e8(0xb) = SUB v6e7(0x2b), v6e3(0x20)
    0x6ea: MSTORE v6e2, v6e8(0xb)
    0x6ec: v6ec(0x40) = CONST 
    0x6ee: MSTORE v6ec(0x40), v6dd
    0x6f0: v6f0(0xb) = MLOAD v6e2
    0x6f2: v6f2(0x20) = CONST 
    0x6f4: v6f4 = ADD v6f2(0x20), v6e2
    0x6f5: v6f5 = SHA3 v6f4, v6f0(0xb)
    0x6f7: v6f7(0x99b) = CONST 
    0x6fa: JUMP v6f7(0x99b), v26f, v6f5, v6be(0xe44)

    Begin block 0x99bB0x6bd
    prev=[0x6bd], succ=[0x6260x99bB0x6bd]
    =================================
    0x99cS0x6bd: v99cV6bd(0xf36) = CONST 
    0x9a0S0x6bd: v9a0V6bd(0x9a8) = CONST 
    0x9a4S0x6bd: v9a4V6bd(0x626) = CONST 
    0x9a7S0x6bd: JUMP v9a4V6bd(0x626)

    Begin block 0x6260x99bB0x6bd
    prev=[0x99bB0x6bd], succ=[0x9a80x99bB0x6bd]
    =================================
    0x6270x99bS0x6bd: v99b627V6bd(0x1) = CONST 
    0x6290x99bS0x6bd: v99b629V6bd(0x1) = CONST 
    0x62b0x99bS0x6bd: v99b62bV6bd(0xa0) = CONST 
    0x62d0x99bS0x6bd: v99b62dV6bd(0x10000000000000000000000000000000000000000) = SHL v99b62bV6bd(0xa0), v99b629V6bd(0x1)
    0x62e0x99bS0x6bd: v99b62eV6bd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v99b62dV6bd(0x10000000000000000000000000000000000000000), v99b627V6bd(0x1)
    0x62f0x99bS0x6bd: v99b62fV6bd = AND v99b62eV6bd(0xffffffffffffffffffffffffffffffffffffffff), v26f
    0x6310x99bS0x6bd: JUMP v9a0V6bd(0x9a8)

    Begin block 0x9a80x99bB0x6bd
    prev=[0x6260x99bB0x6bd], succ=[0xf36B0x6bd]
    =================================
    0x9aa0x99bS0x6bd: SSTORE v6f5, v99b62fV6bd
    0x9ab0x99bS0x6bd: JUMP v99cV6bd(0xf36)

    Begin block 0xf36B0x6bd
    prev=[0x9a80x99bB0x6bd], succ=[0xe44]
    =================================
    0xf39S0x6bd: JUMP v6be(0xe44)

    Begin block 0xe44
    prev=[0xf36B0x6bd], succ=[0xc68]
    =================================
    0xe46: JUMP v24f(0xc68)

    Begin block 0xc68
    prev=[0xe44], succ=[]
    =================================
    0xc69: STOP 

}

function readAddress(bytes32)() public {
    Begin block 0x274
    prev=[], succ=[0x27c, 0x280]
    =================================
    0x275: v275 = CALLVALUE 
    0x277: v277 = ISZERO v275
    0x278: v278(0x280) = CONST 
    0x27b: JUMPI v278(0x280), v277

    Begin block 0x27c
    prev=[0x274], succ=[]
    =================================
    0x27c: v27c(0x0) = CONST 
    0x27f: REVERT v27c(0x0), v27c(0x0)

    Begin block 0x280
    prev=[0x274], succ=[0x293, 0x297]
    =================================
    0x282: v282(0xc89) = CONST 
    0x285: v285(0x4) = CONST 
    0x288: v288 = CALLDATASIZE 
    0x289: v289 = SUB v288, v285(0x4)
    0x28a: v28a(0x20) = CONST 
    0x28d: v28d = LT v289, v28a(0x20)
    0x28e: v28e = ISZERO v28d
    0x28f: v28f(0x297) = CONST 
    0x292: JUMPI v28f(0x297), v28e

    Begin block 0x293
    prev=[0x280], succ=[]
    =================================
    0x293: v293(0x0) = CONST 
    0x296: REVERT v293(0x0), v293(0x0)

    Begin block 0x297
    prev=[0x280], succ=[0x6fb0x274]
    =================================
    0x299: v299 = CALLDATALOAD v285(0x4)
    0x29a: v29a(0x6fb) = CONST 
    0x29d: JUMP v29a(0x6fb)

    Begin block 0x6fb0x274
    prev=[0x297], succ=[0x5a1B0x6fb0x274]
    =================================
    0x6fc0x274: v2746fc(0x0) = CONST 
    0x6fe0x274: v2746fe(0x70e) = CONST 
    0x7010x274: v274701(0x709) = CONST 
    0x7050x274: v274705(0x5a1) = CONST 
    0x7080x274: JUMP v274705(0x5a1)

    Begin block 0x5a1B0x6fb0x274
    prev=[0x6fb0x274], succ=[0x7090x274]
    =================================
    0x5a2S0x6fb0x274: v5a2V6fb274 = SLOAD v299
    0x5a4S0x6fb0x274: JUMP v274701(0x709)

    Begin block 0x7090x274
    prev=[0x5a1B0x6fb0x274], succ=[0xe66B0x7090x274]
    =================================
    0x70a0x274: v27470a(0xe66) = CONST 
    0x70d0x274: JUMP v27470a(0xe66)

    Begin block 0xe66B0x7090x274
    prev=[0x7090x274], succ=[0x70e0x274]
    =================================
    0xe68S0x7090x274: JUMP v2746fe(0x70e)

    Begin block 0x70e0x274
    prev=[0xe66B0x7090x274], succ=[0xc89]
    =================================
    0x7130x274: JUMP v282(0xc89)

    Begin block 0xc89
    prev=[0x70e0x274], succ=[]
    =================================
    0xc8a: vc8a(0x40) = CONST 
    0xc8d: vc8d = MLOAD vc8a(0x40)
    0xc8e: vc8e(0x1) = CONST 
    0xc90: vc90(0x1) = CONST 
    0xc92: vc92(0xa0) = CONST 
    0xc94: vc94(0x10000000000000000000000000000000000000000) = SHL vc92(0xa0), vc90(0x1)
    0xc95: vc95(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc94(0x10000000000000000000000000000000000000000), vc8e(0x1)
    0xc98: vc98 = AND v5a2V6fb274, vc95(0xffffffffffffffffffffffffffffffffffffffff)
    0xc9a: MSTORE vc8d, vc98
    0xc9b: vc9b = MLOAD vc8a(0x40)
    0xc9f: vc9f(0x0) = SUB vc8d, vc9b
    0xca0: vca0(0x20) = CONST 
    0xca2: vca2(0x20) = ADD vca0(0x20), vc9f(0x0)
    0xca4: RETURN vc9b, vca2(0x20)

}

function getImplementation()() public {
    Begin block 0x29e
    prev=[], succ=[0x2a6, 0x2aa]
    =================================
    0x29f: v29f = CALLVALUE 
    0x2a1: v2a1 = ISZERO v29f
    0x2a2: v2a2(0x2aa) = CONST 
    0x2a5: JUMPI v2a2(0x2aa), v2a1

    Begin block 0x2a6
    prev=[0x29e], succ=[]
    =================================
    0x2a6: v2a6(0x0) = CONST 
    0x2a9: REVERT v2a6(0x0), v2a6(0x0)

    Begin block 0x2aa
    prev=[0x29e], succ=[0x714B0x2aa]
    =================================
    0x2ac: v2ac(0xcc4) = CONST 
    0x2af: v2af(0x714) = CONST 
    0x2b2: JUMP v2af(0x714)

    Begin block 0x714B0x2aa
    prev=[0x2aa], succ=[0x6fbB0x714B0x2aa]
    =================================
    0x715S0x2aa: v715V2aa(0x0) = CONST 
    0x717S0x2aa: v717V2aa(0xe88) = CONST 
    0x71aS0x2aa: v71aV2aa(0x40) = CONST 
    0x71cS0x2aa: v71cV2aa = MLOAD v71aV2aa(0x40)
    0x71dS0x2aa: v71dV2aa(0x20) = CONST 
    0x71fS0x2aa: v71fV2aa = ADD v71dV2aa(0x20), v71cV2aa
    0x722S0x2aa: v722V2aa(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x736S0x2aa: v736V2aa(0x6a) = CONST 
    0x738S0x2aa: v738V2aa(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL v736V2aa(0x6a), v722V2aa(0x12535413115351539510551253d397d4d313d5)
    0x73aS0x2aa: MSTORE v71fV2aa, v738V2aa(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x73cS0x2aa: v73cV2aa(0x13) = CONST 
    0x73eS0x2aa: v73eV2aa = ADD v73cV2aa(0x13), v71fV2aa
    0x741S0x2aa: v741V2aa(0x40) = CONST 
    0x743S0x2aa: v743V2aa = MLOAD v741V2aa(0x40)
    0x744S0x2aa: v744V2aa(0x20) = CONST 
    0x748S0x2aa: v748V2aa(0x33) = SUB v73eV2aa, v743V2aa
    0x749S0x2aa: v749V2aa(0x13) = SUB v748V2aa(0x33), v744V2aa(0x20)
    0x74bS0x2aa: MSTORE v743V2aa, v749V2aa(0x13)
    0x74dS0x2aa: v74dV2aa(0x40) = CONST 
    0x74fS0x2aa: MSTORE v74dV2aa(0x40), v73eV2aa
    0x751S0x2aa: v751V2aa(0x13) = MLOAD v743V2aa
    0x753S0x2aa: v753V2aa(0x20) = CONST 
    0x755S0x2aa: v755V2aa = ADD v753V2aa(0x20), v743V2aa
    0x756S0x2aa: v756V2aa = SHA3 v755V2aa, v751V2aa(0x13)
    0x757S0x2aa: v757V2aa(0x6fb) = CONST 
    0x75aS0x2aa: JUMP v757V2aa(0x6fb)

    Begin block 0x6fbB0x714B0x2aa
    prev=[0x714B0x2aa], succ=[0x5a1B0x6fbB0x714B0x2aa]
    =================================
    0x6fcS0x714S0x2aa: v6fcV714V2aa(0x0) = CONST 
    0x6feS0x714S0x2aa: v6feV714V2aa(0x70e) = CONST 
    0x701S0x714S0x2aa: v701V714V2aa(0x709) = CONST 
    0x705S0x714S0x2aa: v705V714V2aa(0x5a1) = CONST 
    0x708S0x714S0x2aa: JUMP v705V714V2aa(0x5a1)

    Begin block 0x5a1B0x6fbB0x714B0x2aa
    prev=[0x6fbB0x714B0x2aa], succ=[0x7090x6fbB0x714B0x2aa]
    =================================
    0x5a2S0x6fbS0x714S0x2aa: v5a2V6fbV714V2aa = SLOAD v756V2aa
    0x5a4S0x6fbS0x714S0x2aa: JUMP v701V714V2aa(0x709)

    Begin block 0x7090x6fbB0x714B0x2aa
    prev=[0x5a1B0x6fbB0x714B0x2aa], succ=[0xe66B0x7090x6fbB0x714B0x2aa]
    =================================
    0x70a0x6fbS0x714S0x2aa: v6fb70aV714V2aa(0xe66) = CONST 
    0x70d0x6fbS0x714S0x2aa: JUMP v6fb70aV714V2aa(0xe66)

    Begin block 0xe66B0x7090x6fbB0x714B0x2aa
    prev=[0x7090x6fbB0x714B0x2aa], succ=[0x70e0x6fbB0x714B0x2aa]
    =================================
    0xe68S0x7090x6fbS0x714S0x2aa: JUMP v6feV714V2aa(0x70e)

    Begin block 0x70e0x6fbB0x714B0x2aa
    prev=[0xe66B0x7090x6fbB0x714B0x2aa], succ=[0xe88B0x2aa]
    =================================
    0x7130x6fbS0x714S0x2aa: JUMP v717V2aa(0xe88)

    Begin block 0xe88B0x2aa
    prev=[0x70e0x6fbB0x714B0x2aa], succ=[0xcc4]
    =================================
    0xe8cS0x2aa: JUMP v2ac(0xcc4)

    Begin block 0xcc4
    prev=[0xe88B0x2aa], succ=[]
    =================================
    0xcc5: vcc5(0x40) = CONST 
    0xcc8: vcc8 = MLOAD vcc5(0x40)
    0xcc9: vcc9(0x1) = CONST 
    0xccb: vccb(0x1) = CONST 
    0xccd: vccd(0xa0) = CONST 
    0xccf: vccf(0x10000000000000000000000000000000000000000) = SHL vccd(0xa0), vccb(0x1)
    0xcd0: vcd0(0xffffffffffffffffffffffffffffffffffffffff) = SUB vccf(0x10000000000000000000000000000000000000000), vcc9(0x1)
    0xcd3: vcd3 = AND v5a2V6fbV714V2aa, vcd0(0xffffffffffffffffffffffffffffffffffffffff)
    0xcd5: MSTORE vcc8, vcd3
    0xcd6: vcd6 = MLOAD vcc5(0x40)
    0xcda: vcda(0x0) = SUB vcc8, vcd6
    0xcdb: vcdb(0x20) = CONST 
    0xcdd: vcdd(0x20) = ADD vcdb(0x20), vcda(0x0)
    0xcdf: RETURN vcd6, vcdd(0x20)

}

function readBool(bytes32)() public {
    Begin block 0x2b3
    prev=[], succ=[0x2bb, 0x2bf]
    =================================
    0x2b4: v2b4 = CALLVALUE 
    0x2b6: v2b6 = ISZERO v2b4
    0x2b7: v2b7(0x2bf) = CONST 
    0x2ba: JUMPI v2b7(0x2bf), v2b6

    Begin block 0x2bb
    prev=[0x2b3], succ=[]
    =================================
    0x2bb: v2bb(0x0) = CONST 
    0x2be: REVERT v2bb(0x0), v2bb(0x0)

    Begin block 0x2bf
    prev=[0x2b3], succ=[0x2d2, 0x2d6]
    =================================
    0x2c1: v2c1(0xcff) = CONST 
    0x2c4: v2c4(0x4) = CONST 
    0x2c7: v2c7 = CALLDATASIZE 
    0x2c8: v2c8 = SUB v2c7, v2c4(0x4)
    0x2c9: v2c9(0x20) = CONST 
    0x2cc: v2cc = LT v2c8, v2c9(0x20)
    0x2cd: v2cd = ISZERO v2cc
    0x2ce: v2ce(0x2d6) = CONST 
    0x2d1: JUMPI v2ce(0x2d6), v2cd

    Begin block 0x2d2
    prev=[0x2bf], succ=[]
    =================================
    0x2d2: v2d2(0x0) = CONST 
    0x2d5: REVERT v2d2(0x0), v2d2(0x0)

    Begin block 0x2d6
    prev=[0x2bf], succ=[0x75b0x2b3]
    =================================
    0x2d8: v2d8 = CALLDATALOAD v2c4(0x4)
    0x2d9: v2d9(0x75b) = CONST 
    0x2dc: JUMP v2d9(0x75b)

    Begin block 0x75b0x2b3
    prev=[0x2d6], succ=[0x5a1B0x75b0x2b3]
    =================================
    0x75c0x2b3: v2b375c(0x0) = CONST 
    0x75e0x2b3: v2b375e(0x1) = CONST 
    0x7600x2b3: v2b3760(0x768) = CONST 
    0x7640x2b3: v2b3764(0x5a1) = CONST 
    0x7670x2b3: JUMP v2b3764(0x5a1)

    Begin block 0x5a1B0x75b0x2b3
    prev=[0x75b0x2b3], succ=[0x7680x2b3]
    =================================
    0x5a2S0x75b0x2b3: v5a2V75b2b3 = SLOAD v2d8
    0x5a4S0x75b0x2b3: JUMP v2b3760(0x768)

    Begin block 0x7680x2b3
    prev=[0x5a1B0x75b0x2b3], succ=[0xcff]
    =================================
    0x7690x2b3: v2b3769 = EQ v5a2V75b2b3, v2b375e(0x1)
    0x76e0x2b3: JUMP v2c1(0xcff)

    Begin block 0xcff
    prev=[0x7680x2b3], succ=[]
    =================================
    0xd00: vd00(0x40) = CONST 
    0xd03: vd03 = MLOAD vd00(0x40)
    0xd05: vd05 = ISZERO v2b3769
    0xd06: vd06 = ISZERO vd05
    0xd08: MSTORE vd03, vd06
    0xd09: vd09 = MLOAD vd00(0x40)
    0xd0d: vd0d(0x0) = SUB vd03, vd09
    0xd0e: vd0e(0x20) = CONST 
    0xd10: vd10(0x20) = ADD vd0e(0x20), vd0d(0x0)
    0xd12: RETURN vd09, vd10(0x20)

}

function setProxyOwner(address)() public {
    Begin block 0x2dd
    prev=[], succ=[0x2e5, 0x2e9]
    =================================
    0x2de: v2de = CALLVALUE 
    0x2e0: v2e0 = ISZERO v2de
    0x2e1: v2e1(0x2e9) = CONST 
    0x2e4: JUMPI v2e1(0x2e9), v2e0

    Begin block 0x2e5
    prev=[0x2dd], succ=[]
    =================================
    0x2e5: v2e5(0x0) = CONST 
    0x2e8: REVERT v2e5(0x0), v2e5(0x0)

    Begin block 0x2e9
    prev=[0x2dd], succ=[0x2fc, 0x300]
    =================================
    0x2eb: v2eb(0xd32) = CONST 
    0x2ee: v2ee(0x4) = CONST 
    0x2f1: v2f1 = CALLDATASIZE 
    0x2f2: v2f2 = SUB v2f1, v2ee(0x4)
    0x2f3: v2f3(0x20) = CONST 
    0x2f6: v2f6 = LT v2f2, v2f3(0x20)
    0x2f7: v2f7 = ISZERO v2f6
    0x2f8: v2f8(0x300) = CONST 
    0x2fb: JUMPI v2f8(0x300), v2f7

    Begin block 0x2fc
    prev=[0x2e9], succ=[]
    =================================
    0x2fc: v2fc(0x0) = CONST 
    0x2ff: REVERT v2fc(0x0), v2fc(0x0)

    Begin block 0x300
    prev=[0x2e9], succ=[0x76f]
    =================================
    0x302: v302 = CALLDATALOAD v2ee(0x4)
    0x303: v303(0x1) = CONST 
    0x305: v305(0x1) = CONST 
    0x307: v307(0xa0) = CONST 
    0x309: v309(0x10000000000000000000000000000000000000000) = SHL v307(0xa0), v305(0x1)
    0x30a: v30a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v309(0x10000000000000000000000000000000000000000), v303(0x1)
    0x30b: v30b = AND v30a(0xffffffffffffffffffffffffffffffffffffffff), v302
    0x30c: v30c(0x76f) = CONST 
    0x30f: JUMP v30c(0x76f)

    Begin block 0x76f
    prev=[0x300], succ=[0x6fbB0x76f]
    =================================
    0x770: v770(0x7ab) = CONST 
    0x773: v773(0x40) = CONST 
    0x775: v775 = MLOAD v773(0x40)
    0x776: v776(0x20) = CONST 
    0x778: v778 = ADD v776(0x20), v775
    0x77b: v77b(0x13d5d3915497d4d313d5) = CONST 
    0x786: v786(0xb2) = CONST 
    0x788: v788(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v786(0xb2), v77b(0x13d5d3915497d4d313d5)
    0x78a: MSTORE v778, v788(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x78c: v78c(0xa) = CONST 
    0x78e: v78e = ADD v78c(0xa), v778
    0x791: v791(0x40) = CONST 
    0x793: v793 = MLOAD v791(0x40)
    0x794: v794(0x20) = CONST 
    0x798: v798(0x2a) = SUB v78e, v793
    0x799: v799(0xa) = SUB v798(0x2a), v794(0x20)
    0x79b: MSTORE v793, v799(0xa)
    0x79d: v79d(0x40) = CONST 
    0x79f: MSTORE v79d(0x40), v78e
    0x7a1: v7a1(0xa) = MLOAD v793
    0x7a3: v7a3(0x20) = CONST 
    0x7a5: v7a5 = ADD v7a3(0x20), v793
    0x7a6: v7a6 = SHA3 v7a5, v7a1(0xa)
    0x7a7: v7a7(0x6fb) = CONST 
    0x7aa: JUMP v7a7(0x6fb)

    Begin block 0x6fbB0x76f
    prev=[0x76f], succ=[0x5a1B0x6fbB0x76f]
    =================================
    0x6fcS0x76f: v6fcV76f(0x0) = CONST 
    0x6feS0x76f: v6feV76f(0x70e) = CONST 
    0x701S0x76f: v701V76f(0x709) = CONST 
    0x705S0x76f: v705V76f(0x5a1) = CONST 
    0x708S0x76f: JUMP v705V76f(0x5a1)

    Begin block 0x5a1B0x6fbB0x76f
    prev=[0x6fbB0x76f], succ=[0x7090x6fbB0x76f]
    =================================
    0x5a2S0x6fbS0x76f: v5a2V6fbV76f = SLOAD v7a6
    0x5a4S0x6fbS0x76f: JUMP v701V76f(0x709)

    Begin block 0x7090x6fbB0x76f
    prev=[0x5a1B0x6fbB0x76f], succ=[0xe66B0x7090x6fbB0x76f]
    =================================
    0x70a0x6fbS0x76f: v6fb70aV76f(0xe66) = CONST 
    0x70d0x6fbS0x76f: JUMP v6fb70aV76f(0xe66)

    Begin block 0xe66B0x7090x6fbB0x76f
    prev=[0x7090x6fbB0x76f], succ=[0x70e0x6fbB0x76f]
    =================================
    0xe68S0x7090x6fbS0x76f: JUMP v6feV76f(0x70e)

    Begin block 0x70e0x6fbB0x76f
    prev=[0xe66B0x7090x6fbB0x76f], succ=[0x7ab]
    =================================
    0x7130x6fbS0x76f: JUMP v770(0x7ab)

    Begin block 0x7ab
    prev=[0x70e0x6fbB0x76f], succ=[0x7c4, 0x7fa]
    =================================
    0x7ac: v7ac(0x1) = CONST 
    0x7ae: v7ae(0x1) = CONST 
    0x7b0: v7b0(0xa0) = CONST 
    0x7b2: v7b2(0x10000000000000000000000000000000000000000) = SHL v7b0(0xa0), v7ae(0x1)
    0x7b3: v7b3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7b2(0x10000000000000000000000000000000000000000), v7ac(0x1)
    0x7b4: v7b4 = AND v7b3(0xffffffffffffffffffffffffffffffffffffffff), v5a2V6fbV76f
    0x7b5: v7b5 = CALLER 
    0x7b6: v7b6(0x1) = CONST 
    0x7b8: v7b8(0x1) = CONST 
    0x7ba: v7ba(0xa0) = CONST 
    0x7bc: v7bc(0x10000000000000000000000000000000000000000) = SHL v7ba(0xa0), v7b8(0x1)
    0x7bd: v7bd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7bc(0x10000000000000000000000000000000000000000), v7b6(0x1)
    0x7be: v7be = AND v7bd(0xffffffffffffffffffffffffffffffffffffffff), v7b5
    0x7bf: v7bf = EQ v7be, v7b4
    0x7c0: v7c0(0x7fa) = CONST 
    0x7c3: JUMPI v7c0(0x7fa), v7bf

    Begin block 0x7c4
    prev=[0x7ab], succ=[]
    =================================
    0x7c4: v7c4(0x40) = CONST 
    0x7c6: v7c6 = MLOAD v7c4(0x40)
    0x7c7: v7c7(0x461bcd) = CONST 
    0x7cb: v7cb(0xe5) = CONST 
    0x7cd: v7cd(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v7cb(0xe5), v7c7(0x461bcd)
    0x7cf: MSTORE v7c6, v7cd(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x7d0: v7d0(0x4) = CONST 
    0x7d2: v7d2 = ADD v7d0(0x4), v7c6
    0x7d5: v7d5(0x20) = CONST 
    0x7d7: v7d7 = ADD v7d5(0x20), v7d2
    0x7da: v7da(0x20) = SUB v7d7, v7d2
    0x7dc: MSTORE v7d2, v7da(0x20)
    0x7dd: v7dd(0x2a) = CONST 
    0x7e0: MSTORE v7d7, v7dd(0x2a)
    0x7e1: v7e1(0x20) = CONST 
    0x7e3: v7e3 = ADD v7e1(0x20), v7d7
    0x7e5: v7e5(0x9ad) = CONST 
    0x7e8: v7e8(0x2a) = CONST 
    0x7eb: CODECOPY v7e3, v7e5(0x9ad), v7e8(0x2a)
    0x7ec: v7ec(0x40) = CONST 
    0x7ee: v7ee = ADD v7ec(0x40), v7e3
    0x7f2: v7f2(0x40) = CONST 
    0x7f4: v7f4 = MLOAD v7f2(0x40)
    0x7f7: v7f7(0x84) = SUB v7ee, v7f4
    0x7f9: REVERT v7f4, v7f7(0x84)

    Begin block 0x7fa
    prev=[0x7ab], succ=[0x99bB0x7fa]
    =================================
    0x7fb: v7fb(0xeac) = CONST 
    0x7fe: v7fe(0x40) = CONST 
    0x800: v800 = MLOAD v7fe(0x40)
    0x801: v801(0x20) = CONST 
    0x803: v803 = ADD v801(0x20), v800
    0x806: v806(0x13d5d3915497d4d313d5) = CONST 
    0x811: v811(0xb2) = CONST 
    0x813: v813(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v811(0xb2), v806(0x13d5d3915497d4d313d5)
    0x815: MSTORE v803, v813(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x817: v817(0xa) = CONST 
    0x819: v819 = ADD v817(0xa), v803
    0x81c: v81c(0x40) = CONST 
    0x81e: v81e = MLOAD v81c(0x40)
    0x81f: v81f(0x20) = CONST 
    0x823: v823(0x2a) = SUB v819, v81e
    0x824: v824(0xa) = SUB v823(0x2a), v81f(0x20)
    0x826: MSTORE v81e, v824(0xa)
    0x828: v828(0x40) = CONST 
    0x82a: MSTORE v828(0x40), v819
    0x82c: v82c(0xa) = MLOAD v81e
    0x82e: v82e(0x20) = CONST 
    0x830: v830 = ADD v82e(0x20), v81e
    0x831: v831 = SHA3 v830, v82c(0xa)
    0x833: v833(0x99b) = CONST 
    0x836: JUMP v833(0x99b), v30b, v831, v7fb(0xeac)

    Begin block 0x99bB0x7fa
    prev=[0x7fa], succ=[0x6260x99bB0x7fa]
    =================================
    0x99cS0x7fa: v99cV7fa(0xf36) = CONST 
    0x9a0S0x7fa: v9a0V7fa(0x9a8) = CONST 
    0x9a4S0x7fa: v9a4V7fa(0x626) = CONST 
    0x9a7S0x7fa: JUMP v9a4V7fa(0x626)

    Begin block 0x6260x99bB0x7fa
    prev=[0x99bB0x7fa], succ=[0x9a80x99bB0x7fa]
    =================================
    0x6270x99bS0x7fa: v99b627V7fa(0x1) = CONST 
    0x6290x99bS0x7fa: v99b629V7fa(0x1) = CONST 
    0x62b0x99bS0x7fa: v99b62bV7fa(0xa0) = CONST 
    0x62d0x99bS0x7fa: v99b62dV7fa(0x10000000000000000000000000000000000000000) = SHL v99b62bV7fa(0xa0), v99b629V7fa(0x1)
    0x62e0x99bS0x7fa: v99b62eV7fa(0xffffffffffffffffffffffffffffffffffffffff) = SUB v99b62dV7fa(0x10000000000000000000000000000000000000000), v99b627V7fa(0x1)
    0x62f0x99bS0x7fa: v99b62fV7fa = AND v99b62eV7fa(0xffffffffffffffffffffffffffffffffffffffff), v30b
    0x6310x99bS0x7fa: JUMP v9a0V7fa(0x9a8)

    Begin block 0x9a80x99bB0x7fa
    prev=[0x6260x99bB0x7fa], succ=[0xf36B0x7fa]
    =================================
    0x9aa0x99bS0x7fa: SSTORE v831, v99b62fV7fa
    0x9ab0x99bS0x7fa: JUMP v99cV7fa(0xf36)

    Begin block 0xf36B0x7fa
    prev=[0x9a80x99bB0x7fa], succ=[0xeac]
    =================================
    0xf39S0x7fa: JUMP v7fb(0xeac)

    Begin block 0xeac
    prev=[0xf36B0x7fa], succ=[0xd32]
    =================================
    0xeae: JUMP v2eb(0xd32)

    Begin block 0xd32
    prev=[0xeac], succ=[]
    =================================
    0xd33: STOP 

}

function setImplementation(address)() public {
    Begin block 0x310
    prev=[], succ=[0x318, 0x31c]
    =================================
    0x311: v311 = CALLVALUE 
    0x313: v313 = ISZERO v311
    0x314: v314(0x31c) = CONST 
    0x317: JUMPI v314(0x31c), v313

    Begin block 0x318
    prev=[0x310], succ=[]
    =================================
    0x318: v318(0x0) = CONST 
    0x31b: REVERT v318(0x0), v318(0x0)

    Begin block 0x31c
    prev=[0x310], succ=[0x32f, 0x333]
    =================================
    0x31e: v31e(0xd53) = CONST 
    0x321: v321(0x4) = CONST 
    0x324: v324 = CALLDATASIZE 
    0x325: v325 = SUB v324, v321(0x4)
    0x326: v326(0x20) = CONST 
    0x329: v329 = LT v325, v326(0x20)
    0x32a: v32a = ISZERO v329
    0x32b: v32b(0x333) = CONST 
    0x32e: JUMPI v32b(0x333), v32a

    Begin block 0x32f
    prev=[0x31c], succ=[]
    =================================
    0x32f: v32f(0x0) = CONST 
    0x332: REVERT v32f(0x0), v32f(0x0)

    Begin block 0x333
    prev=[0x31c], succ=[0x837]
    =================================
    0x335: v335 = CALLDATALOAD v321(0x4)
    0x336: v336(0x1) = CONST 
    0x338: v338(0x1) = CONST 
    0x33a: v33a(0xa0) = CONST 
    0x33c: v33c(0x10000000000000000000000000000000000000000) = SHL v33a(0xa0), v338(0x1)
    0x33d: v33d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33c(0x10000000000000000000000000000000000000000), v336(0x1)
    0x33e: v33e = AND v33d(0xffffffffffffffffffffffffffffffffffffffff), v335
    0x33f: v33f(0x837) = CONST 
    0x342: JUMP v33f(0x837)

    Begin block 0x837
    prev=[0x333], succ=[0x6fbB0x837]
    =================================
    0x838: v838(0x873) = CONST 
    0x83b: v83b(0x40) = CONST 
    0x83d: v83d = MLOAD v83b(0x40)
    0x83e: v83e(0x20) = CONST 
    0x840: v840 = ADD v83e(0x20), v83d
    0x843: v843(0x13d5d3915497d4d313d5) = CONST 
    0x84e: v84e(0xb2) = CONST 
    0x850: v850(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v84e(0xb2), v843(0x13d5d3915497d4d313d5)
    0x852: MSTORE v840, v850(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x854: v854(0xa) = CONST 
    0x856: v856 = ADD v854(0xa), v840
    0x859: v859(0x40) = CONST 
    0x85b: v85b = MLOAD v859(0x40)
    0x85c: v85c(0x20) = CONST 
    0x860: v860(0x2a) = SUB v856, v85b
    0x861: v861(0xa) = SUB v860(0x2a), v85c(0x20)
    0x863: MSTORE v85b, v861(0xa)
    0x865: v865(0x40) = CONST 
    0x867: MSTORE v865(0x40), v856
    0x869: v869(0xa) = MLOAD v85b
    0x86b: v86b(0x20) = CONST 
    0x86d: v86d = ADD v86b(0x20), v85b
    0x86e: v86e = SHA3 v86d, v869(0xa)
    0x86f: v86f(0x6fb) = CONST 
    0x872: JUMP v86f(0x6fb)

    Begin block 0x6fbB0x837
    prev=[0x837], succ=[0x5a1B0x6fbB0x837]
    =================================
    0x6fcS0x837: v6fcV837(0x0) = CONST 
    0x6feS0x837: v6feV837(0x70e) = CONST 
    0x701S0x837: v701V837(0x709) = CONST 
    0x705S0x837: v705V837(0x5a1) = CONST 
    0x708S0x837: JUMP v705V837(0x5a1)

    Begin block 0x5a1B0x6fbB0x837
    prev=[0x6fbB0x837], succ=[0x7090x6fbB0x837]
    =================================
    0x5a2S0x6fbS0x837: v5a2V6fbV837 = SLOAD v86e
    0x5a4S0x6fbS0x837: JUMP v701V837(0x709)

    Begin block 0x7090x6fbB0x837
    prev=[0x5a1B0x6fbB0x837], succ=[0xe66B0x7090x6fbB0x837]
    =================================
    0x70a0x6fbS0x837: v6fb70aV837(0xe66) = CONST 
    0x70d0x6fbS0x837: JUMP v6fb70aV837(0xe66)

    Begin block 0xe66B0x7090x6fbB0x837
    prev=[0x7090x6fbB0x837], succ=[0x70e0x6fbB0x837]
    =================================
    0xe68S0x7090x6fbS0x837: JUMP v6feV837(0x70e)

    Begin block 0x70e0x6fbB0x837
    prev=[0xe66B0x7090x6fbB0x837], succ=[0x873]
    =================================
    0x7130x6fbS0x837: JUMP v838(0x873)

    Begin block 0x873
    prev=[0x70e0x6fbB0x837], succ=[0x88c, 0x8c2]
    =================================
    0x874: v874(0x1) = CONST 
    0x876: v876(0x1) = CONST 
    0x878: v878(0xa0) = CONST 
    0x87a: v87a(0x10000000000000000000000000000000000000000) = SHL v878(0xa0), v876(0x1)
    0x87b: v87b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v87a(0x10000000000000000000000000000000000000000), v874(0x1)
    0x87c: v87c = AND v87b(0xffffffffffffffffffffffffffffffffffffffff), v5a2V6fbV837
    0x87d: v87d = CALLER 
    0x87e: v87e(0x1) = CONST 
    0x880: v880(0x1) = CONST 
    0x882: v882(0xa0) = CONST 
    0x884: v884(0x10000000000000000000000000000000000000000) = SHL v882(0xa0), v880(0x1)
    0x885: v885(0xffffffffffffffffffffffffffffffffffffffff) = SUB v884(0x10000000000000000000000000000000000000000), v87e(0x1)
    0x886: v886 = AND v885(0xffffffffffffffffffffffffffffffffffffffff), v87d
    0x887: v887 = EQ v886, v87c
    0x888: v888(0x8c2) = CONST 
    0x88b: JUMPI v888(0x8c2), v887

    Begin block 0x88c
    prev=[0x873], succ=[]
    =================================
    0x88c: v88c(0x40) = CONST 
    0x88e: v88e = MLOAD v88c(0x40)
    0x88f: v88f(0x461bcd) = CONST 
    0x893: v893(0xe5) = CONST 
    0x895: v895(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v893(0xe5), v88f(0x461bcd)
    0x897: MSTORE v88e, v895(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x898: v898(0x4) = CONST 
    0x89a: v89a = ADD v898(0x4), v88e
    0x89d: v89d(0x20) = CONST 
    0x89f: v89f = ADD v89d(0x20), v89a
    0x8a2: v8a2(0x20) = SUB v89f, v89a
    0x8a4: MSTORE v89a, v8a2(0x20)
    0x8a5: v8a5(0x2a) = CONST 
    0x8a8: MSTORE v89f, v8a5(0x2a)
    0x8a9: v8a9(0x20) = CONST 
    0x8ab: v8ab = ADD v8a9(0x20), v89f
    0x8ad: v8ad(0x9ad) = CONST 
    0x8b0: v8b0(0x2a) = CONST 
    0x8b3: CODECOPY v8ab, v8ad(0x9ad), v8b0(0x2a)
    0x8b4: v8b4(0x40) = CONST 
    0x8b6: v8b6 = ADD v8b4(0x40), v8ab
    0x8ba: v8ba(0x40) = CONST 
    0x8bc: v8bc = MLOAD v8ba(0x40)
    0x8bf: v8bf(0x84) = SUB v8b6, v8bc
    0x8c1: REVERT v8bc, v8bf(0x84)

    Begin block 0x8c2
    prev=[0x873], succ=[0x99bB0x8c2]
    =================================
    0x8c3: v8c3(0xece) = CONST 
    0x8c6: v8c6(0x40) = CONST 
    0x8c8: v8c8 = MLOAD v8c6(0x40)
    0x8c9: v8c9(0x20) = CONST 
    0x8cb: v8cb = ADD v8c9(0x20), v8c8
    0x8ce: v8ce(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x8e2: v8e2(0x6a) = CONST 
    0x8e4: v8e4(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL v8e2(0x6a), v8ce(0x12535413115351539510551253d397d4d313d5)
    0x8e6: MSTORE v8cb, v8e4(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x8e8: v8e8(0x13) = CONST 
    0x8ea: v8ea = ADD v8e8(0x13), v8cb
    0x8ed: v8ed(0x40) = CONST 
    0x8ef: v8ef = MLOAD v8ed(0x40)
    0x8f0: v8f0(0x20) = CONST 
    0x8f4: v8f4(0x33) = SUB v8ea, v8ef
    0x8f5: v8f5(0x13) = SUB v8f4(0x33), v8f0(0x20)
    0x8f7: MSTORE v8ef, v8f5(0x13)
    0x8f9: v8f9(0x40) = CONST 
    0x8fb: MSTORE v8f9(0x40), v8ea
    0x8fd: v8fd(0x13) = MLOAD v8ef
    0x8ff: v8ff(0x20) = CONST 
    0x901: v901 = ADD v8ff(0x20), v8ef
    0x902: v902 = SHA3 v901, v8fd(0x13)
    0x904: v904(0x99b) = CONST 
    0x907: JUMP v904(0x99b), v33e, v902, v8c3(0xece)

    Begin block 0x99bB0x8c2
    prev=[0x8c2], succ=[0x6260x99bB0x8c2]
    =================================
    0x99cS0x8c2: v99cV8c2(0xf36) = CONST 
    0x9a0S0x8c2: v9a0V8c2(0x9a8) = CONST 
    0x9a4S0x8c2: v9a4V8c2(0x626) = CONST 
    0x9a7S0x8c2: JUMP v9a4V8c2(0x626)

    Begin block 0x6260x99bB0x8c2
    prev=[0x99bB0x8c2], succ=[0x9a80x99bB0x8c2]
    =================================
    0x6270x99bS0x8c2: v99b627V8c2(0x1) = CONST 
    0x6290x99bS0x8c2: v99b629V8c2(0x1) = CONST 
    0x62b0x99bS0x8c2: v99b62bV8c2(0xa0) = CONST 
    0x62d0x99bS0x8c2: v99b62dV8c2(0x10000000000000000000000000000000000000000) = SHL v99b62bV8c2(0xa0), v99b629V8c2(0x1)
    0x62e0x99bS0x8c2: v99b62eV8c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v99b62dV8c2(0x10000000000000000000000000000000000000000), v99b627V8c2(0x1)
    0x62f0x99bS0x8c2: v99b62fV8c2 = AND v99b62eV8c2(0xffffffffffffffffffffffffffffffffffffffff), v33e
    0x6310x99bS0x8c2: JUMP v9a0V8c2(0x9a8)

    Begin block 0x9a80x99bB0x8c2
    prev=[0x6260x99bB0x8c2], succ=[0xf36B0x8c2]
    =================================
    0x9aa0x99bS0x8c2: SSTORE v902, v99b62fV8c2
    0x9ab0x99bS0x8c2: JUMP v99cV8c2(0xf36)

    Begin block 0xf36B0x8c2
    prev=[0x9a80x99bB0x8c2], succ=[0xece]
    =================================
    0xf39S0x8c2: JUMP v8c3(0xece)

    Begin block 0xece
    prev=[0xf36B0x8c2], succ=[0xd53]
    =================================
    0xed0: JUMP v31e(0xd53)

    Begin block 0xd53
    prev=[0xece], succ=[]
    =================================
    0xd54: STOP 

}

function fallback()() public {
    Begin block 0xf58
    prev=[], succ=[0x3430xf58]
    =================================
    0xe7: ve7(0xa7c) = CONST 
    0xea: vea(0x343) = CONST 
    0xed: JUMP vea(0x343)

    Begin block 0x3430xf58
    prev=[0xf58], succ=[0x75bB0x3430xf58]
    =================================
    0x3440xf58: vf58344(0x380) = CONST 
    0x3470xf58: vf58347(0x40) = CONST 
    0x3490xf58: vf58349 = MLOAD vf58347(0x40)
    0x34a0xf58: vf5834a(0x20) = CONST 
    0x34c0xf58: vf5834c = ADD vf5834a(0x20), vf58349
    0x34f0xf58: vf5834f(0x14105554d15117d4d313d5) = CONST 
    0x35b0xf58: vf5835b(0xaa) = CONST 
    0x35d0xf58: vf5835d(0x5041555345445f534c4f54000000000000000000000000000000000000000000) = SHL vf5835b(0xaa), vf5834f(0x14105554d15117d4d313d5)
    0x35f0xf58: MSTORE vf5834c, vf5835d(0x5041555345445f534c4f54000000000000000000000000000000000000000000)
    0x3610xf58: vf58361(0xb) = CONST 
    0x3630xf58: vf58363 = ADD vf58361(0xb), vf5834c
    0x3660xf58: vf58366(0x40) = CONST 
    0x3680xf58: vf58368 = MLOAD vf58366(0x40)
    0x3690xf58: vf58369(0x20) = CONST 
    0x36d0xf58: vf5836d(0x2b) = SUB vf58363, vf58368
    0x36e0xf58: vf5836e(0xb) = SUB vf5836d(0x2b), vf58369(0x20)
    0x3700xf58: MSTORE vf58368, vf5836e(0xb)
    0x3720xf58: vf58372(0x40) = CONST 
    0x3740xf58: MSTORE vf58372(0x40), vf58363
    0x3760xf58: vf58376(0xb) = MLOAD vf58368
    0x3780xf58: vf58378(0x20) = CONST 
    0x37a0xf58: vf5837a = ADD vf58378(0x20), vf58368
    0x37b0xf58: vf5837b = SHA3 vf5837a, vf58376(0xb)
    0x37c0xf58: vf5837c(0x75b) = CONST 
    0x37f0xf58: JUMP vf5837c(0x75b)

    Begin block 0x75bB0x3430xf58
    prev=[0x3430xf58], succ=[0x5a1B0x75bB0x3430xf58]
    =================================
    0x75cS0x3430xf58: v75cV343f58(0x0) = CONST 
    0x75eS0x3430xf58: v75eV343f58(0x1) = CONST 
    0x760S0x3430xf58: v760V343f58(0x768) = CONST 
    0x764S0x3430xf58: v764V343f58(0x5a1) = CONST 
    0x767S0x3430xf58: JUMP v764V343f58(0x5a1)

    Begin block 0x5a1B0x75bB0x3430xf58
    prev=[0x75bB0x3430xf58], succ=[0x7680x75bB0x3430xf58]
    =================================
    0x5a2S0x75bS0x3430xf58: v5a2V75bV343f58 = SLOAD vf5837b
    0x5a4S0x75bS0x3430xf58: JUMP v760V343f58(0x768)

    Begin block 0x7680x75bB0x3430xf58
    prev=[0x5a1B0x75bB0x3430xf58], succ=[0x3800xf58]
    =================================
    0x7690x75bS0x3430xf58: v75b769V343f58 = EQ v5a2V75bV343f58, v75eV343f58(0x1)
    0x76e0x75bS0x3430xf58: JUMP vf58344(0x380)

    Begin block 0x3800xf58
    prev=[0x7680x75bB0x3430xf58], succ=[0x3860xf58, 0x3bc0xf58]
    =================================
    0x3810xf58: vf58381 = ISZERO v75b769V343f58
    0x3820xf58: vf58382(0x3bc) = CONST 
    0x3850xf58: JUMPI vf58382(0x3bc), vf58381

    Begin block 0x3860xf58
    prev=[0x3800xf58], succ=[]
    =================================
    0x3860xf58: vf58386(0x40) = CONST 
    0x3880xf58: vf58388 = MLOAD vf58386(0x40)
    0x3890xf58: vf58389(0x461bcd) = CONST 
    0x38d0xf58: vf5838d(0xe5) = CONST 
    0x38f0xf58: vf5838f(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vf5838d(0xe5), vf58389(0x461bcd)
    0x3910xf58: MSTORE vf58388, vf5838f(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x3920xf58: vf58392(0x4) = CONST 
    0x3940xf58: vf58394 = ADD vf58392(0x4), vf58388
    0x3970xf58: vf58397(0x20) = CONST 
    0x3990xf58: vf58399 = ADD vf58397(0x20), vf58394
    0x39c0xf58: vf5839c(0x20) = SUB vf58399, vf58394
    0x39e0xf58: MSTORE vf58394, vf5839c(0x20)
    0x39f0xf58: vf5839f(0x2b) = CONST 
    0x3a20xf58: MSTORE vf58399, vf5839f(0x2b)
    0x3a30xf58: vf583a3(0x20) = CONST 
    0x3a50xf58: vf583a5 = ADD vf583a3(0x20), vf58399
    0x3a70xf58: vf583a7(0xa06) = CONST 
    0x3aa0xf58: vf583aa(0x2b) = CONST 
    0x3ad0xf58: CODECOPY vf583a5, vf583a7(0xa06), vf583aa(0x2b)
    0x3ae0xf58: vf583ae(0x40) = CONST 
    0x3b00xf58: vf583b0 = ADD vf583ae(0x40), vf583a5
    0x3b40xf58: vf583b4(0x40) = CONST 
    0x3b60xf58: vf583b6 = MLOAD vf583b4(0x40)
    0x3b90xf58: vf583b9(0x84) = SUB vf583b0, vf583b6
    0x3bb0xf58: REVERT vf583b6, vf583b9(0x84)

    Begin block 0x3bc0xf58
    prev=[0x3800xf58], succ=[0x9080xf58]
    =================================
    0x3bd0xf58: vf583bd(0xd74) = CONST 
    0x3c00xf58: vf583c0(0x908) = CONST 
    0x3c30xf58: JUMP vf583c0(0x908)

    Begin block 0x9080xf58
    prev=[0x3bc0xf58], succ=[0x6fbB0x9080xf58]
    =================================
    0x9090xf58: vf58909(0x0) = CONST 
    0x90b0xf58: vf5890b(0x94f) = CONST 
    0x90e0xf58: vf5890e(0x40) = CONST 
    0x9100xf58: vf58910 = MLOAD vf5890e(0x40)
    0x9110xf58: vf58911(0x20) = CONST 
    0x9130xf58: vf58913 = ADD vf58911(0x20), vf58910
    0x9160xf58: vf58916(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x92a0xf58: vf5892a(0x6a) = CONST 
    0x92c0xf58: vf5892c(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL vf5892a(0x6a), vf58916(0x12535413115351539510551253d397d4d313d5)
    0x92e0xf58: MSTORE vf58913, vf5892c(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x9300xf58: vf58930(0x13) = CONST 
    0x9320xf58: vf58932 = ADD vf58930(0x13), vf58913
    0x9350xf58: vf58935(0x40) = CONST 
    0x9370xf58: vf58937 = MLOAD vf58935(0x40)
    0x9380xf58: vf58938(0x20) = CONST 
    0x93c0xf58: vf5893c(0x33) = SUB vf58932, vf58937
    0x93d0xf58: vf5893d(0x13) = SUB vf5893c(0x33), vf58938(0x20)
    0x93f0xf58: MSTORE vf58937, vf5893d(0x13)
    0x9410xf58: vf58941(0x40) = CONST 
    0x9430xf58: MSTORE vf58941(0x40), vf58932
    0x9450xf58: vf58945(0x13) = MLOAD vf58937
    0x9470xf58: vf58947(0x20) = CONST 
    0x9490xf58: vf58949 = ADD vf58947(0x20), vf58937
    0x94a0xf58: vf5894a = SHA3 vf58949, vf58945(0x13)
    0x94b0xf58: vf5894b(0x6fb) = CONST 
    0x94e0xf58: JUMP vf5894b(0x6fb)

    Begin block 0x6fbB0x9080xf58
    prev=[0x9080xf58], succ=[0x5a1B0x6fbB0x9080xf58]
    =================================
    0x6fcS0x9080xf58: v6fcV908f58(0x0) = CONST 
    0x6feS0x9080xf58: v6feV908f58(0x70e) = CONST 
    0x701S0x9080xf58: v701V908f58(0x709) = CONST 
    0x705S0x9080xf58: v705V908f58(0x5a1) = CONST 
    0x708S0x9080xf58: JUMP v705V908f58(0x5a1)

    Begin block 0x5a1B0x6fbB0x9080xf58
    prev=[0x6fbB0x9080xf58], succ=[0x7090x6fbB0x9080xf58]
    =================================
    0x5a2S0x6fbS0x9080xf58: v5a2V6fbV908f58 = SLOAD vf5894a
    0x5a4S0x6fbS0x9080xf58: JUMP v701V908f58(0x709)

    Begin block 0x7090x6fbB0x9080xf58
    prev=[0x5a1B0x6fbB0x9080xf58], succ=[0xe66B0x7090x6fbB0x9080xf58]
    =================================
    0x70a0x6fbS0x9080xf58: v6fb70aV908f58(0xe66) = CONST 
    0x70d0x6fbS0x9080xf58: JUMP v6fb70aV908f58(0xe66)

    Begin block 0xe66B0x7090x6fbB0x9080xf58
    prev=[0x7090x6fbB0x9080xf58], succ=[0x70e0x6fbB0x9080xf58]
    =================================
    0xe68S0x7090x6fbS0x9080xf58: JUMP v6feV908f58(0x70e)

    Begin block 0x70e0x6fbB0x9080xf58
    prev=[0xe66B0x7090x6fbB0x9080xf58], succ=[0x94f0xf58]
    =================================
    0x7130x6fbS0x9080xf58: JUMP vf5890b(0x94f)

    Begin block 0x94f0xf58
    prev=[0x70e0x6fbB0x9080xf58], succ=[0x96f0xf58, 0x9720xf58]
    =================================
    0x9520xf58: vf58952(0x40) = CONST 
    0x9540xf58: vf58954 = MLOAD vf58952(0x40)
    0x9550xf58: vf58955 = CALLDATASIZE 
    0x9560xf58: vf58956(0x0) = CONST 
    0x9590xf58: CALLDATACOPY vf58954, vf58956(0x0), vf58955
    0x95a0xf58: vf5895a(0x0) = CONST 
    0x95d0xf58: vf5895d = CALLDATASIZE 
    0x9600xf58: vf58960 = GAS 
    0x9610xf58: vf58961 = DELEGATECALL vf58960, v5a2V6fbV908f58, vf58954, vf5895d, vf5895a(0x0), vf5895a(0x0)
    0x9620xf58: vf58962 = RETURNDATASIZE 
    0x9640xf58: vf58964(0x0) = CONST 
    0x9670xf58: RETURNDATACOPY vf58954, vf58964(0x0), vf58962
    0x96a0xf58: vf5896a = ISZERO vf58961
    0x96b0xf58: vf5896b(0x972) = CONST 
    0x96e0xf58: JUMPI vf5896b(0x972), vf5896a

    Begin block 0x96f0xf58
    prev=[0x94f0xf58], succ=[]
    =================================
    0x9710xf58: RETURN vf58954, vf58962

    Begin block 0x9720xf58
    prev=[0x94f0xf58], succ=[]
    =================================
    0x9750xf58: REVERT vf58954, vf58962

}

function setPaused(bool)() public {
    Begin block 0xf8
    prev=[], succ=[0x100, 0x104]
    =================================
    0xf9: vf9 = CALLVALUE 
    0xfb: vfb = ISZERO vf9
    0xfc: vfc(0x104) = CONST 
    0xff: JUMPI vfc(0x104), vfb

    Begin block 0x100
    prev=[0xf8], succ=[]
    =================================
    0x100: v100(0x0) = CONST 
    0x103: REVERT v100(0x0), v100(0x0)

    Begin block 0x104
    prev=[0xf8], succ=[0x117, 0x11b]
    =================================
    0x106: v106(0xabe) = CONST 
    0x109: v109(0x4) = CONST 
    0x10c: v10c = CALLDATASIZE 
    0x10d: v10d = SUB v10c, v109(0x4)
    0x10e: v10e(0x20) = CONST 
    0x111: v111 = LT v10d, v10e(0x20)
    0x112: v112 = ISZERO v111
    0x113: v113(0x11b) = CONST 
    0x116: JUMPI v113(0x11b), v112

    Begin block 0x117
    prev=[0x104], succ=[]
    =================================
    0x117: v117(0x0) = CONST 
    0x11a: REVERT v117(0x0), v117(0x0)

    Begin block 0x11b
    prev=[0x104], succ=[0x3c6]
    =================================
    0x11d: v11d = CALLDATALOAD v109(0x4)
    0x11e: v11e = ISZERO v11d
    0x11f: v11f = ISZERO v11e
    0x120: v120(0x3c6) = CONST 
    0x123: JUMP v120(0x3c6)

    Begin block 0x3c6
    prev=[0x11b], succ=[0x6fbB0x3c6]
    =================================
    0x3c7: v3c7(0x403) = CONST 
    0x3ca: v3ca(0x40) = CONST 
    0x3cc: v3cc = MLOAD v3ca(0x40)
    0x3cd: v3cd(0x20) = CONST 
    0x3cf: v3cf = ADD v3cd(0x20), v3cc
    0x3d2: v3d2(0x14105556915497d4d313d5) = CONST 
    0x3de: v3de(0xaa) = CONST 
    0x3e0: v3e0(0x5041555a45525f534c4f54000000000000000000000000000000000000000000) = SHL v3de(0xaa), v3d2(0x14105556915497d4d313d5)
    0x3e2: MSTORE v3cf, v3e0(0x5041555a45525f534c4f54000000000000000000000000000000000000000000)
    0x3e4: v3e4(0xb) = CONST 
    0x3e6: v3e6 = ADD v3e4(0xb), v3cf
    0x3e9: v3e9(0x40) = CONST 
    0x3eb: v3eb = MLOAD v3e9(0x40)
    0x3ec: v3ec(0x20) = CONST 
    0x3f0: v3f0(0x2b) = SUB v3e6, v3eb
    0x3f1: v3f1(0xb) = SUB v3f0(0x2b), v3ec(0x20)
    0x3f3: MSTORE v3eb, v3f1(0xb)
    0x3f5: v3f5(0x40) = CONST 
    0x3f7: MSTORE v3f5(0x40), v3e6
    0x3f9: v3f9(0xb) = MLOAD v3eb
    0x3fb: v3fb(0x20) = CONST 
    0x3fd: v3fd = ADD v3fb(0x20), v3eb
    0x3fe: v3fe = SHA3 v3fd, v3f9(0xb)
    0x3ff: v3ff(0x6fb) = CONST 
    0x402: JUMP v3ff(0x6fb)

    Begin block 0x6fbB0x3c6
    prev=[0x3c6], succ=[0x5a1B0x6fbB0x3c6]
    =================================
    0x6fcS0x3c6: v6fcV3c6(0x0) = CONST 
    0x6feS0x3c6: v6feV3c6(0x70e) = CONST 
    0x701S0x3c6: v701V3c6(0x709) = CONST 
    0x705S0x3c6: v705V3c6(0x5a1) = CONST 
    0x708S0x3c6: JUMP v705V3c6(0x5a1)

    Begin block 0x5a1B0x6fbB0x3c6
    prev=[0x6fbB0x3c6], succ=[0x7090x6fbB0x3c6]
    =================================
    0x5a2S0x6fbS0x3c6: v5a2V6fbV3c6 = SLOAD v3fe
    0x5a4S0x6fbS0x3c6: JUMP v701V3c6(0x709)

    Begin block 0x7090x6fbB0x3c6
    prev=[0x5a1B0x6fbB0x3c6], succ=[0xe66B0x7090x6fbB0x3c6]
    =================================
    0x70a0x6fbS0x3c6: v6fb70aV3c6(0xe66) = CONST 
    0x70d0x6fbS0x3c6: JUMP v6fb70aV3c6(0xe66)

    Begin block 0xe66B0x7090x6fbB0x3c6
    prev=[0x7090x6fbB0x3c6], succ=[0x70e0x6fbB0x3c6]
    =================================
    0xe68S0x7090x6fbS0x3c6: JUMP v6feV3c6(0x70e)

    Begin block 0x70e0x6fbB0x3c6
    prev=[0xe66B0x7090x6fbB0x3c6], succ=[0x403]
    =================================
    0x7130x6fbS0x3c6: JUMP v3c7(0x403)

    Begin block 0x403
    prev=[0x70e0x6fbB0x3c6], succ=[0x41c, 0x452]
    =================================
    0x404: v404(0x1) = CONST 
    0x406: v406(0x1) = CONST 
    0x408: v408(0xa0) = CONST 
    0x40a: v40a(0x10000000000000000000000000000000000000000) = SHL v408(0xa0), v406(0x1)
    0x40b: v40b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v40a(0x10000000000000000000000000000000000000000), v404(0x1)
    0x40c: v40c = AND v40b(0xffffffffffffffffffffffffffffffffffffffff), v5a2V6fbV3c6
    0x40d: v40d = CALLER 
    0x40e: v40e(0x1) = CONST 
    0x410: v410(0x1) = CONST 
    0x412: v412(0xa0) = CONST 
    0x414: v414(0x10000000000000000000000000000000000000000) = SHL v412(0xa0), v410(0x1)
    0x415: v415(0xffffffffffffffffffffffffffffffffffffffff) = SUB v414(0x10000000000000000000000000000000000000000), v40e(0x1)
    0x416: v416 = AND v415(0xffffffffffffffffffffffffffffffffffffffff), v40d
    0x417: v417 = EQ v416, v40c
    0x418: v418(0x452) = CONST 
    0x41b: JUMPI v418(0x452), v417

    Begin block 0x41c
    prev=[0x403], succ=[]
    =================================
    0x41c: v41c(0x40) = CONST 
    0x41e: v41e = MLOAD v41c(0x40)
    0x41f: v41f(0x461bcd) = CONST 
    0x423: v423(0xe5) = CONST 
    0x425: v425(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v423(0xe5), v41f(0x461bcd)
    0x427: MSTORE v41e, v425(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x428: v428(0x4) = CONST 
    0x42a: v42a = ADD v428(0x4), v41e
    0x42d: v42d(0x20) = CONST 
    0x42f: v42f = ADD v42d(0x20), v42a
    0x432: v432(0x20) = SUB v42f, v42a
    0x434: MSTORE v42a, v432(0x20)
    0x435: v435(0x2f) = CONST 
    0x438: MSTORE v42f, v435(0x2f)
    0x439: v439(0x20) = CONST 
    0x43b: v43b = ADD v439(0x20), v42f
    0x43d: v43d(0x9d7) = CONST 
    0x440: v440(0x2f) = CONST 
    0x443: CODECOPY v43b, v43d(0x9d7), v440(0x2f)
    0x444: v444(0x40) = CONST 
    0x446: v446 = ADD v444(0x40), v43b
    0x44a: v44a(0x40) = CONST 
    0x44c: v44c = MLOAD v44a(0x40)
    0x44f: v44f(0x84) = SUB v446, v44c
    0x451: REVERT v44c, v44f(0x84)

    Begin block 0x452
    prev=[0x403], succ=[0x976B0x452]
    =================================
    0x453: v453(0xd95) = CONST 
    0x456: v456(0x40) = CONST 
    0x458: v458 = MLOAD v456(0x40)
    0x459: v459(0x20) = CONST 
    0x45b: v45b = ADD v459(0x20), v458
    0x45e: v45e(0x14105554d15117d4d313d5) = CONST 
    0x46a: v46a(0xaa) = CONST 
    0x46c: v46c(0x5041555345445f534c4f54000000000000000000000000000000000000000000) = SHL v46a(0xaa), v45e(0x14105554d15117d4d313d5)
    0x46e: MSTORE v45b, v46c(0x5041555345445f534c4f54000000000000000000000000000000000000000000)
    0x470: v470(0xb) = CONST 
    0x472: v472 = ADD v470(0xb), v45b
    0x475: v475(0x40) = CONST 
    0x477: v477 = MLOAD v475(0x40)
    0x478: v478(0x20) = CONST 
    0x47c: v47c(0x2b) = SUB v472, v477
    0x47d: v47d(0xb) = SUB v47c(0x2b), v478(0x20)
    0x47f: MSTORE v477, v47d(0xb)
    0x481: v481(0x40) = CONST 
    0x483: MSTORE v481(0x40), v472
    0x485: v485(0xb) = MLOAD v477
    0x487: v487(0x20) = CONST 
    0x489: v489 = ADD v487(0x20), v477
    0x48a: v48a = SHA3 v489, v485(0xb)
    0x48c: v48c(0x976) = CONST 
    0x48f: JUMP v48c(0x976), v11f, v48a, v453(0xd95)

    Begin block 0x976B0x452
    prev=[0x452], succ=[0x97dB0x452, 0x98cB0x452]
    =================================
    0x978S0x452: v978V452 = ISZERO v11f
    0x979S0x452: v979V452(0x98c) = CONST 
    0x97cS0x452: JUMPI v979V452(0x98c), v978V452

    Begin block 0x97dB0x452
    prev=[0x976B0x452], succ=[0x9a8B0x97dB0x452]
    =================================
    0x97dS0x452: v97dV452(0x987) = CONST 
    0x981S0x452: v981V452(0x1) = CONST 
    0x983S0x452: v983V452(0x9a8) = CONST 
    0x986S0x452: JUMP v983V452(0x9a8), v981V452(0x1), v48a, v97dV452(0x987)

    Begin block 0x9a8B0x97dB0x452
    prev=[0x97dB0x452], succ=[0x987B0x452]
    =================================
    0x9aaS0x97dS0x452: SSTORE v48a, v981V452(0x1)
    0x9abS0x97dS0x452: JUMP v97dV452(0x987)

    Begin block 0x987B0x452
    prev=[0x9a8B0x97dB0x452], succ=[0xef0B0x452]
    =================================
    0x988S0x452: v988V452(0xef0) = CONST 
    0x98bS0x452: JUMP v988V452(0xef0)

    Begin block 0xef0B0x452
    prev=[0x987B0x452], succ=[0xd95]
    =================================
    0xef3S0x452: JUMP v453(0xd95)

    Begin block 0xd95
    prev=[0xef0B0x452, 0xf13B0x452], succ=[0xabe]
    =================================
    0xd97: JUMP v106(0xabe)

    Begin block 0xabe
    prev=[0xd95], succ=[]
    =================================
    0xabf: STOP 

    Begin block 0x98cB0x452
    prev=[0x976B0x452], succ=[0x9a8B0x98cB0x452]
    =================================
    0x98dS0x452: v98dV452(0xf13) = CONST 
    0x991S0x452: v991V452(0x0) = CONST 
    0x993S0x452: v993V452(0x9a8) = CONST 
    0x996S0x452: JUMP v993V452(0x9a8), v991V452(0x0), v48a, v98dV452(0xf13)

    Begin block 0x9a8B0x98cB0x452
    prev=[0x98cB0x452], succ=[0xf13B0x452]
    =================================
    0x9aaS0x98cS0x452: SSTORE v48a, v991V452(0x0)
    0x9abS0x98cS0x452: JUMP v98dV452(0xf13)

    Begin block 0xf13B0x452
    prev=[0x9a8B0x98cB0x452], succ=[0xd95]
    =================================
    0xf16S0x452: JUMP v453(0xd95)

}

