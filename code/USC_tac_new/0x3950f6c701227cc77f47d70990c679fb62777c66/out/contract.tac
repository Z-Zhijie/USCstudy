function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x1202]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x11ab: v11ab(0x1202) = CONST 
    0x11ac: JUMPI v11ab(0x1202), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x71, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x9c44d17a) = CONST 
    0x26: v26 = GT v21(0x9c44d17a), v1f
    0x27: v27(0x71) = CONST 
    0x2a: JUMPI v27(0x71), v26

    Begin block 0x71
    prev=[0x1a], succ=[0x11c5, 0x7d]
    =================================
    0x73: v73(0x5188f996) = CONST 
    0x78: v78 = EQ v73(0x5188f996), v1f
    0x11b9: v11b9(0x11c5) = CONST 
    0x11ba: JUMPI v11b9(0x11c5), v78

    Begin block 0x11c5
    prev=[0x71], succ=[]
    =================================
    0x11c6: v11c6(0xb9) = CONST 
    0x11c7: CALLPRIVATE v11c6(0xb9)

    Begin block 0x7d
    prev=[0x71], succ=[0x11c8, 0x88]
    =================================
    0x7e: v7e(0x715018a6) = CONST 
    0x83: v83 = EQ v7e(0x715018a6), v1f
    0x11bb: v11bb(0x11c8) = CONST 
    0x11bc: JUMPI v11bb(0x11c8), v83

    Begin block 0x11c8
    prev=[0x7d], succ=[]
    =================================
    0x11c9: v11c9(0xe7) = CONST 
    0x11ca: CALLPRIVATE v11c9(0xe7)

    Begin block 0x88
    prev=[0x7d], succ=[0x11cb, 0x93]
    =================================
    0x89: v89(0x8129fc1c) = CONST 
    0x8e: v8e = EQ v89(0x8129fc1c), v1f
    0x11bd: v11bd(0x11cb) = CONST 
    0x11be: JUMPI v11bd(0x11cb), v8e

    Begin block 0x11cb
    prev=[0x88], succ=[]
    =================================
    0x11cc: v11cc(0xef) = CONST 
    0x11cd: CALLPRIVATE v11cc(0xef)

    Begin block 0x93
    prev=[0x88], succ=[0x11ce, 0x9e]
    =================================
    0x94: v94(0x8da5cb5b) = CONST 
    0x99: v99 = EQ v94(0x8da5cb5b), v1f
    0x11bf: v11bf(0x11ce) = CONST 
    0x11c0: JUMPI v11bf(0x11ce), v99

    Begin block 0x11ce
    prev=[0x93], succ=[]
    =================================
    0x11cf: v11cf(0xf7) = CONST 
    0x11d0: CALLPRIVATE v11cf(0xf7)

    Begin block 0x9e
    prev=[0x93], succ=[0x11d1, 0xa9]
    =================================
    0x9f: v9f(0x8f32d59b) = CONST 
    0xa4: va4 = EQ v9f(0x8f32d59b), v1f
    0x11c1: v11c1(0x11d1) = CONST 
    0x11c2: JUMPI v11c1(0x11d1), va4

    Begin block 0x11d1
    prev=[0x9e], succ=[]
    =================================
    0x11d2: v11d2(0x11b) = CONST 
    0x11d3: CALLPRIVATE v11d2(0x11b)

    Begin block 0xa9
    prev=[0x9e], succ=[0x11d4, 0xb4]
    =================================
    0xaa: vaa(0x96f27b29) = CONST 
    0xaf: vaf = EQ vaa(0x96f27b29), v1f
    0x11c3: v11c3(0x11d4) = CONST 
    0x11c4: JUMPI v11c3(0x11d4), vaf

    Begin block 0x11d4
    prev=[0xa9], succ=[]
    =================================
    0x11d5: v11d5(0x137) = CONST 
    0x11d6: CALLPRIVATE v11d5(0x137)

    Begin block 0xb4
    prev=[0xa9], succ=[]
    =================================
    0xb5: vb5(0x0) = CONST 
    0xb8: REVERT vb5(0x0), vb5(0x0)

    Begin block 0x2b
    prev=[0x1a], succ=[0x36, 0x11d7]
    =================================
    0x2c: v2c(0x9c44d17a) = CONST 
    0x31: v31 = EQ v2c(0x9c44d17a), v1f
    0x11ad: v11ad(0x11d7) = CONST 
    0x11ae: JUMPI v11ad(0x11d7), v31

    Begin block 0x36
    prev=[0x2b], succ=[0x11da, 0x41]
    =================================
    0x37: v37(0xa43e04d8) = CONST 
    0x3c: v3c = EQ v37(0xa43e04d8), v1f
    0x11af: v11af(0x11da) = CONST 
    0x11b0: JUMPI v11af(0x11da), v3c

    Begin block 0x11da
    prev=[0x36], succ=[]
    =================================
    0x11db: v11db(0x186) = CONST 
    0x11dc: CALLPRIVATE v11db(0x186)

    Begin block 0x41
    prev=[0x36], succ=[0x11dd, 0x4c]
    =================================
    0x42: v42(0xc4d66de8) = CONST 
    0x47: v47 = EQ v42(0xc4d66de8), v1f
    0x11b1: v11b1(0x11dd) = CONST 
    0x11b2: JUMPI v11b1(0x11dd), v47

    Begin block 0x11dd
    prev=[0x41], succ=[]
    =================================
    0x11de: v11de(0x1a3) = CONST 
    0x11df: CALLPRIVATE v11de(0x1a3)

    Begin block 0x4c
    prev=[0x41], succ=[0x11e0, 0x57]
    =================================
    0x4d: v4d(0xe16c7d98) = CONST 
    0x52: v52 = EQ v4d(0xe16c7d98), v1f
    0x11b3: v11b3(0x11e0) = CONST 
    0x11b4: JUMPI v11b3(0x11e0), v52

    Begin block 0x11e0
    prev=[0x4c], succ=[]
    =================================
    0x11e1: v11e1(0x1c9) = CONST 
    0x11e2: CALLPRIVATE v11e1(0x1c9)

    Begin block 0x57
    prev=[0x4c], succ=[0x11e3, 0x62]
    =================================
    0x58: v58(0xefa6bc43) = CONST 
    0x5d: v5d = EQ v58(0xefa6bc43), v1f
    0x11b5: v11b5(0x11e3) = CONST 
    0x11b6: JUMPI v11b5(0x11e3), v5d

    Begin block 0x11e3
    prev=[0x57], succ=[]
    =================================
    0x11e4: v11e4(0x1e6) = CONST 
    0x11e5: CALLPRIVATE v11e4(0x1e6)

    Begin block 0x62
    prev=[0x57], succ=[0x6d, 0x11e6]
    =================================
    0x63: v63(0xf2fde38b) = CONST 
    0x68: v68 = EQ v63(0xf2fde38b), v1f
    0x11b7: v11b7(0x11e6) = CONST 
    0x11b8: JUMPI v11b7(0x11e6), v68

    Begin block 0x6d
    prev=[0x62], succ=[0xf86]
    =================================
    0x6d: v6d(0xf86) = CONST 
    0x70: JUMP v6d(0xf86)

    Begin block 0xf86
    prev=[0x6d], succ=[]
    =================================
    0xf87: vf87(0x0) = CONST 
    0xf8a: REVERT vf87(0x0), vf87(0x0)

    Begin block 0x11e6
    prev=[0x62], succ=[]
    =================================
    0x11e7: v11e7(0x215) = CONST 
    0x11e8: CALLPRIVATE v11e7(0x215)

    Begin block 0x11d7
    prev=[0x2b], succ=[]
    =================================
    0x11d8: v11d8(0x15a) = CONST 
    0x11d9: CALLPRIVATE v11d8(0x15a)

    Begin block 0x1202
    prev=[0x10], succ=[]
    =================================
    0x1203: v1203(0xf62) = CONST 
    0x1204: CALLPRIVATE v1203(0xf62)

}

function isOwner()() public {
    Begin block 0x11b
    prev=[], succ=[0x524B0x11b]
    =================================
    0x11c: v11c(0x123) = CONST 
    0x11f: v11f(0x524) = CONST 
    0x122: JUMP v11f(0x524)

    Begin block 0x524B0x11b
    prev=[0x11b], succ=[0xc23B0x11b]
    =================================
    0x525S0x11b: v525V11b(0x33) = CONST 
    0x527S0x11b: v527V11b = SLOAD v525V11b(0x33)
    0x528S0x11b: v528V11b(0x0) = CONST 
    0x52bS0x11b: v52bV11b(0x100) = CONST 
    0x52fS0x11b: v52fV11b = DIV v527V11b, v52bV11b(0x100)
    0x530S0x11b: v530V11b(0x1) = CONST 
    0x532S0x11b: v532V11b(0x1) = CONST 
    0x534S0x11b: v534V11b(0xa0) = CONST 
    0x536S0x11b: v536V11b(0x10000000000000000000000000000000000000000) = SHL v534V11b(0xa0), v532V11b(0x1)
    0x537S0x11b: v537V11b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536V11b(0x10000000000000000000000000000000000000000), v530V11b(0x1)
    0x538S0x11b: v538V11b = AND v537V11b(0xffffffffffffffffffffffffffffffffffffffff), v52fV11b
    0x539S0x11b: v539V11b(0x540) = CONST 
    0x53cS0x11b: v53cV11b(0xc23) = CONST 
    0x53fS0x11b: JUMP v53cV11b(0xc23)

    Begin block 0xc23B0x11b
    prev=[0x524B0x11b], succ=[0x540B0x11b]
    =================================
    0xc24S0x11b: vc24V11b = CALLER 
    0xc26S0x11b: JUMP v539V11b(0x540)

    Begin block 0x540B0x11b
    prev=[0xc23B0x11b], succ=[0x123]
    =================================
    0x541S0x11b: v541V11b(0x1) = CONST 
    0x543S0x11b: v543V11b(0x1) = CONST 
    0x545S0x11b: v545V11b(0xa0) = CONST 
    0x547S0x11b: v547V11b(0x10000000000000000000000000000000000000000) = SHL v545V11b(0xa0), v543V11b(0x1)
    0x548S0x11b: v548V11b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547V11b(0x10000000000000000000000000000000000000000), v541V11b(0x1)
    0x549S0x11b: v549V11b = AND v548V11b(0xffffffffffffffffffffffffffffffffffffffff), vc24V11b
    0x54aS0x11b: v54aV11b = EQ v549V11b, v538V11b
    0x54eS0x11b: JUMP v11c(0x123)

    Begin block 0x123
    prev=[0x540B0x11b], succ=[]
    =================================
    0x124: v124(0x40) = CONST 
    0x127: v127 = MLOAD v124(0x40)
    0x129: v129 = ISZERO v54aV11b
    0x12a: v12a = ISZERO v129
    0x12c: MSTORE v127, v12a
    0x12d: v12d = MLOAD v124(0x40)
    0x131: v131(0x0) = SUB v127, v12d
    0x132: v132(0x20) = CONST 
    0x134: v134(0x20) = ADD v132(0x20), v131(0x0)
    0x136: RETURN v12d, v134(0x20)

}

function getContract(bytes32,uint256)() public {
    Begin block 0x137
    prev=[], succ=[0x149, 0x14d]
    =================================
    0x138: v138(0x1048) = CONST 
    0x13b: v13b(0x4) = CONST 
    0x13e: v13e = CALLDATASIZE 
    0x13f: v13f = SUB v13e, v13b(0x4)
    0x140: v140(0x40) = CONST 
    0x143: v143 = LT v13f, v140(0x40)
    0x144: v144 = ISZERO v143
    0x145: v145(0x14d) = CONST 
    0x148: JUMPI v145(0x14d), v144

    Begin block 0x149
    prev=[0x137], succ=[]
    =================================
    0x149: v149(0x0) = CONST 
    0x14c: REVERT v149(0x0), v149(0x0)

    Begin block 0x14d
    prev=[0x137], succ=[0x54f]
    =================================
    0x150: v150 = CALLDATALOAD v13b(0x4)
    0x152: v152(0x20) = CONST 
    0x154: v154(0x24) = ADD v152(0x20), v13b(0x4)
    0x155: v155 = CALLDATALOAD v154(0x24)
    0x156: v156(0x54f) = CONST 
    0x159: JUMP v156(0x54f)

    Begin block 0x54f
    prev=[0x14d], succ=[0x559]
    =================================
    0x550: v550(0x0) = CONST 
    0x552: v552(0x559) = CONST 
    0x555: v555(0x9f6) = CONST 
    0x558: CALLPRIVATE v555(0x9f6), v552(0x559)

    Begin block 0x559
    prev=[0x54f], succ=[0x570, 0x5a6]
    =================================
    0x55a: v55a(0x0) = CONST 
    0x55e: MSTORE v55a(0x0), v150
    0x55f: v55f(0x67) = CONST 
    0x561: v561(0x20) = CONST 
    0x563: MSTORE v561(0x20), v55f(0x67)
    0x564: v564(0x40) = CONST 
    0x567: v567 = SHA3 v55a(0x0), v564(0x40)
    0x568: v568 = SLOAD v567
    0x56a: v56a = GT v155, v568
    0x56b: v56b = ISZERO v56a
    0x56c: v56c(0x5a6) = CONST 
    0x56f: JUMPI v56c(0x5a6), v56b

    Begin block 0x570
    prev=[0x559], succ=[]
    =================================
    0x570: v570(0x40) = CONST 
    0x572: v572 = MLOAD v570(0x40)
    0x573: v573(0x461bcd) = CONST 
    0x577: v577(0xe5) = CONST 
    0x579: v579(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v577(0xe5), v573(0x461bcd)
    0x57b: MSTORE v572, v579(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x57c: v57c(0x4) = CONST 
    0x57e: v57e = ADD v57c(0x4), v572
    0x581: v581(0x20) = CONST 
    0x583: v583 = ADD v581(0x20), v57e
    0x586: v586(0x20) = SUB v583, v57e
    0x588: MSTORE v57e, v586(0x20)
    0x589: v589(0x26) = CONST 
    0x58c: MSTORE v583, v589(0x26)
    0x58d: v58d(0x20) = CONST 
    0x58f: v58f = ADD v58d(0x20), v583
    0x591: v591(0xede) = CONST 
    0x594: v594(0x26) = CONST 
    0x597: CODECOPY v58f, v591(0xede), v594(0x26)
    0x598: v598(0x40) = CONST 
    0x59a: v59a = ADD v598(0x40), v58f
    0x59e: v59e(0x40) = CONST 
    0x5a0: v5a0 = MLOAD v59e(0x40)
    0x5a3: v5a3(0x84) = SUB v59a, v5a0
    0x5a5: REVERT v5a0, v5a3(0x84)

    Begin block 0x5a6
    prev=[0x559], succ=[0xc27B0x5a6]
    =================================
    0x5a7: v5a7(0x0) = CONST 
    0x5ab: MSTORE v5a7(0x0), v150
    0x5ac: v5ac(0x67) = CONST 
    0x5ae: v5ae(0x20) = CONST 
    0x5b0: MSTORE v5ae(0x20), v5ac(0x67)
    0x5b1: v5b1(0x40) = CONST 
    0x5b4: v5b4 = SHA3 v5a7(0x0), v5b1(0x40)
    0x5b5: v5b5(0x5c5) = CONST 
    0x5b9: v5b9(0x1) = CONST 
    0x5bb: v5bb(0xffffffff) = CONST 
    0x5c0: v5c0(0xc27) = CONST 
    0x5c3: v5c3(0xc27) = AND v5c0(0xc27), v5bb(0xffffffff)
    0x5c4: JUMP v5c3(0xc27)

    Begin block 0xc27B0x5a6
    prev=[0x5a6], succ=[0xd1cB0x5a6]
    =================================
    0xc28S0x5a6: vc28V5a6(0x0) = CONST 
    0xc2aS0x5a6: vc2aV5a6(0xc69) = CONST 
    0xc2fS0x5a6: vc2fV5a6(0x40) = CONST 
    0xc31S0x5a6: vc31V5a6 = MLOAD vc2fV5a6(0x40)
    0xc33S0x5a6: vc33V5a6(0x40) = CONST 
    0xc35S0x5a6: vc35V5a6 = ADD vc33V5a6(0x40), vc31V5a6
    0xc36S0x5a6: vc36V5a6(0x40) = CONST 
    0xc38S0x5a6: MSTORE vc36V5a6(0x40), vc35V5a6
    0xc3aS0x5a6: vc3aV5a6(0x1e) = CONST 
    0xc3dS0x5a6: MSTORE vc31V5a6, vc3aV5a6(0x1e)
    0xc3eS0x5a6: vc3eV5a6(0x20) = CONST 
    0xc40S0x5a6: vc40V5a6 = ADD vc3eV5a6(0x20), vc31V5a6
    0xc41S0x5a6: vc41V5a6(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
    0xc63S0x5a6: MSTORE vc40V5a6, vc41V5a6(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
    0xc65S0x5a6: vc65V5a6(0xd1c) = CONST 
    0xc68S0x5a6: JUMP vc65V5a6(0xd1c)

    Begin block 0xd1cB0x5a6
    prev=[0xc27B0x5a6], succ=[0xd28B0x5a6, 0xd6eB0x5a6]
    =================================
    0xd1dS0x5a6: vd1dV5a6(0x0) = CONST 
    0xd22S0x5a6: vd22V5a6 = GT v5b9(0x1), v155
    0xd23S0x5a6: vd23V5a6 = ISZERO vd22V5a6
    0xd24S0x5a6: vd24V5a6(0xd6e) = CONST 
    0xd27S0x5a6: JUMPI vd24V5a6(0xd6e), vd23V5a6

    Begin block 0xd28B0x5a6
    prev=[0xd1cB0x5a6], succ=[0xd5fB0x5a6, 0xa830xc27B0x5a6]
    =================================
    0xd28S0x5a6: vd28V5a6(0x40) = CONST 
    0xd2aS0x5a6: vd2aV5a6 = MLOAD vd28V5a6(0x40)
    0xd2bS0x5a6: vd2bV5a6(0x461bcd) = CONST 
    0xd2fS0x5a6: vd2fV5a6(0xe5) = CONST 
    0xd31S0x5a6: vd31V5a6(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vd2fV5a6(0xe5), vd2bV5a6(0x461bcd)
    0xd33S0x5a6: MSTORE vd2aV5a6, vd31V5a6(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xd34S0x5a6: vd34V5a6(0x20) = CONST 
    0xd36S0x5a6: vd36V5a6(0x4) = CONST 
    0xd39S0x5a6: vd39V5a6 = ADD vd2aV5a6, vd36V5a6(0x4)
    0xd3cS0x5a6: MSTORE vd39V5a6, vd34V5a6(0x20)
    0xd3eS0x5a6: vd3eV5a6(0x1e) = MLOAD vc31V5a6
    0xd3fS0x5a6: vd3fV5a6(0x24) = CONST 
    0xd42S0x5a6: vd42V5a6 = ADD vd2aV5a6, vd3fV5a6(0x24)
    0xd43S0x5a6: MSTORE vd42V5a6, vd3eV5a6(0x1e)
    0xd45S0x5a6: vd45V5a6(0x1e) = MLOAD vc31V5a6
    0xd4aS0x5a6: vd4aV5a6(0x44) = CONST 
    0xd4eS0x5a6: vd4eV5a6 = ADD vd2aV5a6, vd4aV5a6(0x44)
    0xd52S0x5a6: vd52V5a6 = ADD vc31V5a6, vd34V5a6(0x20)
    0xd57S0x5a6: vd57V5a6(0x0) = CONST 
    0xd5aS0x5a6: vd5aV5a6 = ISZERO vd45V5a6(0x1e)
    0xd5bS0x5a6: vd5bV5a6(0xa83) = CONST 
    0xd5eS0x5a6: JUMPI vd5bV5a6(0xa83), vd5aV5a6

    Begin block 0xd5fB0x5a6
    prev=[0xd28B0x5a6], succ=[0xa6b0xc27B0x5a6]
    =================================
    0xd61S0x5a6: vd61V5a6 = ADD vd57V5a6(0x0), vd52V5a6
    0xd62S0x5a6: vd62V5a6 = MLOAD vd61V5a6
    0xd65S0x5a6: vd65V5a6 = ADD vd57V5a6(0x0), vd4eV5a6
    0xd66S0x5a6: MSTORE vd65V5a6, vd62V5a6
    0xd67S0x5a6: vd67V5a6(0x20) = CONST 
    0xd69S0x5a6: vd69V5a6(0x20) = ADD vd67V5a6(0x20), vd57V5a6(0x0)
    0xd6aS0x5a6: vd6aV5a6(0xa6b) = CONST 
    0xd6dS0x5a6: JUMP vd6aV5a6(0xa6b)

    Begin block 0xa6b0xc27B0x5a6
    prev=[0xd5fB0x5a6, 0xa740xc27B0x5a6], succ=[0xa740xc27B0x5a6, 0xa830xc27B0x5a6]
    =================================
    0xa6b0xc27_0x0S0x5a6: va6bc27_0V5a6 = PHI vd69V5a6(0x20), vc27a7eV5a6
    0xa6e0xc27S0x5a6: vc27a6eV5a6 = LT va6bc27_0V5a6, vd45V5a6(0x1e)
    0xa6f0xc27S0x5a6: vc27a6fV5a6 = ISZERO vc27a6eV5a6
    0xa700xc27S0x5a6: vc27a70V5a6(0xa83) = CONST 
    0xa730xc27S0x5a6: JUMPI vc27a70V5a6(0xa83), vc27a6fV5a6

    Begin block 0xa740xc27B0x5a6
    prev=[0xa6b0xc27B0x5a6], succ=[0xa6b0xc27B0x5a6]
    =================================
    0xa740xc27_0x0S0x5a6: va74c27_0V5a6 = PHI vd69V5a6(0x20), vc27a7eV5a6
    0xa760xc27S0x5a6: vc27a76V5a6 = ADD va74c27_0V5a6, vd52V5a6
    0xa770xc27S0x5a6: vc27a77V5a6 = MLOAD vc27a76V5a6
    0xa7a0xc27S0x5a6: vc27a7aV5a6 = ADD va74c27_0V5a6, vd4eV5a6
    0xa7b0xc27S0x5a6: MSTORE vc27a7aV5a6, vc27a77V5a6
    0xa7c0xc27S0x5a6: vc27a7cV5a6(0x20) = CONST 
    0xa7e0xc27S0x5a6: vc27a7eV5a6 = ADD vc27a7cV5a6(0x20), va74c27_0V5a6
    0xa7f0xc27S0x5a6: vc27a7fV5a6(0xa6b) = CONST 
    0xa820xc27S0x5a6: JUMP vc27a7fV5a6(0xa6b)

    Begin block 0xa830xc27B0x5a6
    prev=[0xd28B0x5a6, 0xa6b0xc27B0x5a6], succ=[0xa970xc27B0x5a6, 0xab00xc27B0x5a6]
    =================================
    0xa8c0xc27S0x5a6: vc27a8cV5a6 = ADD vd45V5a6(0x1e), vd4eV5a6
    0xa8e0xc27S0x5a6: vc27a8eV5a6(0x1f) = CONST 
    0xa900xc27S0x5a6: vc27a90V5a6(0x1e) = AND vc27a8eV5a6(0x1f), vd45V5a6(0x1e)
    0xa920xc27S0x5a6: vc27a92V5a6 = ISZERO vc27a90V5a6(0x1e)
    0xa930xc27S0x5a6: vc27a93V5a6(0xab0) = CONST 
    0xa960xc27S0x5a6: JUMPI vc27a93V5a6(0xab0), vc27a92V5a6

    Begin block 0xa970xc27B0x5a6
    prev=[0xa830xc27B0x5a6], succ=[0xab00xc27B0x5a6]
    =================================
    0xa990xc27S0x5a6: vc27a99V5a6 = SUB vc27a8cV5a6, vc27a90V5a6(0x1e)
    0xa9b0xc27S0x5a6: vc27a9bV5a6 = MLOAD vc27a99V5a6
    0xa9c0xc27S0x5a6: vc27a9cV5a6(0x1) = CONST 
    0xa9f0xc27S0x5a6: vc27a9fV5a6(0x20) = CONST 
    0xaa10xc27S0x5a6: vc27aa1V5a6(0x2) = SUB vc27a9fV5a6(0x20), vc27a90V5a6(0x1e)
    0xaa20xc27S0x5a6: vc27aa2V5a6(0x100) = CONST 
    0xaa50xc27S0x5a6: vc27aa5V5a6(0x10000) = EXP vc27aa2V5a6(0x100), vc27aa1V5a6(0x2)
    0xaa60xc27S0x5a6: vc27aa6V5a6(0xffff) = SUB vc27aa5V5a6(0x10000), vc27a9cV5a6(0x1)
    0xaa70xc27S0x5a6: vc27aa7V5a6 = NOT vc27aa6V5a6(0xffff)
    0xaa80xc27S0x5a6: vc27aa8V5a6 = AND vc27aa7V5a6, vc27a9bV5a6
    0xaaa0xc27S0x5a6: MSTORE vc27a99V5a6, vc27aa8V5a6
    0xaab0xc27S0x5a6: vc27aabV5a6(0x20) = CONST 
    0xaad0xc27S0x5a6: vc27aadV5a6 = ADD vc27aabV5a6(0x20), vc27a99V5a6

    Begin block 0xab00xc27B0x5a6
    prev=[0xa830xc27B0x5a6, 0xa970xc27B0x5a6], succ=[]
    =================================
    0xab00xc27_0x1S0x5a6: vab0c27_1V5a6 = PHI vc27a8cV5a6, vc27aadV5a6
    0xab60xc27S0x5a6: vc27ab6V5a6(0x40) = CONST 
    0xab80xc27S0x5a6: vc27ab8V5a6 = MLOAD vc27ab6V5a6(0x40)
    0xabb0xc27S0x5a6: vc27abbV5a6 = SUB vab0c27_1V5a6, vc27ab8V5a6
    0xabd0xc27S0x5a6: REVERT vc27ab8V5a6, vc27abbV5a6

    Begin block 0xd6eB0x5a6
    prev=[0xd1cB0x5a6], succ=[0xc69B0x5a6]
    =================================
    0xd73S0x5a6: vd73V5a6 = SUB v155, v5b9(0x1)
    0xd75S0x5a6: JUMP vc2aV5a6(0xc69)

    Begin block 0xc69B0x5a6
    prev=[0xd6eB0x5a6], succ=[0x5c5]
    =================================
    0xc6fS0x5a6: JUMP v5b5(0x5c5)

    Begin block 0x5c5
    prev=[0xc69B0x5a6], succ=[0x5ce, 0x5cf]
    =================================
    0x5c7: v5c7 = SLOAD v5b4
    0x5c9: v5c9 = LT vd73V5a6, v5c7
    0x5ca: v5ca(0x5cf) = CONST 
    0x5cd: JUMPI v5ca(0x5cf), v5c9

    Begin block 0x5ce
    prev=[0x5c5], succ=[]
    =================================
    0x5ce: THROW 

    Begin block 0x5cf
    prev=[0x5c5], succ=[0x1048]
    =================================
    0x5d0: v5d0(0x0) = CONST 
    0x5d4: MSTORE v5d0(0x0), v5b4
    0x5d5: v5d5(0x20) = CONST 
    0x5d9: v5d9 = SHA3 v5d0(0x0), v5d5(0x20)
    0x5da: v5da = ADD v5d9, vd73V5a6
    0x5db: v5db = SLOAD v5da
    0x5dc: v5dc(0x1) = CONST 
    0x5de: v5de(0x1) = CONST 
    0x5e0: v5e0(0xa0) = CONST 
    0x5e2: v5e2(0x10000000000000000000000000000000000000000) = SHL v5e0(0xa0), v5de(0x1)
    0x5e3: v5e3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5e2(0x10000000000000000000000000000000000000000), v5dc(0x1)
    0x5e4: v5e4 = AND v5e3(0xffffffffffffffffffffffffffffffffffffffff), v5db
    0x5ea: JUMP v138(0x1048)

    Begin block 0x1048
    prev=[0x5cf], succ=[]
    =================================
    0x1049: v1049(0x40) = CONST 
    0x104c: v104c = MLOAD v1049(0x40)
    0x104d: v104d(0x1) = CONST 
    0x104f: v104f(0x1) = CONST 
    0x1051: v1051(0xa0) = CONST 
    0x1053: v1053(0x10000000000000000000000000000000000000000) = SHL v1051(0xa0), v104f(0x1)
    0x1054: v1054(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1053(0x10000000000000000000000000000000000000000), v104d(0x1)
    0x1057: v1057 = AND v5e4, v1054(0xffffffffffffffffffffffffffffffffffffffff)
    0x1059: MSTORE v104c, v1057
    0x105a: v105a = MLOAD v1049(0x40)
    0x105e: v105e(0x0) = SUB v104c, v105a
    0x105f: v105f(0x20) = CONST 
    0x1061: v1061(0x20) = ADD v105f(0x20), v105e(0x0)
    0x1063: RETURN v105a, v1061(0x20)

}

function upgradeContract(bytes32,address)() public {
    Begin block 0x15a
    prev=[], succ=[0x16c, 0x170]
    =================================
    0x15b: v15b(0x1083) = CONST 
    0x15e: v15e(0x4) = CONST 
    0x161: v161 = CALLDATASIZE 
    0x162: v162 = SUB v161, v15e(0x4)
    0x163: v163(0x40) = CONST 
    0x166: v166 = LT v162, v163(0x40)
    0x167: v167 = ISZERO v166
    0x168: v168(0x170) = CONST 
    0x16b: JUMPI v168(0x170), v167

    Begin block 0x16c
    prev=[0x15a], succ=[]
    =================================
    0x16c: v16c(0x0) = CONST 
    0x16f: REVERT v16c(0x0), v16c(0x0)

    Begin block 0x170
    prev=[0x15a], succ=[0x5eb]
    =================================
    0x173: v173 = CALLDATALOAD v15e(0x4)
    0x175: v175(0x20) = CONST 
    0x177: v177(0x24) = ADD v175(0x20), v15e(0x4)
    0x178: v178 = CALLDATALOAD v177(0x24)
    0x179: v179(0x1) = CONST 
    0x17b: v17b(0x1) = CONST 
    0x17d: v17d(0xa0) = CONST 
    0x17f: v17f(0x10000000000000000000000000000000000000000) = SHL v17d(0xa0), v17b(0x1)
    0x180: v180(0xffffffffffffffffffffffffffffffffffffffff) = SUB v17f(0x10000000000000000000000000000000000000000), v179(0x1)
    0x181: v181 = AND v180(0xffffffffffffffffffffffffffffffffffffffff), v178
    0x182: v182(0x5eb) = CONST 
    0x185: JUMP v182(0x5eb)

    Begin block 0x5eb
    prev=[0x170], succ=[0x524B0x5eb]
    =================================
    0x5ec: v5ec(0x5f3) = CONST 
    0x5ef: v5ef(0x524) = CONST 
    0x5f2: JUMP v5ef(0x524)

    Begin block 0x524B0x5eb
    prev=[0x5eb], succ=[0xc23B0x5eb]
    =================================
    0x525S0x5eb: v525V5eb(0x33) = CONST 
    0x527S0x5eb: v527V5eb = SLOAD v525V5eb(0x33)
    0x528S0x5eb: v528V5eb(0x0) = CONST 
    0x52bS0x5eb: v52bV5eb(0x100) = CONST 
    0x52fS0x5eb: v52fV5eb = DIV v527V5eb, v52bV5eb(0x100)
    0x530S0x5eb: v530V5eb(0x1) = CONST 
    0x532S0x5eb: v532V5eb(0x1) = CONST 
    0x534S0x5eb: v534V5eb(0xa0) = CONST 
    0x536S0x5eb: v536V5eb(0x10000000000000000000000000000000000000000) = SHL v534V5eb(0xa0), v532V5eb(0x1)
    0x537S0x5eb: v537V5eb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536V5eb(0x10000000000000000000000000000000000000000), v530V5eb(0x1)
    0x538S0x5eb: v538V5eb = AND v537V5eb(0xffffffffffffffffffffffffffffffffffffffff), v52fV5eb
    0x539S0x5eb: v539V5eb(0x540) = CONST 
    0x53cS0x5eb: v53cV5eb(0xc23) = CONST 
    0x53fS0x5eb: JUMP v53cV5eb(0xc23)

    Begin block 0xc23B0x5eb
    prev=[0x524B0x5eb], succ=[0x540B0x5eb]
    =================================
    0xc24S0x5eb: vc24V5eb = CALLER 
    0xc26S0x5eb: JUMP v539V5eb(0x540)

    Begin block 0x540B0x5eb
    prev=[0xc23B0x5eb], succ=[0x5f3]
    =================================
    0x541S0x5eb: v541V5eb(0x1) = CONST 
    0x543S0x5eb: v543V5eb(0x1) = CONST 
    0x545S0x5eb: v545V5eb(0xa0) = CONST 
    0x547S0x5eb: v547V5eb(0x10000000000000000000000000000000000000000) = SHL v545V5eb(0xa0), v543V5eb(0x1)
    0x548S0x5eb: v548V5eb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547V5eb(0x10000000000000000000000000000000000000000), v541V5eb(0x1)
    0x549S0x5eb: v549V5eb = AND v548V5eb(0xffffffffffffffffffffffffffffffffffffffff), vc24V5eb
    0x54aS0x5eb: v54aV5eb = EQ v549V5eb, v538V5eb
    0x54eS0x5eb: JUMP v5ec(0x5f3)

    Begin block 0x5f3
    prev=[0x540B0x5eb], succ=[0x5f8, 0x632]
    =================================
    0x5f4: v5f4(0x632) = CONST 
    0x5f7: JUMPI v5f4(0x632), v54aV5eb

    Begin block 0x5f8
    prev=[0x5f3], succ=[]
    =================================
    0x5f8: v5f8(0x40) = CONST 
    0x5fb: v5fb = MLOAD v5f8(0x40)
    0x5fc: v5fc(0x461bcd) = CONST 
    0x600: v600(0xe5) = CONST 
    0x602: v602(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v600(0xe5), v5fc(0x461bcd)
    0x604: MSTORE v5fb, v602(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x605: v605(0x20) = CONST 
    0x607: v607(0x4) = CONST 
    0x60a: v60a = ADD v5fb, v607(0x4)
    0x60d: MSTORE v60a, v605(0x20)
    0x60e: v60e(0x24) = CONST 
    0x611: v611 = ADD v5fb, v60e(0x24)
    0x612: MSTORE v611, v605(0x20)
    0x613: v613(0x0) = CONST 
    0x616: v616 = MLOAD v613(0x0)
    0x617: v617(0x20) = CONST 
    0x619: v619(0xe5a) = CONST 
    0x621: MSTORE v613(0x0), v616
    0x622: v622(0x44) = CONST 
    0x625: v625 = ADD v5fb, v622(0x44)
    0x626: MSTORE v625, v11f7(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x628: v628 = MLOAD v5f8(0x40)
    0x62c: v62c(0x0) = SUB v5fb, v628
    0x62d: v62d(0x64) = CONST 
    0x62f: v62f(0x64) = ADD v62d(0x64), v62c(0x0)
    0x631: REVERT v628, v62f(0x64)
    0x11f7: v11f7(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x632
    prev=[0x5f3], succ=[0x63a]
    =================================
    0x633: v633(0x63a) = CONST 
    0x636: v636(0x9f6) = CONST 
    0x639: CALLPRIVATE v636(0x9f6), v633(0x63a)

    Begin block 0x63a
    prev=[0x632], succ=[0x658, 0x68e]
    =================================
    0x63b: v63b(0x0) = CONST 
    0x63f: MSTORE v63b(0x0), v173
    0x640: v640(0x66) = CONST 
    0x642: v642(0x20) = CONST 
    0x644: MSTORE v642(0x20), v640(0x66)
    0x645: v645(0x40) = CONST 
    0x648: v648 = SHA3 v63b(0x0), v645(0x40)
    0x649: v649 = SLOAD v648
    0x64a: v64a(0x1) = CONST 
    0x64c: v64c(0x1) = CONST 
    0x64e: v64e(0xa0) = CONST 
    0x650: v650(0x10000000000000000000000000000000000000000) = SHL v64e(0xa0), v64c(0x1)
    0x651: v651(0xffffffffffffffffffffffffffffffffffffffff) = SUB v650(0x10000000000000000000000000000000000000000), v64a(0x1)
    0x652: v652 = AND v651(0xffffffffffffffffffffffffffffffffffffffff), v649
    0x654: v654(0x68e) = CONST 
    0x657: JUMPI v654(0x68e), v652

    Begin block 0x658
    prev=[0x63a], succ=[]
    =================================
    0x658: v658(0x40) = CONST 
    0x65a: v65a = MLOAD v658(0x40)
    0x65b: v65b(0x461bcd) = CONST 
    0x65f: v65f(0xe5) = CONST 
    0x661: v661(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v65f(0xe5), v65b(0x461bcd)
    0x663: MSTORE v65a, v661(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x664: v664(0x4) = CONST 
    0x666: v666 = ADD v664(0x4), v65a
    0x669: v669(0x20) = CONST 
    0x66b: v66b = ADD v669(0x20), v666
    0x66e: v66e(0x20) = SUB v66b, v666
    0x670: MSTORE v666, v66e(0x20)
    0x671: v671(0x43) = CONST 
    0x674: MSTORE v66b, v671(0x43)
    0x675: v675(0x20) = CONST 
    0x677: v677 = ADD v675(0x20), v66b
    0x679: v679(0xdb9) = CONST 
    0x67c: v67c(0x43) = CONST 
    0x67f: CODECOPY v677, v679(0xdb9), v67c(0x43)
    0x680: v680(0x60) = CONST 
    0x682: v682 = ADD v680(0x60), v677
    0x686: v686(0x40) = CONST 
    0x688: v688 = MLOAD v686(0x40)
    0x68b: v68b(0xa4) = SUB v682, v688
    0x68d: REVERT v688, v68b(0xa4)

    Begin block 0x68e
    prev=[0x63a], succ=[0x69d, 0x6d3]
    =================================
    0x68f: v68f(0x1) = CONST 
    0x691: v691(0x1) = CONST 
    0x693: v693(0xa0) = CONST 
    0x695: v695(0x10000000000000000000000000000000000000000) = SHL v693(0xa0), v691(0x1)
    0x696: v696(0xffffffffffffffffffffffffffffffffffffffff) = SUB v695(0x10000000000000000000000000000000000000000), v68f(0x1)
    0x698: v698 = AND v181, v696(0xffffffffffffffffffffffffffffffffffffffff)
    0x699: v699(0x6d3) = CONST 
    0x69c: JUMPI v699(0x6d3), v698

    Begin block 0x69d
    prev=[0x68e], succ=[]
    =================================
    0x69d: v69d(0x40) = CONST 
    0x69f: v69f = MLOAD v69d(0x40)
    0x6a0: v6a0(0x461bcd) = CONST 
    0x6a4: v6a4(0xe5) = CONST 
    0x6a6: v6a6(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6a4(0xe5), v6a0(0x461bcd)
    0x6a8: MSTORE v69f, v6a6(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x6a9: v6a9(0x4) = CONST 
    0x6ab: v6ab = ADD v6a9(0x4), v69f
    0x6ae: v6ae(0x20) = CONST 
    0x6b0: v6b0 = ADD v6ae(0x20), v6ab
    0x6b3: v6b3(0x20) = SUB v6b0, v6ab
    0x6b5: MSTORE v6ab, v6b3(0x20)
    0x6b6: v6b6(0x38) = CONST 
    0x6b9: MSTORE v6b0, v6b6(0x38)
    0x6ba: v6ba(0x20) = CONST 
    0x6bc: v6bc = ADD v6ba(0x20), v6b0
    0x6be: v6be(0xe22) = CONST 
    0x6c1: v6c1(0x38) = CONST 
    0x6c4: CODECOPY v6bc, v6be(0xe22), v6c1(0x38)
    0x6c5: v6c5(0x40) = CONST 
    0x6c7: v6c7 = ADD v6c5(0x40), v6bc
    0x6cb: v6cb(0x40) = CONST 
    0x6cd: v6cd = MLOAD v6cb(0x40)
    0x6d0: v6d0(0x84) = SUB v6c7, v6cd
    0x6d2: REVERT v6cd, v6d0(0x84)

    Begin block 0x6d3
    prev=[0x68e], succ=[0xabeB0x6d3]
    =================================
    0x6d4: v6d4(0x6dd) = CONST 
    0x6d9: v6d9(0xabe) = CONST 
    0x6dc: JUMP v6d9(0xabe), v181, v173, v6d4(0x6dd)

    Begin block 0xabeB0x6d3
    prev=[0x6d3], succ=[0x6dd]
    =================================
    0xabfS0x6d3: vabfV6d3(0x0) = CONST 
    0xac3S0x6d3: MSTORE vabfV6d3(0x0), v173
    0xac4S0x6d3: vac4V6d3(0x66) = CONST 
    0xac6S0x6d3: vac6V6d3(0x20) = CONST 
    0xacaS0x6d3: MSTORE vac6V6d3(0x20), vac4V6d3(0x66)
    0xacbS0x6d3: vacbV6d3(0x40) = CONST 
    0xacfS0x6d3: vacfV6d3 = SHA3 vabfV6d3(0x0), vacbV6d3(0x40)
    0xad1S0x6d3: vad1V6d3 = SLOAD vacfV6d3
    0xad2S0x6d3: vad2V6d3(0x1) = CONST 
    0xad4S0x6d3: vad4V6d3(0x1) = CONST 
    0xad6S0x6d3: vad6V6d3(0xa0) = CONST 
    0xad8S0x6d3: vad8V6d3(0x10000000000000000000000000000000000000000) = SHL vad6V6d3(0xa0), vad4V6d3(0x1)
    0xad9S0x6d3: vad9V6d3(0xffffffffffffffffffffffffffffffffffffffff) = SUB vad8V6d3(0x10000000000000000000000000000000000000000), vad2V6d3(0x1)
    0xadcS0x6d3: vadcV6d3 = AND v181, vad9V6d3(0xffffffffffffffffffffffffffffffffffffffff)
    0xaddS0x6d3: vaddV6d3(0x1) = CONST 
    0xadfS0x6d3: vadfV6d3(0x1) = CONST 
    0xae1S0x6d3: vae1V6d3(0xa0) = CONST 
    0xae3S0x6d3: vae3V6d3(0x10000000000000000000000000000000000000000) = SHL vae1V6d3(0xa0), vadfV6d3(0x1)
    0xae4S0x6d3: vae4V6d3(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V6d3(0x10000000000000000000000000000000000000000), vaddV6d3(0x1)
    0xae5S0x6d3: vae5V6d3(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vae4V6d3(0xffffffffffffffffffffffffffffffffffffffff)
    0xae8S0x6d3: vae8V6d3 = AND vae5V6d3(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vad1V6d3
    0xaeaS0x6d3: vaeaV6d3 = OR vadcV6d3, vae8V6d3
    0xaedS0x6d3: SSTORE vacfV6d3, vaeaV6d3
    0xaeeS0x6d3: vaeeV6d3(0x67) = CONST 
    0xaf1S0x6d3: MSTORE vac6V6d3(0x20), vaeeV6d3(0x67)
    0xaf4S0x6d3: vaf4V6d3 = SHA3 vabfV6d3(0x0), vacbV6d3(0x40)
    0xaf6S0x6d3: vaf6V6d3 = SLOAD vaf4V6d3
    0xaf7S0x6d3: vaf7V6d3(0x1) = CONST 
    0xafaS0x6d3: vafaV6d3 = ADD vaf6V6d3, vaf7V6d3(0x1)
    0xafcS0x6d3: SSTORE vaf4V6d3, vafaV6d3
    0xaffS0x6d3: MSTORE vabfV6d3(0x0), vaf4V6d3
    0xb03S0x6d3: vb03V6d3 = SHA3 vabfV6d3(0x0), vac6V6d3(0x20)
    0xb04S0x6d3: vb04V6d3 = ADD vb03V6d3, vaf6V6d3
    0xb06S0x6d3: vb06V6d3 = SLOAD vb04V6d3
    0xb09S0x6d3: vb09V6d3 = AND vae5V6d3(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vb06V6d3
    0xb0cS0x6d3: vb0cV6d3 = OR vadcV6d3, vb09V6d3
    0xb0eS0x6d3: SSTORE vb04V6d3, vb0cV6d3
    0xb0fS0x6d3: JUMP v6d4(0x6dd)

    Begin block 0x6dd
    prev=[0xabeB0x6d3], succ=[0x1083]
    =================================
    0x6df: v6df(0x1) = CONST 
    0x6e1: v6e1(0x1) = CONST 
    0x6e3: v6e3(0xa0) = CONST 
    0x6e5: v6e5(0x10000000000000000000000000000000000000000) = SHL v6e3(0xa0), v6e1(0x1)
    0x6e6: v6e6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6e5(0x10000000000000000000000000000000000000000), v6df(0x1)
    0x6e7: v6e7 = AND v6e6(0xffffffffffffffffffffffffffffffffffffffff), v181
    0x6e9: v6e9(0x1) = CONST 
    0x6eb: v6eb(0x1) = CONST 
    0x6ed: v6ed(0xa0) = CONST 
    0x6ef: v6ef(0x10000000000000000000000000000000000000000) = SHL v6ed(0xa0), v6eb(0x1)
    0x6f0: v6f0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6ef(0x10000000000000000000000000000000000000000), v6e9(0x1)
    0x6f1: v6f1 = AND v6f0(0xffffffffffffffffffffffffffffffffffffffff), v652
    0x6f3: v6f3(0x8b3c9342e23b53b74b0f760c251b1b6b5553d1c3d23239357405f70d5fe43d55) = CONST 
    0x714: v714(0x40) = CONST 
    0x716: v716 = MLOAD v714(0x40)
    0x717: v717(0x40) = CONST 
    0x719: v719 = MLOAD v717(0x40)
    0x71c: v71c(0x0) = SUB v716, v719
    0x71e: LOG4 v719, v71c(0x0), v6f3(0x8b3c9342e23b53b74b0f760c251b1b6b5553d1c3d23239357405f70d5fe43d55), v173, v6f1, v6e7
    0x722: JUMP v15b(0x1083)

    Begin block 0x1083
    prev=[0x6dd], succ=[]
    =================================
    0x1084: STOP 

}

function removeContract(bytes32)() public {
    Begin block 0x186
    prev=[], succ=[0x198, 0x19c]
    =================================
    0x187: v187(0x10a4) = CONST 
    0x18a: v18a(0x4) = CONST 
    0x18d: v18d = CALLDATASIZE 
    0x18e: v18e = SUB v18d, v18a(0x4)
    0x18f: v18f(0x20) = CONST 
    0x192: v192 = LT v18e, v18f(0x20)
    0x193: v193 = ISZERO v192
    0x194: v194(0x19c) = CONST 
    0x197: JUMPI v194(0x19c), v193

    Begin block 0x198
    prev=[0x186], succ=[]
    =================================
    0x198: v198(0x0) = CONST 
    0x19b: REVERT v198(0x0), v198(0x0)

    Begin block 0x19c
    prev=[0x186], succ=[0x723]
    =================================
    0x19e: v19e = CALLDATALOAD v18a(0x4)
    0x19f: v19f(0x723) = CONST 
    0x1a2: JUMP v19f(0x723)

    Begin block 0x723
    prev=[0x19c], succ=[0x524B0x723]
    =================================
    0x724: v724(0x72b) = CONST 
    0x727: v727(0x524) = CONST 
    0x72a: JUMP v727(0x524)

    Begin block 0x524B0x723
    prev=[0x723], succ=[0xc23B0x723]
    =================================
    0x525S0x723: v525V723(0x33) = CONST 
    0x527S0x723: v527V723 = SLOAD v525V723(0x33)
    0x528S0x723: v528V723(0x0) = CONST 
    0x52bS0x723: v52bV723(0x100) = CONST 
    0x52fS0x723: v52fV723 = DIV v527V723, v52bV723(0x100)
    0x530S0x723: v530V723(0x1) = CONST 
    0x532S0x723: v532V723(0x1) = CONST 
    0x534S0x723: v534V723(0xa0) = CONST 
    0x536S0x723: v536V723(0x10000000000000000000000000000000000000000) = SHL v534V723(0xa0), v532V723(0x1)
    0x537S0x723: v537V723(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536V723(0x10000000000000000000000000000000000000000), v530V723(0x1)
    0x538S0x723: v538V723 = AND v537V723(0xffffffffffffffffffffffffffffffffffffffff), v52fV723
    0x539S0x723: v539V723(0x540) = CONST 
    0x53cS0x723: v53cV723(0xc23) = CONST 
    0x53fS0x723: JUMP v53cV723(0xc23)

    Begin block 0xc23B0x723
    prev=[0x524B0x723], succ=[0x540B0x723]
    =================================
    0xc24S0x723: vc24V723 = CALLER 
    0xc26S0x723: JUMP v539V723(0x540)

    Begin block 0x540B0x723
    prev=[0xc23B0x723], succ=[0x72b]
    =================================
    0x541S0x723: v541V723(0x1) = CONST 
    0x543S0x723: v543V723(0x1) = CONST 
    0x545S0x723: v545V723(0xa0) = CONST 
    0x547S0x723: v547V723(0x10000000000000000000000000000000000000000) = SHL v545V723(0xa0), v543V723(0x1)
    0x548S0x723: v548V723(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547V723(0x10000000000000000000000000000000000000000), v541V723(0x1)
    0x549S0x723: v549V723 = AND v548V723(0xffffffffffffffffffffffffffffffffffffffff), vc24V723
    0x54aS0x723: v54aV723 = EQ v549V723, v538V723
    0x54eS0x723: JUMP v724(0x72b)

    Begin block 0x72b
    prev=[0x540B0x723], succ=[0x730, 0x76a]
    =================================
    0x72c: v72c(0x76a) = CONST 
    0x72f: JUMPI v72c(0x76a), v54aV723

    Begin block 0x730
    prev=[0x72b], succ=[]
    =================================
    0x730: v730(0x40) = CONST 
    0x733: v733 = MLOAD v730(0x40)
    0x734: v734(0x461bcd) = CONST 
    0x738: v738(0xe5) = CONST 
    0x73a: v73a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v738(0xe5), v734(0x461bcd)
    0x73c: MSTORE v733, v73a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x73d: v73d(0x20) = CONST 
    0x73f: v73f(0x4) = CONST 
    0x742: v742 = ADD v733, v73f(0x4)
    0x745: MSTORE v742, v73d(0x20)
    0x746: v746(0x24) = CONST 
    0x749: v749 = ADD v733, v746(0x24)
    0x74a: MSTORE v749, v73d(0x20)
    0x74b: v74b(0x0) = CONST 
    0x74e: v74e = MLOAD v74b(0x0)
    0x74f: v74f(0x20) = CONST 
    0x751: v751(0xe5a) = CONST 
    0x759: MSTORE v74b(0x0), v74e
    0x75a: v75a(0x44) = CONST 
    0x75d: v75d = ADD v733, v75a(0x44)
    0x75e: MSTORE v75d, v11fc(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x760: v760 = MLOAD v730(0x40)
    0x764: v764(0x0) = SUB v733, v760
    0x765: v765(0x64) = CONST 
    0x767: v767(0x64) = ADD v765(0x64), v764(0x0)
    0x769: REVERT v760, v767(0x64)
    0x11fc: v11fc(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x76a
    prev=[0x72b], succ=[0x772]
    =================================
    0x76b: v76b(0x772) = CONST 
    0x76e: v76e(0x9f6) = CONST 
    0x771: CALLPRIVATE v76e(0x9f6), v76b(0x772)

    Begin block 0x772
    prev=[0x76a], succ=[0x790, 0x7c6]
    =================================
    0x773: v773(0x0) = CONST 
    0x777: MSTORE v773(0x0), v19e
    0x778: v778(0x66) = CONST 
    0x77a: v77a(0x20) = CONST 
    0x77c: MSTORE v77a(0x20), v778(0x66)
    0x77d: v77d(0x40) = CONST 
    0x780: v780 = SHA3 v773(0x0), v77d(0x40)
    0x781: v781 = SLOAD v780
    0x782: v782(0x1) = CONST 
    0x784: v784(0x1) = CONST 
    0x786: v786(0xa0) = CONST 
    0x788: v788(0x10000000000000000000000000000000000000000) = SHL v786(0xa0), v784(0x1)
    0x789: v789(0xffffffffffffffffffffffffffffffffffffffff) = SUB v788(0x10000000000000000000000000000000000000000), v782(0x1)
    0x78a: v78a = AND v789(0xffffffffffffffffffffffffffffffffffffffff), v781
    0x78c: v78c(0x7c6) = CONST 
    0x78f: JUMPI v78c(0x7c6), v78a

    Begin block 0x790
    prev=[0x772], succ=[]
    =================================
    0x790: v790(0x40) = CONST 
    0x792: v792 = MLOAD v790(0x40)
    0x793: v793(0x461bcd) = CONST 
    0x797: v797(0xe5) = CONST 
    0x799: v799(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v797(0xe5), v793(0x461bcd)
    0x79b: MSTORE v792, v799(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x79c: v79c(0x4) = CONST 
    0x79e: v79e = ADD v79c(0x4), v792
    0x7a1: v7a1(0x20) = CONST 
    0x7a3: v7a3 = ADD v7a1(0x20), v79e
    0x7a6: v7a6(0x20) = SUB v7a3, v79e
    0x7a8: MSTORE v79e, v7a6(0x20)
    0x7a9: v7a9(0x42) = CONST 
    0x7ac: MSTORE v7a3, v7a9(0x42)
    0x7ad: v7ad(0x20) = CONST 
    0x7af: v7af = ADD v7ad(0x20), v7a3
    0x7b1: v7b1(0xd77) = CONST 
    0x7b4: v7b4(0x42) = CONST 
    0x7b7: CODECOPY v7af, v7b1(0xd77), v7b4(0x42)
    0x7b8: v7b8(0x60) = CONST 
    0x7ba: v7ba = ADD v7b8(0x60), v7af
    0x7be: v7be(0x40) = CONST 
    0x7c0: v7c0 = MLOAD v7be(0x40)
    0x7c3: v7c3(0xa4) = SUB v7ba, v7c0
    0x7c5: REVERT v7c0, v7c3(0xa4)

    Begin block 0x7c6
    prev=[0x772], succ=[0xabeB0x7c6]
    =================================
    0x7c7: v7c7(0x7d1) = CONST 
    0x7cb: v7cb(0x0) = CONST 
    0x7cd: v7cd(0xabe) = CONST 
    0x7d0: JUMP v7cd(0xabe), v7cb(0x0), v19e, v7c7(0x7d1)

    Begin block 0xabeB0x7c6
    prev=[0x7c6], succ=[0x7d1]
    =================================
    0xabfS0x7c6: vabfV7c6(0x0) = CONST 
    0xac3S0x7c6: MSTORE vabfV7c6(0x0), v19e
    0xac4S0x7c6: vac4V7c6(0x66) = CONST 
    0xac6S0x7c6: vac6V7c6(0x20) = CONST 
    0xacaS0x7c6: MSTORE vac6V7c6(0x20), vac4V7c6(0x66)
    0xacbS0x7c6: vacbV7c6(0x40) = CONST 
    0xacfS0x7c6: vacfV7c6 = SHA3 vabfV7c6(0x0), vacbV7c6(0x40)
    0xad1S0x7c6: vad1V7c6 = SLOAD vacfV7c6
    0xad2S0x7c6: vad2V7c6(0x1) = CONST 
    0xad4S0x7c6: vad4V7c6(0x1) = CONST 
    0xad6S0x7c6: vad6V7c6(0xa0) = CONST 
    0xad8S0x7c6: vad8V7c6(0x10000000000000000000000000000000000000000) = SHL vad6V7c6(0xa0), vad4V7c6(0x1)
    0xad9S0x7c6: vad9V7c6(0xffffffffffffffffffffffffffffffffffffffff) = SUB vad8V7c6(0x10000000000000000000000000000000000000000), vad2V7c6(0x1)
    0xadcS0x7c6: vadcV7c6(0x0) = AND v7cb(0x0), vad9V7c6(0xffffffffffffffffffffffffffffffffffffffff)
    0xaddS0x7c6: vaddV7c6(0x1) = CONST 
    0xadfS0x7c6: vadfV7c6(0x1) = CONST 
    0xae1S0x7c6: vae1V7c6(0xa0) = CONST 
    0xae3S0x7c6: vae3V7c6(0x10000000000000000000000000000000000000000) = SHL vae1V7c6(0xa0), vadfV7c6(0x1)
    0xae4S0x7c6: vae4V7c6(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V7c6(0x10000000000000000000000000000000000000000), vaddV7c6(0x1)
    0xae5S0x7c6: vae5V7c6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vae4V7c6(0xffffffffffffffffffffffffffffffffffffffff)
    0xae8S0x7c6: vae8V7c6 = AND vae5V7c6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vad1V7c6
    0xaeaS0x7c6: vaeaV7c6 = OR vadcV7c6(0x0), vae8V7c6
    0xaedS0x7c6: SSTORE vacfV7c6, vaeaV7c6
    0xaeeS0x7c6: vaeeV7c6(0x67) = CONST 
    0xaf1S0x7c6: MSTORE vac6V7c6(0x20), vaeeV7c6(0x67)
    0xaf4S0x7c6: vaf4V7c6 = SHA3 vabfV7c6(0x0), vacbV7c6(0x40)
    0xaf6S0x7c6: vaf6V7c6 = SLOAD vaf4V7c6
    0xaf7S0x7c6: vaf7V7c6(0x1) = CONST 
    0xafaS0x7c6: vafaV7c6 = ADD vaf6V7c6, vaf7V7c6(0x1)
    0xafcS0x7c6: SSTORE vaf4V7c6, vafaV7c6
    0xaffS0x7c6: MSTORE vabfV7c6(0x0), vaf4V7c6
    0xb03S0x7c6: vb03V7c6 = SHA3 vabfV7c6(0x0), vac6V7c6(0x20)
    0xb04S0x7c6: vb04V7c6 = ADD vb03V7c6, vaf6V7c6
    0xb06S0x7c6: vb06V7c6 = SLOAD vb04V7c6
    0xb09S0x7c6: vb09V7c6 = AND vae5V7c6(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vb06V7c6
    0xb0cS0x7c6: vb0cV7c6 = OR vadcV7c6(0x0), vb09V7c6
    0xb0eS0x7c6: SSTORE vb04V7c6, vb0cV7c6
    0xb0fS0x7c6: JUMP v7c7(0x7d1)

    Begin block 0x7d1
    prev=[0xabeB0x7c6], succ=[0x10a4]
    =================================
    0x7d2: v7d2(0x40) = CONST 
    0x7d4: v7d4 = MLOAD v7d2(0x40)
    0x7d5: v7d5(0x1) = CONST 
    0x7d7: v7d7(0x1) = CONST 
    0x7d9: v7d9(0xa0) = CONST 
    0x7db: v7db(0x10000000000000000000000000000000000000000) = SHL v7d9(0xa0), v7d7(0x1)
    0x7dc: v7dc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7db(0x10000000000000000000000000000000000000000), v7d5(0x1)
    0x7de: v7de = AND v78a, v7dc(0xffffffffffffffffffffffffffffffffffffffff)
    0x7e2: v7e2(0x266f45300baf5abcdb8653dcec68c843b20fb984df2fae4cd1e3fecaf4619952) = CONST 
    0x804: v804(0x0) = CONST 
    0x807: LOG3 v7d4, v804(0x0), v7e2(0x266f45300baf5abcdb8653dcec68c843b20fb984df2fae4cd1e3fecaf4619952), v19e, v7de
    0x80a: JUMP v187(0x10a4)

    Begin block 0x10a4
    prev=[0x7d1], succ=[]
    =================================
    0x10a5: STOP 

}

function initialize(address)() public {
    Begin block 0x1a3
    prev=[], succ=[0x1b5, 0x1b9]
    =================================
    0x1a4: v1a4(0x10c5) = CONST 
    0x1a7: v1a7(0x4) = CONST 
    0x1aa: v1aa = CALLDATASIZE 
    0x1ab: v1ab = SUB v1aa, v1a7(0x4)
    0x1ac: v1ac(0x20) = CONST 
    0x1af: v1af = LT v1ab, v1ac(0x20)
    0x1b0: v1b0 = ISZERO v1af
    0x1b1: v1b1(0x1b9) = CONST 
    0x1b4: JUMPI v1b1(0x1b9), v1b0

    Begin block 0x1b5
    prev=[0x1a3], succ=[]
    =================================
    0x1b5: v1b5(0x0) = CONST 
    0x1b8: REVERT v1b5(0x0), v1b5(0x0)

    Begin block 0x1b9
    prev=[0x1a3], succ=[0x80b0x1a3]
    =================================
    0x1bb: v1bb = CALLDATALOAD v1a7(0x4)
    0x1bc: v1bc(0x1) = CONST 
    0x1be: v1be(0x1) = CONST 
    0x1c0: v1c0(0xa0) = CONST 
    0x1c2: v1c2(0x10000000000000000000000000000000000000000) = SHL v1c0(0xa0), v1be(0x1)
    0x1c3: v1c3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1c2(0x10000000000000000000000000000000000000000), v1bc(0x1)
    0x1c4: v1c4 = AND v1c3(0xffffffffffffffffffffffffffffffffffffffff), v1bb
    0x1c5: v1c5(0x80b) = CONST 
    0x1c8: JUMP v1c5(0x80b)

    Begin block 0x80b0x1a3
    prev=[0x1b9], succ=[0x81e0x1a3, 0x86a0x1a3]
    =================================
    0x80c0x1a3: v1a380c(0x0) = CONST 
    0x80e0x1a3: v1a380e = SLOAD v1a380c(0x0)
    0x80f0x1a3: v1a380f(0x1) = CONST 
    0x8110x1a3: v1a3811(0x1) = CONST 
    0x8130x1a3: v1a3813(0xa0) = CONST 
    0x8150x1a3: v1a3815(0x10000000000000000000000000000000000000000) = SHL v1a3813(0xa0), v1a3811(0x1)
    0x8160x1a3: v1a3816(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a3815(0x10000000000000000000000000000000000000000), v1a380f(0x1)
    0x8170x1a3: v1a3817 = AND v1a3816(0xffffffffffffffffffffffffffffffffffffffff), v1a380e
    0x8180x1a3: v1a3818 = CALLER 
    0x8190x1a3: v1a3819 = EQ v1a3818, v1a3817
    0x81a0x1a3: v1a381a(0x86a) = CONST 
    0x81d0x1a3: JUMPI v1a381a(0x86a), v1a3819

    Begin block 0x81e0x1a3
    prev=[0x80b0x1a3], succ=[]
    =================================
    0x81e0x1a3: v1a381e(0x40) = CONST 
    0x8210x1a3: v1a3821 = MLOAD v1a381e(0x40)
    0x8220x1a3: v1a3822(0x461bcd) = CONST 
    0x8260x1a3: v1a3826(0xe5) = CONST 
    0x8280x1a3: v1a3828(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1a3826(0xe5), v1a3822(0x461bcd)
    0x82a0x1a3: MSTORE v1a3821, v1a3828(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x82b0x1a3: v1a382b(0x20) = CONST 
    0x82d0x1a3: v1a382d(0x4) = CONST 
    0x8300x1a3: v1a3830 = ADD v1a3821, v1a382d(0x4)
    0x8310x1a3: MSTORE v1a3830, v1a382b(0x20)
    0x8320x1a3: v1a3832(0x1f) = CONST 
    0x8340x1a3: v1a3834(0x24) = CONST 
    0x8370x1a3: v1a3837 = ADD v1a3821, v1a3834(0x24)
    0x8380x1a3: MSTORE v1a3837, v1a3832(0x1f)
    0x8390x1a3: v1a3839(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500) = CONST 
    0x85a0x1a3: v1a385a(0x44) = CONST 
    0x85d0x1a3: v1a385d = ADD v1a3821, v1a385a(0x44)
    0x85e0x1a3: MSTORE v1a385d, v1a3839(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500)
    0x8600x1a3: v1a3860 = MLOAD v1a381e(0x40)
    0x8640x1a3: v1a3864(0x0) = SUB v1a3821, v1a3860
    0x8650x1a3: v1a3865(0x64) = CONST 
    0x8670x1a3: v1a3867(0x64) = ADD v1a3865(0x64), v1a3864(0x0)
    0x8690x1a3: REVERT v1a3860, v1a3867(0x64)

    Begin block 0x86a0x1a3
    prev=[0x80b0x1a3], succ=[0x8830x1a3, 0x87b0x1a3]
    =================================
    0x86b0x1a3: v1a386b(0x3) = CONST 
    0x86d0x1a3: v1a386d = SLOAD v1a386b(0x3)
    0x86e0x1a3: v1a386e(0x100) = CONST 
    0x8720x1a3: v1a3872 = DIV v1a386d, v1a386e(0x100)
    0x8730x1a3: v1a3873(0xff) = CONST 
    0x8750x1a3: v1a3875 = AND v1a3873(0xff), v1a3872
    0x8770x1a3: v1a3877(0x883) = CONST 
    0x87a0x1a3: JUMPI v1a3877(0x883), v1a3875

    Begin block 0x8830x1a3
    prev=[0x86a0x1a3, 0xb10B0x87b0x1a3], succ=[0x8910x1a3, 0x8890x1a3]
    =================================
    0x8830x1a3_0x0: v8831a3_0 = PHI v1a3875, vb13V87b1a3
    0x8850x1a3: v1a3885(0x891) = CONST 
    0x8880x1a3: JUMPI v1a3885(0x891), v8831a3_0

    Begin block 0x8910x1a3
    prev=[0x8830x1a3, 0x8890x1a3], succ=[0x8960x1a3, 0x8cc0x1a3]
    =================================
    0x8910x1a3_0x0: v8911a3_0 = PHI v1a3890, v1a3875, vb13V87b1a3
    0x8920x1a3: v1a3892(0x8cc) = CONST 
    0x8950x1a3: JUMPI v1a3892(0x8cc), v8911a3_0

    Begin block 0x8960x1a3
    prev=[0x8910x1a3], succ=[]
    =================================
    0x8960x1a3: v1a3896(0x40) = CONST 
    0x8980x1a3: v1a3898 = MLOAD v1a3896(0x40)
    0x8990x1a3: v1a3899(0x461bcd) = CONST 
    0x89d0x1a3: v1a389d(0xe5) = CONST 
    0x89f0x1a3: v1a389f(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1a389d(0xe5), v1a3899(0x461bcd)
    0x8a10x1a3: MSTORE v1a3898, v1a389f(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x8a20x1a3: v1a38a2(0x4) = CONST 
    0x8a40x1a3: v1a38a4 = ADD v1a38a2(0x4), v1a3898
    0x8a70x1a3: v1a38a7(0x20) = CONST 
    0x8a90x1a3: v1a38a9 = ADD v1a38a7(0x20), v1a38a4
    0x8ac0x1a3: v1a38ac(0x20) = SUB v1a38a9, v1a38a4
    0x8ae0x1a3: MSTORE v1a38a4, v1a38ac(0x20)
    0x8af0x1a3: v1a38af(0x2e) = CONST 
    0x8b20x1a3: MSTORE v1a38a9, v1a38af(0x2e)
    0x8b30x1a3: v1a38b3(0x20) = CONST 
    0x8b50x1a3: v1a38b5 = ADD v1a38b3(0x20), v1a38a9
    0x8b70x1a3: v1a38b7(0xe7a) = CONST 
    0x8ba0x1a3: v1a38ba(0x2e) = CONST 
    0x8bd0x1a3: CODECOPY v1a38b5, v1a38b7(0xe7a), v1a38ba(0x2e)
    0x8be0x1a3: v1a38be(0x40) = CONST 
    0x8c00x1a3: v1a38c0 = ADD v1a38be(0x40), v1a38b5
    0x8c40x1a3: v1a38c4(0x40) = CONST 
    0x8c60x1a3: v1a38c6 = MLOAD v1a38c4(0x40)
    0x8c90x1a3: v1a38c9(0x84) = SUB v1a38c0, v1a38c6
    0x8cb0x1a3: REVERT v1a38c6, v1a38c9(0x84)

    Begin block 0x8cc0x1a3
    prev=[0x8910x1a3], succ=[0x8df0x1a3, 0x8f70x1a3]
    =================================
    0x8cd0x1a3: v1a38cd(0x3) = CONST 
    0x8cf0x1a3: v1a38cf = SLOAD v1a38cd(0x3)
    0x8d00x1a3: v1a38d0(0x100) = CONST 
    0x8d40x1a3: v1a38d4 = DIV v1a38cf, v1a38d0(0x100)
    0x8d50x1a3: v1a38d5(0xff) = CONST 
    0x8d70x1a3: v1a38d7 = AND v1a38d5(0xff), v1a38d4
    0x8d80x1a3: v1a38d8 = ISZERO v1a38d7
    0x8da0x1a3: v1a38da = ISZERO v1a38d8
    0x8db0x1a3: v1a38db(0x8f7) = CONST 
    0x8de0x1a3: JUMPI v1a38db(0x8f7), v1a38da

    Begin block 0x8df0x1a3
    prev=[0x8cc0x1a3], succ=[0x8f70x1a3]
    =================================
    0x8df0x1a3: v1a38df(0x3) = CONST 
    0x8e20x1a3: v1a38e2 = SLOAD v1a38df(0x3)
    0x8e30x1a3: v1a38e3(0xff) = CONST 
    0x8e50x1a3: v1a38e5(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v1a38e3(0xff)
    0x8e60x1a3: v1a38e6(0xff00) = CONST 
    0x8e90x1a3: v1a38e9(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v1a38e6(0xff00)
    0x8ec0x1a3: v1a38ec = AND v1a38e2, v1a38e9(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0x8ed0x1a3: v1a38ed(0x100) = CONST 
    0x8f00x1a3: v1a38f0 = OR v1a38ed(0x100), v1a38ec
    0x8f10x1a3: v1a38f1 = AND v1a38f0, v1a38e5(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x8f20x1a3: v1a38f2(0x1) = CONST 
    0x8f40x1a3: v1a38f4 = OR v1a38f2(0x1), v1a38f1
    0x8f60x1a3: SSTORE v1a38df(0x3), v1a38f4

    Begin block 0x8f70x1a3
    prev=[0x8df0x1a3, 0x8cc0x1a3], succ=[0x9540x1a3, 0x95f0x1a3]
    =================================
    0x8f80x1a3: v1a38f8(0x33) = CONST 
    0x8fb0x1a3: v1a38fb = SLOAD v1a38f8(0x33)
    0x8fc0x1a3: v1a38fc(0x100) = CONST 
    0x8ff0x1a3: v1a38ff(0x1) = CONST 
    0x9010x1a3: v1a3901(0xa8) = CONST 
    0x9030x1a3: v1a3903(0x1000000000000000000000000000000000000000000) = SHL v1a3901(0xa8), v1a38ff(0x1)
    0x9040x1a3: v1a3904(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v1a3903(0x1000000000000000000000000000000000000000000), v1a38fc(0x100)
    0x9050x1a3: v1a3905(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v1a3904(0xffffffffffffffffffffffffffffffffffffffff00)
    0x9060x1a3: v1a3906 = AND v1a3905(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff), v1a38fb
    0x9070x1a3: v1a3907(0x100) = CONST 
    0x90a0x1a3: v1a390a(0x1) = CONST 
    0x90c0x1a3: v1a390c(0x1) = CONST 
    0x90e0x1a3: v1a390e(0xa0) = CONST 
    0x9100x1a3: v1a3910(0x10000000000000000000000000000000000000000) = SHL v1a390e(0xa0), v1a390c(0x1)
    0x9110x1a3: v1a3911(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a3910(0x10000000000000000000000000000000000000000), v1a390a(0x1)
    0x9140x1a3: v1a3914 = AND v1a3911(0xffffffffffffffffffffffffffffffffffffffff), v1c4
    0x9160x1a3: v1a3916 = MUL v1a3907(0x100), v1a3914
    0x91a0x1a3: v1a391a = OR v1a3916, v1a3906
    0x91e0x1a3: SSTORE v1a38f8(0x33), v1a391a
    0x91f0x1a3: v1a391f(0x40) = CONST 
    0x9210x1a3: v1a3921 = MLOAD v1a391f(0x40)
    0x9230x1a3: v1a3923 = DIV v1a391a, v1a3907(0x100)
    0x9240x1a3: v1a3924 = AND v1a3923, v1a3911(0xffffffffffffffffffffffffffffffffffffffff)
    0x9260x1a3: v1a3926(0x0) = CONST 
    0x9290x1a3: v1a3929(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x94d0x1a3: LOG3 v1a3921, v1a3926(0x0), v1a3929(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v1a3926(0x0), v1a3924
    0x94f0x1a3: v1a394f = ISZERO v1a38d8
    0x9500x1a3: v1a3950(0x95f) = CONST 
    0x9530x1a3: JUMPI v1a3950(0x95f), v1a394f

    Begin block 0x9540x1a3
    prev=[0x8f70x1a3], succ=[0x95f0x1a3]
    =================================
    0x9540x1a3: v1a3954(0x3) = CONST 
    0x9570x1a3: v1a3957 = SLOAD v1a3954(0x3)
    0x9580x1a3: v1a3958(0xff00) = CONST 
    0x95b0x1a3: v1a395b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v1a3958(0xff00)
    0x95c0x1a3: v1a395c = AND v1a395b(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v1a3957
    0x95e0x1a3: SSTORE v1a3954(0x3), v1a395c

    Begin block 0x95f0x1a3
    prev=[0x9540x1a3, 0x8f70x1a3], succ=[0x10c5]
    =================================
    0x9620x1a3: JUMP v1a4(0x10c5)

    Begin block 0x10c5
    prev=[0x95f0x1a3], succ=[]
    =================================
    0x10c6: STOP 

    Begin block 0x8890x1a3
    prev=[0x8830x1a3], succ=[0x8910x1a3]
    =================================
    0x88a0x1a3: v1a388a(0x3) = CONST 
    0x88c0x1a3: v1a388c = SLOAD v1a388a(0x3)
    0x88d0x1a3: v1a388d(0xff) = CONST 
    0x88f0x1a3: v1a388f = AND v1a388d(0xff), v1a388c
    0x8900x1a3: v1a3890 = ISZERO v1a388f

    Begin block 0x87b0x1a3
    prev=[0x86a0x1a3], succ=[0xb10B0x87b0x1a3]
    =================================
    0x87c0x1a3: v1a387c(0x883) = CONST 
    0x87f0x1a3: v1a387f(0xb10) = CONST 
    0x8820x1a3: JUMP v1a387f(0xb10)

    Begin block 0xb10B0x87b0x1a3
    prev=[0x87b0x1a3], succ=[0x8830x1a3]
    =================================
    0xb11S0x87b0x1a3: vb11V87b1a3 = ADDRESS 
    0xb12S0x87b0x1a3: vb12V87b1a3 = EXTCODESIZE vb11V87b1a3
    0xb13S0x87b0x1a3: vb13V87b1a3 = ISZERO vb12V87b1a3
    0xb15S0x87b0x1a3: JUMP v1a387c(0x883)

}

function getContract(bytes32)() public {
    Begin block 0x1c9
    prev=[], succ=[0x1db, 0x1df]
    =================================
    0x1ca: v1ca(0x10e6) = CONST 
    0x1cd: v1cd(0x4) = CONST 
    0x1d0: v1d0 = CALLDATASIZE 
    0x1d1: v1d1 = SUB v1d0, v1cd(0x4)
    0x1d2: v1d2(0x20) = CONST 
    0x1d5: v1d5 = LT v1d1, v1d2(0x20)
    0x1d6: v1d6 = ISZERO v1d5
    0x1d7: v1d7(0x1df) = CONST 
    0x1da: JUMPI v1d7(0x1df), v1d6

    Begin block 0x1db
    prev=[0x1c9], succ=[]
    =================================
    0x1db: v1db(0x0) = CONST 
    0x1de: REVERT v1db(0x0), v1db(0x0)

    Begin block 0x1df
    prev=[0x1c9], succ=[0x963]
    =================================
    0x1e1: v1e1 = CALLDATALOAD v1cd(0x4)
    0x1e2: v1e2(0x963) = CONST 
    0x1e5: JUMP v1e2(0x963)

    Begin block 0x963
    prev=[0x1df], succ=[0x96d]
    =================================
    0x964: v964(0x0) = CONST 
    0x966: v966(0x96d) = CONST 
    0x969: v969(0x9f6) = CONST 
    0x96c: CALLPRIVATE v969(0x9f6), v966(0x96d)

    Begin block 0x96d
    prev=[0x963], succ=[0x10e6]
    =================================
    0x96f: v96f(0x0) = CONST 
    0x973: MSTORE v96f(0x0), v1e1
    0x974: v974(0x66) = CONST 
    0x976: v976(0x20) = CONST 
    0x978: MSTORE v976(0x20), v974(0x66)
    0x979: v979(0x40) = CONST 
    0x97c: v97c = SHA3 v96f(0x0), v979(0x40)
    0x97d: v97d = SLOAD v97c
    0x97e: v97e(0x1) = CONST 
    0x980: v980(0x1) = CONST 
    0x982: v982(0xa0) = CONST 
    0x984: v984(0x10000000000000000000000000000000000000000) = SHL v982(0xa0), v980(0x1)
    0x985: v985(0xffffffffffffffffffffffffffffffffffffffff) = SUB v984(0x10000000000000000000000000000000000000000), v97e(0x1)
    0x986: v986 = AND v985(0xffffffffffffffffffffffffffffffffffffffff), v97d
    0x988: JUMP v1ca(0x10e6)

    Begin block 0x10e6
    prev=[0x96d], succ=[]
    =================================
    0x10e7: v10e7(0x40) = CONST 
    0x10ea: v10ea = MLOAD v10e7(0x40)
    0x10eb: v10eb(0x1) = CONST 
    0x10ed: v10ed(0x1) = CONST 
    0x10ef: v10ef(0xa0) = CONST 
    0x10f1: v10f1(0x10000000000000000000000000000000000000000) = SHL v10ef(0xa0), v10ed(0x1)
    0x10f2: v10f2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10f1(0x10000000000000000000000000000000000000000), v10eb(0x1)
    0x10f5: v10f5 = AND v986, v10f2(0xffffffffffffffffffffffffffffffffffffffff)
    0x10f7: MSTORE v10ea, v10f5
    0x10f8: v10f8 = MLOAD v10e7(0x40)
    0x10fc: v10fc(0x0) = SUB v10ea, v10f8
    0x10fd: v10fd(0x20) = CONST 
    0x10ff: v10ff(0x20) = ADD v10fd(0x20), v10fc(0x0)
    0x1101: RETURN v10f8, v10ff(0x20)

}

function getContractVersionCount(bytes32)() public {
    Begin block 0x1e6
    prev=[], succ=[0x1f8, 0x1fc]
    =================================
    0x1e7: v1e7(0x203) = CONST 
    0x1ea: v1ea(0x4) = CONST 
    0x1ed: v1ed = CALLDATASIZE 
    0x1ee: v1ee = SUB v1ed, v1ea(0x4)
    0x1ef: v1ef(0x20) = CONST 
    0x1f2: v1f2 = LT v1ee, v1ef(0x20)
    0x1f3: v1f3 = ISZERO v1f2
    0x1f4: v1f4(0x1fc) = CONST 
    0x1f7: JUMPI v1f4(0x1fc), v1f3

    Begin block 0x1f8
    prev=[0x1e6], succ=[]
    =================================
    0x1f8: v1f8(0x0) = CONST 
    0x1fb: REVERT v1f8(0x0), v1f8(0x0)

    Begin block 0x1fc
    prev=[0x1e6], succ=[0x989]
    =================================
    0x1fe: v1fe = CALLDATALOAD v1ea(0x4)
    0x1ff: v1ff(0x989) = CONST 
    0x202: JUMP v1ff(0x989)

    Begin block 0x989
    prev=[0x1fc], succ=[0x993]
    =================================
    0x98a: v98a(0x0) = CONST 
    0x98c: v98c(0x993) = CONST 
    0x98f: v98f(0x9f6) = CONST 
    0x992: CALLPRIVATE v98f(0x9f6), v98c(0x993)

    Begin block 0x993
    prev=[0x989], succ=[0x203]
    =================================
    0x995: v995(0x0) = CONST 
    0x999: MSTORE v995(0x0), v1fe
    0x99a: v99a(0x67) = CONST 
    0x99c: v99c(0x20) = CONST 
    0x99e: MSTORE v99c(0x20), v99a(0x67)
    0x99f: v99f(0x40) = CONST 
    0x9a2: v9a2 = SHA3 v995(0x0), v99f(0x40)
    0x9a3: v9a3 = SLOAD v9a2
    0x9a5: JUMP v1e7(0x203)

    Begin block 0x203
    prev=[0x993], succ=[]
    =================================
    0x204: v204(0x40) = CONST 
    0x207: v207 = MLOAD v204(0x40)
    0x20a: MSTORE v207, v9a3
    0x20b: v20b = MLOAD v204(0x40)
    0x20f: v20f(0x0) = SUB v207, v20b
    0x210: v210(0x20) = CONST 
    0x212: v212(0x20) = ADD v210(0x20), v20f(0x0)
    0x214: RETURN v20b, v212(0x20)

}

function transferOwnership(address)() public {
    Begin block 0x215
    prev=[], succ=[0x227, 0x22b]
    =================================
    0x216: v216(0x1121) = CONST 
    0x219: v219(0x4) = CONST 
    0x21c: v21c = CALLDATASIZE 
    0x21d: v21d = SUB v21c, v219(0x4)
    0x21e: v21e(0x20) = CONST 
    0x221: v221 = LT v21d, v21e(0x20)
    0x222: v222 = ISZERO v221
    0x223: v223(0x22b) = CONST 
    0x226: JUMPI v223(0x22b), v222

    Begin block 0x227
    prev=[0x215], succ=[]
    =================================
    0x227: v227(0x0) = CONST 
    0x22a: REVERT v227(0x0), v227(0x0)

    Begin block 0x22b
    prev=[0x215], succ=[0x9a6]
    =================================
    0x22d: v22d = CALLDATALOAD v219(0x4)
    0x22e: v22e(0x1) = CONST 
    0x230: v230(0x1) = CONST 
    0x232: v232(0xa0) = CONST 
    0x234: v234(0x10000000000000000000000000000000000000000) = SHL v232(0xa0), v230(0x1)
    0x235: v235(0xffffffffffffffffffffffffffffffffffffffff) = SUB v234(0x10000000000000000000000000000000000000000), v22e(0x1)
    0x236: v236 = AND v235(0xffffffffffffffffffffffffffffffffffffffff), v22d
    0x237: v237(0x9a6) = CONST 
    0x23a: JUMP v237(0x9a6)

    Begin block 0x9a6
    prev=[0x22b], succ=[0x524B0x9a6]
    =================================
    0x9a7: v9a7(0x9ae) = CONST 
    0x9aa: v9aa(0x524) = CONST 
    0x9ad: JUMP v9aa(0x524)

    Begin block 0x524B0x9a6
    prev=[0x9a6], succ=[0xc23B0x9a6]
    =================================
    0x525S0x9a6: v525V9a6(0x33) = CONST 
    0x527S0x9a6: v527V9a6 = SLOAD v525V9a6(0x33)
    0x528S0x9a6: v528V9a6(0x0) = CONST 
    0x52bS0x9a6: v52bV9a6(0x100) = CONST 
    0x52fS0x9a6: v52fV9a6 = DIV v527V9a6, v52bV9a6(0x100)
    0x530S0x9a6: v530V9a6(0x1) = CONST 
    0x532S0x9a6: v532V9a6(0x1) = CONST 
    0x534S0x9a6: v534V9a6(0xa0) = CONST 
    0x536S0x9a6: v536V9a6(0x10000000000000000000000000000000000000000) = SHL v534V9a6(0xa0), v532V9a6(0x1)
    0x537S0x9a6: v537V9a6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536V9a6(0x10000000000000000000000000000000000000000), v530V9a6(0x1)
    0x538S0x9a6: v538V9a6 = AND v537V9a6(0xffffffffffffffffffffffffffffffffffffffff), v52fV9a6
    0x539S0x9a6: v539V9a6(0x540) = CONST 
    0x53cS0x9a6: v53cV9a6(0xc23) = CONST 
    0x53fS0x9a6: JUMP v53cV9a6(0xc23)

    Begin block 0xc23B0x9a6
    prev=[0x524B0x9a6], succ=[0x540B0x9a6]
    =================================
    0xc24S0x9a6: vc24V9a6 = CALLER 
    0xc26S0x9a6: JUMP v539V9a6(0x540)

    Begin block 0x540B0x9a6
    prev=[0xc23B0x9a6], succ=[0x9ae]
    =================================
    0x541S0x9a6: v541V9a6(0x1) = CONST 
    0x543S0x9a6: v543V9a6(0x1) = CONST 
    0x545S0x9a6: v545V9a6(0xa0) = CONST 
    0x547S0x9a6: v547V9a6(0x10000000000000000000000000000000000000000) = SHL v545V9a6(0xa0), v543V9a6(0x1)
    0x548S0x9a6: v548V9a6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547V9a6(0x10000000000000000000000000000000000000000), v541V9a6(0x1)
    0x549S0x9a6: v549V9a6 = AND v548V9a6(0xffffffffffffffffffffffffffffffffffffffff), vc24V9a6
    0x54aS0x9a6: v54aV9a6 = EQ v549V9a6, v538V9a6
    0x54eS0x9a6: JUMP v9a7(0x9ae)

    Begin block 0x9ae
    prev=[0x540B0x9a6], succ=[0x9b3, 0x9ed]
    =================================
    0x9af: v9af(0x9ed) = CONST 
    0x9b2: JUMPI v9af(0x9ed), v54aV9a6

    Begin block 0x9b3
    prev=[0x9ae], succ=[]
    =================================
    0x9b3: v9b3(0x40) = CONST 
    0x9b6: v9b6 = MLOAD v9b3(0x40)
    0x9b7: v9b7(0x461bcd) = CONST 
    0x9bb: v9bb(0xe5) = CONST 
    0x9bd: v9bd(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v9bb(0xe5), v9b7(0x461bcd)
    0x9bf: MSTORE v9b6, v9bd(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x9c0: v9c0(0x20) = CONST 
    0x9c2: v9c2(0x4) = CONST 
    0x9c5: v9c5 = ADD v9b6, v9c2(0x4)
    0x9c8: MSTORE v9c5, v9c0(0x20)
    0x9c9: v9c9(0x24) = CONST 
    0x9cc: v9cc = ADD v9b6, v9c9(0x24)
    0x9cd: MSTORE v9cc, v9c0(0x20)
    0x9ce: v9ce(0x0) = CONST 
    0x9d1: v9d1 = MLOAD v9ce(0x0)
    0x9d2: v9d2(0x20) = CONST 
    0x9d4: v9d4(0xe5a) = CONST 
    0x9dc: MSTORE v9ce(0x0), v9d1
    0x9dd: v9dd(0x44) = CONST 
    0x9e0: v9e0 = ADD v9b6, v9dd(0x44)
    0x9e1: MSTORE v9e0, v1201(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x9e3: v9e3 = MLOAD v9b3(0x40)
    0x9e7: v9e7(0x0) = SUB v9b6, v9e3
    0x9e8: v9e8(0x64) = CONST 
    0x9ea: v9ea(0x64) = ADD v9e8(0x64), v9e7(0x0)
    0x9ec: REVERT v9e3, v9ea(0x64)
    0x1201: v1201(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x9ed
    prev=[0x9ae], succ=[0xc70]
    =================================
    0x9ee: v9ee(0x1164) = CONST 
    0x9f2: v9f2(0xc70) = CONST 
    0x9f5: JUMP v9f2(0xc70)

    Begin block 0xc70
    prev=[0x9ed], succ=[0xc7f, 0xcb5]
    =================================
    0xc71: vc71(0x1) = CONST 
    0xc73: vc73(0x1) = CONST 
    0xc75: vc75(0xa0) = CONST 
    0xc77: vc77(0x10000000000000000000000000000000000000000) = SHL vc75(0xa0), vc73(0x1)
    0xc78: vc78(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc77(0x10000000000000000000000000000000000000000), vc71(0x1)
    0xc7a: vc7a = AND v236, vc78(0xffffffffffffffffffffffffffffffffffffffff)
    0xc7b: vc7b(0xcb5) = CONST 
    0xc7e: JUMPI vc7b(0xcb5), vc7a

    Begin block 0xc7f
    prev=[0xc70], succ=[]
    =================================
    0xc7f: vc7f(0x40) = CONST 
    0xc81: vc81 = MLOAD vc7f(0x40)
    0xc82: vc82(0x461bcd) = CONST 
    0xc86: vc86(0xe5) = CONST 
    0xc88: vc88(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vc86(0xe5), vc82(0x461bcd)
    0xc8a: MSTORE vc81, vc88(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xc8b: vc8b(0x4) = CONST 
    0xc8d: vc8d = ADD vc8b(0x4), vc81
    0xc90: vc90(0x20) = CONST 
    0xc92: vc92 = ADD vc90(0x20), vc8d
    0xc95: vc95(0x20) = SUB vc92, vc8d
    0xc97: MSTORE vc8d, vc95(0x20)
    0xc98: vc98(0x26) = CONST 
    0xc9b: MSTORE vc92, vc98(0x26)
    0xc9c: vc9c(0x20) = CONST 
    0xc9e: vc9e = ADD vc9c(0x20), vc92
    0xca0: vca0(0xdfc) = CONST 
    0xca3: vca3(0x26) = CONST 
    0xca6: CODECOPY vc9e, vca0(0xdfc), vca3(0x26)
    0xca7: vca7(0x40) = CONST 
    0xca9: vca9 = ADD vca7(0x40), vc9e
    0xcad: vcad(0x40) = CONST 
    0xcaf: vcaf = MLOAD vcad(0x40)
    0xcb2: vcb2(0x84) = SUB vca9, vcaf
    0xcb4: REVERT vcaf, vcb2(0x84)

    Begin block 0xcb5
    prev=[0xc70], succ=[0x1164]
    =================================
    0xcb6: vcb6(0x33) = CONST 
    0xcb8: vcb8 = SLOAD vcb6(0x33)
    0xcb9: vcb9(0x40) = CONST 
    0xcbb: vcbb = MLOAD vcb9(0x40)
    0xcbc: vcbc(0x1) = CONST 
    0xcbe: vcbe(0x1) = CONST 
    0xcc0: vcc0(0xa0) = CONST 
    0xcc2: vcc2(0x10000000000000000000000000000000000000000) = SHL vcc0(0xa0), vcbe(0x1)
    0xcc3: vcc3(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcc2(0x10000000000000000000000000000000000000000), vcbc(0x1)
    0xcc6: vcc6 = AND v236, vcc3(0xffffffffffffffffffffffffffffffffffffffff)
    0xcc8: vcc8(0x100) = CONST 
    0xccc: vccc = DIV vcb8, vcc8(0x100)
    0xccd: vccd = AND vccc, vcc3(0xffffffffffffffffffffffffffffffffffffffff)
    0xccf: vccf(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0xcf1: vcf1(0x0) = CONST 
    0xcf4: LOG3 vcbb, vcf1(0x0), vccf(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), vccd, vcc6
    0xcf5: vcf5(0x33) = CONST 
    0xcf8: vcf8 = SLOAD vcf5(0x33)
    0xcf9: vcf9(0x1) = CONST 
    0xcfb: vcfb(0x1) = CONST 
    0xcfd: vcfd(0xa0) = CONST 
    0xcff: vcff(0x10000000000000000000000000000000000000000) = SHL vcfd(0xa0), vcfb(0x1)
    0xd00: vd00(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcff(0x10000000000000000000000000000000000000000), vcf9(0x1)
    0xd03: vd03 = AND v236, vd00(0xffffffffffffffffffffffffffffffffffffffff)
    0xd04: vd04(0x100) = CONST 
    0xd07: vd07 = MUL vd04(0x100), vd03
    0xd08: vd08(0x100) = CONST 
    0xd0b: vd0b(0x1) = CONST 
    0xd0d: vd0d(0xa8) = CONST 
    0xd0f: vd0f(0x1000000000000000000000000000000000000000000) = SHL vd0d(0xa8), vd0b(0x1)
    0xd10: vd10(0xffffffffffffffffffffffffffffffffffffffff00) = SUB vd0f(0x1000000000000000000000000000000000000000000), vd08(0x100)
    0xd11: vd11(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT vd10(0xffffffffffffffffffffffffffffffffffffffff00)
    0xd14: vd14 = AND vcf8, vd11(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff)
    0xd18: vd18 = OR vd14, vd07
    0xd1a: SSTORE vcf5(0x33), vd18
    0xd1b: JUMP v9ee(0x1164)

    Begin block 0x1164
    prev=[0xcb5], succ=[0x1121]
    =================================
    0x1166: JUMP v216(0x1121)

    Begin block 0x1121
    prev=[0x1164], succ=[]
    =================================
    0x1122: STOP 

}

function 0x9f6(0x9f6arg0x0) private {
    Begin block 0x9f6
    prev=[], succ=[0xa3b, 0x1186]
    =================================
    0x9f7: v9f7(0x33) = CONST 
    0x9f9: v9f9 = SLOAD v9f7(0x33)
    0x9fa: v9fa(0x40) = CONST 
    0x9fd: v9fd = MLOAD v9fa(0x40)
    0xa00: va00 = ADD v9fa(0x40), v9fd
    0xa03: MSTORE v9fa(0x40), va00
    0xa04: va04(0x20) = CONST 
    0xa08: MSTORE v9fd, va04(0x20)
    0xa09: va09(0x496e697469616c697a61626c6556323a204e6f7420696e697469616c697a6564) = CONST 
    0xa2c: va2c = ADD v9fd, va04(0x20)
    0xa2d: MSTORE va2c, va09(0x496e697469616c697a61626c6556323a204e6f7420696e697469616c697a6564)
    0xa2f: va2f(0xff) = CONST 
    0xa31: va31 = AND va2f(0xff), v9f9
    0xa32: va32 = ISZERO va31
    0xa33: va33 = ISZERO va32
    0xa34: va34(0x1) = CONST 
    0xa36: va36 = EQ va34(0x1), va33
    0xa37: va37(0x1186) = CONST 
    0xa3a: JUMPI va37(0x1186), va36

    Begin block 0xa3b
    prev=[0x9f6], succ=[0xa6b0x9f6]
    =================================
    0xa3b: va3b(0x40) = CONST 
    0xa3d: va3d = MLOAD va3b(0x40)
    0xa3e: va3e(0x461bcd) = CONST 
    0xa42: va42(0xe5) = CONST 
    0xa44: va44(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va42(0xe5), va3e(0x461bcd)
    0xa46: MSTORE va3d, va44(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xa47: va47(0x4) = CONST 
    0xa49: va49 = ADD va47(0x4), va3d
    0xa4c: va4c(0x20) = CONST 
    0xa4e: va4e = ADD va4c(0x20), va49
    0xa51: va51(0x20) = SUB va4e, va49
    0xa53: MSTORE va49, va51(0x20)
    0xa57: va57(0x20) = MLOAD v9fd
    0xa59: MSTORE va4e, va57(0x20)
    0xa5a: va5a(0x20) = CONST 
    0xa5c: va5c = ADD va5a(0x20), va4e
    0xa60: va60(0x20) = MLOAD v9fd
    0xa62: va62(0x20) = CONST 
    0xa64: va64 = ADD va62(0x20), v9fd
    0xa69: va69(0x0) = CONST 

    Begin block 0xa6b0x9f6
    prev=[0xa3b, 0xa740x9f6], succ=[0xa830x9f6, 0xa740x9f6]
    =================================
    0xa6b0x9f6_0x0: va6b9f6_0 = PHI va69(0x0), v9f6a7e
    0xa6e0x9f6: v9f6a6e = LT va6b9f6_0, va60(0x20)
    0xa6f0x9f6: v9f6a6f = ISZERO v9f6a6e
    0xa700x9f6: v9f6a70(0xa83) = CONST 
    0xa730x9f6: JUMPI v9f6a70(0xa83), v9f6a6f

    Begin block 0xa830x9f6
    prev=[0xa6b0x9f6], succ=[0xab00x9f6, 0xa970x9f6]
    =================================
    0xa8c0x9f6: v9f6a8c = ADD va60(0x20), va5c
    0xa8e0x9f6: v9f6a8e(0x1f) = CONST 
    0xa900x9f6: v9f6a90(0x0) = AND v9f6a8e(0x1f), va60(0x20)
    0xa920x9f6: v9f6a92 = ISZERO v9f6a90(0x0)
    0xa930x9f6: v9f6a93(0xab0) = CONST 
    0xa960x9f6: JUMPI v9f6a93(0xab0), v9f6a92

    Begin block 0xab00x9f6
    prev=[0xa830x9f6, 0xa970x9f6], succ=[]
    =================================
    0xab00x9f6_0x1: vab09f6_1 = PHI v9f6aad, v9f6a8c
    0xab60x9f6: v9f6ab6(0x40) = CONST 
    0xab80x9f6: v9f6ab8 = MLOAD v9f6ab6(0x40)
    0xabb0x9f6: v9f6abb = SUB vab09f6_1, v9f6ab8
    0xabd0x9f6: REVERT v9f6ab8, v9f6abb

    Begin block 0xa970x9f6
    prev=[0xa830x9f6], succ=[0xab00x9f6]
    =================================
    0xa990x9f6: v9f6a99 = SUB v9f6a8c, v9f6a90(0x0)
    0xa9b0x9f6: v9f6a9b = MLOAD v9f6a99
    0xa9c0x9f6: v9f6a9c(0x1) = CONST 
    0xa9f0x9f6: v9f6a9f(0x20) = CONST 
    0xaa10x9f6: v9f6aa1(0x20) = SUB v9f6a9f(0x20), v9f6a90(0x0)
    0xaa20x9f6: v9f6aa2(0x100) = CONST 
    0xaa50x9f6: v9f6aa5(0x1) = EXP v9f6aa2(0x100), v9f6aa1(0x20)
    0xaa60x9f6: v9f6aa6(0x0) = SUB v9f6aa5(0x1), v9f6a9c(0x1)
    0xaa70x9f6: v9f6aa7 = NOT v9f6aa6(0x0)
    0xaa80x9f6: v9f6aa8 = AND v9f6aa7, v9f6a9b
    0xaaa0x9f6: MSTORE v9f6a99, v9f6aa8
    0xaab0x9f6: v9f6aab(0x20) = CONST 
    0xaad0x9f6: v9f6aad = ADD v9f6aab(0x20), v9f6a99

    Begin block 0xa740x9f6
    prev=[0xa6b0x9f6], succ=[0xa6b0x9f6]
    =================================
    0xa740x9f6_0x0: va749f6_0 = PHI va69(0x0), v9f6a7e
    0xa760x9f6: v9f6a76 = ADD va749f6_0, va64
    0xa770x9f6: v9f6a77 = MLOAD v9f6a76
    0xa7a0x9f6: v9f6a7a = ADD va749f6_0, va5c
    0xa7b0x9f6: MSTORE v9f6a7a, v9f6a77
    0xa7c0x9f6: v9f6a7c(0x20) = CONST 
    0xa7e0x9f6: v9f6a7e = ADD v9f6a7c(0x20), va749f6_0
    0xa7f0x9f6: v9f6a7f(0xa6b) = CONST 
    0xa820x9f6: JUMP v9f6a7f(0xa6b)

    Begin block 0x1186
    prev=[0x9f6], succ=[]
    =================================
    0x1188: RETURNPRIVATE v9f6arg0

}

function addContract(bytes32,address)() public {
    Begin block 0xb9
    prev=[], succ=[0xcb, 0xcf]
    =================================
    0xba: vba(0xfaa) = CONST 
    0xbd: vbd(0x4) = CONST 
    0xc0: vc0 = CALLDATASIZE 
    0xc1: vc1 = SUB vc0, vbd(0x4)
    0xc2: vc2(0x40) = CONST 
    0xc5: vc5 = LT vc1, vc2(0x40)
    0xc6: vc6 = ISZERO vc5
    0xc7: vc7(0xcf) = CONST 
    0xca: JUMPI vc7(0xcf), vc6

    Begin block 0xcb
    prev=[0xb9], succ=[]
    =================================
    0xcb: vcb(0x0) = CONST 
    0xce: REVERT vcb(0x0), vcb(0x0)

    Begin block 0xcf
    prev=[0xb9], succ=[0x23b]
    =================================
    0xd2: vd2 = CALLDATALOAD vbd(0x4)
    0xd4: vd4(0x20) = CONST 
    0xd6: vd6(0x24) = ADD vd4(0x20), vbd(0x4)
    0xd7: vd7 = CALLDATALOAD vd6(0x24)
    0xd8: vd8(0x1) = CONST 
    0xda: vda(0x1) = CONST 
    0xdc: vdc(0xa0) = CONST 
    0xde: vde(0x10000000000000000000000000000000000000000) = SHL vdc(0xa0), vda(0x1)
    0xdf: vdf(0xffffffffffffffffffffffffffffffffffffffff) = SUB vde(0x10000000000000000000000000000000000000000), vd8(0x1)
    0xe0: ve0 = AND vdf(0xffffffffffffffffffffffffffffffffffffffff), vd7
    0xe1: ve1(0x23b) = CONST 
    0xe4: JUMP ve1(0x23b)

    Begin block 0x23b
    prev=[0xcf], succ=[0x524B0x23b]
    =================================
    0x23c: v23c(0x243) = CONST 
    0x23f: v23f(0x524) = CONST 
    0x242: JUMP v23f(0x524)

    Begin block 0x524B0x23b
    prev=[0x23b], succ=[0xc23B0x23b]
    =================================
    0x525S0x23b: v525V23b(0x33) = CONST 
    0x527S0x23b: v527V23b = SLOAD v525V23b(0x33)
    0x528S0x23b: v528V23b(0x0) = CONST 
    0x52bS0x23b: v52bV23b(0x100) = CONST 
    0x52fS0x23b: v52fV23b = DIV v527V23b, v52bV23b(0x100)
    0x530S0x23b: v530V23b(0x1) = CONST 
    0x532S0x23b: v532V23b(0x1) = CONST 
    0x534S0x23b: v534V23b(0xa0) = CONST 
    0x536S0x23b: v536V23b(0x10000000000000000000000000000000000000000) = SHL v534V23b(0xa0), v532V23b(0x1)
    0x537S0x23b: v537V23b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536V23b(0x10000000000000000000000000000000000000000), v530V23b(0x1)
    0x538S0x23b: v538V23b = AND v537V23b(0xffffffffffffffffffffffffffffffffffffffff), v52fV23b
    0x539S0x23b: v539V23b(0x540) = CONST 
    0x53cS0x23b: v53cV23b(0xc23) = CONST 
    0x53fS0x23b: JUMP v53cV23b(0xc23)

    Begin block 0xc23B0x23b
    prev=[0x524B0x23b], succ=[0x540B0x23b]
    =================================
    0xc24S0x23b: vc24V23b = CALLER 
    0xc26S0x23b: JUMP v539V23b(0x540)

    Begin block 0x540B0x23b
    prev=[0xc23B0x23b], succ=[0x243]
    =================================
    0x541S0x23b: v541V23b(0x1) = CONST 
    0x543S0x23b: v543V23b(0x1) = CONST 
    0x545S0x23b: v545V23b(0xa0) = CONST 
    0x547S0x23b: v547V23b(0x10000000000000000000000000000000000000000) = SHL v545V23b(0xa0), v543V23b(0x1)
    0x548S0x23b: v548V23b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547V23b(0x10000000000000000000000000000000000000000), v541V23b(0x1)
    0x549S0x23b: v549V23b = AND v548V23b(0xffffffffffffffffffffffffffffffffffffffff), vc24V23b
    0x54aS0x23b: v54aV23b = EQ v549V23b, v538V23b
    0x54eS0x23b: JUMP v23c(0x243)

    Begin block 0x243
    prev=[0x540B0x23b], succ=[0x248, 0x282]
    =================================
    0x244: v244(0x282) = CONST 
    0x247: JUMPI v244(0x282), v54aV23b

    Begin block 0x248
    prev=[0x243], succ=[]
    =================================
    0x248: v248(0x40) = CONST 
    0x24b: v24b = MLOAD v248(0x40)
    0x24c: v24c(0x461bcd) = CONST 
    0x250: v250(0xe5) = CONST 
    0x252: v252(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v250(0xe5), v24c(0x461bcd)
    0x254: MSTORE v24b, v252(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x255: v255(0x20) = CONST 
    0x257: v257(0x4) = CONST 
    0x25a: v25a = ADD v24b, v257(0x4)
    0x25d: MSTORE v25a, v255(0x20)
    0x25e: v25e(0x24) = CONST 
    0x261: v261 = ADD v24b, v25e(0x24)
    0x262: MSTORE v261, v255(0x20)
    0x263: v263(0x0) = CONST 
    0x266: v266 = MLOAD v263(0x0)
    0x267: v267(0x20) = CONST 
    0x269: v269(0xe5a) = CONST 
    0x271: MSTORE v263(0x0), v266
    0x272: v272(0x44) = CONST 
    0x275: v275 = ADD v24b, v272(0x44)
    0x276: MSTORE v275, v11ed(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x278: v278 = MLOAD v248(0x40)
    0x27c: v27c(0x0) = SUB v24b, v278
    0x27d: v27d(0x64) = CONST 
    0x27f: v27f(0x64) = ADD v27d(0x64), v27c(0x0)
    0x281: REVERT v278, v27f(0x64)
    0x11ed: v11ed(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x282
    prev=[0x243], succ=[0x28a]
    =================================
    0x283: v283(0x28a) = CONST 
    0x286: v286(0x9f6) = CONST 
    0x289: CALLPRIVATE v286(0x9f6), v283(0x28a)

    Begin block 0x28a
    prev=[0x282], succ=[0x2a8, 0x2de]
    =================================
    0x28b: v28b(0x0) = CONST 
    0x28f: MSTORE v28b(0x0), vd2
    0x290: v290(0x66) = CONST 
    0x292: v292(0x20) = CONST 
    0x294: MSTORE v292(0x20), v290(0x66)
    0x295: v295(0x40) = CONST 
    0x298: v298 = SHA3 v28b(0x0), v295(0x40)
    0x299: v299 = SLOAD v298
    0x29a: v29a(0x1) = CONST 
    0x29c: v29c(0x1) = CONST 
    0x29e: v29e(0xa0) = CONST 
    0x2a0: v2a0(0x10000000000000000000000000000000000000000) = SHL v29e(0xa0), v29c(0x1)
    0x2a1: v2a1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a0(0x10000000000000000000000000000000000000000), v29a(0x1)
    0x2a2: v2a2 = AND v2a1(0xffffffffffffffffffffffffffffffffffffffff), v299
    0x2a3: v2a3 = ISZERO v2a2
    0x2a4: v2a4(0x2de) = CONST 
    0x2a7: JUMPI v2a4(0x2de), v2a3

    Begin block 0x2a8
    prev=[0x28a], succ=[]
    =================================
    0x2a8: v2a8(0x40) = CONST 
    0x2aa: v2aa = MLOAD v2a8(0x40)
    0x2ab: v2ab(0x461bcd) = CONST 
    0x2af: v2af(0xe5) = CONST 
    0x2b1: v2b1(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2af(0xe5), v2ab(0x461bcd)
    0x2b3: MSTORE v2aa, v2b1(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x2b4: v2b4(0x4) = CONST 
    0x2b6: v2b6 = ADD v2b4(0x4), v2aa
    0x2b9: v2b9(0x20) = CONST 
    0x2bb: v2bb = ADD v2b9(0x20), v2b6
    0x2be: v2be(0x20) = SUB v2bb, v2b6
    0x2c0: MSTORE v2b6, v2be(0x20)
    0x2c1: v2c1(0x36) = CONST 
    0x2c4: MSTORE v2bb, v2c1(0x36)
    0x2c5: v2c5(0x20) = CONST 
    0x2c7: v2c7 = ADD v2c5(0x20), v2bb
    0x2c9: v2c9(0xea8) = CONST 
    0x2cc: v2cc(0x36) = CONST 
    0x2cf: CODECOPY v2c7, v2c9(0xea8), v2cc(0x36)
    0x2d0: v2d0(0x40) = CONST 
    0x2d2: v2d2 = ADD v2d0(0x40), v2c7
    0x2d6: v2d6(0x40) = CONST 
    0x2d8: v2d8 = MLOAD v2d6(0x40)
    0x2db: v2db(0x84) = SUB v2d2, v2d8
    0x2dd: REVERT v2d8, v2db(0x84)

    Begin block 0x2de
    prev=[0x28a], succ=[0x2ed, 0x323]
    =================================
    0x2df: v2df(0x1) = CONST 
    0x2e1: v2e1(0x1) = CONST 
    0x2e3: v2e3(0xa0) = CONST 
    0x2e5: v2e5(0x10000000000000000000000000000000000000000) = SHL v2e3(0xa0), v2e1(0x1)
    0x2e6: v2e6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2e5(0x10000000000000000000000000000000000000000), v2df(0x1)
    0x2e8: v2e8 = AND ve0, v2e6(0xffffffffffffffffffffffffffffffffffffffff)
    0x2e9: v2e9(0x323) = CONST 
    0x2ec: JUMPI v2e9(0x323), v2e8

    Begin block 0x2ed
    prev=[0x2de], succ=[]
    =================================
    0x2ed: v2ed(0x40) = CONST 
    0x2ef: v2ef = MLOAD v2ed(0x40)
    0x2f0: v2f0(0x461bcd) = CONST 
    0x2f4: v2f4(0xe5) = CONST 
    0x2f6: v2f6(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2f4(0xe5), v2f0(0x461bcd)
    0x2f8: MSTORE v2ef, v2f6(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x2f9: v2f9(0x4) = CONST 
    0x2fb: v2fb = ADD v2f9(0x4), v2ef
    0x2fe: v2fe(0x20) = CONST 
    0x300: v300 = ADD v2fe(0x20), v2fb
    0x303: v303(0x20) = SUB v300, v2fb
    0x305: MSTORE v2fb, v303(0x20)
    0x306: v306(0x27) = CONST 
    0x309: MSTORE v300, v306(0x27)
    0x30a: v30a(0x20) = CONST 
    0x30c: v30c = ADD v30a(0x20), v300
    0x30e: v30e(0xf04) = CONST 
    0x311: v311(0x27) = CONST 
    0x314: CODECOPY v30c, v30e(0xf04), v311(0x27)
    0x315: v315(0x40) = CONST 
    0x317: v317 = ADD v315(0x40), v30c
    0x31b: v31b(0x40) = CONST 
    0x31d: v31d = MLOAD v31b(0x40)
    0x320: v320(0x84) = SUB v317, v31d
    0x322: REVERT v31d, v320(0x84)

    Begin block 0x323
    prev=[0x2de], succ=[0xabeB0x323]
    =================================
    0x324: v324(0x32d) = CONST 
    0x329: v329(0xabe) = CONST 
    0x32c: JUMP v329(0xabe), ve0, vd2, v324(0x32d)

    Begin block 0xabeB0x323
    prev=[0x323], succ=[0x32d]
    =================================
    0xabfS0x323: vabfV323(0x0) = CONST 
    0xac3S0x323: MSTORE vabfV323(0x0), vd2
    0xac4S0x323: vac4V323(0x66) = CONST 
    0xac6S0x323: vac6V323(0x20) = CONST 
    0xacaS0x323: MSTORE vac6V323(0x20), vac4V323(0x66)
    0xacbS0x323: vacbV323(0x40) = CONST 
    0xacfS0x323: vacfV323 = SHA3 vabfV323(0x0), vacbV323(0x40)
    0xad1S0x323: vad1V323 = SLOAD vacfV323
    0xad2S0x323: vad2V323(0x1) = CONST 
    0xad4S0x323: vad4V323(0x1) = CONST 
    0xad6S0x323: vad6V323(0xa0) = CONST 
    0xad8S0x323: vad8V323(0x10000000000000000000000000000000000000000) = SHL vad6V323(0xa0), vad4V323(0x1)
    0xad9S0x323: vad9V323(0xffffffffffffffffffffffffffffffffffffffff) = SUB vad8V323(0x10000000000000000000000000000000000000000), vad2V323(0x1)
    0xadcS0x323: vadcV323 = AND ve0, vad9V323(0xffffffffffffffffffffffffffffffffffffffff)
    0xaddS0x323: vaddV323(0x1) = CONST 
    0xadfS0x323: vadfV323(0x1) = CONST 
    0xae1S0x323: vae1V323(0xa0) = CONST 
    0xae3S0x323: vae3V323(0x10000000000000000000000000000000000000000) = SHL vae1V323(0xa0), vadfV323(0x1)
    0xae4S0x323: vae4V323(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V323(0x10000000000000000000000000000000000000000), vaddV323(0x1)
    0xae5S0x323: vae5V323(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vae4V323(0xffffffffffffffffffffffffffffffffffffffff)
    0xae8S0x323: vae8V323 = AND vae5V323(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vad1V323
    0xaeaS0x323: vaeaV323 = OR vadcV323, vae8V323
    0xaedS0x323: SSTORE vacfV323, vaeaV323
    0xaeeS0x323: vaeeV323(0x67) = CONST 
    0xaf1S0x323: MSTORE vac6V323(0x20), vaeeV323(0x67)
    0xaf4S0x323: vaf4V323 = SHA3 vabfV323(0x0), vacbV323(0x40)
    0xaf6S0x323: vaf6V323 = SLOAD vaf4V323
    0xaf7S0x323: vaf7V323(0x1) = CONST 
    0xafaS0x323: vafaV323 = ADD vaf6V323, vaf7V323(0x1)
    0xafcS0x323: SSTORE vaf4V323, vafaV323
    0xaffS0x323: MSTORE vabfV323(0x0), vaf4V323
    0xb03S0x323: vb03V323 = SHA3 vabfV323(0x0), vac6V323(0x20)
    0xb04S0x323: vb04V323 = ADD vb03V323, vaf6V323
    0xb06S0x323: vb06V323 = SLOAD vb04V323
    0xb09S0x323: vb09V323 = AND vae5V323(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vb06V323
    0xb0cS0x323: vb0cV323 = OR vadcV323, vb09V323
    0xb0eS0x323: SSTORE vb04V323, vb0cV323
    0xb0fS0x323: JUMP v324(0x32d)

    Begin block 0x32d
    prev=[0xabeB0x323], succ=[0xfaa]
    =================================
    0x32e: v32e(0x40) = CONST 
    0x330: v330 = MLOAD v32e(0x40)
    0x331: v331(0x1) = CONST 
    0x333: v333(0x1) = CONST 
    0x335: v335(0xa0) = CONST 
    0x337: v337(0x10000000000000000000000000000000000000000) = SHL v335(0xa0), v333(0x1)
    0x338: v338(0xffffffffffffffffffffffffffffffffffffffff) = SUB v337(0x10000000000000000000000000000000000000000), v331(0x1)
    0x33a: v33a = AND ve0, v338(0xffffffffffffffffffffffffffffffffffffffff)
    0x33e: v33e(0x643cefa5894755d9e02f78cb384977d4ee3a06c8394b062a290e19176e9c69de) = CONST 
    0x360: v360(0x0) = CONST 
    0x363: LOG3 v330, v360(0x0), v33e(0x643cefa5894755d9e02f78cb384977d4ee3a06c8394b062a290e19176e9c69de), vd2, v33a
    0x366: JUMP vba(0xfaa)

    Begin block 0xfaa
    prev=[0x32d], succ=[]
    =================================
    0xfab: STOP 

}

function renounceOwnership()() public {
    Begin block 0xe7
    prev=[], succ=[0x367]
    =================================
    0xe8: ve8(0xfcb) = CONST 
    0xeb: veb(0x367) = CONST 
    0xee: JUMP veb(0x367)

    Begin block 0x367
    prev=[0xe7], succ=[0x524B0x367]
    =================================
    0x368: v368(0x36f) = CONST 
    0x36b: v36b(0x524) = CONST 
    0x36e: JUMP v36b(0x524)

    Begin block 0x524B0x367
    prev=[0x367], succ=[0xc23B0x367]
    =================================
    0x525S0x367: v525V367(0x33) = CONST 
    0x527S0x367: v527V367 = SLOAD v525V367(0x33)
    0x528S0x367: v528V367(0x0) = CONST 
    0x52bS0x367: v52bV367(0x100) = CONST 
    0x52fS0x367: v52fV367 = DIV v527V367, v52bV367(0x100)
    0x530S0x367: v530V367(0x1) = CONST 
    0x532S0x367: v532V367(0x1) = CONST 
    0x534S0x367: v534V367(0xa0) = CONST 
    0x536S0x367: v536V367(0x10000000000000000000000000000000000000000) = SHL v534V367(0xa0), v532V367(0x1)
    0x537S0x367: v537V367(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536V367(0x10000000000000000000000000000000000000000), v530V367(0x1)
    0x538S0x367: v538V367 = AND v537V367(0xffffffffffffffffffffffffffffffffffffffff), v52fV367
    0x539S0x367: v539V367(0x540) = CONST 
    0x53cS0x367: v53cV367(0xc23) = CONST 
    0x53fS0x367: JUMP v53cV367(0xc23)

    Begin block 0xc23B0x367
    prev=[0x524B0x367], succ=[0x540B0x367]
    =================================
    0xc24S0x367: vc24V367 = CALLER 
    0xc26S0x367: JUMP v539V367(0x540)

    Begin block 0x540B0x367
    prev=[0xc23B0x367], succ=[0x36f]
    =================================
    0x541S0x367: v541V367(0x1) = CONST 
    0x543S0x367: v543V367(0x1) = CONST 
    0x545S0x367: v545V367(0xa0) = CONST 
    0x547S0x367: v547V367(0x10000000000000000000000000000000000000000) = SHL v545V367(0xa0), v543V367(0x1)
    0x548S0x367: v548V367(0xffffffffffffffffffffffffffffffffffffffff) = SUB v547V367(0x10000000000000000000000000000000000000000), v541V367(0x1)
    0x549S0x367: v549V367 = AND v548V367(0xffffffffffffffffffffffffffffffffffffffff), vc24V367
    0x54aS0x367: v54aV367 = EQ v549V367, v538V367
    0x54eS0x367: JUMP v368(0x36f)

    Begin block 0x36f
    prev=[0x540B0x367], succ=[0x374, 0x3ae]
    =================================
    0x370: v370(0x3ae) = CONST 
    0x373: JUMPI v370(0x3ae), v54aV367

    Begin block 0x374
    prev=[0x36f], succ=[]
    =================================
    0x374: v374(0x40) = CONST 
    0x377: v377 = MLOAD v374(0x40)
    0x378: v378(0x461bcd) = CONST 
    0x37c: v37c(0xe5) = CONST 
    0x37e: v37e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v37c(0xe5), v378(0x461bcd)
    0x380: MSTORE v377, v37e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x381: v381(0x20) = CONST 
    0x383: v383(0x4) = CONST 
    0x386: v386 = ADD v377, v383(0x4)
    0x389: MSTORE v386, v381(0x20)
    0x38a: v38a(0x24) = CONST 
    0x38d: v38d = ADD v377, v38a(0x24)
    0x38e: MSTORE v38d, v381(0x20)
    0x38f: v38f(0x0) = CONST 
    0x392: v392 = MLOAD v38f(0x0)
    0x393: v393(0x20) = CONST 
    0x395: v395(0xe5a) = CONST 
    0x39d: MSTORE v38f(0x0), v392
    0x39e: v39e(0x44) = CONST 
    0x3a1: v3a1 = ADD v377, v39e(0x44)
    0x3a2: MSTORE v3a1, v11f2(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x3a4: v3a4 = MLOAD v374(0x40)
    0x3a8: v3a8(0x0) = SUB v377, v3a4
    0x3a9: v3a9(0x64) = CONST 
    0x3ab: v3ab(0x64) = ADD v3a9(0x64), v3a8(0x0)
    0x3ad: REVERT v3a4, v3ab(0x64)
    0x11f2: v11f2(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x3ae
    prev=[0x36f], succ=[0xfcb]
    =================================
    0x3af: v3af(0x33) = CONST 
    0x3b1: v3b1 = SLOAD v3af(0x33)
    0x3b2: v3b2(0x40) = CONST 
    0x3b4: v3b4 = MLOAD v3b2(0x40)
    0x3b5: v3b5(0x0) = CONST 
    0x3b8: v3b8(0x100) = CONST 
    0x3bc: v3bc = DIV v3b1, v3b8(0x100)
    0x3bd: v3bd(0x1) = CONST 
    0x3bf: v3bf(0x1) = CONST 
    0x3c1: v3c1(0xa0) = CONST 
    0x3c3: v3c3(0x10000000000000000000000000000000000000000) = SHL v3c1(0xa0), v3bf(0x1)
    0x3c4: v3c4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c3(0x10000000000000000000000000000000000000000), v3bd(0x1)
    0x3c5: v3c5 = AND v3c4(0xffffffffffffffffffffffffffffffffffffffff), v3bc
    0x3c7: v3c7(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x3eb: LOG3 v3b4, v3b5(0x0), v3c7(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v3c5, v3b5(0x0)
    0x3ec: v3ec(0x33) = CONST 
    0x3ef: v3ef = SLOAD v3ec(0x33)
    0x3f0: v3f0(0x100) = CONST 
    0x3f3: v3f3(0x1) = CONST 
    0x3f5: v3f5(0xa8) = CONST 
    0x3f7: v3f7(0x1000000000000000000000000000000000000000000) = SHL v3f5(0xa8), v3f3(0x1)
    0x3f8: v3f8(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v3f7(0x1000000000000000000000000000000000000000000), v3f0(0x100)
    0x3f9: v3f9(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v3f8(0xffffffffffffffffffffffffffffffffffffffff00)
    0x3fa: v3fa = AND v3f9(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff), v3ef
    0x3fc: SSTORE v3ec(0x33), v3fa
    0x3fd: JUMP ve8(0xfcb)

    Begin block 0xfcb
    prev=[0x3ae], succ=[]
    =================================
    0xfcc: STOP 

}

function initialize()() public {
    Begin block 0xef
    prev=[], succ=[0x3feB0xef]
    =================================
    0xf0: vf0(0xfec) = CONST 
    0xf3: vf3(0x3fe) = CONST 
    0xf6: JUMP vf3(0x3fe), vf0(0xfec)

    Begin block 0x3feB0xef
    prev=[0xef], succ=[0x411B0xef, 0x45dB0xef]
    =================================
    0x3ffS0xef: v3ffVef(0x0) = CONST 
    0x401S0xef: v401Vef = SLOAD v3ffVef(0x0)
    0x402S0xef: v402Vef(0x1) = CONST 
    0x404S0xef: v404Vef(0x1) = CONST 
    0x406S0xef: v406Vef(0xa0) = CONST 
    0x408S0xef: v408Vef(0x10000000000000000000000000000000000000000) = SHL v406Vef(0xa0), v404Vef(0x1)
    0x409S0xef: v409Vef(0xffffffffffffffffffffffffffffffffffffffff) = SUB v408Vef(0x10000000000000000000000000000000000000000), v402Vef(0x1)
    0x40aS0xef: v40aVef = AND v409Vef(0xffffffffffffffffffffffffffffffffffffffff), v401Vef
    0x40bS0xef: v40bVef = CALLER 
    0x40cS0xef: v40cVef = EQ v40bVef, v40aVef
    0x40dS0xef: v40dVef(0x45d) = CONST 
    0x410S0xef: JUMPI v40dVef(0x45d), v40cVef

    Begin block 0x411B0xef
    prev=[0x3feB0xef], succ=[]
    =================================
    0x411S0xef: v411Vef(0x40) = CONST 
    0x414S0xef: v414Vef = MLOAD v411Vef(0x40)
    0x415S0xef: v415Vef(0x461bcd) = CONST 
    0x419S0xef: v419Vef(0xe5) = CONST 
    0x41bS0xef: v41bVef(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v419Vef(0xe5), v415Vef(0x461bcd)
    0x41dS0xef: MSTORE v414Vef, v41bVef(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x41eS0xef: v41eVef(0x20) = CONST 
    0x420S0xef: v420Vef(0x4) = CONST 
    0x423S0xef: v423Vef = ADD v414Vef, v420Vef(0x4)
    0x424S0xef: MSTORE v423Vef, v41eVef(0x20)
    0x425S0xef: v425Vef(0x1f) = CONST 
    0x427S0xef: v427Vef(0x24) = CONST 
    0x42aS0xef: v42aVef = ADD v414Vef, v427Vef(0x24)
    0x42bS0xef: MSTORE v42aVef, v425Vef(0x1f)
    0x42cS0xef: v42cVef(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500) = CONST 
    0x44dS0xef: v44dVef(0x44) = CONST 
    0x450S0xef: v450Vef = ADD v414Vef, v44dVef(0x44)
    0x451S0xef: MSTORE v450Vef, v42cVef(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500)
    0x453S0xef: v453Vef = MLOAD v411Vef(0x40)
    0x457S0xef: v457Vef(0x0) = SUB v414Vef, v453Vef
    0x458S0xef: v458Vef(0x64) = CONST 
    0x45aS0xef: v45aVef(0x64) = ADD v458Vef(0x64), v457Vef(0x0)
    0x45cS0xef: REVERT v453Vef, v45aVef(0x64)

    Begin block 0x45dB0xef
    prev=[0x3feB0xef], succ=[0x476B0xef, 0x46eB0xef]
    =================================
    0x45eS0xef: v45eVef(0x3) = CONST 
    0x460S0xef: v460Vef = SLOAD v45eVef(0x3)
    0x461S0xef: v461Vef(0x100) = CONST 
    0x465S0xef: v465Vef = DIV v460Vef, v461Vef(0x100)
    0x466S0xef: v466Vef(0xff) = CONST 
    0x468S0xef: v468Vef = AND v466Vef(0xff), v465Vef
    0x46aS0xef: v46aVef(0x476) = CONST 
    0x46dS0xef: JUMPI v46aVef(0x476), v468Vef

    Begin block 0x476B0xef
    prev=[0x45dB0xef, 0xb10B0x46eB0xef], succ=[0x484B0xef, 0x47cB0xef]
    =================================
    0x476_0x0S0xef: v476_0Vef = PHI v468Vef, vb13V46eVef
    0x478S0xef: v478Vef(0x484) = CONST 
    0x47bS0xef: JUMPI v478Vef(0x484), v476_0Vef

    Begin block 0x484B0xef
    prev=[0x476B0xef, 0x47cB0xef], succ=[0x489B0xef, 0x4bfB0xef]
    =================================
    0x484_0x0S0xef: v484_0Vef = PHI v468Vef, v483Vef, vb13V46eVef
    0x485S0xef: v485Vef(0x4bf) = CONST 
    0x488S0xef: JUMPI v485Vef(0x4bf), v484_0Vef

    Begin block 0x489B0xef
    prev=[0x484B0xef], succ=[]
    =================================
    0x489S0xef: v489Vef(0x40) = CONST 
    0x48bS0xef: v48bVef = MLOAD v489Vef(0x40)
    0x48cS0xef: v48cVef(0x461bcd) = CONST 
    0x490S0xef: v490Vef(0xe5) = CONST 
    0x492S0xef: v492Vef(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v490Vef(0xe5), v48cVef(0x461bcd)
    0x494S0xef: MSTORE v48bVef, v492Vef(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x495S0xef: v495Vef(0x4) = CONST 
    0x497S0xef: v497Vef = ADD v495Vef(0x4), v48bVef
    0x49aS0xef: v49aVef(0x20) = CONST 
    0x49cS0xef: v49cVef = ADD v49aVef(0x20), v497Vef
    0x49fS0xef: v49fVef(0x20) = SUB v49cVef, v497Vef
    0x4a1S0xef: MSTORE v497Vef, v49fVef(0x20)
    0x4a2S0xef: v4a2Vef(0x2e) = CONST 
    0x4a5S0xef: MSTORE v49cVef, v4a2Vef(0x2e)
    0x4a6S0xef: v4a6Vef(0x20) = CONST 
    0x4a8S0xef: v4a8Vef = ADD v4a6Vef(0x20), v49cVef
    0x4aaS0xef: v4aaVef(0xe7a) = CONST 
    0x4adS0xef: v4adVef(0x2e) = CONST 
    0x4b0S0xef: CODECOPY v4a8Vef, v4aaVef(0xe7a), v4adVef(0x2e)
    0x4b1S0xef: v4b1Vef(0x40) = CONST 
    0x4b3S0xef: v4b3Vef = ADD v4b1Vef(0x40), v4a8Vef
    0x4b7S0xef: v4b7Vef(0x40) = CONST 
    0x4b9S0xef: v4b9Vef = MLOAD v4b7Vef(0x40)
    0x4bcS0xef: v4bcVef(0x84) = SUB v4b3Vef, v4b9Vef
    0x4beS0xef: REVERT v4b9Vef, v4bcVef(0x84)

    Begin block 0x4bfB0xef
    prev=[0x484B0xef], succ=[0x4d2B0xef, 0x4eaB0xef]
    =================================
    0x4c0S0xef: v4c0Vef(0x3) = CONST 
    0x4c2S0xef: v4c2Vef = SLOAD v4c0Vef(0x3)
    0x4c3S0xef: v4c3Vef(0x100) = CONST 
    0x4c7S0xef: v4c7Vef = DIV v4c2Vef, v4c3Vef(0x100)
    0x4c8S0xef: v4c8Vef(0xff) = CONST 
    0x4caS0xef: v4caVef = AND v4c8Vef(0xff), v4c7Vef
    0x4cbS0xef: v4cbVef = ISZERO v4caVef
    0x4cdS0xef: v4cdVef = ISZERO v4cbVef
    0x4ceS0xef: v4ceVef(0x4ea) = CONST 
    0x4d1S0xef: JUMPI v4ceVef(0x4ea), v4cdVef

    Begin block 0x4d2B0xef
    prev=[0x4bfB0xef], succ=[0x4eaB0xef]
    =================================
    0x4d2S0xef: v4d2Vef(0x3) = CONST 
    0x4d5S0xef: v4d5Vef = SLOAD v4d2Vef(0x3)
    0x4d6S0xef: v4d6Vef(0xff) = CONST 
    0x4d8S0xef: v4d8Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v4d6Vef(0xff)
    0x4d9S0xef: v4d9Vef(0xff00) = CONST 
    0x4dcS0xef: v4dcVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v4d9Vef(0xff00)
    0x4dfS0xef: v4dfVef = AND v4d5Vef, v4dcVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0x4e0S0xef: v4e0Vef(0x100) = CONST 
    0x4e3S0xef: v4e3Vef = OR v4e0Vef(0x100), v4dfVef
    0x4e4S0xef: v4e4Vef = AND v4e3Vef, v4d8Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x4e5S0xef: v4e5Vef(0x1) = CONST 
    0x4e7S0xef: v4e7Vef = OR v4e5Vef(0x1), v4e4Vef
    0x4e9S0xef: SSTORE v4d2Vef(0x3), v4e7Vef

    Begin block 0x4eaB0xef
    prev=[0x4d2B0xef, 0x4bfB0xef], succ=[0x80bB0x4eaB0xef]
    =================================
    0x4ebS0xef: v4ebVef(0x4f3) = CONST 
    0x4eeS0xef: v4eeVef = CALLER 
    0x4efS0xef: v4efVef(0x80b) = CONST 
    0x4f2S0xef: JUMP v4efVef(0x80b), v4eeVef, v4ebVef(0x4f3)

    Begin block 0x80bB0x4eaB0xef
    prev=[0x4eaB0xef], succ=[0x81e0x80bB0x4eaB0xef, 0x86a0x80bB0x4eaB0xef]
    =================================
    0x80cS0x4eaS0xef: v80cV4eaVef(0x0) = CONST 
    0x80eS0x4eaS0xef: v80eV4eaVef = SLOAD v80cV4eaVef(0x0)
    0x80fS0x4eaS0xef: v80fV4eaVef(0x1) = CONST 
    0x811S0x4eaS0xef: v811V4eaVef(0x1) = CONST 
    0x813S0x4eaS0xef: v813V4eaVef(0xa0) = CONST 
    0x815S0x4eaS0xef: v815V4eaVef(0x10000000000000000000000000000000000000000) = SHL v813V4eaVef(0xa0), v811V4eaVef(0x1)
    0x816S0x4eaS0xef: v816V4eaVef(0xffffffffffffffffffffffffffffffffffffffff) = SUB v815V4eaVef(0x10000000000000000000000000000000000000000), v80fV4eaVef(0x1)
    0x817S0x4eaS0xef: v817V4eaVef = AND v816V4eaVef(0xffffffffffffffffffffffffffffffffffffffff), v80eV4eaVef
    0x818S0x4eaS0xef: v818V4eaVef = CALLER 
    0x819S0x4eaS0xef: v819V4eaVef = EQ v818V4eaVef, v817V4eaVef
    0x81aS0x4eaS0xef: v81aV4eaVef(0x86a) = CONST 
    0x81dS0x4eaS0xef: JUMPI v81aV4eaVef(0x86a), v819V4eaVef

    Begin block 0x81e0x80bB0x4eaB0xef
    prev=[0x80bB0x4eaB0xef], succ=[]
    =================================
    0x81e0x80bS0x4eaS0xef: v80b81eV4eaVef(0x40) = CONST 
    0x8210x80bS0x4eaS0xef: v80b821V4eaVef = MLOAD v80b81eV4eaVef(0x40)
    0x8220x80bS0x4eaS0xef: v80b822V4eaVef(0x461bcd) = CONST 
    0x8260x80bS0x4eaS0xef: v80b826V4eaVef(0xe5) = CONST 
    0x8280x80bS0x4eaS0xef: v80b828V4eaVef(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v80b826V4eaVef(0xe5), v80b822V4eaVef(0x461bcd)
    0x82a0x80bS0x4eaS0xef: MSTORE v80b821V4eaVef, v80b828V4eaVef(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x82b0x80bS0x4eaS0xef: v80b82bV4eaVef(0x20) = CONST 
    0x82d0x80bS0x4eaS0xef: v80b82dV4eaVef(0x4) = CONST 
    0x8300x80bS0x4eaS0xef: v80b830V4eaVef = ADD v80b821V4eaVef, v80b82dV4eaVef(0x4)
    0x8310x80bS0x4eaS0xef: MSTORE v80b830V4eaVef, v80b82bV4eaVef(0x20)
    0x8320x80bS0x4eaS0xef: v80b832V4eaVef(0x1f) = CONST 
    0x8340x80bS0x4eaS0xef: v80b834V4eaVef(0x24) = CONST 
    0x8370x80bS0x4eaS0xef: v80b837V4eaVef = ADD v80b821V4eaVef, v80b834V4eaVef(0x24)
    0x8380x80bS0x4eaS0xef: MSTORE v80b837V4eaVef, v80b832V4eaVef(0x1f)
    0x8390x80bS0x4eaS0xef: v80b839V4eaVef(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500) = CONST 
    0x85a0x80bS0x4eaS0xef: v80b85aV4eaVef(0x44) = CONST 
    0x85d0x80bS0x4eaS0xef: v80b85dV4eaVef = ADD v80b821V4eaVef, v80b85aV4eaVef(0x44)
    0x85e0x80bS0x4eaS0xef: MSTORE v80b85dV4eaVef, v80b839V4eaVef(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500)
    0x8600x80bS0x4eaS0xef: v80b860V4eaVef = MLOAD v80b81eV4eaVef(0x40)
    0x8640x80bS0x4eaS0xef: v80b864V4eaVef(0x0) = SUB v80b821V4eaVef, v80b860V4eaVef
    0x8650x80bS0x4eaS0xef: v80b865V4eaVef(0x64) = CONST 
    0x8670x80bS0x4eaS0xef: v80b867V4eaVef(0x64) = ADD v80b865V4eaVef(0x64), v80b864V4eaVef(0x0)
    0x8690x80bS0x4eaS0xef: REVERT v80b860V4eaVef, v80b867V4eaVef(0x64)

    Begin block 0x86a0x80bB0x4eaB0xef
    prev=[0x80bB0x4eaB0xef], succ=[0x87b0x80bB0x4eaB0xef, 0x8830x80bB0x4eaB0xef]
    =================================
    0x86b0x80bS0x4eaS0xef: v80b86bV4eaVef(0x3) = CONST 
    0x86d0x80bS0x4eaS0xef: v80b86dV4eaVef = SLOAD v80b86bV4eaVef(0x3)
    0x86e0x80bS0x4eaS0xef: v80b86eV4eaVef(0x100) = CONST 
    0x8720x80bS0x4eaS0xef: v80b872V4eaVef = DIV v80b86dV4eaVef, v80b86eV4eaVef(0x100)
    0x8730x80bS0x4eaS0xef: v80b873V4eaVef(0xff) = CONST 
    0x8750x80bS0x4eaS0xef: v80b875V4eaVef = AND v80b873V4eaVef(0xff), v80b872V4eaVef
    0x8770x80bS0x4eaS0xef: v80b877V4eaVef(0x883) = CONST 
    0x87a0x80bS0x4eaS0xef: JUMPI v80b877V4eaVef(0x883), v80b875V4eaVef

    Begin block 0x87b0x80bB0x4eaB0xef
    prev=[0x86a0x80bB0x4eaB0xef], succ=[0xb10B0x87b0x80bB0x4eaB0xef]
    =================================
    0x87c0x80bS0x4eaS0xef: v80b87cV4eaVef(0x883) = CONST 
    0x87f0x80bS0x4eaS0xef: v80b87fV4eaVef(0xb10) = CONST 
    0x8820x80bS0x4eaS0xef: JUMP v80b87fV4eaVef(0xb10)

    Begin block 0xb10B0x87b0x80bB0x4eaB0xef
    prev=[0x87b0x80bB0x4eaB0xef], succ=[0x8830x80bB0x4eaB0xef]
    =================================
    0xb11S0x87b0x80bS0x4eaS0xef: vb11V87b80bV4eaVef = ADDRESS 
    0xb12S0x87b0x80bS0x4eaS0xef: vb12V87b80bV4eaVef = EXTCODESIZE vb11V87b80bV4eaVef
    0xb13S0x87b0x80bS0x4eaS0xef: vb13V87b80bV4eaVef = ISZERO vb12V87b80bV4eaVef
    0xb15S0x87b0x80bS0x4eaS0xef: JUMP v80b87cV4eaVef(0x883)

    Begin block 0x8830x80bB0x4eaB0xef
    prev=[0x86a0x80bB0x4eaB0xef, 0xb10B0x87b0x80bB0x4eaB0xef], succ=[0x8910x80bB0x4eaB0xef, 0x8890x80bB0x4eaB0xef]
    =================================
    0x8830x80b_0x0S0x4eaS0xef: v88380b_0V4eaVef = PHI v80b875V4eaVef, vb13V87b80bV4eaVef
    0x8850x80bS0x4eaS0xef: v80b885V4eaVef(0x891) = CONST 
    0x8880x80bS0x4eaS0xef: JUMPI v80b885V4eaVef(0x891), v88380b_0V4eaVef

    Begin block 0x8910x80bB0x4eaB0xef
    prev=[0x8830x80bB0x4eaB0xef, 0x8890x80bB0x4eaB0xef], succ=[0x8960x80bB0x4eaB0xef, 0x8cc0x80bB0x4eaB0xef]
    =================================
    0x8910x80b_0x0S0x4eaS0xef: v89180b_0V4eaVef = PHI v80b875V4eaVef, v80b890V4eaVef, vb13V87b80bV4eaVef
    0x8920x80bS0x4eaS0xef: v80b892V4eaVef(0x8cc) = CONST 
    0x8950x80bS0x4eaS0xef: JUMPI v80b892V4eaVef(0x8cc), v89180b_0V4eaVef

    Begin block 0x8960x80bB0x4eaB0xef
    prev=[0x8910x80bB0x4eaB0xef], succ=[]
    =================================
    0x8960x80bS0x4eaS0xef: v80b896V4eaVef(0x40) = CONST 
    0x8980x80bS0x4eaS0xef: v80b898V4eaVef = MLOAD v80b896V4eaVef(0x40)
    0x8990x80bS0x4eaS0xef: v80b899V4eaVef(0x461bcd) = CONST 
    0x89d0x80bS0x4eaS0xef: v80b89dV4eaVef(0xe5) = CONST 
    0x89f0x80bS0x4eaS0xef: v80b89fV4eaVef(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v80b89dV4eaVef(0xe5), v80b899V4eaVef(0x461bcd)
    0x8a10x80bS0x4eaS0xef: MSTORE v80b898V4eaVef, v80b89fV4eaVef(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x8a20x80bS0x4eaS0xef: v80b8a2V4eaVef(0x4) = CONST 
    0x8a40x80bS0x4eaS0xef: v80b8a4V4eaVef = ADD v80b8a2V4eaVef(0x4), v80b898V4eaVef
    0x8a70x80bS0x4eaS0xef: v80b8a7V4eaVef(0x20) = CONST 
    0x8a90x80bS0x4eaS0xef: v80b8a9V4eaVef = ADD v80b8a7V4eaVef(0x20), v80b8a4V4eaVef
    0x8ac0x80bS0x4eaS0xef: v80b8acV4eaVef(0x20) = SUB v80b8a9V4eaVef, v80b8a4V4eaVef
    0x8ae0x80bS0x4eaS0xef: MSTORE v80b8a4V4eaVef, v80b8acV4eaVef(0x20)
    0x8af0x80bS0x4eaS0xef: v80b8afV4eaVef(0x2e) = CONST 
    0x8b20x80bS0x4eaS0xef: MSTORE v80b8a9V4eaVef, v80b8afV4eaVef(0x2e)
    0x8b30x80bS0x4eaS0xef: v80b8b3V4eaVef(0x20) = CONST 
    0x8b50x80bS0x4eaS0xef: v80b8b5V4eaVef = ADD v80b8b3V4eaVef(0x20), v80b8a9V4eaVef
    0x8b70x80bS0x4eaS0xef: v80b8b7V4eaVef(0xe7a) = CONST 
    0x8ba0x80bS0x4eaS0xef: v80b8baV4eaVef(0x2e) = CONST 
    0x8bd0x80bS0x4eaS0xef: CODECOPY v80b8b5V4eaVef, v80b8b7V4eaVef(0xe7a), v80b8baV4eaVef(0x2e)
    0x8be0x80bS0x4eaS0xef: v80b8beV4eaVef(0x40) = CONST 
    0x8c00x80bS0x4eaS0xef: v80b8c0V4eaVef = ADD v80b8beV4eaVef(0x40), v80b8b5V4eaVef
    0x8c40x80bS0x4eaS0xef: v80b8c4V4eaVef(0x40) = CONST 
    0x8c60x80bS0x4eaS0xef: v80b8c6V4eaVef = MLOAD v80b8c4V4eaVef(0x40)
    0x8c90x80bS0x4eaS0xef: v80b8c9V4eaVef(0x84) = SUB v80b8c0V4eaVef, v80b8c6V4eaVef
    0x8cb0x80bS0x4eaS0xef: REVERT v80b8c6V4eaVef, v80b8c9V4eaVef(0x84)

    Begin block 0x8cc0x80bB0x4eaB0xef
    prev=[0x8910x80bB0x4eaB0xef], succ=[0x8df0x80bB0x4eaB0xef, 0x8f70x80bB0x4eaB0xef]
    =================================
    0x8cd0x80bS0x4eaS0xef: v80b8cdV4eaVef(0x3) = CONST 
    0x8cf0x80bS0x4eaS0xef: v80b8cfV4eaVef = SLOAD v80b8cdV4eaVef(0x3)
    0x8d00x80bS0x4eaS0xef: v80b8d0V4eaVef(0x100) = CONST 
    0x8d40x80bS0x4eaS0xef: v80b8d4V4eaVef = DIV v80b8cfV4eaVef, v80b8d0V4eaVef(0x100)
    0x8d50x80bS0x4eaS0xef: v80b8d5V4eaVef(0xff) = CONST 
    0x8d70x80bS0x4eaS0xef: v80b8d7V4eaVef = AND v80b8d5V4eaVef(0xff), v80b8d4V4eaVef
    0x8d80x80bS0x4eaS0xef: v80b8d8V4eaVef = ISZERO v80b8d7V4eaVef
    0x8da0x80bS0x4eaS0xef: v80b8daV4eaVef = ISZERO v80b8d8V4eaVef
    0x8db0x80bS0x4eaS0xef: v80b8dbV4eaVef(0x8f7) = CONST 
    0x8de0x80bS0x4eaS0xef: JUMPI v80b8dbV4eaVef(0x8f7), v80b8daV4eaVef

    Begin block 0x8df0x80bB0x4eaB0xef
    prev=[0x8cc0x80bB0x4eaB0xef], succ=[0x8f70x80bB0x4eaB0xef]
    =================================
    0x8df0x80bS0x4eaS0xef: v80b8dfV4eaVef(0x3) = CONST 
    0x8e20x80bS0x4eaS0xef: v80b8e2V4eaVef = SLOAD v80b8dfV4eaVef(0x3)
    0x8e30x80bS0x4eaS0xef: v80b8e3V4eaVef(0xff) = CONST 
    0x8e50x80bS0x4eaS0xef: v80b8e5V4eaVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v80b8e3V4eaVef(0xff)
    0x8e60x80bS0x4eaS0xef: v80b8e6V4eaVef(0xff00) = CONST 
    0x8e90x80bS0x4eaS0xef: v80b8e9V4eaVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v80b8e6V4eaVef(0xff00)
    0x8ec0x80bS0x4eaS0xef: v80b8ecV4eaVef = AND v80b8e2V4eaVef, v80b8e9V4eaVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0x8ed0x80bS0x4eaS0xef: v80b8edV4eaVef(0x100) = CONST 
    0x8f00x80bS0x4eaS0xef: v80b8f0V4eaVef = OR v80b8edV4eaVef(0x100), v80b8ecV4eaVef
    0x8f10x80bS0x4eaS0xef: v80b8f1V4eaVef = AND v80b8f0V4eaVef, v80b8e5V4eaVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x8f20x80bS0x4eaS0xef: v80b8f2V4eaVef(0x1) = CONST 
    0x8f40x80bS0x4eaS0xef: v80b8f4V4eaVef = OR v80b8f2V4eaVef(0x1), v80b8f1V4eaVef
    0x8f60x80bS0x4eaS0xef: SSTORE v80b8dfV4eaVef(0x3), v80b8f4V4eaVef

    Begin block 0x8f70x80bB0x4eaB0xef
    prev=[0x8df0x80bB0x4eaB0xef, 0x8cc0x80bB0x4eaB0xef], succ=[0x9540x80bB0x4eaB0xef, 0x95f0x80bB0x4eaB0xef]
    =================================
    0x8f80x80bS0x4eaS0xef: v80b8f8V4eaVef(0x33) = CONST 
    0x8fb0x80bS0x4eaS0xef: v80b8fbV4eaVef = SLOAD v80b8f8V4eaVef(0x33)
    0x8fc0x80bS0x4eaS0xef: v80b8fcV4eaVef(0x100) = CONST 
    0x8ff0x80bS0x4eaS0xef: v80b8ffV4eaVef(0x1) = CONST 
    0x9010x80bS0x4eaS0xef: v80b901V4eaVef(0xa8) = CONST 
    0x9030x80bS0x4eaS0xef: v80b903V4eaVef(0x1000000000000000000000000000000000000000000) = SHL v80b901V4eaVef(0xa8), v80b8ffV4eaVef(0x1)
    0x9040x80bS0x4eaS0xef: v80b904V4eaVef(0xffffffffffffffffffffffffffffffffffffffff00) = SUB v80b903V4eaVef(0x1000000000000000000000000000000000000000000), v80b8fcV4eaVef(0x100)
    0x9050x80bS0x4eaS0xef: v80b905V4eaVef(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) = NOT v80b904V4eaVef(0xffffffffffffffffffffffffffffffffffffffff00)
    0x9060x80bS0x4eaS0xef: v80b906V4eaVef = AND v80b905V4eaVef(0xffffffffffffffffffffff0000000000000000000000000000000000000000ff), v80b8fbV4eaVef
    0x9070x80bS0x4eaS0xef: v80b907V4eaVef(0x100) = CONST 
    0x90a0x80bS0x4eaS0xef: v80b90aV4eaVef(0x1) = CONST 
    0x90c0x80bS0x4eaS0xef: v80b90cV4eaVef(0x1) = CONST 
    0x90e0x80bS0x4eaS0xef: v80b90eV4eaVef(0xa0) = CONST 
    0x9100x80bS0x4eaS0xef: v80b910V4eaVef(0x10000000000000000000000000000000000000000) = SHL v80b90eV4eaVef(0xa0), v80b90cV4eaVef(0x1)
    0x9110x80bS0x4eaS0xef: v80b911V4eaVef(0xffffffffffffffffffffffffffffffffffffffff) = SUB v80b910V4eaVef(0x10000000000000000000000000000000000000000), v80b90aV4eaVef(0x1)
    0x9140x80bS0x4eaS0xef: v80b914V4eaVef = AND v80b911V4eaVef(0xffffffffffffffffffffffffffffffffffffffff), v4eeVef
    0x9160x80bS0x4eaS0xef: v80b916V4eaVef = MUL v80b907V4eaVef(0x100), v80b914V4eaVef
    0x91a0x80bS0x4eaS0xef: v80b91aV4eaVef = OR v80b916V4eaVef, v80b906V4eaVef
    0x91e0x80bS0x4eaS0xef: SSTORE v80b8f8V4eaVef(0x33), v80b91aV4eaVef
    0x91f0x80bS0x4eaS0xef: v80b91fV4eaVef(0x40) = CONST 
    0x9210x80bS0x4eaS0xef: v80b921V4eaVef = MLOAD v80b91fV4eaVef(0x40)
    0x9230x80bS0x4eaS0xef: v80b923V4eaVef = DIV v80b91aV4eaVef, v80b907V4eaVef(0x100)
    0x9240x80bS0x4eaS0xef: v80b924V4eaVef = AND v80b923V4eaVef, v80b911V4eaVef(0xffffffffffffffffffffffffffffffffffffffff)
    0x9260x80bS0x4eaS0xef: v80b926V4eaVef(0x0) = CONST 
    0x9290x80bS0x4eaS0xef: v80b929V4eaVef(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x94d0x80bS0x4eaS0xef: LOG3 v80b921V4eaVef, v80b926V4eaVef(0x0), v80b929V4eaVef(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v80b926V4eaVef(0x0), v80b924V4eaVef
    0x94f0x80bS0x4eaS0xef: v80b94fV4eaVef = ISZERO v80b8d8V4eaVef
    0x9500x80bS0x4eaS0xef: v80b950V4eaVef(0x95f) = CONST 
    0x9530x80bS0x4eaS0xef: JUMPI v80b950V4eaVef(0x95f), v80b94fV4eaVef

    Begin block 0x9540x80bB0x4eaB0xef
    prev=[0x8f70x80bB0x4eaB0xef], succ=[0x95f0x80bB0x4eaB0xef]
    =================================
    0x9540x80bS0x4eaS0xef: v80b954V4eaVef(0x3) = CONST 
    0x9570x80bS0x4eaS0xef: v80b957V4eaVef = SLOAD v80b954V4eaVef(0x3)
    0x9580x80bS0x4eaS0xef: v80b958V4eaVef(0xff00) = CONST 
    0x95b0x80bS0x4eaS0xef: v80b95bV4eaVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v80b958V4eaVef(0xff00)
    0x95c0x80bS0x4eaS0xef: v80b95cV4eaVef = AND v80b95bV4eaVef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v80b957V4eaVef
    0x95e0x80bS0x4eaS0xef: SSTORE v80b954V4eaVef(0x3), v80b95cV4eaVef

    Begin block 0x95f0x80bB0x4eaB0xef
    prev=[0x9540x80bB0x4eaB0xef, 0x8f70x80bB0x4eaB0xef], succ=[0x4f3B0xef]
    =================================
    0x9620x80bS0x4eaS0xef: JUMP v4ebVef(0x4f3)

    Begin block 0x4f3B0xef
    prev=[0x95f0x80bB0x4eaB0xef], succ=[0xb16B0x4f3B0xef]
    =================================
    0x4f4S0xef: v4f4Vef(0x4fb) = CONST 
    0x4f7S0xef: v4f7Vef(0xb16) = CONST 
    0x4faS0xef: JUMP v4f7Vef(0xb16), v4f4Vef(0x4fb)

    Begin block 0xb16B0x4f3B0xef
    prev=[0x4f3B0xef], succ=[0xb29B0x4f3B0xef, 0xb75B0x4f3B0xef]
    =================================
    0xb17S0x4f3S0xef: vb17V4f3Vef(0x0) = CONST 
    0xb19S0x4f3S0xef: vb19V4f3Vef = SLOAD vb17V4f3Vef(0x0)
    0xb1aS0x4f3S0xef: vb1aV4f3Vef(0x1) = CONST 
    0xb1cS0x4f3S0xef: vb1cV4f3Vef(0x1) = CONST 
    0xb1eS0x4f3S0xef: vb1eV4f3Vef(0xa0) = CONST 
    0xb20S0x4f3S0xef: vb20V4f3Vef(0x10000000000000000000000000000000000000000) = SHL vb1eV4f3Vef(0xa0), vb1cV4f3Vef(0x1)
    0xb21S0x4f3S0xef: vb21V4f3Vef(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb20V4f3Vef(0x10000000000000000000000000000000000000000), vb1aV4f3Vef(0x1)
    0xb22S0x4f3S0xef: vb22V4f3Vef = AND vb21V4f3Vef(0xffffffffffffffffffffffffffffffffffffffff), vb19V4f3Vef
    0xb23S0x4f3S0xef: vb23V4f3Vef = CALLER 
    0xb24S0x4f3S0xef: vb24V4f3Vef = EQ vb23V4f3Vef, vb22V4f3Vef
    0xb25S0x4f3S0xef: vb25V4f3Vef(0xb75) = CONST 
    0xb28S0x4f3S0xef: JUMPI vb25V4f3Vef(0xb75), vb24V4f3Vef

    Begin block 0xb29B0x4f3B0xef
    prev=[0xb16B0x4f3B0xef], succ=[]
    =================================
    0xb29S0x4f3S0xef: vb29V4f3Vef(0x40) = CONST 
    0xb2cS0x4f3S0xef: vb2cV4f3Vef = MLOAD vb29V4f3Vef(0x40)
    0xb2dS0x4f3S0xef: vb2dV4f3Vef(0x461bcd) = CONST 
    0xb31S0x4f3S0xef: vb31V4f3Vef(0xe5) = CONST 
    0xb33S0x4f3S0xef: vb33V4f3Vef(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vb31V4f3Vef(0xe5), vb2dV4f3Vef(0x461bcd)
    0xb35S0x4f3S0xef: MSTORE vb2cV4f3Vef, vb33V4f3Vef(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xb36S0x4f3S0xef: vb36V4f3Vef(0x20) = CONST 
    0xb38S0x4f3S0xef: vb38V4f3Vef(0x4) = CONST 
    0xb3bS0x4f3S0xef: vb3bV4f3Vef = ADD vb2cV4f3Vef, vb38V4f3Vef(0x4)
    0xb3cS0x4f3S0xef: MSTORE vb3bV4f3Vef, vb36V4f3Vef(0x20)
    0xb3dS0x4f3S0xef: vb3dV4f3Vef(0x1f) = CONST 
    0xb3fS0x4f3S0xef: vb3fV4f3Vef(0x24) = CONST 
    0xb42S0x4f3S0xef: vb42V4f3Vef = ADD vb2cV4f3Vef, vb3fV4f3Vef(0x24)
    0xb43S0x4f3S0xef: MSTORE vb42V4f3Vef, vb3dV4f3Vef(0x1f)
    0xb44S0x4f3S0xef: vb44V4f3Vef(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500) = CONST 
    0xb65S0x4f3S0xef: vb65V4f3Vef(0x44) = CONST 
    0xb68S0x4f3S0xef: vb68V4f3Vef = ADD vb2cV4f3Vef, vb65V4f3Vef(0x44)
    0xb69S0x4f3S0xef: MSTORE vb68V4f3Vef, vb44V4f3Vef(0x4f6e6c792070726f78792061646d696e2063616e20696e697469616c697a6500)
    0xb6bS0x4f3S0xef: vb6bV4f3Vef = MLOAD vb29V4f3Vef(0x40)
    0xb6fS0x4f3S0xef: vb6fV4f3Vef(0x0) = SUB vb2cV4f3Vef, vb6bV4f3Vef
    0xb70S0x4f3S0xef: vb70V4f3Vef(0x64) = CONST 
    0xb72S0x4f3S0xef: vb72V4f3Vef(0x64) = ADD vb70V4f3Vef(0x64), vb6fV4f3Vef(0x0)
    0xb74S0x4f3S0xef: REVERT vb6bV4f3Vef, vb72V4f3Vef(0x64)

    Begin block 0xb75B0x4f3B0xef
    prev=[0xb16B0x4f3B0xef], succ=[0xb8eB0x4f3B0xef, 0xb86B0x4f3B0xef]
    =================================
    0xb76S0x4f3S0xef: vb76V4f3Vef(0x3) = CONST 
    0xb78S0x4f3S0xef: vb78V4f3Vef = SLOAD vb76V4f3Vef(0x3)
    0xb79S0x4f3S0xef: vb79V4f3Vef(0x100) = CONST 
    0xb7dS0x4f3S0xef: vb7dV4f3Vef = DIV vb78V4f3Vef, vb79V4f3Vef(0x100)
    0xb7eS0x4f3S0xef: vb7eV4f3Vef(0xff) = CONST 
    0xb80S0x4f3S0xef: vb80V4f3Vef = AND vb7eV4f3Vef(0xff), vb7dV4f3Vef
    0xb82S0x4f3S0xef: vb82V4f3Vef(0xb8e) = CONST 
    0xb85S0x4f3S0xef: JUMPI vb82V4f3Vef(0xb8e), vb80V4f3Vef

    Begin block 0xb8eB0x4f3B0xef
    prev=[0xb75B0x4f3B0xef, 0xb10B0xb86B0x4f3B0xef], succ=[0xb9cB0x4f3B0xef, 0xb94B0x4f3B0xef]
    =================================
    0xb8e_0x0S0x4f3S0xef: vb8e_0V4f3Vef = PHI vb80V4f3Vef, vb13Vb86V4f3Vef
    0xb90S0x4f3S0xef: vb90V4f3Vef(0xb9c) = CONST 
    0xb93S0x4f3S0xef: JUMPI vb90V4f3Vef(0xb9c), vb8e_0V4f3Vef

    Begin block 0xb9cB0x4f3B0xef
    prev=[0xb8eB0x4f3B0xef, 0xb94B0x4f3B0xef], succ=[0xba1B0x4f3B0xef, 0xbd7B0x4f3B0xef]
    =================================
    0xb9c_0x0S0x4f3S0xef: vb9c_0V4f3Vef = PHI vb80V4f3Vef, vb9bV4f3Vef, vb13Vb86V4f3Vef
    0xb9dS0x4f3S0xef: vb9dV4f3Vef(0xbd7) = CONST 
    0xba0S0x4f3S0xef: JUMPI vb9dV4f3Vef(0xbd7), vb9c_0V4f3Vef

    Begin block 0xba1B0x4f3B0xef
    prev=[0xb9cB0x4f3B0xef], succ=[]
    =================================
    0xba1S0x4f3S0xef: vba1V4f3Vef(0x40) = CONST 
    0xba3S0x4f3S0xef: vba3V4f3Vef = MLOAD vba1V4f3Vef(0x40)
    0xba4S0x4f3S0xef: vba4V4f3Vef(0x461bcd) = CONST 
    0xba8S0x4f3S0xef: vba8V4f3Vef(0xe5) = CONST 
    0xbaaS0x4f3S0xef: vbaaV4f3Vef(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vba8V4f3Vef(0xe5), vba4V4f3Vef(0x461bcd)
    0xbacS0x4f3S0xef: MSTORE vba3V4f3Vef, vbaaV4f3Vef(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xbadS0x4f3S0xef: vbadV4f3Vef(0x4) = CONST 
    0xbafS0x4f3S0xef: vbafV4f3Vef = ADD vbadV4f3Vef(0x4), vba3V4f3Vef
    0xbb2S0x4f3S0xef: vbb2V4f3Vef(0x20) = CONST 
    0xbb4S0x4f3S0xef: vbb4V4f3Vef = ADD vbb2V4f3Vef(0x20), vbafV4f3Vef
    0xbb7S0x4f3S0xef: vbb7V4f3Vef(0x20) = SUB vbb4V4f3Vef, vbafV4f3Vef
    0xbb9S0x4f3S0xef: MSTORE vbafV4f3Vef, vbb7V4f3Vef(0x20)
    0xbbaS0x4f3S0xef: vbbaV4f3Vef(0x2e) = CONST 
    0xbbdS0x4f3S0xef: MSTORE vbb4V4f3Vef, vbbaV4f3Vef(0x2e)
    0xbbeS0x4f3S0xef: vbbeV4f3Vef(0x20) = CONST 
    0xbc0S0x4f3S0xef: vbc0V4f3Vef = ADD vbbeV4f3Vef(0x20), vbb4V4f3Vef
    0xbc2S0x4f3S0xef: vbc2V4f3Vef(0xe7a) = CONST 
    0xbc5S0x4f3S0xef: vbc5V4f3Vef(0x2e) = CONST 
    0xbc8S0x4f3S0xef: CODECOPY vbc0V4f3Vef, vbc2V4f3Vef(0xe7a), vbc5V4f3Vef(0x2e)
    0xbc9S0x4f3S0xef: vbc9V4f3Vef(0x40) = CONST 
    0xbcbS0x4f3S0xef: vbcbV4f3Vef = ADD vbc9V4f3Vef(0x40), vbc0V4f3Vef
    0xbcfS0x4f3S0xef: vbcfV4f3Vef(0x40) = CONST 
    0xbd1S0x4f3S0xef: vbd1V4f3Vef = MLOAD vbcfV4f3Vef(0x40)
    0xbd4S0x4f3S0xef: vbd4V4f3Vef(0x84) = SUB vbcbV4f3Vef, vbd1V4f3Vef
    0xbd6S0x4f3S0xef: REVERT vbd1V4f3Vef, vbd4V4f3Vef(0x84)

    Begin block 0xbd7B0x4f3B0xef
    prev=[0xb9cB0x4f3B0xef], succ=[0xbeaB0x4f3B0xef, 0xc02B0x4f3B0xef]
    =================================
    0xbd8S0x4f3S0xef: vbd8V4f3Vef(0x3) = CONST 
    0xbdaS0x4f3S0xef: vbdaV4f3Vef = SLOAD vbd8V4f3Vef(0x3)
    0xbdbS0x4f3S0xef: vbdbV4f3Vef(0x100) = CONST 
    0xbdfS0x4f3S0xef: vbdfV4f3Vef = DIV vbdaV4f3Vef, vbdbV4f3Vef(0x100)
    0xbe0S0x4f3S0xef: vbe0V4f3Vef(0xff) = CONST 
    0xbe2S0x4f3S0xef: vbe2V4f3Vef = AND vbe0V4f3Vef(0xff), vbdfV4f3Vef
    0xbe3S0x4f3S0xef: vbe3V4f3Vef = ISZERO vbe2V4f3Vef
    0xbe5S0x4f3S0xef: vbe5V4f3Vef = ISZERO vbe3V4f3Vef
    0xbe6S0x4f3S0xef: vbe6V4f3Vef(0xc02) = CONST 
    0xbe9S0x4f3S0xef: JUMPI vbe6V4f3Vef(0xc02), vbe5V4f3Vef

    Begin block 0xbeaB0x4f3B0xef
    prev=[0xbd7B0x4f3B0xef], succ=[0xc02B0x4f3B0xef]
    =================================
    0xbeaS0x4f3S0xef: vbeaV4f3Vef(0x3) = CONST 
    0xbedS0x4f3S0xef: vbedV4f3Vef = SLOAD vbeaV4f3Vef(0x3)
    0xbeeS0x4f3S0xef: vbeeV4f3Vef(0xff) = CONST 
    0xbf0S0x4f3S0xef: vbf0V4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vbeeV4f3Vef(0xff)
    0xbf1S0x4f3S0xef: vbf1V4f3Vef(0xff00) = CONST 
    0xbf4S0x4f3S0xef: vbf4V4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vbf1V4f3Vef(0xff00)
    0xbf7S0x4f3S0xef: vbf7V4f3Vef = AND vbedV4f3Vef, vbf4V4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xbf8S0x4f3S0xef: vbf8V4f3Vef(0x100) = CONST 
    0xbfbS0x4f3S0xef: vbfbV4f3Vef = OR vbf8V4f3Vef(0x100), vbf7V4f3Vef
    0xbfcS0x4f3S0xef: vbfcV4f3Vef = AND vbfbV4f3Vef, vbf0V4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xbfdS0x4f3S0xef: vbfdV4f3Vef(0x1) = CONST 
    0xbffS0x4f3S0xef: vbffV4f3Vef = OR vbfdV4f3Vef(0x1), vbfcV4f3Vef
    0xc01S0x4f3S0xef: SSTORE vbeaV4f3Vef(0x3), vbffV4f3Vef

    Begin block 0xc02B0x4f3B0xef
    prev=[0xbeaB0x4f3B0xef, 0xbd7B0x4f3B0xef], succ=[0xc16B0x4f3B0xef, 0x11a8B0x4f3B0xef]
    =================================
    0xc03S0x4f3S0xef: vc03V4f3Vef(0x33) = CONST 
    0xc06S0x4f3S0xef: vc06V4f3Vef = SLOAD vc03V4f3Vef(0x33)
    0xc07S0x4f3S0xef: vc07V4f3Vef(0xff) = CONST 
    0xc09S0x4f3S0xef: vc09V4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vc07V4f3Vef(0xff)
    0xc0aS0x4f3S0xef: vc0aV4f3Vef = AND vc09V4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), vc06V4f3Vef
    0xc0bS0x4f3S0xef: vc0bV4f3Vef(0x1) = CONST 
    0xc0dS0x4f3S0xef: vc0dV4f3Vef = OR vc0bV4f3Vef(0x1), vc0aV4f3Vef
    0xc0fS0x4f3S0xef: SSTORE vc03V4f3Vef(0x33), vc0dV4f3Vef
    0xc11S0x4f3S0xef: vc11V4f3Vef = ISZERO vbe3V4f3Vef
    0xc12S0x4f3S0xef: vc12V4f3Vef(0x11a8) = CONST 
    0xc15S0x4f3S0xef: JUMPI vc12V4f3Vef(0x11a8), vc11V4f3Vef

    Begin block 0xc16B0x4f3B0xef
    prev=[0xc02B0x4f3B0xef], succ=[0x4fbB0xef]
    =================================
    0xc16S0x4f3S0xef: vc16V4f3Vef(0x3) = CONST 
    0xc19S0x4f3S0xef: vc19V4f3Vef = SLOAD vc16V4f3Vef(0x3)
    0xc1aS0x4f3S0xef: vc1aV4f3Vef(0xff00) = CONST 
    0xc1dS0x4f3S0xef: vc1dV4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vc1aV4f3Vef(0xff00)
    0xc1eS0x4f3S0xef: vc1eV4f3Vef = AND vc1dV4f3Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vc19V4f3Vef
    0xc20S0x4f3S0xef: SSTORE vc16V4f3Vef(0x3), vc1eV4f3Vef
    0xc22S0x4f3S0xef: JUMP v4f4Vef(0x4fb)

    Begin block 0x4fbB0xef
    prev=[0xc16B0x4f3B0xef, 0x11a8B0x4f3B0xef], succ=[0x502B0xef, 0x1142B0xef]
    =================================
    0x4fdS0xef: v4fdVef = ISZERO v4cbVef
    0x4feS0xef: v4feVef(0x1142) = CONST 
    0x501S0xef: JUMPI v4feVef(0x1142), v4fdVef

    Begin block 0x502B0xef
    prev=[0x4fbB0xef], succ=[0x50dB0xef]
    =================================
    0x502S0xef: v502Vef(0x3) = CONST 
    0x505S0xef: v505Vef = SLOAD v502Vef(0x3)
    0x506S0xef: v506Vef(0xff00) = CONST 
    0x509S0xef: v509Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v506Vef(0xff00)
    0x50aS0xef: v50aVef = AND v509Vef(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v505Vef
    0x50cS0xef: SSTORE v502Vef(0x3), v50aVef

    Begin block 0x50dB0xef
    prev=[0x502B0xef], succ=[0xfec]
    =================================
    0x50fS0xef: JUMP vf0(0xfec)

    Begin block 0xfec
    prev=[0x1142B0xef, 0x50dB0xef], succ=[]
    =================================
    0xfed: STOP 

    Begin block 0x1142B0xef
    prev=[0x4fbB0xef], succ=[0xfec]
    =================================
    0x1144S0xef: JUMP vf0(0xfec)

    Begin block 0x11a8B0x4f3B0xef
    prev=[0xc02B0x4f3B0xef], succ=[0x4fbB0xef]
    =================================
    0x11aaS0x4f3S0xef: JUMP v4f4Vef(0x4fb)

    Begin block 0xb94B0x4f3B0xef
    prev=[0xb8eB0x4f3B0xef], succ=[0xb9cB0x4f3B0xef]
    =================================
    0xb95S0x4f3S0xef: vb95V4f3Vef(0x3) = CONST 
    0xb97S0x4f3S0xef: vb97V4f3Vef = SLOAD vb95V4f3Vef(0x3)
    0xb98S0x4f3S0xef: vb98V4f3Vef(0xff) = CONST 
    0xb9aS0x4f3S0xef: vb9aV4f3Vef = AND vb98V4f3Vef(0xff), vb97V4f3Vef
    0xb9bS0x4f3S0xef: vb9bV4f3Vef = ISZERO vb9aV4f3Vef

    Begin block 0xb86B0x4f3B0xef
    prev=[0xb75B0x4f3B0xef], succ=[0xb10B0xb86B0x4f3B0xef]
    =================================
    0xb87S0x4f3S0xef: vb87V4f3Vef(0xb8e) = CONST 
    0xb8aS0x4f3S0xef: vb8aV4f3Vef(0xb10) = CONST 
    0xb8dS0x4f3S0xef: JUMP vb8aV4f3Vef(0xb10)

    Begin block 0xb10B0xb86B0x4f3B0xef
    prev=[0xb86B0x4f3B0xef], succ=[0xb8eB0x4f3B0xef]
    =================================
    0xb11S0xb86S0x4f3S0xef: vb11Vb86V4f3Vef = ADDRESS 
    0xb12S0xb86S0x4f3S0xef: vb12Vb86V4f3Vef = EXTCODESIZE vb11Vb86V4f3Vef
    0xb13S0xb86S0x4f3S0xef: vb13Vb86V4f3Vef = ISZERO vb12Vb86V4f3Vef
    0xb15S0xb86S0x4f3S0xef: JUMP vb87V4f3Vef(0xb8e)

    Begin block 0x8890x80bB0x4eaB0xef
    prev=[0x8830x80bB0x4eaB0xef], succ=[0x8910x80bB0x4eaB0xef]
    =================================
    0x88a0x80bS0x4eaS0xef: v80b88aV4eaVef(0x3) = CONST 
    0x88c0x80bS0x4eaS0xef: v80b88cV4eaVef = SLOAD v80b88aV4eaVef(0x3)
    0x88d0x80bS0x4eaS0xef: v80b88dV4eaVef(0xff) = CONST 
    0x88f0x80bS0x4eaS0xef: v80b88fV4eaVef = AND v80b88dV4eaVef(0xff), v80b88cV4eaVef
    0x8900x80bS0x4eaS0xef: v80b890V4eaVef = ISZERO v80b88fV4eaVef

    Begin block 0x47cB0xef
    prev=[0x476B0xef], succ=[0x484B0xef]
    =================================
    0x47dS0xef: v47dVef(0x3) = CONST 
    0x47fS0xef: v47fVef = SLOAD v47dVef(0x3)
    0x480S0xef: v480Vef(0xff) = CONST 
    0x482S0xef: v482Vef = AND v480Vef(0xff), v47fVef
    0x483S0xef: v483Vef = ISZERO v482Vef

    Begin block 0x46eB0xef
    prev=[0x45dB0xef], succ=[0xb10B0x46eB0xef]
    =================================
    0x46fS0xef: v46fVef(0x476) = CONST 
    0x472S0xef: v472Vef(0xb10) = CONST 
    0x475S0xef: JUMP v472Vef(0xb10)

    Begin block 0xb10B0x46eB0xef
    prev=[0x46eB0xef], succ=[0x476B0xef]
    =================================
    0xb11S0x46eS0xef: vb11V46eVef = ADDRESS 
    0xb12S0x46eS0xef: vb12V46eVef = EXTCODESIZE vb11V46eVef
    0xb13S0x46eS0xef: vb13V46eVef = ISZERO vb12V46eVef
    0xb15S0x46eS0xef: JUMP v46fVef(0x476)

}

function fallback()() public {
    Begin block 0xf62
    prev=[], succ=[]
    =================================
    0xf63: vf63(0x0) = CONST 
    0xf66: REVERT vf63(0x0), vf63(0x0)

}

function owner()() public {
    Begin block 0xf7
    prev=[], succ=[0x510]
    =================================
    0xf8: vf8(0x100d) = CONST 
    0xfb: vfb(0x510) = CONST 
    0xfe: JUMP vfb(0x510)

    Begin block 0x510
    prev=[0xf7], succ=[0x100d]
    =================================
    0x511: v511(0x33) = CONST 
    0x513: v513 = SLOAD v511(0x33)
    0x514: v514(0x100) = CONST 
    0x518: v518 = DIV v513, v514(0x100)
    0x519: v519(0x1) = CONST 
    0x51b: v51b(0x1) = CONST 
    0x51d: v51d(0xa0) = CONST 
    0x51f: v51f(0x10000000000000000000000000000000000000000) = SHL v51d(0xa0), v51b(0x1)
    0x520: v520(0xffffffffffffffffffffffffffffffffffffffff) = SUB v51f(0x10000000000000000000000000000000000000000), v519(0x1)
    0x521: v521 = AND v520(0xffffffffffffffffffffffffffffffffffffffff), v518
    0x523: JUMP vf8(0x100d)

    Begin block 0x100d
    prev=[0x510], succ=[]
    =================================
    0x100e: v100e(0x40) = CONST 
    0x1011: v1011 = MLOAD v100e(0x40)
    0x1012: v1012(0x1) = CONST 
    0x1014: v1014(0x1) = CONST 
    0x1016: v1016(0xa0) = CONST 
    0x1018: v1018(0x10000000000000000000000000000000000000000) = SHL v1016(0xa0), v1014(0x1)
    0x1019: v1019(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1018(0x10000000000000000000000000000000000000000), v1012(0x1)
    0x101c: v101c = AND v521, v1019(0xffffffffffffffffffffffffffffffffffffffff)
    0x101e: MSTORE v1011, v101c
    0x101f: v101f = MLOAD v100e(0x40)
    0x1023: v1023(0x0) = SUB v1011, v101f
    0x1024: v1024(0x20) = CONST 
    0x1026: v1026(0x20) = ADD v1024(0x20), v1023(0x0)
    0x1028: RETURN v101f, v1026(0x20)

}

