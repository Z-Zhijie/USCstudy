function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xd, 0x85c]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5(0x4) = CONST 
    0x7: v7 = CALLDATASIZE 
    0x8: v8 = LT v7, v5(0x4)
    0x848: v848(0x85c) = CONST 
    0x849: JUMPI v848(0x85c), v8

    Begin block 0xd
    prev=[0x0], succ=[0x59, 0x1e]
    =================================
    0xd: vd(0x0) = CONST 
    0xf: vf = CALLDATALOAD vd(0x0)
    0x10: v10(0xe0) = CONST 
    0x12: v12 = SHR v10(0xe0), vf
    0x14: v14(0x9d84ae69) = CONST 
    0x19: v19 = GT v14(0x9d84ae69), v12
    0x1a: v1a(0x59) = CONST 
    0x1d: JUMPI v1a(0x59), v19

    Begin block 0x59
    prev=[0xd], succ=[0x85f, 0x65]
    =================================
    0x5b: v5b(0x1ab7710d) = CONST 
    0x60: v60 = EQ v5b(0x1ab7710d), v12
    0x854: v854(0x85f) = CONST 
    0x855: JUMPI v854(0x85f), v60

    Begin block 0x85f
    prev=[0x59], succ=[]
    =================================
    0x860: v860(0x95) = CONST 
    0x861: CALLPRIVATE v860(0x95)

    Begin block 0x65
    prev=[0x59], succ=[0x862, 0x70]
    =================================
    0x66: v66(0x37a440e6) = CONST 
    0x6b: v6b = EQ v66(0x37a440e6), v12
    0x856: v856(0x862) = CONST 
    0x857: JUMPI v856(0x862), v6b

    Begin block 0x862
    prev=[0x65], succ=[]
    =================================
    0x863: v863(0xec) = CONST 
    0x864: CALLPRIVATE v863(0xec)

    Begin block 0x70
    prev=[0x65], succ=[0x865, 0x7b]
    =================================
    0x71: v71(0x5ced058e) = CONST 
    0x76: v76 = EQ v71(0x5ced058e), v12
    0x858: v858(0x865) = CONST 
    0x859: JUMPI v858(0x865), v76

    Begin block 0x865
    prev=[0x70], succ=[]
    =================================
    0x866: v866(0x13b) = CONST 
    0x867: CALLPRIVATE v866(0x13b)

    Begin block 0x7b
    prev=[0x70], succ=[0x86, 0x868]
    =================================
    0x7c: v7c(0x82c947b7) = CONST 
    0x81: v81 = EQ v7c(0x82c947b7), v12
    0x85a: v85a(0x868) = CONST 
    0x85b: JUMPI v85a(0x868), v81

    Begin block 0x86
    prev=[0x7b], succ=[0x8b0x0]
    =================================
    0x86: v86(0x8b) = CONST 
    0x89: JUMP v86(0x8b)

    Begin block 0x8b0x0
    prev=[0x55, 0x86], succ=[0x3e20x0]
    =================================
    0x8c0x0: v08c(0x93) = CONST 
    0x8f0x0: v08f(0x3e2) = CONST 
    0x920x0: JUMP v08f(0x3e2)

    Begin block 0x3e20x0
    prev=[0x8b0x0], succ=[0x4f2B0x3e20x0]
    =================================
    0x3e30x0: v03e3(0x0) = CONST 
    0x3e50x0: v03e5(0x433) = CONST 
    0x3e80x0: v03e8(0x40) = CONST 
    0x3ea0x0: v03ea = MLOAD v03e8(0x40)
    0x3eb0x0: v03eb(0x20) = CONST 
    0x3ed0x0: v03ed = ADD v03eb(0x20), v03ea
    0x3f00x0: v03f0(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x4120x0: MSTORE v03ed, v03f0(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x4140x0: v0414(0x13) = CONST 
    0x4160x0: v0416 = ADD v0414(0x13), v03ed
    0x4190x0: v0419(0x40) = CONST 
    0x41b0x0: v041b = MLOAD v0419(0x40)
    0x41c0x0: v041c(0x20) = CONST 
    0x4200x0: v0420(0x33) = SUB v0416, v041b
    0x4210x0: v0421(0x13) = SUB v0420(0x33), v041c(0x20)
    0x4230x0: MSTORE v041b, v0421(0x13)
    0x4250x0: v0425(0x40) = CONST 
    0x4270x0: MSTORE v0425(0x40), v0416
    0x4290x0: v0429(0x13) = MLOAD v041b
    0x42b0x0: v042b(0x20) = CONST 
    0x42d0x0: v042d = ADD v042b(0x20), v041b
    0x42e0x0: v042e = SHA3 v042d, v0429(0x13)
    0x42f0x0: v042f(0x4f2) = CONST 
    0x4320x0: JUMP v042f(0x4f2)

    Begin block 0x4f2B0x3e20x0
    prev=[0x3e20x0], succ=[0x4b2B0x4f2B0x3e20x0]
    =================================
    0x4f3S0x3e20x0: v4f3V3e20(0x0) = CONST 
    0x4f5S0x3e20x0: v4f5V3e20(0x505) = CONST 
    0x4f8S0x3e20x0: v4f8V3e20(0x500) = CONST 
    0x4fcS0x3e20x0: v4fcV3e20(0x4b2) = CONST 
    0x4ffS0x3e20x0: JUMP v4fcV3e20(0x4b2)

    Begin block 0x4b2B0x4f2B0x3e20x0
    prev=[0x4f2B0x3e20x0], succ=[0x5000x4f2B0x3e20x0]
    =================================
    0x4b3S0x4f2S0x3e20x0: v4b3V4f2V3e20(0x0) = CONST 
    0x4b7S0x4f2S0x3e20x0: v4b7V4f2V3e20 = SLOAD v042e
    0x4c1S0x4f2S0x3e20x0: JUMP v4f8V3e20(0x500)

    Begin block 0x5000x4f2B0x3e20x0
    prev=[0x4b2B0x4f2B0x3e20x0], succ=[0x4c20x4f2B0x3e20x0]
    =================================
    0x5010x4f2S0x3e20x0: v4f2501V3e20(0x4c2) = CONST 
    0x5040x4f2S0x3e20x0: JUMP v4f2501V3e20(0x4c2)

    Begin block 0x4c20x4f2B0x3e20x0
    prev=[0x5000x4f2B0x3e20x0], succ=[0x5050x4f2B0x3e20x0]
    =================================
    0x4c30x4f2S0x3e20x0: v4f24c3V3e20(0x0) = CONST 
    0x4c60x4f2S0x3e20x0: v4f24c6V3e20(0x0) = CONST 
    0x4c80x4f2S0x3e20x0: v4f24c8V3e20 = SHR v4f24c6V3e20(0x0), v4b7V4f2V3e20
    0x4ce0x4f2S0x3e20x0: JUMP v4f5V3e20(0x505)

    Begin block 0x5050x4f2B0x3e20x0
    prev=[0x4c20x4f2B0x3e20x0], succ=[0x4330x0]
    =================================
    0x50b0x4f2S0x3e20x0: JUMP v03e5(0x433)

    Begin block 0x4330x0
    prev=[0x5050x4f2B0x3e20x0], succ=[0x4550x0, 0x4580x0]
    =================================
    0x4360x0: v0436(0x40) = CONST 
    0x4380x0: v0438 = MLOAD v0436(0x40)
    0x4390x0: v0439 = CALLDATASIZE 
    0x43a0x0: v043a(0x0) = CONST 
    0x43d0x0: CALLDATACOPY v0438, v043a(0x0), v0439
    0x43e0x0: v043e(0x0) = CONST 
    0x4410x0: v0441 = CALLDATASIZE 
    0x4440x0: v0444 = GAS 
    0x4450x0: v0445 = DELEGATECALL v0444, v4f24c8V3e20, v0438, v0441, v043e(0x0), v043e(0x0)
    0x4460x0: v0446 = RETURNDATASIZE 
    0x4480x0: v0448(0x0) = CONST 
    0x44b0x0: RETURNDATACOPY v0438, v0448(0x0), v0446
    0x44d0x0: v044d(0x0) = CONST 
    0x4500x0: v0450 = EQ v0445, v044d(0x0)
    0x4510x0: v0451(0x458) = CONST 
    0x4540x0: JUMPI v0451(0x458), v0450

    Begin block 0x4550x0
    prev=[0x4330x0], succ=[]
    =================================
    0x4570x0: RETURN v0438, v0446

    Begin block 0x4580x0
    prev=[0x4330x0], succ=[]
    =================================
    0x45b0x0: REVERT v0438, v0446

    Begin block 0x868
    prev=[0x7b], succ=[]
    =================================
    0x869: v869(0x1b6) = CONST 
    0x86a: CALLPRIVATE v869(0x1b6)

    Begin block 0x1e
    prev=[0xd], succ=[0x86b, 0x29]
    =================================
    0x1f: v1f(0x9d84ae69) = CONST 
    0x24: v24 = EQ v1f(0x9d84ae69), v12
    0x84a: v84a(0x86b) = CONST 
    0x84b: JUMPI v84a(0x86b), v24

    Begin block 0x86b
    prev=[0x1e], succ=[]
    =================================
    0x86c: v86c(0x21b) = CONST 
    0x86d: CALLPRIVATE v86c(0x21b)

    Begin block 0x29
    prev=[0x1e], succ=[0x86e, 0x34]
    =================================
    0x2a: v2a(0xaaf10f42) = CONST 
    0x2f: v2f = EQ v2a(0xaaf10f42), v12
    0x84c: v84c(0x86e) = CONST 
    0x84d: JUMPI v84c(0x86e), v2f

    Begin block 0x86e
    prev=[0x29], succ=[]
    =================================
    0x86f: v86f(0x296) = CONST 
    0x870: CALLPRIVATE v86f(0x296)

    Begin block 0x34
    prev=[0x29], succ=[0x3f, 0x871]
    =================================
    0x35: v35(0xbb15ac8e) = CONST 
    0x3a: v3a = EQ v35(0xbb15ac8e), v12
    0x84e: v84e(0x871) = CONST 
    0x84f: JUMPI v84e(0x871), v3a

    Begin block 0x3f
    prev=[0x34], succ=[0x874, 0x4a]
    =================================
    0x40: v40(0xcaaee91c) = CONST 
    0x45: v45 = EQ v40(0xcaaee91c), v12
    0x850: v850(0x874) = CONST 
    0x851: JUMPI v850(0x874), v45

    Begin block 0x874
    prev=[0x3f], succ=[]
    =================================
    0x875: v875(0x340) = CONST 
    0x876: CALLPRIVATE v875(0x340)

    Begin block 0x4a
    prev=[0x3f], succ=[0x55, 0x877]
    =================================
    0x4b: v4b(0xd784d426) = CONST 
    0x50: v50 = EQ v4b(0xd784d426), v12
    0x852: v852(0x877) = CONST 
    0x853: JUMPI v852(0x877), v50

    Begin block 0x55
    prev=[0x4a], succ=[0x8b0x0]
    =================================
    0x55: v55(0x8b) = CONST 
    0x58: JUMP v55(0x8b)

    Begin block 0x877
    prev=[0x4a], succ=[]
    =================================
    0x878: v878(0x391) = CONST 
    0x879: CALLPRIVATE v878(0x391)

    Begin block 0x871
    prev=[0x34], succ=[]
    =================================
    0x872: v872(0x2ed) = CONST 
    0x873: CALLPRIVATE v872(0x2ed)

    Begin block 0x85c
    prev=[0x0], succ=[]
    =================================
    0x85d: v85d(0x8a) = CONST 
    0x85e: CALLPRIVATE v85d(0x8a)

}

function bytes32ToAddress(bytes32)() public {
    Begin block 0x13b
    prev=[], succ=[0x143, 0x147]
    =================================
    0x13c: v13c = CALLVALUE 
    0x13e: v13e = ISZERO v13c
    0x13f: v13f(0x147) = CONST 
    0x142: JUMPI v13f(0x147), v13e

    Begin block 0x143
    prev=[0x13b], succ=[]
    =================================
    0x143: v143(0x0) = CONST 
    0x146: REVERT v143(0x0), v143(0x0)

    Begin block 0x147
    prev=[0x13b], succ=[0x15a, 0x15e]
    =================================
    0x149: v149(0x174) = CONST 
    0x14c: v14c(0x4) = CONST 
    0x14f: v14f = CALLDATASIZE 
    0x150: v150 = SUB v14f, v14c(0x4)
    0x151: v151(0x20) = CONST 
    0x154: v154 = LT v150, v151(0x20)
    0x155: v155 = ISZERO v154
    0x156: v156(0x15e) = CONST 
    0x159: JUMPI v156(0x15e), v155

    Begin block 0x15a
    prev=[0x147], succ=[]
    =================================
    0x15a: v15a(0x0) = CONST 
    0x15d: REVERT v15a(0x0), v15a(0x0)

    Begin block 0x15e
    prev=[0x147], succ=[0x4c20x13b]
    =================================
    0x160: v160 = ADD v14c(0x4), v150
    0x164: v164 = CALLDATALOAD v14c(0x4)
    0x166: v166(0x20) = CONST 
    0x168: v168(0x24) = ADD v166(0x20), v14c(0x4)
    0x170: v170(0x4c2) = CONST 
    0x173: JUMP v170(0x4c2)

    Begin block 0x4c20x13b
    prev=[0x15e], succ=[0x174]
    =================================
    0x4c30x13b: v13b4c3(0x0) = CONST 
    0x4c60x13b: v13b4c6(0x0) = CONST 
    0x4c80x13b: v13b4c8 = SHR v13b4c6(0x0), v164
    0x4ce0x13b: JUMP v149(0x174)

    Begin block 0x174
    prev=[0x4c20x13b], succ=[]
    =================================
    0x175: v175(0x40) = CONST 
    0x177: v177 = MLOAD v175(0x40)
    0x17a: v17a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x18f: v18f = AND v17a(0xffffffffffffffffffffffffffffffffffffffff), v13b4c8
    0x190: v190(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x1a5: v1a5 = AND v190(0xffffffffffffffffffffffffffffffffffffffff), v18f
    0x1a7: MSTORE v177, v1a5
    0x1a8: v1a8(0x20) = CONST 
    0x1aa: v1aa = ADD v1a8(0x20), v177
    0x1ae: v1ae(0x40) = CONST 
    0x1b0: v1b0 = MLOAD v1ae(0x40)
    0x1b3: v1b3(0x20) = SUB v1aa, v1b0
    0x1b5: RETURN v1b0, v1b3(0x20)

}

function addressToBytes32(address)() public {
    Begin block 0x1b6
    prev=[], succ=[0x1be, 0x1c2]
    =================================
    0x1b7: v1b7 = CALLVALUE 
    0x1b9: v1b9 = ISZERO v1b7
    0x1ba: v1ba(0x1c2) = CONST 
    0x1bd: JUMPI v1ba(0x1c2), v1b9

    Begin block 0x1be
    prev=[0x1b6], succ=[]
    =================================
    0x1be: v1be(0x0) = CONST 
    0x1c1: REVERT v1be(0x0), v1be(0x0)

    Begin block 0x1c2
    prev=[0x1b6], succ=[0x1d5, 0x1d9]
    =================================
    0x1c4: v1c4(0x205) = CONST 
    0x1c7: v1c7(0x4) = CONST 
    0x1ca: v1ca = CALLDATASIZE 
    0x1cb: v1cb = SUB v1ca, v1c7(0x4)
    0x1cc: v1cc(0x20) = CONST 
    0x1cf: v1cf = LT v1cb, v1cc(0x20)
    0x1d0: v1d0 = ISZERO v1cf
    0x1d1: v1d1(0x1d9) = CONST 
    0x1d4: JUMPI v1d1(0x1d9), v1d0

    Begin block 0x1d5
    prev=[0x1c2], succ=[]
    =================================
    0x1d5: v1d5(0x0) = CONST 
    0x1d8: REVERT v1d5(0x0), v1d5(0x0)

    Begin block 0x1d9
    prev=[0x1c2], succ=[0x4cf0x1b6]
    =================================
    0x1db: v1db = ADD v1c7(0x4), v1cb
    0x1df: v1df = CALLDATALOAD v1c7(0x4)
    0x1e0: v1e0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x1f5: v1f5 = AND v1e0(0xffffffffffffffffffffffffffffffffffffffff), v1df
    0x1f7: v1f7(0x20) = CONST 
    0x1f9: v1f9(0x24) = ADD v1f7(0x20), v1c7(0x4)
    0x201: v201(0x4cf) = CONST 
    0x204: JUMP v201(0x4cf)

    Begin block 0x4cf0x1b6
    prev=[0x1d9], succ=[0x205]
    =================================
    0x4d00x1b6: v1b64d0(0x0) = CONST 
    0x4d30x1b6: v1b64d3(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x4e80x1b6: v1b64e8 = AND v1b64d3(0xffffffffffffffffffffffffffffffffffffffff), v1f5
    0x4e90x1b6: v1b64e9(0x0) = CONST 
    0x4eb0x1b6: v1b64eb = SHL v1b64e9(0x0), v1b64e8
    0x4f10x1b6: JUMP v1c4(0x205)

    Begin block 0x205
    prev=[0x4cf0x1b6], succ=[]
    =================================
    0x206: v206(0x40) = CONST 
    0x208: v208 = MLOAD v206(0x40)
    0x20c: MSTORE v208, v1b64eb
    0x20d: v20d(0x20) = CONST 
    0x20f: v20f = ADD v20d(0x20), v208
    0x213: v213(0x40) = CONST 
    0x215: v215 = MLOAD v213(0x40)
    0x218: v218(0x20) = SUB v20f, v215
    0x21a: RETURN v215, v218(0x20)

}

function readAddress(bytes32)() public {
    Begin block 0x21b
    prev=[], succ=[0x223, 0x227]
    =================================
    0x21c: v21c = CALLVALUE 
    0x21e: v21e = ISZERO v21c
    0x21f: v21f(0x227) = CONST 
    0x222: JUMPI v21f(0x227), v21e

    Begin block 0x223
    prev=[0x21b], succ=[]
    =================================
    0x223: v223(0x0) = CONST 
    0x226: REVERT v223(0x0), v223(0x0)

    Begin block 0x227
    prev=[0x21b], succ=[0x23a, 0x23e]
    =================================
    0x229: v229(0x254) = CONST 
    0x22c: v22c(0x4) = CONST 
    0x22f: v22f = CALLDATASIZE 
    0x230: v230 = SUB v22f, v22c(0x4)
    0x231: v231(0x20) = CONST 
    0x234: v234 = LT v230, v231(0x20)
    0x235: v235 = ISZERO v234
    0x236: v236(0x23e) = CONST 
    0x239: JUMPI v236(0x23e), v235

    Begin block 0x23a
    prev=[0x227], succ=[]
    =================================
    0x23a: v23a(0x0) = CONST 
    0x23d: REVERT v23a(0x0), v23a(0x0)

    Begin block 0x23e
    prev=[0x227], succ=[0x4f20x21b]
    =================================
    0x240: v240 = ADD v22c(0x4), v230
    0x244: v244 = CALLDATALOAD v22c(0x4)
    0x246: v246(0x20) = CONST 
    0x248: v248(0x24) = ADD v246(0x20), v22c(0x4)
    0x250: v250(0x4f2) = CONST 
    0x253: JUMP v250(0x4f2)

    Begin block 0x4f20x21b
    prev=[0x23e], succ=[0x4b2B0x4f20x21b]
    =================================
    0x4f30x21b: v21b4f3(0x0) = CONST 
    0x4f50x21b: v21b4f5(0x505) = CONST 
    0x4f80x21b: v21b4f8(0x500) = CONST 
    0x4fc0x21b: v21b4fc(0x4b2) = CONST 
    0x4ff0x21b: JUMP v21b4fc(0x4b2)

    Begin block 0x4b2B0x4f20x21b
    prev=[0x4f20x21b], succ=[0x5000x21b]
    =================================
    0x4b3S0x4f20x21b: v4b3V4f221b(0x0) = CONST 
    0x4b7S0x4f20x21b: v4b7V4f221b = SLOAD v244
    0x4c1S0x4f20x21b: JUMP v21b4f8(0x500)

    Begin block 0x5000x21b
    prev=[0x4b2B0x4f20x21b], succ=[0x4c20x21b]
    =================================
    0x5010x21b: v21b501(0x4c2) = CONST 
    0x5040x21b: JUMP v21b501(0x4c2)

    Begin block 0x4c20x21b
    prev=[0x5000x21b], succ=[0x5050x21b]
    =================================
    0x4c30x21b: v21b4c3(0x0) = CONST 
    0x4c60x21b: v21b4c6(0x0) = CONST 
    0x4c80x21b: v21b4c8 = SHR v21b4c6(0x0), v4b7V4f221b
    0x4ce0x21b: JUMP v21b4f5(0x505)

    Begin block 0x5050x21b
    prev=[0x4c20x21b], succ=[0x254]
    =================================
    0x50b0x21b: JUMP v229(0x254)

    Begin block 0x254
    prev=[0x5050x21b], succ=[]
    =================================
    0x255: v255(0x40) = CONST 
    0x257: v257 = MLOAD v255(0x40)
    0x25a: v25a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x26f: v26f = AND v25a(0xffffffffffffffffffffffffffffffffffffffff), v21b4c8
    0x270: v270(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x285: v285 = AND v270(0xffffffffffffffffffffffffffffffffffffffff), v26f
    0x287: MSTORE v257, v285
    0x288: v288(0x20) = CONST 
    0x28a: v28a = ADD v288(0x20), v257
    0x28e: v28e(0x40) = CONST 
    0x290: v290 = MLOAD v28e(0x40)
    0x293: v293(0x20) = SUB v28a, v290
    0x295: RETURN v290, v293(0x20)

}

function getImplementation()() public {
    Begin block 0x296
    prev=[], succ=[0x29e, 0x2a2]
    =================================
    0x297: v297 = CALLVALUE 
    0x299: v299 = ISZERO v297
    0x29a: v29a(0x2a2) = CONST 
    0x29d: JUMPI v29a(0x2a2), v299

    Begin block 0x29e
    prev=[0x296], succ=[]
    =================================
    0x29e: v29e(0x0) = CONST 
    0x2a1: REVERT v29e(0x0), v29e(0x0)

    Begin block 0x2a2
    prev=[0x296], succ=[0x50cB0x2a2]
    =================================
    0x2a4: v2a4(0x2ab) = CONST 
    0x2a7: v2a7(0x50c) = CONST 
    0x2aa: JUMP v2a7(0x50c)

    Begin block 0x50cB0x2a2
    prev=[0x2a2], succ=[0x4f2B0x50cB0x2a2]
    =================================
    0x50dS0x2a2: v50dV2a2(0x0) = CONST 
    0x50fS0x2a2: v50fV2a2(0x55d) = CONST 
    0x512S0x2a2: v512V2a2(0x40) = CONST 
    0x514S0x2a2: v514V2a2 = MLOAD v512V2a2(0x40)
    0x515S0x2a2: v515V2a2(0x20) = CONST 
    0x517S0x2a2: v517V2a2 = ADD v515V2a2(0x20), v514V2a2
    0x51aS0x2a2: v51aV2a2(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x53cS0x2a2: MSTORE v517V2a2, v51aV2a2(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x53eS0x2a2: v53eV2a2(0x13) = CONST 
    0x540S0x2a2: v540V2a2 = ADD v53eV2a2(0x13), v517V2a2
    0x543S0x2a2: v543V2a2(0x40) = CONST 
    0x545S0x2a2: v545V2a2 = MLOAD v543V2a2(0x40)
    0x546S0x2a2: v546V2a2(0x20) = CONST 
    0x54aS0x2a2: v54aV2a2(0x33) = SUB v540V2a2, v545V2a2
    0x54bS0x2a2: v54bV2a2(0x13) = SUB v54aV2a2(0x33), v546V2a2(0x20)
    0x54dS0x2a2: MSTORE v545V2a2, v54bV2a2(0x13)
    0x54fS0x2a2: v54fV2a2(0x40) = CONST 
    0x551S0x2a2: MSTORE v54fV2a2(0x40), v540V2a2
    0x553S0x2a2: v553V2a2(0x13) = MLOAD v545V2a2
    0x555S0x2a2: v555V2a2(0x20) = CONST 
    0x557S0x2a2: v557V2a2 = ADD v555V2a2(0x20), v545V2a2
    0x558S0x2a2: v558V2a2 = SHA3 v557V2a2, v553V2a2(0x13)
    0x559S0x2a2: v559V2a2(0x4f2) = CONST 
    0x55cS0x2a2: JUMP v559V2a2(0x4f2)

    Begin block 0x4f2B0x50cB0x2a2
    prev=[0x50cB0x2a2], succ=[0x4b2B0x4f2B0x50cB0x2a2]
    =================================
    0x4f3S0x50cB0x2a2: v4f3V50cB2a2(0x0) = CONST 
    0x4f5S0x50cB0x2a2: v4f5V50cB2a2(0x505) = CONST 
    0x4f8S0x50cB0x2a2: v4f8V50cB2a2(0x500) = CONST 
    0x4fcS0x50cB0x2a2: v4fcV50cB2a2(0x4b2) = CONST 
    0x4ffS0x50cB0x2a2: JUMP v4fcV50cB2a2(0x4b2)

    Begin block 0x4b2B0x4f2B0x50cB0x2a2
    prev=[0x4f2B0x50cB0x2a2], succ=[0x5000x4f2B0x50cB0x2a2]
    =================================
    0x4b3S0x4f2S0x50cB0x2a2: v4b3V4f2V50cB2a2(0x0) = CONST 
    0x4b7S0x4f2S0x50cB0x2a2: v4b7V4f2V50cB2a2 = SLOAD v558V2a2
    0x4c1S0x4f2S0x50cB0x2a2: JUMP v4f8V50cB2a2(0x500)

    Begin block 0x5000x4f2B0x50cB0x2a2
    prev=[0x4b2B0x4f2B0x50cB0x2a2], succ=[0x4c20x4f2B0x50cB0x2a2]
    =================================
    0x5010x4f2S0x50cB0x2a2: v4f2501V50cB2a2(0x4c2) = CONST 
    0x5040x4f2S0x50cB0x2a2: JUMP v4f2501V50cB2a2(0x4c2)

    Begin block 0x4c20x4f2B0x50cB0x2a2
    prev=[0x5000x4f2B0x50cB0x2a2], succ=[0x5050x4f2B0x50cB0x2a2]
    =================================
    0x4c30x4f2S0x50cB0x2a2: v4f24c3V50cB2a2(0x0) = CONST 
    0x4c60x4f2S0x50cB0x2a2: v4f24c6V50cB2a2(0x0) = CONST 
    0x4c80x4f2S0x50cB0x2a2: v4f24c8V50cB2a2 = SHR v4f24c6V50cB2a2(0x0), v4b7V4f2V50cB2a2
    0x4ce0x4f2S0x50cB0x2a2: JUMP v4f5V50cB2a2(0x505)

    Begin block 0x5050x4f2B0x50cB0x2a2
    prev=[0x4c20x4f2B0x50cB0x2a2], succ=[0x55dB0x2a2]
    =================================
    0x50b0x4f2S0x50cB0x2a2: JUMP v50fV2a2(0x55d)

    Begin block 0x55dB0x2a2
    prev=[0x5050x4f2B0x50cB0x2a2], succ=[0x2ab]
    =================================
    0x561S0x2a2: JUMP v2a4(0x2ab)

    Begin block 0x2ab
    prev=[0x55dB0x2a2], succ=[]
    =================================
    0x2ac: v2ac(0x40) = CONST 
    0x2ae: v2ae = MLOAD v2ac(0x40)
    0x2b1: v2b1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x2c6: v2c6 = AND v2b1(0xffffffffffffffffffffffffffffffffffffffff), v4f24c8V50cB2a2
    0x2c7: v2c7(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x2dc: v2dc = AND v2c7(0xffffffffffffffffffffffffffffffffffffffff), v2c6
    0x2de: MSTORE v2ae, v2dc
    0x2df: v2df(0x20) = CONST 
    0x2e1: v2e1 = ADD v2df(0x20), v2ae
    0x2e5: v2e5(0x40) = CONST 
    0x2e7: v2e7 = MLOAD v2e5(0x40)
    0x2ea: v2ea(0x20) = SUB v2e1, v2e7
    0x2ec: RETURN v2e7, v2ea(0x20)

}

function readBool(bytes32)() public {
    Begin block 0x2ed
    prev=[], succ=[0x2f5, 0x2f9]
    =================================
    0x2ee: v2ee = CALLVALUE 
    0x2f0: v2f0 = ISZERO v2ee
    0x2f1: v2f1(0x2f9) = CONST 
    0x2f4: JUMPI v2f1(0x2f9), v2f0

    Begin block 0x2f5
    prev=[0x2ed], succ=[]
    =================================
    0x2f5: v2f5(0x0) = CONST 
    0x2f8: REVERT v2f5(0x0), v2f5(0x0)

    Begin block 0x2f9
    prev=[0x2ed], succ=[0x30c, 0x310]
    =================================
    0x2fb: v2fb(0x326) = CONST 
    0x2fe: v2fe(0x4) = CONST 
    0x301: v301 = CALLDATASIZE 
    0x302: v302 = SUB v301, v2fe(0x4)
    0x303: v303(0x20) = CONST 
    0x306: v306 = LT v302, v303(0x20)
    0x307: v307 = ISZERO v306
    0x308: v308(0x310) = CONST 
    0x30b: JUMPI v308(0x310), v307

    Begin block 0x30c
    prev=[0x2f9], succ=[]
    =================================
    0x30c: v30c(0x0) = CONST 
    0x30f: REVERT v30c(0x0), v30c(0x0)

    Begin block 0x310
    prev=[0x2f9], succ=[0x562]
    =================================
    0x312: v312 = ADD v2fe(0x4), v302
    0x316: v316 = CALLDATALOAD v2fe(0x4)
    0x318: v318(0x20) = CONST 
    0x31a: v31a(0x24) = ADD v318(0x20), v2fe(0x4)
    0x322: v322(0x562) = CONST 
    0x325: JUMP v322(0x562)

    Begin block 0x562
    prev=[0x310], succ=[0x4b2B0x562]
    =================================
    0x563: v563(0x0) = CONST 
    0x565: v565(0x1) = CONST 
    0x567: v567(0x0) = CONST 
    0x569: v569(0x1) = SHL v567(0x0), v565(0x1)
    0x56a: v56a(0x572) = CONST 
    0x56e: v56e(0x4b2) = CONST 
    0x571: JUMP v56e(0x4b2)

    Begin block 0x4b2B0x562
    prev=[0x562], succ=[0x572]
    =================================
    0x4b3S0x562: v4b3V562(0x0) = CONST 
    0x4b7S0x562: v4b7V562 = SLOAD v316
    0x4c1S0x562: JUMP v56a(0x572)

    Begin block 0x572
    prev=[0x4b2B0x562], succ=[0x326]
    =================================
    0x573: v573 = EQ v4b7V562, v569(0x1)
    0x579: JUMP v2fb(0x326)

    Begin block 0x326
    prev=[0x572], succ=[]
    =================================
    0x327: v327(0x40) = CONST 
    0x329: v329 = MLOAD v327(0x40)
    0x32c: v32c = ISZERO v573
    0x32d: v32d = ISZERO v32c
    0x32e: v32e = ISZERO v32d
    0x32f: v32f = ISZERO v32e
    0x331: MSTORE v329, v32f
    0x332: v332(0x20) = CONST 
    0x334: v334 = ADD v332(0x20), v329
    0x338: v338(0x40) = CONST 
    0x33a: v33a = MLOAD v338(0x40)
    0x33d: v33d(0x20) = SUB v334, v33a
    0x33f: RETURN v33a, v33d(0x20)

}

function setProxyOwner(address)() public {
    Begin block 0x340
    prev=[], succ=[0x348, 0x34c]
    =================================
    0x341: v341 = CALLVALUE 
    0x343: v343 = ISZERO v341
    0x344: v344(0x34c) = CONST 
    0x347: JUMPI v344(0x34c), v343

    Begin block 0x348
    prev=[0x340], succ=[]
    =================================
    0x348: v348(0x0) = CONST 
    0x34b: REVERT v348(0x0), v348(0x0)

    Begin block 0x34c
    prev=[0x340], succ=[0x35f, 0x363]
    =================================
    0x34e: v34e(0x38f) = CONST 
    0x351: v351(0x4) = CONST 
    0x354: v354 = CALLDATASIZE 
    0x355: v355 = SUB v354, v351(0x4)
    0x356: v356(0x20) = CONST 
    0x359: v359 = LT v355, v356(0x20)
    0x35a: v35a = ISZERO v359
    0x35b: v35b(0x363) = CONST 
    0x35e: JUMPI v35b(0x363), v35a

    Begin block 0x35f
    prev=[0x34c], succ=[]
    =================================
    0x35f: v35f(0x0) = CONST 
    0x362: REVERT v35f(0x0), v35f(0x0)

    Begin block 0x363
    prev=[0x34c], succ=[0x57a]
    =================================
    0x365: v365 = ADD v351(0x4), v355
    0x369: v369 = CALLDATALOAD v351(0x4)
    0x36a: v36a(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x37f: v37f = AND v36a(0xffffffffffffffffffffffffffffffffffffffff), v369
    0x381: v381(0x20) = CONST 
    0x383: v383(0x24) = ADD v381(0x20), v351(0x4)
    0x38b: v38b(0x57a) = CONST 
    0x38e: JUMP v38b(0x57a)

    Begin block 0x57a
    prev=[0x363], succ=[0x4f2B0x57a]
    =================================
    0x57b: v57b(0x5c9) = CONST 
    0x57e: v57e(0x40) = CONST 
    0x580: v580 = MLOAD v57e(0x40)
    0x581: v581(0x20) = CONST 
    0x583: v583 = ADD v581(0x20), v580
    0x586: v586(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x5a8: MSTORE v583, v586(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x5aa: v5aa(0xa) = CONST 
    0x5ac: v5ac = ADD v5aa(0xa), v583
    0x5af: v5af(0x40) = CONST 
    0x5b1: v5b1 = MLOAD v5af(0x40)
    0x5b2: v5b2(0x20) = CONST 
    0x5b6: v5b6(0x2a) = SUB v5ac, v5b1
    0x5b7: v5b7(0xa) = SUB v5b6(0x2a), v5b2(0x20)
    0x5b9: MSTORE v5b1, v5b7(0xa)
    0x5bb: v5bb(0x40) = CONST 
    0x5bd: MSTORE v5bb(0x40), v5ac
    0x5bf: v5bf(0xa) = MLOAD v5b1
    0x5c1: v5c1(0x20) = CONST 
    0x5c3: v5c3 = ADD v5c1(0x20), v5b1
    0x5c4: v5c4 = SHA3 v5c3, v5bf(0xa)
    0x5c5: v5c5(0x4f2) = CONST 
    0x5c8: JUMP v5c5(0x4f2)

    Begin block 0x4f2B0x57a
    prev=[0x57a], succ=[0x4b2B0x4f2B0x57a]
    =================================
    0x4f3S0x57a: v4f3V57a(0x0) = CONST 
    0x4f5S0x57a: v4f5V57a(0x505) = CONST 
    0x4f8S0x57a: v4f8V57a(0x500) = CONST 
    0x4fcS0x57a: v4fcV57a(0x4b2) = CONST 
    0x4ffS0x57a: JUMP v4fcV57a(0x4b2)

    Begin block 0x4b2B0x4f2B0x57a
    prev=[0x4f2B0x57a], succ=[0x5000x4f2B0x57a]
    =================================
    0x4b3S0x4f2S0x57a: v4b3V4f2V57a(0x0) = CONST 
    0x4b7S0x4f2S0x57a: v4b7V4f2V57a = SLOAD v5c4
    0x4c1S0x4f2S0x57a: JUMP v4f8V57a(0x500)

    Begin block 0x5000x4f2B0x57a
    prev=[0x4b2B0x4f2B0x57a], succ=[0x4c20x4f2B0x57a]
    =================================
    0x5010x4f2S0x57a: v4f2501V57a(0x4c2) = CONST 
    0x5040x4f2S0x57a: JUMP v4f2501V57a(0x4c2)

    Begin block 0x4c20x4f2B0x57a
    prev=[0x5000x4f2B0x57a], succ=[0x5050x4f2B0x57a]
    =================================
    0x4c30x4f2S0x57a: v4f24c3V57a(0x0) = CONST 
    0x4c60x4f2S0x57a: v4f24c6V57a(0x0) = CONST 
    0x4c80x4f2S0x57a: v4f24c8V57a = SHR v4f24c6V57a(0x0), v4b7V4f2V57a
    0x4ce0x4f2S0x57a: JUMP v4f5V57a(0x505)

    Begin block 0x5050x4f2B0x57a
    prev=[0x4c20x4f2B0x57a], succ=[0x5c9]
    =================================
    0x50b0x4f2S0x57a: JUMP v57b(0x5c9)

    Begin block 0x5c9
    prev=[0x5050x4f2B0x57a], succ=[0x5fc, 0x64c]
    =================================
    0x5ca: v5ca(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x5df: v5df = AND v5ca(0xffffffffffffffffffffffffffffffffffffffff), v4f24c8V57a
    0x5e0: v5e0 = CALLER 
    0x5e1: v5e1(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x5f6: v5f6 = AND v5e1(0xffffffffffffffffffffffffffffffffffffffff), v5e0
    0x5f7: v5f7 = EQ v5f6, v5df
    0x5f8: v5f8(0x64c) = CONST 
    0x5fb: JUMPI v5f8(0x64c), v5f7

    Begin block 0x5fc
    prev=[0x5c9], succ=[]
    =================================
    0x5fc: v5fc(0x40) = CONST 
    0x5fe: v5fe = MLOAD v5fc(0x40)
    0x5ff: v5ff(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
    0x621: MSTORE v5fe, v5ff(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x622: v622(0x4) = CONST 
    0x624: v624 = ADD v622(0x4), v5fe
    0x627: v627(0x20) = CONST 
    0x629: v629 = ADD v627(0x20), v624
    0x62c: v62c(0x20) = SUB v629, v624
    0x62e: MSTORE v624, v62c(0x20)
    0x62f: v62f(0x2b) = CONST 
    0x632: MSTORE v629, v62f(0x2b)
    0x633: v633(0x20) = CONST 
    0x635: v635 = ADD v633(0x20), v629
    0x637: v637(0x7e8) = CONST 
    0x63a: v63a(0x2b) = CONST 
    0x63d: CODECOPY v635, v637(0x7e8), v63a(0x2b)
    0x63e: v63e(0x40) = CONST 
    0x640: v640 = ADD v63e(0x40), v635
    0x644: v644(0x40) = CONST 
    0x646: v646 = MLOAD v644(0x40)
    0x649: v649(0x84) = SUB v640, v646
    0x64b: REVERT v646, v649(0x84)

    Begin block 0x64c
    prev=[0x5c9], succ=[0x7c4B0x64c]
    =================================
    0x64d: v64d(0x69c) = CONST 
    0x650: v650(0x40) = CONST 
    0x652: v652 = MLOAD v650(0x40)
    0x653: v653(0x20) = CONST 
    0x655: v655 = ADD v653(0x20), v652
    0x658: v658(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x67a: MSTORE v655, v658(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x67c: v67c(0xa) = CONST 
    0x67e: v67e = ADD v67c(0xa), v655
    0x681: v681(0x40) = CONST 
    0x683: v683 = MLOAD v681(0x40)
    0x684: v684(0x20) = CONST 
    0x688: v688(0x2a) = SUB v67e, v683
    0x689: v689(0xa) = SUB v688(0x2a), v684(0x20)
    0x68b: MSTORE v683, v689(0xa)
    0x68d: v68d(0x40) = CONST 
    0x68f: MSTORE v68d(0x40), v67e
    0x691: v691(0xa) = MLOAD v683
    0x693: v693(0x20) = CONST 
    0x695: v695 = ADD v693(0x20), v683
    0x696: v696 = SHA3 v695, v691(0xa)
    0x698: v698(0x7c4) = CONST 
    0x69b: JUMP v698(0x7c4), v37f, v696, v64d(0x69c)

    Begin block 0x7c4B0x64c
    prev=[0x64c], succ=[0x4cf0x7c4B0x64c]
    =================================
    0x7c5S0x64c: v7c5V64c(0x7d6) = CONST 
    0x7c9S0x64c: v7c9V64c(0x7d1) = CONST 
    0x7cdS0x64c: v7cdV64c(0x4cf) = CONST 
    0x7d0S0x64c: JUMP v7cdV64c(0x4cf)

    Begin block 0x4cf0x7c4B0x64c
    prev=[0x7c4B0x64c], succ=[0x7d1B0x64c]
    =================================
    0x4d00x7c4S0x64c: v7c44d0V64c(0x0) = CONST 
    0x4d30x7c4S0x64c: v7c44d3V64c(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x4e80x7c4S0x64c: v7c44e8V64c = AND v7c44d3V64c(0xffffffffffffffffffffffffffffffffffffffff), v37f
    0x4e90x7c4S0x64c: v7c44e9V64c(0x0) = CONST 
    0x4eb0x7c4S0x64c: v7c44ebV64c = SHL v7c44e9V64c(0x0), v7c44e8V64c
    0x4f10x7c4S0x64c: JUMP v7c9V64c(0x7d1)

    Begin block 0x7d1B0x64c
    prev=[0x4cf0x7c4B0x64c], succ=[0x7daB0x64c]
    =================================
    0x7d2S0x64c: v7d2V64c(0x7da) = CONST 
    0x7d5S0x64c: JUMP v7d2V64c(0x7da)

    Begin block 0x7daB0x64c
    prev=[0x7d1B0x64c], succ=[0x7d6B0x64c]
    =================================
    0x7dbS0x64c: v7dbV64c(0x0) = CONST 
    0x7e2S0x64c: SSTORE v696, v7c44ebV64c
    0x7e6S0x64c: JUMP v7c5V64c(0x7d6)

    Begin block 0x7d6B0x64c
    prev=[0x7daB0x64c], succ=[0x69c]
    =================================
    0x7d9S0x64c: JUMP v64d(0x69c)

    Begin block 0x69c
    prev=[0x7d6B0x64c], succ=[0x38f]
    =================================
    0x69e: JUMP v34e(0x38f)

    Begin block 0x38f
    prev=[0x69c], succ=[]
    =================================
    0x390: STOP 

}

function setImplementation(address)() public {
    Begin block 0x391
    prev=[], succ=[0x399, 0x39d]
    =================================
    0x392: v392 = CALLVALUE 
    0x394: v394 = ISZERO v392
    0x395: v395(0x39d) = CONST 
    0x398: JUMPI v395(0x39d), v394

    Begin block 0x399
    prev=[0x391], succ=[]
    =================================
    0x399: v399(0x0) = CONST 
    0x39c: REVERT v399(0x0), v399(0x0)

    Begin block 0x39d
    prev=[0x391], succ=[0x3b0, 0x3b4]
    =================================
    0x39f: v39f(0x3e0) = CONST 
    0x3a2: v3a2(0x4) = CONST 
    0x3a5: v3a5 = CALLDATASIZE 
    0x3a6: v3a6 = SUB v3a5, v3a2(0x4)
    0x3a7: v3a7(0x20) = CONST 
    0x3aa: v3aa = LT v3a6, v3a7(0x20)
    0x3ab: v3ab = ISZERO v3aa
    0x3ac: v3ac(0x3b4) = CONST 
    0x3af: JUMPI v3ac(0x3b4), v3ab

    Begin block 0x3b0
    prev=[0x39d], succ=[]
    =================================
    0x3b0: v3b0(0x0) = CONST 
    0x3b3: REVERT v3b0(0x0), v3b0(0x0)

    Begin block 0x3b4
    prev=[0x39d], succ=[0x69f]
    =================================
    0x3b6: v3b6 = ADD v3a2(0x4), v3a6
    0x3ba: v3ba = CALLDATALOAD v3a2(0x4)
    0x3bb: v3bb(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x3d0: v3d0 = AND v3bb(0xffffffffffffffffffffffffffffffffffffffff), v3ba
    0x3d2: v3d2(0x20) = CONST 
    0x3d4: v3d4(0x24) = ADD v3d2(0x20), v3a2(0x4)
    0x3dc: v3dc(0x69f) = CONST 
    0x3df: JUMP v3dc(0x69f)

    Begin block 0x69f
    prev=[0x3b4], succ=[0x4f2B0x69f]
    =================================
    0x6a0: v6a0(0x6ee) = CONST 
    0x6a3: v6a3(0x40) = CONST 
    0x6a5: v6a5 = MLOAD v6a3(0x40)
    0x6a6: v6a6(0x20) = CONST 
    0x6a8: v6a8 = ADD v6a6(0x20), v6a5
    0x6ab: v6ab(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x6cd: MSTORE v6a8, v6ab(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x6cf: v6cf(0xa) = CONST 
    0x6d1: v6d1 = ADD v6cf(0xa), v6a8
    0x6d4: v6d4(0x40) = CONST 
    0x6d6: v6d6 = MLOAD v6d4(0x40)
    0x6d7: v6d7(0x20) = CONST 
    0x6db: v6db(0x2a) = SUB v6d1, v6d6
    0x6dc: v6dc(0xa) = SUB v6db(0x2a), v6d7(0x20)
    0x6de: MSTORE v6d6, v6dc(0xa)
    0x6e0: v6e0(0x40) = CONST 
    0x6e2: MSTORE v6e0(0x40), v6d1
    0x6e4: v6e4(0xa) = MLOAD v6d6
    0x6e6: v6e6(0x20) = CONST 
    0x6e8: v6e8 = ADD v6e6(0x20), v6d6
    0x6e9: v6e9 = SHA3 v6e8, v6e4(0xa)
    0x6ea: v6ea(0x4f2) = CONST 
    0x6ed: JUMP v6ea(0x4f2)

    Begin block 0x4f2B0x69f
    prev=[0x69f], succ=[0x4b2B0x4f2B0x69f]
    =================================
    0x4f3S0x69f: v4f3V69f(0x0) = CONST 
    0x4f5S0x69f: v4f5V69f(0x505) = CONST 
    0x4f8S0x69f: v4f8V69f(0x500) = CONST 
    0x4fcS0x69f: v4fcV69f(0x4b2) = CONST 
    0x4ffS0x69f: JUMP v4fcV69f(0x4b2)

    Begin block 0x4b2B0x4f2B0x69f
    prev=[0x4f2B0x69f], succ=[0x5000x4f2B0x69f]
    =================================
    0x4b3S0x4f2S0x69f: v4b3V4f2V69f(0x0) = CONST 
    0x4b7S0x4f2S0x69f: v4b7V4f2V69f = SLOAD v6e9
    0x4c1S0x4f2S0x69f: JUMP v4f8V69f(0x500)

    Begin block 0x5000x4f2B0x69f
    prev=[0x4b2B0x4f2B0x69f], succ=[0x4c20x4f2B0x69f]
    =================================
    0x5010x4f2S0x69f: v4f2501V69f(0x4c2) = CONST 
    0x5040x4f2S0x69f: JUMP v4f2501V69f(0x4c2)

    Begin block 0x4c20x4f2B0x69f
    prev=[0x5000x4f2B0x69f], succ=[0x5050x4f2B0x69f]
    =================================
    0x4c30x4f2S0x69f: v4f24c3V69f(0x0) = CONST 
    0x4c60x4f2S0x69f: v4f24c6V69f(0x0) = CONST 
    0x4c80x4f2S0x69f: v4f24c8V69f = SHR v4f24c6V69f(0x0), v4b7V4f2V69f
    0x4ce0x4f2S0x69f: JUMP v4f5V69f(0x505)

    Begin block 0x5050x4f2B0x69f
    prev=[0x4c20x4f2B0x69f], succ=[0x6ee]
    =================================
    0x50b0x4f2S0x69f: JUMP v6a0(0x6ee)

    Begin block 0x6ee
    prev=[0x5050x4f2B0x69f], succ=[0x721, 0x771]
    =================================
    0x6ef: v6ef(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x704: v704 = AND v6ef(0xffffffffffffffffffffffffffffffffffffffff), v4f24c8V69f
    0x705: v705 = CALLER 
    0x706: v706(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x71b: v71b = AND v706(0xffffffffffffffffffffffffffffffffffffffff), v705
    0x71c: v71c = EQ v71b, v704
    0x71d: v71d(0x771) = CONST 
    0x720: JUMPI v71d(0x771), v71c

    Begin block 0x721
    prev=[0x6ee], succ=[]
    =================================
    0x721: v721(0x40) = CONST 
    0x723: v723 = MLOAD v721(0x40)
    0x724: v724(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
    0x746: MSTORE v723, v724(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x747: v747(0x4) = CONST 
    0x749: v749 = ADD v747(0x4), v723
    0x74c: v74c(0x20) = CONST 
    0x74e: v74e = ADD v74c(0x20), v749
    0x751: v751(0x20) = SUB v74e, v749
    0x753: MSTORE v749, v751(0x20)
    0x754: v754(0x2b) = CONST 
    0x757: MSTORE v74e, v754(0x2b)
    0x758: v758(0x20) = CONST 
    0x75a: v75a = ADD v758(0x20), v74e
    0x75c: v75c(0x7e8) = CONST 
    0x75f: v75f(0x2b) = CONST 
    0x762: CODECOPY v75a, v75c(0x7e8), v75f(0x2b)
    0x763: v763(0x40) = CONST 
    0x765: v765 = ADD v763(0x40), v75a
    0x769: v769(0x40) = CONST 
    0x76b: v76b = MLOAD v769(0x40)
    0x76e: v76e(0x84) = SUB v765, v76b
    0x770: REVERT v76b, v76e(0x84)

    Begin block 0x771
    prev=[0x6ee], succ=[0x7c4B0x771]
    =================================
    0x772: v772(0x7c1) = CONST 
    0x775: v775(0x40) = CONST 
    0x777: v777 = MLOAD v775(0x40)
    0x778: v778(0x20) = CONST 
    0x77a: v77a = ADD v778(0x20), v777
    0x77d: v77d(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x79f: MSTORE v77a, v77d(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x7a1: v7a1(0x13) = CONST 
    0x7a3: v7a3 = ADD v7a1(0x13), v77a
    0x7a6: v7a6(0x40) = CONST 
    0x7a8: v7a8 = MLOAD v7a6(0x40)
    0x7a9: v7a9(0x20) = CONST 
    0x7ad: v7ad(0x33) = SUB v7a3, v7a8
    0x7ae: v7ae(0x13) = SUB v7ad(0x33), v7a9(0x20)
    0x7b0: MSTORE v7a8, v7ae(0x13)
    0x7b2: v7b2(0x40) = CONST 
    0x7b4: MSTORE v7b2(0x40), v7a3
    0x7b6: v7b6(0x13) = MLOAD v7a8
    0x7b8: v7b8(0x20) = CONST 
    0x7ba: v7ba = ADD v7b8(0x20), v7a8
    0x7bb: v7bb = SHA3 v7ba, v7b6(0x13)
    0x7bd: v7bd(0x7c4) = CONST 
    0x7c0: JUMP v7bd(0x7c4), v3d0, v7bb, v772(0x7c1)

    Begin block 0x7c4B0x771
    prev=[0x771], succ=[0x4cf0x7c4B0x771]
    =================================
    0x7c5S0x771: v7c5V771(0x7d6) = CONST 
    0x7c9S0x771: v7c9V771(0x7d1) = CONST 
    0x7cdS0x771: v7cdV771(0x4cf) = CONST 
    0x7d0S0x771: JUMP v7cdV771(0x4cf)

    Begin block 0x4cf0x7c4B0x771
    prev=[0x7c4B0x771], succ=[0x7d1B0x771]
    =================================
    0x4d00x7c4S0x771: v7c44d0V771(0x0) = CONST 
    0x4d30x7c4S0x771: v7c44d3V771(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x4e80x7c4S0x771: v7c44e8V771 = AND v7c44d3V771(0xffffffffffffffffffffffffffffffffffffffff), v3d0
    0x4e90x7c4S0x771: v7c44e9V771(0x0) = CONST 
    0x4eb0x7c4S0x771: v7c44ebV771 = SHL v7c44e9V771(0x0), v7c44e8V771
    0x4f10x7c4S0x771: JUMP v7c9V771(0x7d1)

    Begin block 0x7d1B0x771
    prev=[0x4cf0x7c4B0x771], succ=[0x7daB0x771]
    =================================
    0x7d2S0x771: v7d2V771(0x7da) = CONST 
    0x7d5S0x771: JUMP v7d2V771(0x7da)

    Begin block 0x7daB0x771
    prev=[0x7d1B0x771], succ=[0x7d6B0x771]
    =================================
    0x7dbS0x771: v7dbV771(0x0) = CONST 
    0x7e2S0x771: SSTORE v7bb, v7c44ebV771
    0x7e6S0x771: JUMP v7c5V771(0x7d6)

    Begin block 0x7d6B0x771
    prev=[0x7daB0x771], succ=[0x7c1]
    =================================
    0x7d9S0x771: JUMP v772(0x7c1)

    Begin block 0x7c1
    prev=[0x7d6B0x771], succ=[0x3e0]
    =================================
    0x7c3: JUMP v39f(0x3e0)

    Begin block 0x3e0
    prev=[0x7c1], succ=[]
    =================================
    0x3e1: STOP 

}

function fallback()() public {
    Begin block 0x8a
    prev=[], succ=[0x8b0x8a]
    =================================

    Begin block 0x8b0x8a
    prev=[0x8a], succ=[0x3e20x8a]
    =================================
    0x8c0x8a: v8a8c(0x93) = CONST 
    0x8f0x8a: v8a8f(0x3e2) = CONST 
    0x920x8a: JUMP v8a8f(0x3e2)

    Begin block 0x3e20x8a
    prev=[0x8b0x8a], succ=[0x4f2B0x3e20x8a]
    =================================
    0x3e30x8a: v8a3e3(0x0) = CONST 
    0x3e50x8a: v8a3e5(0x433) = CONST 
    0x3e80x8a: v8a3e8(0x40) = CONST 
    0x3ea0x8a: v8a3ea = MLOAD v8a3e8(0x40)
    0x3eb0x8a: v8a3eb(0x20) = CONST 
    0x3ed0x8a: v8a3ed = ADD v8a3eb(0x20), v8a3ea
    0x3f00x8a: v8a3f0(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x4120x8a: MSTORE v8a3ed, v8a3f0(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x4140x8a: v8a414(0x13) = CONST 
    0x4160x8a: v8a416 = ADD v8a414(0x13), v8a3ed
    0x4190x8a: v8a419(0x40) = CONST 
    0x41b0x8a: v8a41b = MLOAD v8a419(0x40)
    0x41c0x8a: v8a41c(0x20) = CONST 
    0x4200x8a: v8a420(0x33) = SUB v8a416, v8a41b
    0x4210x8a: v8a421(0x13) = SUB v8a420(0x33), v8a41c(0x20)
    0x4230x8a: MSTORE v8a41b, v8a421(0x13)
    0x4250x8a: v8a425(0x40) = CONST 
    0x4270x8a: MSTORE v8a425(0x40), v8a416
    0x4290x8a: v8a429(0x13) = MLOAD v8a41b
    0x42b0x8a: v8a42b(0x20) = CONST 
    0x42d0x8a: v8a42d = ADD v8a42b(0x20), v8a41b
    0x42e0x8a: v8a42e = SHA3 v8a42d, v8a429(0x13)
    0x42f0x8a: v8a42f(0x4f2) = CONST 
    0x4320x8a: JUMP v8a42f(0x4f2)

    Begin block 0x4f2B0x3e20x8a
    prev=[0x3e20x8a], succ=[0x4b2B0x4f2B0x3e20x8a]
    =================================
    0x4f3S0x3e20x8a: v4f3V3e28a(0x0) = CONST 
    0x4f5S0x3e20x8a: v4f5V3e28a(0x505) = CONST 
    0x4f8S0x3e20x8a: v4f8V3e28a(0x500) = CONST 
    0x4fcS0x3e20x8a: v4fcV3e28a(0x4b2) = CONST 
    0x4ffS0x3e20x8a: JUMP v4fcV3e28a(0x4b2)

    Begin block 0x4b2B0x4f2B0x3e20x8a
    prev=[0x4f2B0x3e20x8a], succ=[0x5000x4f2B0x3e20x8a]
    =================================
    0x4b3S0x4f2S0x3e20x8a: v4b3V4f2V3e28a(0x0) = CONST 
    0x4b7S0x4f2S0x3e20x8a: v4b7V4f2V3e28a = SLOAD v8a42e
    0x4c1S0x4f2S0x3e20x8a: JUMP v4f8V3e28a(0x500)

    Begin block 0x5000x4f2B0x3e20x8a
    prev=[0x4b2B0x4f2B0x3e20x8a], succ=[0x4c20x4f2B0x3e20x8a]
    =================================
    0x5010x4f2S0x3e20x8a: v4f2501V3e28a(0x4c2) = CONST 
    0x5040x4f2S0x3e20x8a: JUMP v4f2501V3e28a(0x4c2)

    Begin block 0x4c20x4f2B0x3e20x8a
    prev=[0x5000x4f2B0x3e20x8a], succ=[0x5050x4f2B0x3e20x8a]
    =================================
    0x4c30x4f2S0x3e20x8a: v4f24c3V3e28a(0x0) = CONST 
    0x4c60x4f2S0x3e20x8a: v4f24c6V3e28a(0x0) = CONST 
    0x4c80x4f2S0x3e20x8a: v4f24c8V3e28a = SHR v4f24c6V3e28a(0x0), v4b7V4f2V3e28a
    0x4ce0x4f2S0x3e20x8a: JUMP v4f5V3e28a(0x505)

    Begin block 0x5050x4f2B0x3e20x8a
    prev=[0x4c20x4f2B0x3e20x8a], succ=[0x4330x8a]
    =================================
    0x50b0x4f2S0x3e20x8a: JUMP v8a3e5(0x433)

    Begin block 0x4330x8a
    prev=[0x5050x4f2B0x3e20x8a], succ=[0x4550x8a, 0x4580x8a]
    =================================
    0x4360x8a: v8a436(0x40) = CONST 
    0x4380x8a: v8a438 = MLOAD v8a436(0x40)
    0x4390x8a: v8a439 = CALLDATASIZE 
    0x43a0x8a: v8a43a(0x0) = CONST 
    0x43d0x8a: CALLDATACOPY v8a438, v8a43a(0x0), v8a439
    0x43e0x8a: v8a43e(0x0) = CONST 
    0x4410x8a: v8a441 = CALLDATASIZE 
    0x4440x8a: v8a444 = GAS 
    0x4450x8a: v8a445 = DELEGATECALL v8a444, v4f24c8V3e28a, v8a438, v8a441, v8a43e(0x0), v8a43e(0x0)
    0x4460x8a: v8a446 = RETURNDATASIZE 
    0x4480x8a: v8a448(0x0) = CONST 
    0x44b0x8a: RETURNDATACOPY v8a438, v8a448(0x0), v8a446
    0x44d0x8a: v8a44d(0x0) = CONST 
    0x4500x8a: v8a450 = EQ v8a445, v8a44d(0x0)
    0x4510x8a: v8a451(0x458) = CONST 
    0x4540x8a: JUMPI v8a451(0x458), v8a450

    Begin block 0x4550x8a
    prev=[0x4330x8a], succ=[]
    =================================
    0x4570x8a: RETURN v8a438, v8a446

    Begin block 0x4580x8a
    prev=[0x4330x8a], succ=[]
    =================================
    0x45b0x8a: REVERT v8a438, v8a446

}

function getProxyOwner()() public {
    Begin block 0x95
    prev=[], succ=[0x9d, 0xa1]
    =================================
    0x96: v96 = CALLVALUE 
    0x98: v98 = ISZERO v96
    0x99: v99(0xa1) = CONST 
    0x9c: JUMPI v99(0xa1), v98

    Begin block 0x9d
    prev=[0x95], succ=[]
    =================================
    0x9d: v9d(0x0) = CONST 
    0xa0: REVERT v9d(0x0), v9d(0x0)

    Begin block 0xa1
    prev=[0x95], succ=[0x45cB0xa1]
    =================================
    0xa3: va3(0xaa) = CONST 
    0xa6: va6(0x45c) = CONST 
    0xa9: JUMP va6(0x45c)

    Begin block 0x45cB0xa1
    prev=[0xa1], succ=[0x4f2B0x45cB0xa1]
    =================================
    0x45dS0xa1: v45dVa1(0x0) = CONST 
    0x45fS0xa1: v45fVa1(0x4ad) = CONST 
    0x462S0xa1: v462Va1(0x40) = CONST 
    0x464S0xa1: v464Va1 = MLOAD v462Va1(0x40)
    0x465S0xa1: v465Va1(0x20) = CONST 
    0x467S0xa1: v467Va1 = ADD v465Va1(0x20), v464Va1
    0x46aS0xa1: v46aVa1(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x48cS0xa1: MSTORE v467Va1, v46aVa1(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x48eS0xa1: v48eVa1(0xa) = CONST 
    0x490S0xa1: v490Va1 = ADD v48eVa1(0xa), v467Va1
    0x493S0xa1: v493Va1(0x40) = CONST 
    0x495S0xa1: v495Va1 = MLOAD v493Va1(0x40)
    0x496S0xa1: v496Va1(0x20) = CONST 
    0x49aS0xa1: v49aVa1(0x2a) = SUB v490Va1, v495Va1
    0x49bS0xa1: v49bVa1(0xa) = SUB v49aVa1(0x2a), v496Va1(0x20)
    0x49dS0xa1: MSTORE v495Va1, v49bVa1(0xa)
    0x49fS0xa1: v49fVa1(0x40) = CONST 
    0x4a1S0xa1: MSTORE v49fVa1(0x40), v490Va1
    0x4a3S0xa1: v4a3Va1(0xa) = MLOAD v495Va1
    0x4a5S0xa1: v4a5Va1(0x20) = CONST 
    0x4a7S0xa1: v4a7Va1 = ADD v4a5Va1(0x20), v495Va1
    0x4a8S0xa1: v4a8Va1 = SHA3 v4a7Va1, v4a3Va1(0xa)
    0x4a9S0xa1: v4a9Va1(0x4f2) = CONST 
    0x4acS0xa1: JUMP v4a9Va1(0x4f2)

    Begin block 0x4f2B0x45cB0xa1
    prev=[0x45cB0xa1], succ=[0x4b2B0x4f2B0x45cB0xa1]
    =================================
    0x4f3S0x45cB0xa1: v4f3V45cBa1(0x0) = CONST 
    0x4f5S0x45cB0xa1: v4f5V45cBa1(0x505) = CONST 
    0x4f8S0x45cB0xa1: v4f8V45cBa1(0x500) = CONST 
    0x4fcS0x45cB0xa1: v4fcV45cBa1(0x4b2) = CONST 
    0x4ffS0x45cB0xa1: JUMP v4fcV45cBa1(0x4b2)

    Begin block 0x4b2B0x4f2B0x45cB0xa1
    prev=[0x4f2B0x45cB0xa1], succ=[0x5000x4f2B0x45cB0xa1]
    =================================
    0x4b3S0x4f2S0x45cB0xa1: v4b3V4f2V45cBa1(0x0) = CONST 
    0x4b7S0x4f2S0x45cB0xa1: v4b7V4f2V45cBa1 = SLOAD v4a8Va1
    0x4c1S0x4f2S0x45cB0xa1: JUMP v4f8V45cBa1(0x500)

    Begin block 0x5000x4f2B0x45cB0xa1
    prev=[0x4b2B0x4f2B0x45cB0xa1], succ=[0x4c20x4f2B0x45cB0xa1]
    =================================
    0x5010x4f2S0x45cB0xa1: v4f2501V45cBa1(0x4c2) = CONST 
    0x5040x4f2S0x45cB0xa1: JUMP v4f2501V45cBa1(0x4c2)

    Begin block 0x4c20x4f2B0x45cB0xa1
    prev=[0x5000x4f2B0x45cB0xa1], succ=[0x5050x4f2B0x45cB0xa1]
    =================================
    0x4c30x4f2S0x45cB0xa1: v4f24c3V45cBa1(0x0) = CONST 
    0x4c60x4f2S0x45cB0xa1: v4f24c6V45cBa1(0x0) = CONST 
    0x4c80x4f2S0x45cB0xa1: v4f24c8V45cBa1 = SHR v4f24c6V45cBa1(0x0), v4b7V4f2V45cBa1
    0x4ce0x4f2S0x45cB0xa1: JUMP v4f5V45cBa1(0x505)

    Begin block 0x5050x4f2B0x45cB0xa1
    prev=[0x4c20x4f2B0x45cB0xa1], succ=[0x4adB0xa1]
    =================================
    0x50b0x4f2S0x45cB0xa1: JUMP v45fVa1(0x4ad)

    Begin block 0x4adB0xa1
    prev=[0x5050x4f2B0x45cB0xa1], succ=[0xaa]
    =================================
    0x4b1S0xa1: JUMP va3(0xaa)

    Begin block 0xaa
    prev=[0x4adB0xa1], succ=[]
    =================================
    0xab: vab(0x40) = CONST 
    0xad: vad = MLOAD vab(0x40)
    0xb0: vb0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0xc5: vc5 = AND vb0(0xffffffffffffffffffffffffffffffffffffffff), v4f24c8V45cBa1
    0xc6: vc6(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0xdb: vdb = AND vc6(0xffffffffffffffffffffffffffffffffffffffff), vc5
    0xdd: MSTORE vad, vdb
    0xde: vde(0x20) = CONST 
    0xe0: ve0 = ADD vde(0x20), vad
    0xe4: ve4(0x40) = CONST 
    0xe6: ve6 = MLOAD ve4(0x40)
    0xe9: ve9(0x20) = SUB ve0, ve6
    0xeb: RETURN ve6, ve9(0x20)

}

function storageRead(bytes32)() public {
    Begin block 0xec
    prev=[], succ=[0xf4, 0xf8]
    =================================
    0xed: ved = CALLVALUE 
    0xef: vef = ISZERO ved
    0xf0: vf0(0xf8) = CONST 
    0xf3: JUMPI vf0(0xf8), vef

    Begin block 0xf4
    prev=[0xec], succ=[]
    =================================
    0xf4: vf4(0x0) = CONST 
    0xf7: REVERT vf4(0x0), vf4(0x0)

    Begin block 0xf8
    prev=[0xec], succ=[0x10b, 0x10f]
    =================================
    0xfa: vfa(0x125) = CONST 
    0xfd: vfd(0x4) = CONST 
    0x100: v100 = CALLDATASIZE 
    0x101: v101 = SUB v100, vfd(0x4)
    0x102: v102(0x20) = CONST 
    0x105: v105 = LT v101, v102(0x20)
    0x106: v106 = ISZERO v105
    0x107: v107(0x10f) = CONST 
    0x10a: JUMPI v107(0x10f), v106

    Begin block 0x10b
    prev=[0xf8], succ=[]
    =================================
    0x10b: v10b(0x0) = CONST 
    0x10e: REVERT v10b(0x0), v10b(0x0)

    Begin block 0x10f
    prev=[0xf8], succ=[0x4b20xec]
    =================================
    0x111: v111 = ADD vfd(0x4), v101
    0x115: v115 = CALLDATALOAD vfd(0x4)
    0x117: v117(0x20) = CONST 
    0x119: v119(0x24) = ADD v117(0x20), vfd(0x4)
    0x121: v121(0x4b2) = CONST 
    0x124: JUMP v121(0x4b2)

    Begin block 0x4b20xec
    prev=[0x10f], succ=[0x125]
    =================================
    0x4b30xec: vec4b3(0x0) = CONST 
    0x4b70xec: vec4b7 = SLOAD v115
    0x4c10xec: JUMP vfa(0x125)

    Begin block 0x125
    prev=[0x4b20xec], succ=[]
    =================================
    0x126: v126(0x40) = CONST 
    0x128: v128 = MLOAD v126(0x40)
    0x12c: MSTORE v128, vec4b7
    0x12d: v12d(0x20) = CONST 
    0x12f: v12f = ADD v12d(0x20), v128
    0x133: v133(0x40) = CONST 
    0x135: v135 = MLOAD v133(0x40)
    0x138: v138(0x20) = SUB v12f, v135
    0x13a: RETURN v135, v138(0x20)

}

