function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xd, 0x802]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5(0x4) = CONST 
    0x7: v7 = CALLDATASIZE 
    0x8: v8 = LT v7, v5(0x4)
    0x7ee: v7ee(0x802) = CONST 
    0x7ef: JUMPI v7ee(0x802), v8

    Begin block 0xd
    prev=[0x0], succ=[0x59, 0x1e]
    =================================
    0xd: vd(0x0) = CONST 
    0xf: vf = CALLDATALOAD vd(0x0)
    0x10: v10(0xe0) = CONST 
    0x12: v12 = SHR v10(0xe0), vf
    0x14: v14(0x9d84ae69) = CONST 
    0x19: v19 = GT v14(0x9d84ae69), v12
    0x1a: v1a(0x59) = CONST 
    0x1d: JUMPI v1a(0x59), v19

    Begin block 0x59
    prev=[0xd], succ=[0x805, 0x65]
    =================================
    0x5b: v5b(0x1ab7710d) = CONST 
    0x60: v60 = EQ v5b(0x1ab7710d), v12
    0x7fa: v7fa(0x805) = CONST 
    0x7fb: JUMPI v7fa(0x805), v60

    Begin block 0x805
    prev=[0x59], succ=[]
    =================================
    0x806: v806(0x95) = CONST 
    0x807: CALLPRIVATE v806(0x95)

    Begin block 0x65
    prev=[0x59], succ=[0x808, 0x70]
    =================================
    0x66: v66(0x37a440e6) = CONST 
    0x6b: v6b = EQ v66(0x37a440e6), v12
    0x7fc: v7fc(0x808) = CONST 
    0x7fd: JUMPI v7fc(0x808), v6b

    Begin block 0x808
    prev=[0x65], succ=[]
    =================================
    0x809: v809(0xd6) = CONST 
    0x80a: CALLPRIVATE v809(0xd6)

    Begin block 0x70
    prev=[0x65], succ=[0x80b, 0x7b]
    =================================
    0x71: v71(0x5ced058e) = CONST 
    0x76: v76 = EQ v71(0x5ced058e), v12
    0x7fe: v7fe(0x80b) = CONST 
    0x7ff: JUMPI v7fe(0x80b), v76

    Begin block 0x80b
    prev=[0x70], succ=[]
    =================================
    0x80c: v80c(0x125) = CONST 
    0x80d: CALLPRIVATE v80c(0x125)

    Begin block 0x7b
    prev=[0x70], succ=[0x86, 0x80e]
    =================================
    0x7c: v7c(0x82c947b7) = CONST 
    0x81: v81 = EQ v7c(0x82c947b7), v12
    0x800: v800(0x80e) = CONST 
    0x801: JUMPI v800(0x80e), v81

    Begin block 0x86
    prev=[0x7b], succ=[0x8b0x0]
    =================================
    0x86: v86(0x8b) = CONST 
    0x89: JUMP v86(0x8b)

    Begin block 0x8b0x0
    prev=[0x55, 0x86], succ=[0x3880x0]
    =================================
    0x8c0x0: v08c(0x93) = CONST 
    0x8f0x0: v08f(0x388) = CONST 
    0x920x0: JUMP v08f(0x388)

    Begin block 0x3880x0
    prev=[0x8b0x0], succ=[0x498B0x3880x0]
    =================================
    0x3890x0: v0389(0x0) = CONST 
    0x38b0x0: v038b(0x3d9) = CONST 
    0x38e0x0: v038e(0x40) = CONST 
    0x3900x0: v0390 = MLOAD v038e(0x40)
    0x3910x0: v0391(0x20) = CONST 
    0x3930x0: v0393 = ADD v0391(0x20), v0390
    0x3960x0: v0396(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x3b80x0: MSTORE v0393, v0396(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x3ba0x0: v03ba(0x13) = CONST 
    0x3bc0x0: v03bc = ADD v03ba(0x13), v0393
    0x3bf0x0: v03bf(0x40) = CONST 
    0x3c10x0: v03c1 = MLOAD v03bf(0x40)
    0x3c20x0: v03c2(0x20) = CONST 
    0x3c60x0: v03c6(0x33) = SUB v03bc, v03c1
    0x3c70x0: v03c7(0x13) = SUB v03c6(0x33), v03c2(0x20)
    0x3c90x0: MSTORE v03c1, v03c7(0x13)
    0x3cb0x0: v03cb(0x40) = CONST 
    0x3cd0x0: MSTORE v03cb(0x40), v03bc
    0x3cf0x0: v03cf(0x13) = MLOAD v03c1
    0x3d10x0: v03d1(0x20) = CONST 
    0x3d30x0: v03d3 = ADD v03d1(0x20), v03c1
    0x3d40x0: v03d4 = SHA3 v03d3, v03cf(0x13)
    0x3d50x0: v03d5(0x498) = CONST 
    0x3d80x0: JUMP v03d5(0x498)

    Begin block 0x498B0x3880x0
    prev=[0x3880x0], succ=[0x458B0x498B0x3880x0]
    =================================
    0x499S0x3880x0: v499V3880(0x0) = CONST 
    0x49bS0x3880x0: v49bV3880(0x4ab) = CONST 
    0x49eS0x3880x0: v49eV3880(0x4a6) = CONST 
    0x4a2S0x3880x0: v4a2V3880(0x458) = CONST 
    0x4a5S0x3880x0: JUMP v4a2V3880(0x458)

    Begin block 0x458B0x498B0x3880x0
    prev=[0x498B0x3880x0], succ=[0x4a60x498B0x3880x0]
    =================================
    0x459S0x498S0x3880x0: v459V498V3880(0x0) = CONST 
    0x45dS0x498S0x3880x0: v45dV498V3880 = SLOAD v03d4
    0x467S0x498S0x3880x0: JUMP v49eV3880(0x4a6)

    Begin block 0x4a60x498B0x3880x0
    prev=[0x458B0x498B0x3880x0], succ=[0x4680x498B0x3880x0]
    =================================
    0x4a70x498S0x3880x0: v4984a7V3880(0x468) = CONST 
    0x4aa0x498S0x3880x0: JUMP v4984a7V3880(0x468)

    Begin block 0x4680x498B0x3880x0
    prev=[0x4a60x498B0x3880x0], succ=[0x4ab0x498B0x3880x0]
    =================================
    0x4690x498S0x3880x0: v498469V3880(0x0) = CONST 
    0x46c0x498S0x3880x0: v49846cV3880(0x0) = CONST 
    0x46e0x498S0x3880x0: v49846eV3880 = SHR v49846cV3880(0x0), v45dV498V3880
    0x4740x498S0x3880x0: JUMP v49bV3880(0x4ab)

    Begin block 0x4ab0x498B0x3880x0
    prev=[0x4680x498B0x3880x0], succ=[0x3d90x0]
    =================================
    0x4b10x498S0x3880x0: JUMP v038b(0x3d9)

    Begin block 0x3d90x0
    prev=[0x4ab0x498B0x3880x0], succ=[0x3fb0x0, 0x3fe0x0]
    =================================
    0x3dc0x0: v03dc(0x40) = CONST 
    0x3de0x0: v03de = MLOAD v03dc(0x40)
    0x3df0x0: v03df = CALLDATASIZE 
    0x3e00x0: v03e0(0x0) = CONST 
    0x3e30x0: CALLDATACOPY v03de, v03e0(0x0), v03df
    0x3e40x0: v03e4(0x0) = CONST 
    0x3e70x0: v03e7 = CALLDATASIZE 
    0x3ea0x0: v03ea = GAS 
    0x3eb0x0: v03eb = DELEGATECALL v03ea, v49846eV3880, v03de, v03e7, v03e4(0x0), v03e4(0x0)
    0x3ec0x0: v03ec = RETURNDATASIZE 
    0x3ee0x0: v03ee(0x0) = CONST 
    0x3f10x0: RETURNDATACOPY v03de, v03ee(0x0), v03ec
    0x3f30x0: v03f3(0x0) = CONST 
    0x3f60x0: v03f6 = EQ v03eb, v03f3(0x0)
    0x3f70x0: v03f7(0x3fe) = CONST 
    0x3fa0x0: JUMPI v03f7(0x3fe), v03f6

    Begin block 0x3fb0x0
    prev=[0x3d90x0], succ=[]
    =================================
    0x3fd0x0: RETURN v03de, v03ec

    Begin block 0x3fe0x0
    prev=[0x3d90x0], succ=[]
    =================================
    0x4010x0: REVERT v03de, v03ec

    Begin block 0x80e
    prev=[0x7b], succ=[]
    =================================
    0x80f: v80f(0x18a) = CONST 
    0x810: CALLPRIVATE v80f(0x18a)

    Begin block 0x1e
    prev=[0xd], succ=[0x811, 0x29]
    =================================
    0x1f: v1f(0x9d84ae69) = CONST 
    0x24: v24 = EQ v1f(0x9d84ae69), v12
    0x7f0: v7f0(0x811) = CONST 
    0x7f1: JUMPI v7f0(0x811), v24

    Begin block 0x811
    prev=[0x1e], succ=[]
    =================================
    0x812: v812(0x1ef) = CONST 
    0x813: CALLPRIVATE v812(0x1ef)

    Begin block 0x29
    prev=[0x1e], succ=[0x814, 0x34]
    =================================
    0x2a: v2a(0xaaf10f42) = CONST 
    0x2f: v2f = EQ v2a(0xaaf10f42), v12
    0x7f2: v7f2(0x814) = CONST 
    0x7f3: JUMPI v7f2(0x814), v2f

    Begin block 0x814
    prev=[0x29], succ=[]
    =================================
    0x815: v815(0x254) = CONST 
    0x816: CALLPRIVATE v815(0x254)

    Begin block 0x34
    prev=[0x29], succ=[0x3f, 0x817]
    =================================
    0x35: v35(0xbb15ac8e) = CONST 
    0x3a: v3a = EQ v35(0xbb15ac8e), v12
    0x7f4: v7f4(0x817) = CONST 
    0x7f5: JUMPI v7f4(0x817), v3a

    Begin block 0x3f
    prev=[0x34], succ=[0x81a, 0x4a]
    =================================
    0x40: v40(0xcaaee91c) = CONST 
    0x45: v45 = EQ v40(0xcaaee91c), v12
    0x7f6: v7f6(0x81a) = CONST 
    0x7f7: JUMPI v7f6(0x81a), v45

    Begin block 0x81a
    prev=[0x3f], succ=[]
    =================================
    0x81b: v81b(0x2e6) = CONST 
    0x81c: CALLPRIVATE v81b(0x2e6)

    Begin block 0x4a
    prev=[0x3f], succ=[0x55, 0x81d]
    =================================
    0x4b: v4b(0xd784d426) = CONST 
    0x50: v50 = EQ v4b(0xd784d426), v12
    0x7f8: v7f8(0x81d) = CONST 
    0x7f9: JUMPI v7f8(0x81d), v50

    Begin block 0x55
    prev=[0x4a], succ=[0x8b0x0]
    =================================
    0x55: v55(0x8b) = CONST 
    0x58: JUMP v55(0x8b)

    Begin block 0x81d
    prev=[0x4a], succ=[]
    =================================
    0x81e: v81e(0x337) = CONST 
    0x81f: CALLPRIVATE v81e(0x337)

    Begin block 0x817
    prev=[0x34], succ=[]
    =================================
    0x818: v818(0x295) = CONST 
    0x819: CALLPRIVATE v818(0x295)

    Begin block 0x802
    prev=[0x0], succ=[]
    =================================
    0x803: v803(0x8a) = CONST 
    0x804: CALLPRIVATE v803(0x8a)

}

function bytes32ToAddress(bytes32)() public {
    Begin block 0x125
    prev=[], succ=[0x12d, 0x131]
    =================================
    0x126: v126 = CALLVALUE 
    0x128: v128 = ISZERO v126
    0x129: v129(0x131) = CONST 
    0x12c: JUMPI v129(0x131), v128

    Begin block 0x12d
    prev=[0x125], succ=[]
    =================================
    0x12d: v12d(0x0) = CONST 
    0x130: REVERT v12d(0x0), v12d(0x0)

    Begin block 0x131
    prev=[0x125], succ=[0x144, 0x148]
    =================================
    0x133: v133(0x15e) = CONST 
    0x136: v136(0x4) = CONST 
    0x139: v139 = CALLDATASIZE 
    0x13a: v13a = SUB v139, v136(0x4)
    0x13b: v13b(0x20) = CONST 
    0x13e: v13e = LT v13a, v13b(0x20)
    0x13f: v13f = ISZERO v13e
    0x140: v140(0x148) = CONST 
    0x143: JUMPI v140(0x148), v13f

    Begin block 0x144
    prev=[0x131], succ=[]
    =================================
    0x144: v144(0x0) = CONST 
    0x147: REVERT v144(0x0), v144(0x0)

    Begin block 0x148
    prev=[0x131], succ=[0x4680x125]
    =================================
    0x14a: v14a = ADD v136(0x4), v13a
    0x14e: v14e = CALLDATALOAD v136(0x4)
    0x150: v150(0x20) = CONST 
    0x152: v152(0x24) = ADD v150(0x20), v136(0x4)
    0x15a: v15a(0x468) = CONST 
    0x15d: JUMP v15a(0x468)

    Begin block 0x4680x125
    prev=[0x148], succ=[0x15e]
    =================================
    0x4690x125: v125469(0x0) = CONST 
    0x46c0x125: v12546c(0x0) = CONST 
    0x46e0x125: v12546e = SHR v12546c(0x0), v14e
    0x4740x125: JUMP v133(0x15e)

    Begin block 0x15e
    prev=[0x4680x125], succ=[]
    =================================
    0x15f: v15f(0x40) = CONST 
    0x161: v161 = MLOAD v15f(0x40)
    0x164: v164(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x179: v179 = AND v164(0xffffffffffffffffffffffffffffffffffffffff), v12546e
    0x17b: MSTORE v161, v179
    0x17c: v17c(0x20) = CONST 
    0x17e: v17e = ADD v17c(0x20), v161
    0x182: v182(0x40) = CONST 
    0x184: v184 = MLOAD v182(0x40)
    0x187: v187(0x20) = SUB v17e, v184
    0x189: RETURN v184, v187(0x20)

}

function addressToBytes32(address)() public {
    Begin block 0x18a
    prev=[], succ=[0x192, 0x196]
    =================================
    0x18b: v18b = CALLVALUE 
    0x18d: v18d = ISZERO v18b
    0x18e: v18e(0x196) = CONST 
    0x191: JUMPI v18e(0x196), v18d

    Begin block 0x192
    prev=[0x18a], succ=[]
    =================================
    0x192: v192(0x0) = CONST 
    0x195: REVERT v192(0x0), v192(0x0)

    Begin block 0x196
    prev=[0x18a], succ=[0x1a9, 0x1ad]
    =================================
    0x198: v198(0x1d9) = CONST 
    0x19b: v19b(0x4) = CONST 
    0x19e: v19e = CALLDATASIZE 
    0x19f: v19f = SUB v19e, v19b(0x4)
    0x1a0: v1a0(0x20) = CONST 
    0x1a3: v1a3 = LT v19f, v1a0(0x20)
    0x1a4: v1a4 = ISZERO v1a3
    0x1a5: v1a5(0x1ad) = CONST 
    0x1a8: JUMPI v1a5(0x1ad), v1a4

    Begin block 0x1a9
    prev=[0x196], succ=[]
    =================================
    0x1a9: v1a9(0x0) = CONST 
    0x1ac: REVERT v1a9(0x0), v1a9(0x0)

    Begin block 0x1ad
    prev=[0x196], succ=[0x4750x18a]
    =================================
    0x1af: v1af = ADD v19b(0x4), v19f
    0x1b3: v1b3 = CALLDATALOAD v19b(0x4)
    0x1b4: v1b4(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x1c9: v1c9 = AND v1b4(0xffffffffffffffffffffffffffffffffffffffff), v1b3
    0x1cb: v1cb(0x20) = CONST 
    0x1cd: v1cd(0x24) = ADD v1cb(0x20), v19b(0x4)
    0x1d5: v1d5(0x475) = CONST 
    0x1d8: JUMP v1d5(0x475)

    Begin block 0x4750x18a
    prev=[0x1ad], succ=[0x1d9]
    =================================
    0x4760x18a: v18a476(0x0) = CONST 
    0x4790x18a: v18a479(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x48e0x18a: v18a48e = AND v18a479(0xffffffffffffffffffffffffffffffffffffffff), v1c9
    0x48f0x18a: v18a48f(0x0) = CONST 
    0x4910x18a: v18a491 = SHL v18a48f(0x0), v18a48e
    0x4970x18a: JUMP v198(0x1d9)

    Begin block 0x1d9
    prev=[0x4750x18a], succ=[]
    =================================
    0x1da: v1da(0x40) = CONST 
    0x1dc: v1dc = MLOAD v1da(0x40)
    0x1e0: MSTORE v1dc, v18a491
    0x1e1: v1e1(0x20) = CONST 
    0x1e3: v1e3 = ADD v1e1(0x20), v1dc
    0x1e7: v1e7(0x40) = CONST 
    0x1e9: v1e9 = MLOAD v1e7(0x40)
    0x1ec: v1ec(0x20) = SUB v1e3, v1e9
    0x1ee: RETURN v1e9, v1ec(0x20)

}

function readAddress(bytes32)() public {
    Begin block 0x1ef
    prev=[], succ=[0x1f7, 0x1fb]
    =================================
    0x1f0: v1f0 = CALLVALUE 
    0x1f2: v1f2 = ISZERO v1f0
    0x1f3: v1f3(0x1fb) = CONST 
    0x1f6: JUMPI v1f3(0x1fb), v1f2

    Begin block 0x1f7
    prev=[0x1ef], succ=[]
    =================================
    0x1f7: v1f7(0x0) = CONST 
    0x1fa: REVERT v1f7(0x0), v1f7(0x0)

    Begin block 0x1fb
    prev=[0x1ef], succ=[0x20e, 0x212]
    =================================
    0x1fd: v1fd(0x228) = CONST 
    0x200: v200(0x4) = CONST 
    0x203: v203 = CALLDATASIZE 
    0x204: v204 = SUB v203, v200(0x4)
    0x205: v205(0x20) = CONST 
    0x208: v208 = LT v204, v205(0x20)
    0x209: v209 = ISZERO v208
    0x20a: v20a(0x212) = CONST 
    0x20d: JUMPI v20a(0x212), v209

    Begin block 0x20e
    prev=[0x1fb], succ=[]
    =================================
    0x20e: v20e(0x0) = CONST 
    0x211: REVERT v20e(0x0), v20e(0x0)

    Begin block 0x212
    prev=[0x1fb], succ=[0x4980x1ef]
    =================================
    0x214: v214 = ADD v200(0x4), v204
    0x218: v218 = CALLDATALOAD v200(0x4)
    0x21a: v21a(0x20) = CONST 
    0x21c: v21c(0x24) = ADD v21a(0x20), v200(0x4)
    0x224: v224(0x498) = CONST 
    0x227: JUMP v224(0x498)

    Begin block 0x4980x1ef
    prev=[0x212], succ=[0x458B0x4980x1ef]
    =================================
    0x4990x1ef: v1ef499(0x0) = CONST 
    0x49b0x1ef: v1ef49b(0x4ab) = CONST 
    0x49e0x1ef: v1ef49e(0x4a6) = CONST 
    0x4a20x1ef: v1ef4a2(0x458) = CONST 
    0x4a50x1ef: JUMP v1ef4a2(0x458)

    Begin block 0x458B0x4980x1ef
    prev=[0x4980x1ef], succ=[0x4a60x1ef]
    =================================
    0x459S0x4980x1ef: v459V4981ef(0x0) = CONST 
    0x45dS0x4980x1ef: v45dV4981ef = SLOAD v218
    0x467S0x4980x1ef: JUMP v1ef49e(0x4a6)

    Begin block 0x4a60x1ef
    prev=[0x458B0x4980x1ef], succ=[0x4680x1ef]
    =================================
    0x4a70x1ef: v1ef4a7(0x468) = CONST 
    0x4aa0x1ef: JUMP v1ef4a7(0x468)

    Begin block 0x4680x1ef
    prev=[0x4a60x1ef], succ=[0x4ab0x1ef]
    =================================
    0x4690x1ef: v1ef469(0x0) = CONST 
    0x46c0x1ef: v1ef46c(0x0) = CONST 
    0x46e0x1ef: v1ef46e = SHR v1ef46c(0x0), v45dV4981ef
    0x4740x1ef: JUMP v1ef49b(0x4ab)

    Begin block 0x4ab0x1ef
    prev=[0x4680x1ef], succ=[0x228]
    =================================
    0x4b10x1ef: JUMP v1fd(0x228)

    Begin block 0x228
    prev=[0x4ab0x1ef], succ=[]
    =================================
    0x229: v229(0x40) = CONST 
    0x22b: v22b = MLOAD v229(0x40)
    0x22e: v22e(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x243: v243 = AND v22e(0xffffffffffffffffffffffffffffffffffffffff), v1ef46e
    0x245: MSTORE v22b, v243
    0x246: v246(0x20) = CONST 
    0x248: v248 = ADD v246(0x20), v22b
    0x24c: v24c(0x40) = CONST 
    0x24e: v24e = MLOAD v24c(0x40)
    0x251: v251(0x20) = SUB v248, v24e
    0x253: RETURN v24e, v251(0x20)

}

function getImplementation()() public {
    Begin block 0x254
    prev=[], succ=[0x25c, 0x260]
    =================================
    0x255: v255 = CALLVALUE 
    0x257: v257 = ISZERO v255
    0x258: v258(0x260) = CONST 
    0x25b: JUMPI v258(0x260), v257

    Begin block 0x25c
    prev=[0x254], succ=[]
    =================================
    0x25c: v25c(0x0) = CONST 
    0x25f: REVERT v25c(0x0), v25c(0x0)

    Begin block 0x260
    prev=[0x254], succ=[0x4b2B0x260]
    =================================
    0x262: v262(0x269) = CONST 
    0x265: v265(0x4b2) = CONST 
    0x268: JUMP v265(0x4b2)

    Begin block 0x4b2B0x260
    prev=[0x260], succ=[0x498B0x4b2B0x260]
    =================================
    0x4b3S0x260: v4b3V260(0x0) = CONST 
    0x4b5S0x260: v4b5V260(0x503) = CONST 
    0x4b8S0x260: v4b8V260(0x40) = CONST 
    0x4baS0x260: v4baV260 = MLOAD v4b8V260(0x40)
    0x4bbS0x260: v4bbV260(0x20) = CONST 
    0x4bdS0x260: v4bdV260 = ADD v4bbV260(0x20), v4baV260
    0x4c0S0x260: v4c0V260(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x4e2S0x260: MSTORE v4bdV260, v4c0V260(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x4e4S0x260: v4e4V260(0x13) = CONST 
    0x4e6S0x260: v4e6V260 = ADD v4e4V260(0x13), v4bdV260
    0x4e9S0x260: v4e9V260(0x40) = CONST 
    0x4ebS0x260: v4ebV260 = MLOAD v4e9V260(0x40)
    0x4ecS0x260: v4ecV260(0x20) = CONST 
    0x4f0S0x260: v4f0V260(0x33) = SUB v4e6V260, v4ebV260
    0x4f1S0x260: v4f1V260(0x13) = SUB v4f0V260(0x33), v4ecV260(0x20)
    0x4f3S0x260: MSTORE v4ebV260, v4f1V260(0x13)
    0x4f5S0x260: v4f5V260(0x40) = CONST 
    0x4f7S0x260: MSTORE v4f5V260(0x40), v4e6V260
    0x4f9S0x260: v4f9V260(0x13) = MLOAD v4ebV260
    0x4fbS0x260: v4fbV260(0x20) = CONST 
    0x4fdS0x260: v4fdV260 = ADD v4fbV260(0x20), v4ebV260
    0x4feS0x260: v4feV260 = SHA3 v4fdV260, v4f9V260(0x13)
    0x4ffS0x260: v4ffV260(0x498) = CONST 
    0x502S0x260: JUMP v4ffV260(0x498)

    Begin block 0x498B0x4b2B0x260
    prev=[0x4b2B0x260], succ=[0x458B0x498B0x4b2B0x260]
    =================================
    0x499S0x4b2B0x260: v499V4b2B260(0x0) = CONST 
    0x49bS0x4b2B0x260: v49bV4b2B260(0x4ab) = CONST 
    0x49eS0x4b2B0x260: v49eV4b2B260(0x4a6) = CONST 
    0x4a2S0x4b2B0x260: v4a2V4b2B260(0x458) = CONST 
    0x4a5S0x4b2B0x260: JUMP v4a2V4b2B260(0x458)

    Begin block 0x458B0x498B0x4b2B0x260
    prev=[0x498B0x4b2B0x260], succ=[0x4a60x498B0x4b2B0x260]
    =================================
    0x459S0x498S0x4b2B0x260: v459V498V4b2B260(0x0) = CONST 
    0x45dS0x498S0x4b2B0x260: v45dV498V4b2B260 = SLOAD v4feV260
    0x467S0x498S0x4b2B0x260: JUMP v49eV4b2B260(0x4a6)

    Begin block 0x4a60x498B0x4b2B0x260
    prev=[0x458B0x498B0x4b2B0x260], succ=[0x4680x498B0x4b2B0x260]
    =================================
    0x4a70x498S0x4b2B0x260: v4984a7V4b2B260(0x468) = CONST 
    0x4aa0x498S0x4b2B0x260: JUMP v4984a7V4b2B260(0x468)

    Begin block 0x4680x498B0x4b2B0x260
    prev=[0x4a60x498B0x4b2B0x260], succ=[0x4ab0x498B0x4b2B0x260]
    =================================
    0x4690x498S0x4b2B0x260: v498469V4b2B260(0x0) = CONST 
    0x46c0x498S0x4b2B0x260: v49846cV4b2B260(0x0) = CONST 
    0x46e0x498S0x4b2B0x260: v49846eV4b2B260 = SHR v49846cV4b2B260(0x0), v45dV498V4b2B260
    0x4740x498S0x4b2B0x260: JUMP v49bV4b2B260(0x4ab)

    Begin block 0x4ab0x498B0x4b2B0x260
    prev=[0x4680x498B0x4b2B0x260], succ=[0x503B0x260]
    =================================
    0x4b10x498S0x4b2B0x260: JUMP v4b5V260(0x503)

    Begin block 0x503B0x260
    prev=[0x4ab0x498B0x4b2B0x260], succ=[0x269]
    =================================
    0x507S0x260: JUMP v262(0x269)

    Begin block 0x269
    prev=[0x503B0x260], succ=[]
    =================================
    0x26a: v26a(0x40) = CONST 
    0x26c: v26c = MLOAD v26a(0x40)
    0x26f: v26f(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x284: v284 = AND v26f(0xffffffffffffffffffffffffffffffffffffffff), v49846eV4b2B260
    0x286: MSTORE v26c, v284
    0x287: v287(0x20) = CONST 
    0x289: v289 = ADD v287(0x20), v26c
    0x28d: v28d(0x40) = CONST 
    0x28f: v28f = MLOAD v28d(0x40)
    0x292: v292(0x20) = SUB v289, v28f
    0x294: RETURN v28f, v292(0x20)

}

function readBool(bytes32)() public {
    Begin block 0x295
    prev=[], succ=[0x29d, 0x2a1]
    =================================
    0x296: v296 = CALLVALUE 
    0x298: v298 = ISZERO v296
    0x299: v299(0x2a1) = CONST 
    0x29c: JUMPI v299(0x2a1), v298

    Begin block 0x29d
    prev=[0x295], succ=[]
    =================================
    0x29d: v29d(0x0) = CONST 
    0x2a0: REVERT v29d(0x0), v29d(0x0)

    Begin block 0x2a1
    prev=[0x295], succ=[0x2b4, 0x2b8]
    =================================
    0x2a3: v2a3(0x2ce) = CONST 
    0x2a6: v2a6(0x4) = CONST 
    0x2a9: v2a9 = CALLDATASIZE 
    0x2aa: v2aa = SUB v2a9, v2a6(0x4)
    0x2ab: v2ab(0x20) = CONST 
    0x2ae: v2ae = LT v2aa, v2ab(0x20)
    0x2af: v2af = ISZERO v2ae
    0x2b0: v2b0(0x2b8) = CONST 
    0x2b3: JUMPI v2b0(0x2b8), v2af

    Begin block 0x2b4
    prev=[0x2a1], succ=[]
    =================================
    0x2b4: v2b4(0x0) = CONST 
    0x2b7: REVERT v2b4(0x0), v2b4(0x0)

    Begin block 0x2b8
    prev=[0x2a1], succ=[0x508]
    =================================
    0x2ba: v2ba = ADD v2a6(0x4), v2aa
    0x2be: v2be = CALLDATALOAD v2a6(0x4)
    0x2c0: v2c0(0x20) = CONST 
    0x2c2: v2c2(0x24) = ADD v2c0(0x20), v2a6(0x4)
    0x2ca: v2ca(0x508) = CONST 
    0x2cd: JUMP v2ca(0x508)

    Begin block 0x508
    prev=[0x2b8], succ=[0x458B0x508]
    =================================
    0x509: v509(0x0) = CONST 
    0x50b: v50b(0x1) = CONST 
    0x50d: v50d(0x0) = CONST 
    0x50f: v50f(0x1) = SHL v50d(0x0), v50b(0x1)
    0x510: v510(0x518) = CONST 
    0x514: v514(0x458) = CONST 
    0x517: JUMP v514(0x458)

    Begin block 0x458B0x508
    prev=[0x508], succ=[0x518]
    =================================
    0x459S0x508: v459V508(0x0) = CONST 
    0x45dS0x508: v45dV508 = SLOAD v2be
    0x467S0x508: JUMP v510(0x518)

    Begin block 0x518
    prev=[0x458B0x508], succ=[0x2ce]
    =================================
    0x519: v519 = EQ v45dV508, v50f(0x1)
    0x51f: JUMP v2a3(0x2ce)

    Begin block 0x2ce
    prev=[0x518], succ=[]
    =================================
    0x2cf: v2cf(0x40) = CONST 
    0x2d1: v2d1 = MLOAD v2cf(0x40)
    0x2d4: v2d4 = ISZERO v519
    0x2d5: v2d5 = ISZERO v2d4
    0x2d7: MSTORE v2d1, v2d5
    0x2d8: v2d8(0x20) = CONST 
    0x2da: v2da = ADD v2d8(0x20), v2d1
    0x2de: v2de(0x40) = CONST 
    0x2e0: v2e0 = MLOAD v2de(0x40)
    0x2e3: v2e3(0x20) = SUB v2da, v2e0
    0x2e5: RETURN v2e0, v2e3(0x20)

}

function setProxyOwner(address)() public {
    Begin block 0x2e6
    prev=[], succ=[0x2ee, 0x2f2]
    =================================
    0x2e7: v2e7 = CALLVALUE 
    0x2e9: v2e9 = ISZERO v2e7
    0x2ea: v2ea(0x2f2) = CONST 
    0x2ed: JUMPI v2ea(0x2f2), v2e9

    Begin block 0x2ee
    prev=[0x2e6], succ=[]
    =================================
    0x2ee: v2ee(0x0) = CONST 
    0x2f1: REVERT v2ee(0x0), v2ee(0x0)

    Begin block 0x2f2
    prev=[0x2e6], succ=[0x305, 0x309]
    =================================
    0x2f4: v2f4(0x335) = CONST 
    0x2f7: v2f7(0x4) = CONST 
    0x2fa: v2fa = CALLDATASIZE 
    0x2fb: v2fb = SUB v2fa, v2f7(0x4)
    0x2fc: v2fc(0x20) = CONST 
    0x2ff: v2ff = LT v2fb, v2fc(0x20)
    0x300: v300 = ISZERO v2ff
    0x301: v301(0x309) = CONST 
    0x304: JUMPI v301(0x309), v300

    Begin block 0x305
    prev=[0x2f2], succ=[]
    =================================
    0x305: v305(0x0) = CONST 
    0x308: REVERT v305(0x0), v305(0x0)

    Begin block 0x309
    prev=[0x2f2], succ=[0x520]
    =================================
    0x30b: v30b = ADD v2f7(0x4), v2fb
    0x30f: v30f = CALLDATALOAD v2f7(0x4)
    0x310: v310(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x325: v325 = AND v310(0xffffffffffffffffffffffffffffffffffffffff), v30f
    0x327: v327(0x20) = CONST 
    0x329: v329(0x24) = ADD v327(0x20), v2f7(0x4)
    0x331: v331(0x520) = CONST 
    0x334: JUMP v331(0x520)

    Begin block 0x520
    prev=[0x309], succ=[0x498B0x520]
    =================================
    0x521: v521(0x56f) = CONST 
    0x524: v524(0x40) = CONST 
    0x526: v526 = MLOAD v524(0x40)
    0x527: v527(0x20) = CONST 
    0x529: v529 = ADD v527(0x20), v526
    0x52c: v52c(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x54e: MSTORE v529, v52c(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x550: v550(0xa) = CONST 
    0x552: v552 = ADD v550(0xa), v529
    0x555: v555(0x40) = CONST 
    0x557: v557 = MLOAD v555(0x40)
    0x558: v558(0x20) = CONST 
    0x55c: v55c(0x2a) = SUB v552, v557
    0x55d: v55d(0xa) = SUB v55c(0x2a), v558(0x20)
    0x55f: MSTORE v557, v55d(0xa)
    0x561: v561(0x40) = CONST 
    0x563: MSTORE v561(0x40), v552
    0x565: v565(0xa) = MLOAD v557
    0x567: v567(0x20) = CONST 
    0x569: v569 = ADD v567(0x20), v557
    0x56a: v56a = SHA3 v569, v565(0xa)
    0x56b: v56b(0x498) = CONST 
    0x56e: JUMP v56b(0x498)

    Begin block 0x498B0x520
    prev=[0x520], succ=[0x458B0x498B0x520]
    =================================
    0x499S0x520: v499V520(0x0) = CONST 
    0x49bS0x520: v49bV520(0x4ab) = CONST 
    0x49eS0x520: v49eV520(0x4a6) = CONST 
    0x4a2S0x520: v4a2V520(0x458) = CONST 
    0x4a5S0x520: JUMP v4a2V520(0x458)

    Begin block 0x458B0x498B0x520
    prev=[0x498B0x520], succ=[0x4a60x498B0x520]
    =================================
    0x459S0x498S0x520: v459V498V520(0x0) = CONST 
    0x45dS0x498S0x520: v45dV498V520 = SLOAD v56a
    0x467S0x498S0x520: JUMP v49eV520(0x4a6)

    Begin block 0x4a60x498B0x520
    prev=[0x458B0x498B0x520], succ=[0x4680x498B0x520]
    =================================
    0x4a70x498S0x520: v4984a7V520(0x468) = CONST 
    0x4aa0x498S0x520: JUMP v4984a7V520(0x468)

    Begin block 0x4680x498B0x520
    prev=[0x4a60x498B0x520], succ=[0x4ab0x498B0x520]
    =================================
    0x4690x498S0x520: v498469V520(0x0) = CONST 
    0x46c0x498S0x520: v49846cV520(0x0) = CONST 
    0x46e0x498S0x520: v49846eV520 = SHR v49846cV520(0x0), v45dV498V520
    0x4740x498S0x520: JUMP v49bV520(0x4ab)

    Begin block 0x4ab0x498B0x520
    prev=[0x4680x498B0x520], succ=[0x56f]
    =================================
    0x4b10x498S0x520: JUMP v521(0x56f)

    Begin block 0x56f
    prev=[0x4ab0x498B0x520], succ=[0x5a2, 0x5f2]
    =================================
    0x570: v570(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x585: v585 = AND v570(0xffffffffffffffffffffffffffffffffffffffff), v49846eV520
    0x586: v586 = CALLER 
    0x587: v587(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x59c: v59c = AND v587(0xffffffffffffffffffffffffffffffffffffffff), v586
    0x59d: v59d = EQ v59c, v585
    0x59e: v59e(0x5f2) = CONST 
    0x5a1: JUMPI v59e(0x5f2), v59d

    Begin block 0x5a2
    prev=[0x56f], succ=[]
    =================================
    0x5a2: v5a2(0x40) = CONST 
    0x5a4: v5a4 = MLOAD v5a2(0x40)
    0x5a5: v5a5(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
    0x5c7: MSTORE v5a4, v5a5(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x5c8: v5c8(0x4) = CONST 
    0x5ca: v5ca = ADD v5c8(0x4), v5a4
    0x5cd: v5cd(0x20) = CONST 
    0x5cf: v5cf = ADD v5cd(0x20), v5ca
    0x5d2: v5d2(0x20) = SUB v5cf, v5ca
    0x5d4: MSTORE v5ca, v5d2(0x20)
    0x5d5: v5d5(0x2b) = CONST 
    0x5d8: MSTORE v5cf, v5d5(0x2b)
    0x5d9: v5d9(0x20) = CONST 
    0x5db: v5db = ADD v5d9(0x20), v5cf
    0x5dd: v5dd(0x78e) = CONST 
    0x5e0: v5e0(0x2b) = CONST 
    0x5e3: CODECOPY v5db, v5dd(0x78e), v5e0(0x2b)
    0x5e4: v5e4(0x40) = CONST 
    0x5e6: v5e6 = ADD v5e4(0x40), v5db
    0x5ea: v5ea(0x40) = CONST 
    0x5ec: v5ec = MLOAD v5ea(0x40)
    0x5ef: v5ef(0x84) = SUB v5e6, v5ec
    0x5f1: REVERT v5ec, v5ef(0x84)

    Begin block 0x5f2
    prev=[0x56f], succ=[0x76aB0x5f2]
    =================================
    0x5f3: v5f3(0x642) = CONST 
    0x5f6: v5f6(0x40) = CONST 
    0x5f8: v5f8 = MLOAD v5f6(0x40)
    0x5f9: v5f9(0x20) = CONST 
    0x5fb: v5fb = ADD v5f9(0x20), v5f8
    0x5fe: v5fe(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x620: MSTORE v5fb, v5fe(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x622: v622(0xa) = CONST 
    0x624: v624 = ADD v622(0xa), v5fb
    0x627: v627(0x40) = CONST 
    0x629: v629 = MLOAD v627(0x40)
    0x62a: v62a(0x20) = CONST 
    0x62e: v62e(0x2a) = SUB v624, v629
    0x62f: v62f(0xa) = SUB v62e(0x2a), v62a(0x20)
    0x631: MSTORE v629, v62f(0xa)
    0x633: v633(0x40) = CONST 
    0x635: MSTORE v633(0x40), v624
    0x637: v637(0xa) = MLOAD v629
    0x639: v639(0x20) = CONST 
    0x63b: v63b = ADD v639(0x20), v629
    0x63c: v63c = SHA3 v63b, v637(0xa)
    0x63e: v63e(0x76a) = CONST 
    0x641: JUMP v63e(0x76a), v325, v63c, v5f3(0x642)

    Begin block 0x76aB0x5f2
    prev=[0x5f2], succ=[0x4750x76aB0x5f2]
    =================================
    0x76bS0x5f2: v76bV5f2(0x77c) = CONST 
    0x76fS0x5f2: v76fV5f2(0x777) = CONST 
    0x773S0x5f2: v773V5f2(0x475) = CONST 
    0x776S0x5f2: JUMP v773V5f2(0x475)

    Begin block 0x4750x76aB0x5f2
    prev=[0x76aB0x5f2], succ=[0x777B0x5f2]
    =================================
    0x4760x76aS0x5f2: v76a476V5f2(0x0) = CONST 
    0x4790x76aS0x5f2: v76a479V5f2(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x48e0x76aS0x5f2: v76a48eV5f2 = AND v76a479V5f2(0xffffffffffffffffffffffffffffffffffffffff), v325
    0x48f0x76aS0x5f2: v76a48fV5f2(0x0) = CONST 
    0x4910x76aS0x5f2: v76a491V5f2 = SHL v76a48fV5f2(0x0), v76a48eV5f2
    0x4970x76aS0x5f2: JUMP v76fV5f2(0x777)

    Begin block 0x777B0x5f2
    prev=[0x4750x76aB0x5f2], succ=[0x780B0x5f2]
    =================================
    0x778S0x5f2: v778V5f2(0x780) = CONST 
    0x77bS0x5f2: JUMP v778V5f2(0x780)

    Begin block 0x780B0x5f2
    prev=[0x777B0x5f2], succ=[0x77cB0x5f2]
    =================================
    0x781S0x5f2: v781V5f2(0x0) = CONST 
    0x788S0x5f2: SSTORE v63c, v76a491V5f2
    0x78cS0x5f2: JUMP v76bV5f2(0x77c)

    Begin block 0x77cB0x5f2
    prev=[0x780B0x5f2], succ=[0x642]
    =================================
    0x77fS0x5f2: JUMP v5f3(0x642)

    Begin block 0x642
    prev=[0x77cB0x5f2], succ=[0x335]
    =================================
    0x644: JUMP v2f4(0x335)

    Begin block 0x335
    prev=[0x642], succ=[]
    =================================
    0x336: STOP 

}

function setImplementation(address)() public {
    Begin block 0x337
    prev=[], succ=[0x33f, 0x343]
    =================================
    0x338: v338 = CALLVALUE 
    0x33a: v33a = ISZERO v338
    0x33b: v33b(0x343) = CONST 
    0x33e: JUMPI v33b(0x343), v33a

    Begin block 0x33f
    prev=[0x337], succ=[]
    =================================
    0x33f: v33f(0x0) = CONST 
    0x342: REVERT v33f(0x0), v33f(0x0)

    Begin block 0x343
    prev=[0x337], succ=[0x356, 0x35a]
    =================================
    0x345: v345(0x386) = CONST 
    0x348: v348(0x4) = CONST 
    0x34b: v34b = CALLDATASIZE 
    0x34c: v34c = SUB v34b, v348(0x4)
    0x34d: v34d(0x20) = CONST 
    0x350: v350 = LT v34c, v34d(0x20)
    0x351: v351 = ISZERO v350
    0x352: v352(0x35a) = CONST 
    0x355: JUMPI v352(0x35a), v351

    Begin block 0x356
    prev=[0x343], succ=[]
    =================================
    0x356: v356(0x0) = CONST 
    0x359: REVERT v356(0x0), v356(0x0)

    Begin block 0x35a
    prev=[0x343], succ=[0x645]
    =================================
    0x35c: v35c = ADD v348(0x4), v34c
    0x360: v360 = CALLDATALOAD v348(0x4)
    0x361: v361(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x376: v376 = AND v361(0xffffffffffffffffffffffffffffffffffffffff), v360
    0x378: v378(0x20) = CONST 
    0x37a: v37a(0x24) = ADD v378(0x20), v348(0x4)
    0x382: v382(0x645) = CONST 
    0x385: JUMP v382(0x645)

    Begin block 0x645
    prev=[0x35a], succ=[0x498B0x645]
    =================================
    0x646: v646(0x694) = CONST 
    0x649: v649(0x40) = CONST 
    0x64b: v64b = MLOAD v649(0x40)
    0x64c: v64c(0x20) = CONST 
    0x64e: v64e = ADD v64c(0x20), v64b
    0x651: v651(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x673: MSTORE v64e, v651(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x675: v675(0xa) = CONST 
    0x677: v677 = ADD v675(0xa), v64e
    0x67a: v67a(0x40) = CONST 
    0x67c: v67c = MLOAD v67a(0x40)
    0x67d: v67d(0x20) = CONST 
    0x681: v681(0x2a) = SUB v677, v67c
    0x682: v682(0xa) = SUB v681(0x2a), v67d(0x20)
    0x684: MSTORE v67c, v682(0xa)
    0x686: v686(0x40) = CONST 
    0x688: MSTORE v686(0x40), v677
    0x68a: v68a(0xa) = MLOAD v67c
    0x68c: v68c(0x20) = CONST 
    0x68e: v68e = ADD v68c(0x20), v67c
    0x68f: v68f = SHA3 v68e, v68a(0xa)
    0x690: v690(0x498) = CONST 
    0x693: JUMP v690(0x498)

    Begin block 0x498B0x645
    prev=[0x645], succ=[0x458B0x498B0x645]
    =================================
    0x499S0x645: v499V645(0x0) = CONST 
    0x49bS0x645: v49bV645(0x4ab) = CONST 
    0x49eS0x645: v49eV645(0x4a6) = CONST 
    0x4a2S0x645: v4a2V645(0x458) = CONST 
    0x4a5S0x645: JUMP v4a2V645(0x458)

    Begin block 0x458B0x498B0x645
    prev=[0x498B0x645], succ=[0x4a60x498B0x645]
    =================================
    0x459S0x498S0x645: v459V498V645(0x0) = CONST 
    0x45dS0x498S0x645: v45dV498V645 = SLOAD v68f
    0x467S0x498S0x645: JUMP v49eV645(0x4a6)

    Begin block 0x4a60x498B0x645
    prev=[0x458B0x498B0x645], succ=[0x4680x498B0x645]
    =================================
    0x4a70x498S0x645: v4984a7V645(0x468) = CONST 
    0x4aa0x498S0x645: JUMP v4984a7V645(0x468)

    Begin block 0x4680x498B0x645
    prev=[0x4a60x498B0x645], succ=[0x4ab0x498B0x645]
    =================================
    0x4690x498S0x645: v498469V645(0x0) = CONST 
    0x46c0x498S0x645: v49846cV645(0x0) = CONST 
    0x46e0x498S0x645: v49846eV645 = SHR v49846cV645(0x0), v45dV498V645
    0x4740x498S0x645: JUMP v49bV645(0x4ab)

    Begin block 0x4ab0x498B0x645
    prev=[0x4680x498B0x645], succ=[0x694]
    =================================
    0x4b10x498S0x645: JUMP v646(0x694)

    Begin block 0x694
    prev=[0x4ab0x498B0x645], succ=[0x6c7, 0x717]
    =================================
    0x695: v695(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x6aa: v6aa = AND v695(0xffffffffffffffffffffffffffffffffffffffff), v49846eV645
    0x6ab: v6ab = CALLER 
    0x6ac: v6ac(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x6c1: v6c1 = AND v6ac(0xffffffffffffffffffffffffffffffffffffffff), v6ab
    0x6c2: v6c2 = EQ v6c1, v6aa
    0x6c3: v6c3(0x717) = CONST 
    0x6c6: JUMPI v6c3(0x717), v6c2

    Begin block 0x6c7
    prev=[0x694], succ=[]
    =================================
    0x6c7: v6c7(0x40) = CONST 
    0x6c9: v6c9 = MLOAD v6c7(0x40)
    0x6ca: v6ca(0x8c379a000000000000000000000000000000000000000000000000000000000) = CONST 
    0x6ec: MSTORE v6c9, v6ca(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x6ed: v6ed(0x4) = CONST 
    0x6ef: v6ef = ADD v6ed(0x4), v6c9
    0x6f2: v6f2(0x20) = CONST 
    0x6f4: v6f4 = ADD v6f2(0x20), v6ef
    0x6f7: v6f7(0x20) = SUB v6f4, v6ef
    0x6f9: MSTORE v6ef, v6f7(0x20)
    0x6fa: v6fa(0x2b) = CONST 
    0x6fd: MSTORE v6f4, v6fa(0x2b)
    0x6fe: v6fe(0x20) = CONST 
    0x700: v700 = ADD v6fe(0x20), v6f4
    0x702: v702(0x78e) = CONST 
    0x705: v705(0x2b) = CONST 
    0x708: CODECOPY v700, v702(0x78e), v705(0x2b)
    0x709: v709(0x40) = CONST 
    0x70b: v70b = ADD v709(0x40), v700
    0x70f: v70f(0x40) = CONST 
    0x711: v711 = MLOAD v70f(0x40)
    0x714: v714(0x84) = SUB v70b, v711
    0x716: REVERT v711, v714(0x84)

    Begin block 0x717
    prev=[0x694], succ=[0x76aB0x717]
    =================================
    0x718: v718(0x767) = CONST 
    0x71b: v71b(0x40) = CONST 
    0x71d: v71d = MLOAD v71b(0x40)
    0x71e: v71e(0x20) = CONST 
    0x720: v720 = ADD v71e(0x20), v71d
    0x723: v723(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x745: MSTORE v720, v723(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x747: v747(0x13) = CONST 
    0x749: v749 = ADD v747(0x13), v720
    0x74c: v74c(0x40) = CONST 
    0x74e: v74e = MLOAD v74c(0x40)
    0x74f: v74f(0x20) = CONST 
    0x753: v753(0x33) = SUB v749, v74e
    0x754: v754(0x13) = SUB v753(0x33), v74f(0x20)
    0x756: MSTORE v74e, v754(0x13)
    0x758: v758(0x40) = CONST 
    0x75a: MSTORE v758(0x40), v749
    0x75c: v75c(0x13) = MLOAD v74e
    0x75e: v75e(0x20) = CONST 
    0x760: v760 = ADD v75e(0x20), v74e
    0x761: v761 = SHA3 v760, v75c(0x13)
    0x763: v763(0x76a) = CONST 
    0x766: JUMP v763(0x76a), v376, v761, v718(0x767)

    Begin block 0x76aB0x717
    prev=[0x717], succ=[0x4750x76aB0x717]
    =================================
    0x76bS0x717: v76bV717(0x77c) = CONST 
    0x76fS0x717: v76fV717(0x777) = CONST 
    0x773S0x717: v773V717(0x475) = CONST 
    0x776S0x717: JUMP v773V717(0x475)

    Begin block 0x4750x76aB0x717
    prev=[0x76aB0x717], succ=[0x777B0x717]
    =================================
    0x4760x76aS0x717: v76a476V717(0x0) = CONST 
    0x4790x76aS0x717: v76a479V717(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0x48e0x76aS0x717: v76a48eV717 = AND v76a479V717(0xffffffffffffffffffffffffffffffffffffffff), v376
    0x48f0x76aS0x717: v76a48fV717(0x0) = CONST 
    0x4910x76aS0x717: v76a491V717 = SHL v76a48fV717(0x0), v76a48eV717
    0x4970x76aS0x717: JUMP v76fV717(0x777)

    Begin block 0x777B0x717
    prev=[0x4750x76aB0x717], succ=[0x780B0x717]
    =================================
    0x778S0x717: v778V717(0x780) = CONST 
    0x77bS0x717: JUMP v778V717(0x780)

    Begin block 0x780B0x717
    prev=[0x777B0x717], succ=[0x77cB0x717]
    =================================
    0x781S0x717: v781V717(0x0) = CONST 
    0x788S0x717: SSTORE v761, v76a491V717
    0x78cS0x717: JUMP v76bV717(0x77c)

    Begin block 0x77cB0x717
    prev=[0x780B0x717], succ=[0x767]
    =================================
    0x77fS0x717: JUMP v718(0x767)

    Begin block 0x767
    prev=[0x77cB0x717], succ=[0x386]
    =================================
    0x769: JUMP v345(0x386)

    Begin block 0x386
    prev=[0x767], succ=[]
    =================================
    0x387: STOP 

}

function fallback()() public {
    Begin block 0x8a
    prev=[], succ=[0x8b0x8a]
    =================================

    Begin block 0x8b0x8a
    prev=[0x8a], succ=[0x3880x8a]
    =================================
    0x8c0x8a: v8a8c(0x93) = CONST 
    0x8f0x8a: v8a8f(0x388) = CONST 
    0x920x8a: JUMP v8a8f(0x388)

    Begin block 0x3880x8a
    prev=[0x8b0x8a], succ=[0x498B0x3880x8a]
    =================================
    0x3890x8a: v8a389(0x0) = CONST 
    0x38b0x8a: v8a38b(0x3d9) = CONST 
    0x38e0x8a: v8a38e(0x40) = CONST 
    0x3900x8a: v8a390 = MLOAD v8a38e(0x40)
    0x3910x8a: v8a391(0x20) = CONST 
    0x3930x8a: v8a393 = ADD v8a391(0x20), v8a390
    0x3960x8a: v8a396(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = CONST 
    0x3b80x8a: MSTORE v8a393, v8a396(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x3ba0x8a: v8a3ba(0x13) = CONST 
    0x3bc0x8a: v8a3bc = ADD v8a3ba(0x13), v8a393
    0x3bf0x8a: v8a3bf(0x40) = CONST 
    0x3c10x8a: v8a3c1 = MLOAD v8a3bf(0x40)
    0x3c20x8a: v8a3c2(0x20) = CONST 
    0x3c60x8a: v8a3c6(0x33) = SUB v8a3bc, v8a3c1
    0x3c70x8a: v8a3c7(0x13) = SUB v8a3c6(0x33), v8a3c2(0x20)
    0x3c90x8a: MSTORE v8a3c1, v8a3c7(0x13)
    0x3cb0x8a: v8a3cb(0x40) = CONST 
    0x3cd0x8a: MSTORE v8a3cb(0x40), v8a3bc
    0x3cf0x8a: v8a3cf(0x13) = MLOAD v8a3c1
    0x3d10x8a: v8a3d1(0x20) = CONST 
    0x3d30x8a: v8a3d3 = ADD v8a3d1(0x20), v8a3c1
    0x3d40x8a: v8a3d4 = SHA3 v8a3d3, v8a3cf(0x13)
    0x3d50x8a: v8a3d5(0x498) = CONST 
    0x3d80x8a: JUMP v8a3d5(0x498)

    Begin block 0x498B0x3880x8a
    prev=[0x3880x8a], succ=[0x458B0x498B0x3880x8a]
    =================================
    0x499S0x3880x8a: v499V3888a(0x0) = CONST 
    0x49bS0x3880x8a: v49bV3888a(0x4ab) = CONST 
    0x49eS0x3880x8a: v49eV3888a(0x4a6) = CONST 
    0x4a2S0x3880x8a: v4a2V3888a(0x458) = CONST 
    0x4a5S0x3880x8a: JUMP v4a2V3888a(0x458)

    Begin block 0x458B0x498B0x3880x8a
    prev=[0x498B0x3880x8a], succ=[0x4a60x498B0x3880x8a]
    =================================
    0x459S0x498S0x3880x8a: v459V498V3888a(0x0) = CONST 
    0x45dS0x498S0x3880x8a: v45dV498V3888a = SLOAD v8a3d4
    0x467S0x498S0x3880x8a: JUMP v49eV3888a(0x4a6)

    Begin block 0x4a60x498B0x3880x8a
    prev=[0x458B0x498B0x3880x8a], succ=[0x4680x498B0x3880x8a]
    =================================
    0x4a70x498S0x3880x8a: v4984a7V3888a(0x468) = CONST 
    0x4aa0x498S0x3880x8a: JUMP v4984a7V3888a(0x468)

    Begin block 0x4680x498B0x3880x8a
    prev=[0x4a60x498B0x3880x8a], succ=[0x4ab0x498B0x3880x8a]
    =================================
    0x4690x498S0x3880x8a: v498469V3888a(0x0) = CONST 
    0x46c0x498S0x3880x8a: v49846cV3888a(0x0) = CONST 
    0x46e0x498S0x3880x8a: v49846eV3888a = SHR v49846cV3888a(0x0), v45dV498V3888a
    0x4740x498S0x3880x8a: JUMP v49bV3888a(0x4ab)

    Begin block 0x4ab0x498B0x3880x8a
    prev=[0x4680x498B0x3880x8a], succ=[0x3d90x8a]
    =================================
    0x4b10x498S0x3880x8a: JUMP v8a38b(0x3d9)

    Begin block 0x3d90x8a
    prev=[0x4ab0x498B0x3880x8a], succ=[0x3fb0x8a, 0x3fe0x8a]
    =================================
    0x3dc0x8a: v8a3dc(0x40) = CONST 
    0x3de0x8a: v8a3de = MLOAD v8a3dc(0x40)
    0x3df0x8a: v8a3df = CALLDATASIZE 
    0x3e00x8a: v8a3e0(0x0) = CONST 
    0x3e30x8a: CALLDATACOPY v8a3de, v8a3e0(0x0), v8a3df
    0x3e40x8a: v8a3e4(0x0) = CONST 
    0x3e70x8a: v8a3e7 = CALLDATASIZE 
    0x3ea0x8a: v8a3ea = GAS 
    0x3eb0x8a: v8a3eb = DELEGATECALL v8a3ea, v49846eV3888a, v8a3de, v8a3e7, v8a3e4(0x0), v8a3e4(0x0)
    0x3ec0x8a: v8a3ec = RETURNDATASIZE 
    0x3ee0x8a: v8a3ee(0x0) = CONST 
    0x3f10x8a: RETURNDATACOPY v8a3de, v8a3ee(0x0), v8a3ec
    0x3f30x8a: v8a3f3(0x0) = CONST 
    0x3f60x8a: v8a3f6 = EQ v8a3eb, v8a3f3(0x0)
    0x3f70x8a: v8a3f7(0x3fe) = CONST 
    0x3fa0x8a: JUMPI v8a3f7(0x3fe), v8a3f6

    Begin block 0x3fb0x8a
    prev=[0x3d90x8a], succ=[]
    =================================
    0x3fd0x8a: RETURN v8a3de, v8a3ec

    Begin block 0x3fe0x8a
    prev=[0x3d90x8a], succ=[]
    =================================
    0x4010x8a: REVERT v8a3de, v8a3ec

}

function getProxyOwner()() public {
    Begin block 0x95
    prev=[], succ=[0x9d, 0xa1]
    =================================
    0x96: v96 = CALLVALUE 
    0x98: v98 = ISZERO v96
    0x99: v99(0xa1) = CONST 
    0x9c: JUMPI v99(0xa1), v98

    Begin block 0x9d
    prev=[0x95], succ=[]
    =================================
    0x9d: v9d(0x0) = CONST 
    0xa0: REVERT v9d(0x0), v9d(0x0)

    Begin block 0xa1
    prev=[0x95], succ=[0x402B0xa1]
    =================================
    0xa3: va3(0xaa) = CONST 
    0xa6: va6(0x402) = CONST 
    0xa9: JUMP va6(0x402)

    Begin block 0x402B0xa1
    prev=[0xa1], succ=[0x498B0x402B0xa1]
    =================================
    0x403S0xa1: v403Va1(0x0) = CONST 
    0x405S0xa1: v405Va1(0x453) = CONST 
    0x408S0xa1: v408Va1(0x40) = CONST 
    0x40aS0xa1: v40aVa1 = MLOAD v408Va1(0x40)
    0x40bS0xa1: v40bVa1(0x20) = CONST 
    0x40dS0xa1: v40dVa1 = ADD v40bVa1(0x20), v40aVa1
    0x410S0xa1: v410Va1(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = CONST 
    0x432S0xa1: MSTORE v40dVa1, v410Va1(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x434S0xa1: v434Va1(0xa) = CONST 
    0x436S0xa1: v436Va1 = ADD v434Va1(0xa), v40dVa1
    0x439S0xa1: v439Va1(0x40) = CONST 
    0x43bS0xa1: v43bVa1 = MLOAD v439Va1(0x40)
    0x43cS0xa1: v43cVa1(0x20) = CONST 
    0x440S0xa1: v440Va1(0x2a) = SUB v436Va1, v43bVa1
    0x441S0xa1: v441Va1(0xa) = SUB v440Va1(0x2a), v43cVa1(0x20)
    0x443S0xa1: MSTORE v43bVa1, v441Va1(0xa)
    0x445S0xa1: v445Va1(0x40) = CONST 
    0x447S0xa1: MSTORE v445Va1(0x40), v436Va1
    0x449S0xa1: v449Va1(0xa) = MLOAD v43bVa1
    0x44bS0xa1: v44bVa1(0x20) = CONST 
    0x44dS0xa1: v44dVa1 = ADD v44bVa1(0x20), v43bVa1
    0x44eS0xa1: v44eVa1 = SHA3 v44dVa1, v449Va1(0xa)
    0x44fS0xa1: v44fVa1(0x498) = CONST 
    0x452S0xa1: JUMP v44fVa1(0x498)

    Begin block 0x498B0x402B0xa1
    prev=[0x402B0xa1], succ=[0x458B0x498B0x402B0xa1]
    =================================
    0x499S0x402B0xa1: v499V402Ba1(0x0) = CONST 
    0x49bS0x402B0xa1: v49bV402Ba1(0x4ab) = CONST 
    0x49eS0x402B0xa1: v49eV402Ba1(0x4a6) = CONST 
    0x4a2S0x402B0xa1: v4a2V402Ba1(0x458) = CONST 
    0x4a5S0x402B0xa1: JUMP v4a2V402Ba1(0x458)

    Begin block 0x458B0x498B0x402B0xa1
    prev=[0x498B0x402B0xa1], succ=[0x4a60x498B0x402B0xa1]
    =================================
    0x459S0x498S0x402B0xa1: v459V498V402Ba1(0x0) = CONST 
    0x45dS0x498S0x402B0xa1: v45dV498V402Ba1 = SLOAD v44eVa1
    0x467S0x498S0x402B0xa1: JUMP v49eV402Ba1(0x4a6)

    Begin block 0x4a60x498B0x402B0xa1
    prev=[0x458B0x498B0x402B0xa1], succ=[0x4680x498B0x402B0xa1]
    =================================
    0x4a70x498S0x402B0xa1: v4984a7V402Ba1(0x468) = CONST 
    0x4aa0x498S0x402B0xa1: JUMP v4984a7V402Ba1(0x468)

    Begin block 0x4680x498B0x402B0xa1
    prev=[0x4a60x498B0x402B0xa1], succ=[0x4ab0x498B0x402B0xa1]
    =================================
    0x4690x498S0x402B0xa1: v498469V402Ba1(0x0) = CONST 
    0x46c0x498S0x402B0xa1: v49846cV402Ba1(0x0) = CONST 
    0x46e0x498S0x402B0xa1: v49846eV402Ba1 = SHR v49846cV402Ba1(0x0), v45dV498V402Ba1
    0x4740x498S0x402B0xa1: JUMP v49bV402Ba1(0x4ab)

    Begin block 0x4ab0x498B0x402B0xa1
    prev=[0x4680x498B0x402B0xa1], succ=[0x453B0xa1]
    =================================
    0x4b10x498S0x402B0xa1: JUMP v405Va1(0x453)

    Begin block 0x453B0xa1
    prev=[0x4ab0x498B0x402B0xa1], succ=[0xaa]
    =================================
    0x457S0xa1: JUMP va3(0xaa)

    Begin block 0xaa
    prev=[0x453B0xa1], succ=[]
    =================================
    0xab: vab(0x40) = CONST 
    0xad: vad = MLOAD vab(0x40)
    0xb0: vb0(0xffffffffffffffffffffffffffffffffffffffff) = CONST 
    0xc5: vc5 = AND vb0(0xffffffffffffffffffffffffffffffffffffffff), v49846eV402Ba1
    0xc7: MSTORE vad, vc5
    0xc8: vc8(0x20) = CONST 
    0xca: vca = ADD vc8(0x20), vad
    0xce: vce(0x40) = CONST 
    0xd0: vd0 = MLOAD vce(0x40)
    0xd3: vd3(0x20) = SUB vca, vd0
    0xd5: RETURN vd0, vd3(0x20)

}

function storageRead(bytes32)() public {
    Begin block 0xd6
    prev=[], succ=[0xde, 0xe2]
    =================================
    0xd7: vd7 = CALLVALUE 
    0xd9: vd9 = ISZERO vd7
    0xda: vda(0xe2) = CONST 
    0xdd: JUMPI vda(0xe2), vd9

    Begin block 0xde
    prev=[0xd6], succ=[]
    =================================
    0xde: vde(0x0) = CONST 
    0xe1: REVERT vde(0x0), vde(0x0)

    Begin block 0xe2
    prev=[0xd6], succ=[0xf5, 0xf9]
    =================================
    0xe4: ve4(0x10f) = CONST 
    0xe7: ve7(0x4) = CONST 
    0xea: vea = CALLDATASIZE 
    0xeb: veb = SUB vea, ve7(0x4)
    0xec: vec(0x20) = CONST 
    0xef: vef = LT veb, vec(0x20)
    0xf0: vf0 = ISZERO vef
    0xf1: vf1(0xf9) = CONST 
    0xf4: JUMPI vf1(0xf9), vf0

    Begin block 0xf5
    prev=[0xe2], succ=[]
    =================================
    0xf5: vf5(0x0) = CONST 
    0xf8: REVERT vf5(0x0), vf5(0x0)

    Begin block 0xf9
    prev=[0xe2], succ=[0x4580xd6]
    =================================
    0xfb: vfb = ADD ve7(0x4), veb
    0xff: vff = CALLDATALOAD ve7(0x4)
    0x101: v101(0x20) = CONST 
    0x103: v103(0x24) = ADD v101(0x20), ve7(0x4)
    0x10b: v10b(0x458) = CONST 
    0x10e: JUMP v10b(0x458)

    Begin block 0x4580xd6
    prev=[0xf9], succ=[0x10f]
    =================================
    0x4590xd6: vd6459(0x0) = CONST 
    0x45d0xd6: vd645d = SLOAD vff
    0x4670xd6: JUMP ve4(0x10f)

    Begin block 0x10f
    prev=[0x4580xd6], succ=[]
    =================================
    0x110: v110(0x40) = CONST 
    0x112: v112 = MLOAD v110(0x40)
    0x116: MSTORE v112, vd645d
    0x117: v117(0x20) = CONST 
    0x119: v119 = ADD v117(0x20), v112
    0x11d: v11d(0x40) = CONST 
    0x11f: v11f = MLOAD v11d(0x40)
    0x122: v122(0x20) = SUB v119, v11f
    0x124: RETURN v11f, v122(0x20)

}

