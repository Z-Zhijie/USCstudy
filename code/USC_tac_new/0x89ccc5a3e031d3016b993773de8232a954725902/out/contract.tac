function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x10ab]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x1068: v1068(0x10ab) = CONST 
    0x1069: JUMPI v1068(0x10ab), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x8c, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x39509351) = CONST 
    0x26: v26 = GT v21(0x39509351), v1f
    0x27: v27(0x8c) = CONST 
    0x2a: JUMPI v27(0x8c), v26

    Begin block 0x8c
    prev=[0x1a], succ=[0x1084, 0x98]
    =================================
    0x8e: v8e(0x6fdde03) = CONST 
    0x93: v93 = EQ v8e(0x6fdde03), v1f
    0x1078: v1078(0x1084) = CONST 
    0x1079: JUMPI v1078(0x1084), v93

    Begin block 0x1084
    prev=[0x8c], succ=[]
    =================================
    0x1085: v1085(0xd4) = CONST 
    0x1086: CALLPRIVATE v1085(0xd4)

    Begin block 0x98
    prev=[0x8c], succ=[0x1087, 0xa3]
    =================================
    0x99: v99(0x95ea7b3) = CONST 
    0x9e: v9e = EQ v99(0x95ea7b3), v1f
    0x107a: v107a(0x1087) = CONST 
    0x107b: JUMPI v107a(0x1087), v9e

    Begin block 0x1087
    prev=[0x98], succ=[]
    =================================
    0x1088: v1088(0x151) = CONST 
    0x1089: CALLPRIVATE v1088(0x151)

    Begin block 0xa3
    prev=[0x98], succ=[0x108a, 0xae]
    =================================
    0xa4: va4(0x158ef93e) = CONST 
    0xa9: va9 = EQ va4(0x158ef93e), v1f
    0x107c: v107c(0x108a) = CONST 
    0x107d: JUMPI v107c(0x108a), va9

    Begin block 0x108a
    prev=[0xa3], succ=[]
    =================================
    0x108b: v108b(0x191) = CONST 
    0x108c: CALLPRIVATE v108b(0x191)

    Begin block 0xae
    prev=[0xa3], succ=[0x108d, 0xb9]
    =================================
    0xaf: vaf(0x18160ddd) = CONST 
    0xb4: vb4 = EQ vaf(0x18160ddd), v1f
    0x107e: v107e(0x108d) = CONST 
    0x107f: JUMPI v107e(0x108d), vb4

    Begin block 0x108d
    prev=[0xae], succ=[]
    =================================
    0x108e: v108e(0x199) = CONST 
    0x108f: CALLPRIVATE v108e(0x199)

    Begin block 0xb9
    prev=[0xae], succ=[0x1090, 0xc4]
    =================================
    0xba: vba(0x23b872dd) = CONST 
    0xbf: vbf = EQ vba(0x23b872dd), v1f
    0x1080: v1080(0x1090) = CONST 
    0x1081: JUMPI v1080(0x1090), vbf

    Begin block 0x1090
    prev=[0xb9], succ=[]
    =================================
    0x1091: v1091(0x1b3) = CONST 
    0x1092: CALLPRIVATE v1091(0x1b3)

    Begin block 0xc4
    prev=[0xb9], succ=[0x1093, 0xcf]
    =================================
    0xc5: vc5(0x313ce567) = CONST 
    0xca: vca = EQ vc5(0x313ce567), v1f
    0x1082: v1082(0x1093) = CONST 
    0x1083: JUMPI v1082(0x1093), vca

    Begin block 0x1093
    prev=[0xc4], succ=[]
    =================================
    0x1094: v1094(0x1e9) = CONST 
    0x1095: CALLPRIVATE v1094(0x1e9)

    Begin block 0xcf
    prev=[0xc4], succ=[]
    =================================
    0xd0: vd0(0x0) = CONST 
    0xd3: REVERT vd0(0x0), vd0(0x0)

    Begin block 0x2b
    prev=[0x1a], succ=[0x66, 0x36]
    =================================
    0x2c: v2c(0x9c020061) = CONST 
    0x31: v31 = GT v2c(0x9c020061), v1f
    0x32: v32(0x66) = CONST 
    0x35: JUMPI v32(0x66), v31

    Begin block 0x66
    prev=[0x2b], succ=[0x1096, 0x72]
    =================================
    0x68: v68(0x39509351) = CONST 
    0x6d: v6d = EQ v68(0x39509351), v1f
    0x1072: v1072(0x1096) = CONST 
    0x1073: JUMPI v1072(0x1096), v6d

    Begin block 0x1096
    prev=[0x66], succ=[]
    =================================
    0x1097: v1097(0x207) = CONST 
    0x1098: CALLPRIVATE v1097(0x207)

    Begin block 0x72
    prev=[0x66], succ=[0x1099, 0x7d]
    =================================
    0x73: v73(0x70a08231) = CONST 
    0x78: v78 = EQ v73(0x70a08231), v1f
    0x1074: v1074(0x1099) = CONST 
    0x1075: JUMPI v1074(0x1099), v78

    Begin block 0x1099
    prev=[0x72], succ=[]
    =================================
    0x109a: v109a(0x233) = CONST 
    0x109b: CALLPRIVATE v109a(0x233)

    Begin block 0x7d
    prev=[0x72], succ=[0x88, 0x109c]
    =================================
    0x7e: v7e(0x95d89b41) = CONST 
    0x83: v83 = EQ v7e(0x95d89b41), v1f
    0x1076: v1076(0x109c) = CONST 
    0x1077: JUMPI v1076(0x109c), v83

    Begin block 0x88
    prev=[0x7d], succ=[0xca8]
    =================================
    0x88: v88(0xca8) = CONST 
    0x8b: JUMP v88(0xca8)

    Begin block 0xca8
    prev=[0x88], succ=[]
    =================================
    0xca9: vca9(0x0) = CONST 
    0xcac: REVERT vca9(0x0), vca9(0x0)

    Begin block 0x109c
    prev=[0x7d], succ=[]
    =================================
    0x109d: v109d(0x259) = CONST 
    0x109e: CALLPRIVATE v109d(0x259)

    Begin block 0x36
    prev=[0x2b], succ=[0x109f, 0x41]
    =================================
    0x37: v37(0x9c020061) = CONST 
    0x3c: v3c = EQ v37(0x9c020061), v1f
    0x106a: v106a(0x109f) = CONST 
    0x106b: JUMPI v106a(0x109f), v3c

    Begin block 0x109f
    prev=[0x36], succ=[]
    =================================
    0x10a0: v10a0(0x261) = CONST 
    0x10a1: CALLPRIVATE v10a0(0x261)

    Begin block 0x41
    prev=[0x36], succ=[0x10a2, 0x4c]
    =================================
    0x42: v42(0xa457c2d7) = CONST 
    0x47: v47 = EQ v42(0xa457c2d7), v1f
    0x106c: v106c(0x10a2) = CONST 
    0x106d: JUMPI v106c(0x10a2), v47

    Begin block 0x10a2
    prev=[0x41], succ=[]
    =================================
    0x10a3: v10a3(0x289) = CONST 
    0x10a4: CALLPRIVATE v10a3(0x289)

    Begin block 0x4c
    prev=[0x41], succ=[0x10a5, 0x57]
    =================================
    0x4d: v4d(0xa9059cbb) = CONST 
    0x52: v52 = EQ v4d(0xa9059cbb), v1f
    0x106e: v106e(0x10a5) = CONST 
    0x106f: JUMPI v106e(0x10a5), v52

    Begin block 0x10a5
    prev=[0x4c], succ=[]
    =================================
    0x10a6: v10a6(0x2b5) = CONST 
    0x10a7: CALLPRIVATE v10a6(0x2b5)

    Begin block 0x57
    prev=[0x4c], succ=[0x62, 0x10a8]
    =================================
    0x58: v58(0xdd62ed3e) = CONST 
    0x5d: v5d = EQ v58(0xdd62ed3e), v1f
    0x1070: v1070(0x10a8) = CONST 
    0x1071: JUMPI v1070(0x10a8), v5d

    Begin block 0x62
    prev=[0x57], succ=[0xc84]
    =================================
    0x62: v62(0xc84) = CONST 
    0x65: JUMP v62(0xc84)

    Begin block 0xc84
    prev=[0x62], succ=[]
    =================================
    0xc85: vc85(0x0) = CONST 
    0xc88: REVERT vc85(0x0), vc85(0x0)

    Begin block 0x10a8
    prev=[0x57], succ=[]
    =================================
    0x10a9: v10a9(0x2e1) = CONST 
    0x10aa: CALLPRIVATE v10a9(0x2e1)

    Begin block 0x10ab
    prev=[0x10], succ=[]
    =================================
    0x10ac: v10ac(0xc60) = CONST 
    0x10ad: CALLPRIVATE v10ac(0xc60)

}

function approve(address,uint256)() public {
    Begin block 0x151
    prev=[], succ=[0x163, 0x167]
    =================================
    0x152: v152(0xccc) = CONST 
    0x155: v155(0x4) = CONST 
    0x158: v158 = CALLDATASIZE 
    0x159: v159 = SUB v158, v155(0x4)
    0x15a: v15a(0x40) = CONST 
    0x15d: v15d = LT v159, v15a(0x40)
    0x15e: v15e = ISZERO v15d
    0x15f: v15f(0x167) = CONST 
    0x162: JUMPI v15f(0x167), v15e

    Begin block 0x163
    prev=[0x151], succ=[]
    =================================
    0x163: v163(0x0) = CONST 
    0x166: REVERT v163(0x0), v163(0x0)

    Begin block 0x167
    prev=[0x151], succ=[0x3a5]
    =================================
    0x169: v169(0x1) = CONST 
    0x16b: v16b(0x1) = CONST 
    0x16d: v16d(0xa0) = CONST 
    0x16f: v16f(0x10000000000000000000000000000000000000000) = SHL v16d(0xa0), v16b(0x1)
    0x170: v170(0xffffffffffffffffffffffffffffffffffffffff) = SUB v16f(0x10000000000000000000000000000000000000000), v169(0x1)
    0x172: v172 = CALLDATALOAD v155(0x4)
    0x173: v173 = AND v172, v170(0xffffffffffffffffffffffffffffffffffffffff)
    0x175: v175(0x20) = CONST 
    0x177: v177(0x24) = ADD v175(0x20), v155(0x4)
    0x178: v178 = CALLDATALOAD v177(0x24)
    0x179: v179(0x3a5) = CONST 
    0x17c: JUMP v179(0x3a5)

    Begin block 0x3a5
    prev=[0x167], succ=[0xee3]
    =================================
    0x3a6: v3a6(0x0) = CONST 
    0x3a8: v3a8(0xee3) = CONST 
    0x3ab: v3ab = CALLER 
    0x3ae: v3ae(0x676) = CONST 
    0x3b1: CALLPRIVATE v3ae(0x676), v178, v173, v3ab, v3a8(0xee3)

    Begin block 0xee3
    prev=[0x3a5], succ=[0xccc]
    =================================
    0xee5: vee5(0x1) = CONST 
    0xeeb: JUMP v152(0xccc)

    Begin block 0xccc
    prev=[0xee3], succ=[]
    =================================
    0xccd: vccd(0x40) = CONST 
    0xcd0: vcd0 = MLOAD vccd(0x40)
    0xcd2: vcd2 = ISZERO vee5(0x1)
    0xcd3: vcd3 = ISZERO vcd2
    0xcd5: MSTORE vcd0, vcd3
    0xcd6: vcd6 = MLOAD vccd(0x40)
    0xcda: vcda(0x0) = SUB vcd0, vcd6
    0xcdb: vcdb(0x20) = CONST 
    0xcdd: vcdd(0x20) = ADD vcdb(0x20), vcda(0x0)
    0xcdf: RETURN vcd6, vcdd(0x20)

}

function initialized()() public {
    Begin block 0x191
    prev=[], succ=[0x3bb]
    =================================
    0x192: v192(0xcff) = CONST 
    0x195: v195(0x3bb) = CONST 
    0x198: JUMP v195(0x3bb)

    Begin block 0x3bb
    prev=[0x191], succ=[0xcff]
    =================================
    0x3bc: v3bc(0x5) = CONST 
    0x3be: v3be = SLOAD v3bc(0x5)
    0x3bf: v3bf(0x100) = CONST 
    0x3c3: v3c3 = DIV v3be, v3bf(0x100)
    0x3c4: v3c4(0xff) = CONST 
    0x3c6: v3c6 = AND v3c4(0xff), v3c3
    0x3c8: JUMP v192(0xcff)

    Begin block 0xcff
    prev=[0x3bb], succ=[]
    =================================
    0xd00: vd00(0x40) = CONST 
    0xd03: vd03 = MLOAD vd00(0x40)
    0xd05: vd05 = ISZERO v3c6
    0xd06: vd06 = ISZERO vd05
    0xd08: MSTORE vd03, vd06
    0xd09: vd09 = MLOAD vd00(0x40)
    0xd0d: vd0d(0x0) = SUB vd03, vd09
    0xd0e: vd0e(0x20) = CONST 
    0xd10: vd10(0x20) = ADD vd0e(0x20), vd0d(0x0)
    0xd12: RETURN vd09, vd10(0x20)

}

function totalSupply()() public {
    Begin block 0x199
    prev=[], succ=[0x3c9]
    =================================
    0x19a: v19a(0xd32) = CONST 
    0x19d: v19d(0x3c9) = CONST 
    0x1a0: JUMP v19d(0x3c9)

    Begin block 0x3c9
    prev=[0x199], succ=[0xd32]
    =================================
    0x3ca: v3ca(0x2) = CONST 
    0x3cc: v3cc = SLOAD v3ca(0x2)
    0x3ce: JUMP v19a(0xd32)

    Begin block 0xd32
    prev=[0x3c9], succ=[]
    =================================
    0xd33: vd33(0x40) = CONST 
    0xd36: vd36 = MLOAD vd33(0x40)
    0xd39: MSTORE vd36, v3cc
    0xd3a: vd3a = MLOAD vd33(0x40)
    0xd3e: vd3e(0x0) = SUB vd36, vd3a
    0xd3f: vd3f(0x20) = CONST 
    0xd41: vd41(0x20) = ADD vd3f(0x20), vd3e(0x0)
    0xd43: RETURN vd3a, vd41(0x20)

}

function transferFrom(address,address,uint256)() public {
    Begin block 0x1b3
    prev=[], succ=[0x1c5, 0x1c9]
    =================================
    0x1b4: v1b4(0xd63) = CONST 
    0x1b7: v1b7(0x4) = CONST 
    0x1ba: v1ba = CALLDATASIZE 
    0x1bb: v1bb = SUB v1ba, v1b7(0x4)
    0x1bc: v1bc(0x60) = CONST 
    0x1bf: v1bf = LT v1bb, v1bc(0x60)
    0x1c0: v1c0 = ISZERO v1bf
    0x1c1: v1c1(0x1c9) = CONST 
    0x1c4: JUMPI v1c1(0x1c9), v1c0

    Begin block 0x1c5
    prev=[0x1b3], succ=[]
    =================================
    0x1c5: v1c5(0x0) = CONST 
    0x1c8: REVERT v1c5(0x0), v1c5(0x0)

    Begin block 0x1c9
    prev=[0x1b3], succ=[0x3cf]
    =================================
    0x1cb: v1cb(0x1) = CONST 
    0x1cd: v1cd(0x1) = CONST 
    0x1cf: v1cf(0xa0) = CONST 
    0x1d1: v1d1(0x10000000000000000000000000000000000000000) = SHL v1cf(0xa0), v1cd(0x1)
    0x1d2: v1d2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1d1(0x10000000000000000000000000000000000000000), v1cb(0x1)
    0x1d4: v1d4 = CALLDATALOAD v1b7(0x4)
    0x1d6: v1d6 = AND v1d2(0xffffffffffffffffffffffffffffffffffffffff), v1d4
    0x1d8: v1d8(0x20) = CONST 
    0x1db: v1db(0x24) = ADD v1b7(0x4), v1d8(0x20)
    0x1dc: v1dc = CALLDATALOAD v1db(0x24)
    0x1df: v1df = AND v1d2(0xffffffffffffffffffffffffffffffffffffffff), v1dc
    0x1e1: v1e1(0x40) = CONST 
    0x1e3: v1e3(0x44) = ADD v1e1(0x40), v1b7(0x4)
    0x1e4: v1e4 = CALLDATALOAD v1e3(0x44)
    0x1e5: v1e5(0x3cf) = CONST 
    0x1e8: JUMP v1e5(0x3cf)

    Begin block 0x3cf
    prev=[0x1c9], succ=[0x3dc]
    =================================
    0x3d0: v3d0(0x0) = CONST 
    0x3d2: v3d2(0x3dc) = CONST 
    0x3d8: v3d8(0x762) = CONST 
    0x3db: CALLPRIVATE v3d8(0x762), v1e4, v1df, v1d6, v3d2(0x3dc)

    Begin block 0x3dc
    prev=[0x3cf], succ=[0xf0b]
    =================================
    0x3dd: v3dd(0x42e) = CONST 
    0x3e1: v3e1 = CALLER 
    0x3e2: v3e2(0xf0b) = CONST 
    0x3e6: v3e6(0x40) = CONST 
    0x3e8: v3e8 = MLOAD v3e6(0x40)
    0x3ea: v3ea(0x60) = CONST 
    0x3ec: v3ec = ADD v3ea(0x60), v3e8
    0x3ed: v3ed(0x40) = CONST 
    0x3ef: MSTORE v3ed(0x40), v3ec
    0x3f1: v3f1(0x28) = CONST 
    0x3f4: MSTORE v3e8, v3f1(0x28)
    0x3f5: v3f5(0x20) = CONST 
    0x3f7: v3f7 = ADD v3f5(0x20), v3e8
    0x3f8: v3f8(0xb8d) = CONST 
    0x3fb: v3fb(0x28) = CONST 
    0x3fe: CODECOPY v3f7, v3f8(0xb8d), v3fb(0x28)
    0x3ff: v3ff(0x1) = CONST 
    0x401: v401(0x1) = CONST 
    0x403: v403(0xa0) = CONST 
    0x405: v405(0x10000000000000000000000000000000000000000) = SHL v403(0xa0), v401(0x1)
    0x406: v406(0xffffffffffffffffffffffffffffffffffffffff) = SUB v405(0x10000000000000000000000000000000000000000), v3ff(0x1)
    0x408: v408 = AND v1d6, v406(0xffffffffffffffffffffffffffffffffffffffff)
    0x409: v409(0x0) = CONST 
    0x40d: MSTORE v409(0x0), v408
    0x40e: v40e(0x1) = CONST 
    0x410: v410(0x20) = CONST 
    0x414: MSTORE v410(0x20), v40e(0x1)
    0x415: v415(0x40) = CONST 
    0x419: v419 = SHA3 v409(0x0), v415(0x40)
    0x41a: v41a = CALLER 
    0x41c: MSTORE v409(0x0), v41a
    0x41f: MSTORE v410(0x20), v419
    0x421: v421 = SHA3 v409(0x0), v415(0x40)
    0x422: v422 = SLOAD v421
    0x425: v425(0x8b2) = CONST 
    0x428: v428_0 = CALLPRIVATE v425(0x8b2), v3e8, v1e4, v422, v3e2(0xf0b)

    Begin block 0xf0b
    prev=[0x3dc], succ=[0x42e]
    =================================
    0xf0c: vf0c(0x676) = CONST 
    0xf0f: CALLPRIVATE vf0c(0x676), v428_0, v3e1, v1d6, v3dd(0x42e)

    Begin block 0x42e
    prev=[0xf0b], succ=[0xd63]
    =================================
    0x430: v430(0x1) = CONST 
    0x437: JUMP v1b4(0xd63)

    Begin block 0xd63
    prev=[0x42e], succ=[]
    =================================
    0xd64: vd64(0x40) = CONST 
    0xd67: vd67 = MLOAD vd64(0x40)
    0xd69: vd69 = ISZERO v430(0x1)
    0xd6a: vd6a = ISZERO vd69
    0xd6c: MSTORE vd67, vd6a
    0xd6d: vd6d = MLOAD vd64(0x40)
    0xd71: vd71(0x0) = SUB vd67, vd6d
    0xd72: vd72(0x20) = CONST 
    0xd74: vd74(0x20) = ADD vd72(0x20), vd71(0x0)
    0xd76: RETURN vd6d, vd74(0x20)

}

function decimals()() public {
    Begin block 0x1e9
    prev=[], succ=[0x438]
    =================================
    0x1ea: v1ea(0x1f1) = CONST 
    0x1ed: v1ed(0x438) = CONST 
    0x1f0: JUMP v1ed(0x438)

    Begin block 0x438
    prev=[0x1e9], succ=[0x1f1]
    =================================
    0x439: v439(0x5) = CONST 
    0x43b: v43b = SLOAD v439(0x5)
    0x43c: v43c(0xff) = CONST 
    0x43e: v43e = AND v43c(0xff), v43b
    0x440: JUMP v1ea(0x1f1)

    Begin block 0x1f1
    prev=[0x438], succ=[]
    =================================
    0x1f2: v1f2(0x40) = CONST 
    0x1f5: v1f5 = MLOAD v1f2(0x40)
    0x1f6: v1f6(0xff) = CONST 
    0x1fa: v1fa = AND v43e, v1f6(0xff)
    0x1fc: MSTORE v1f5, v1fa
    0x1fd: v1fd = MLOAD v1f2(0x40)
    0x201: v201(0x0) = SUB v1f5, v1fd
    0x202: v202(0x20) = CONST 
    0x204: v204(0x20) = ADD v202(0x20), v201(0x0)
    0x206: RETURN v1fd, v204(0x20)

}

function increaseAllowance(address,uint256)() public {
    Begin block 0x207
    prev=[], succ=[0x219, 0x21d]
    =================================
    0x208: v208(0xd96) = CONST 
    0x20b: v20b(0x4) = CONST 
    0x20e: v20e = CALLDATASIZE 
    0x20f: v20f = SUB v20e, v20b(0x4)
    0x210: v210(0x40) = CONST 
    0x213: v213 = LT v20f, v210(0x40)
    0x214: v214 = ISZERO v213
    0x215: v215(0x21d) = CONST 
    0x218: JUMPI v215(0x21d), v214

    Begin block 0x219
    prev=[0x207], succ=[]
    =================================
    0x219: v219(0x0) = CONST 
    0x21c: REVERT v219(0x0), v219(0x0)

    Begin block 0x21d
    prev=[0x207], succ=[0x441]
    =================================
    0x21f: v21f(0x1) = CONST 
    0x221: v221(0x1) = CONST 
    0x223: v223(0xa0) = CONST 
    0x225: v225(0x10000000000000000000000000000000000000000) = SHL v223(0xa0), v221(0x1)
    0x226: v226(0xffffffffffffffffffffffffffffffffffffffff) = SUB v225(0x10000000000000000000000000000000000000000), v21f(0x1)
    0x228: v228 = CALLDATALOAD v20b(0x4)
    0x229: v229 = AND v228, v226(0xffffffffffffffffffffffffffffffffffffffff)
    0x22b: v22b(0x20) = CONST 
    0x22d: v22d(0x24) = ADD v22b(0x20), v20b(0x4)
    0x22e: v22e = CALLDATALOAD v22d(0x24)
    0x22f: v22f(0x441) = CONST 
    0x232: JUMP v22f(0x441)

    Begin block 0x441
    prev=[0x21d], succ=[0x949B0x441]
    =================================
    0x442: v442 = CALLER 
    0x443: v443(0x0) = CONST 
    0x447: MSTORE v443(0x0), v442
    0x448: v448(0x1) = CONST 
    0x44a: v44a(0x20) = CONST 
    0x44e: MSTORE v44a(0x20), v448(0x1)
    0x44f: v44f(0x40) = CONST 
    0x453: v453 = SHA3 v443(0x0), v44f(0x40)
    0x454: v454(0x1) = CONST 
    0x456: v456(0x1) = CONST 
    0x458: v458(0xa0) = CONST 
    0x45a: v45a(0x10000000000000000000000000000000000000000) = SHL v458(0xa0), v456(0x1)
    0x45b: v45b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v45a(0x10000000000000000000000000000000000000000), v454(0x1)
    0x45d: v45d = AND v229, v45b(0xffffffffffffffffffffffffffffffffffffffff)
    0x45f: MSTORE v443(0x0), v45d
    0x462: MSTORE v44a(0x20), v453
    0x464: v464 = SHA3 v443(0x0), v44f(0x40)
    0x465: v465 = SLOAD v464
    0x468: v468(0xf2f) = CONST 
    0x46e: v46e(0xf57) = CONST 
    0x473: v473(0x949) = CONST 
    0x476: JUMP v473(0x949)

    Begin block 0x949B0x441
    prev=[0x441], succ=[0x957B0x441, 0x9a3B0x441]
    =================================
    0x94aS0x441: v94aV441(0x0) = CONST 
    0x94eS0x441: v94eV441 = ADD v22e, v465
    0x951S0x441: v951V441 = LT v94eV441, v465
    0x952S0x441: v952V441 = ISZERO v951V441
    0x953S0x441: v953V441(0x9a3) = CONST 
    0x956S0x441: JUMPI v953V441(0x9a3), v952V441

    Begin block 0x957B0x441
    prev=[0x949B0x441], succ=[]
    =================================
    0x957S0x441: v957V441(0x40) = CONST 
    0x95aS0x441: v95aV441 = MLOAD v957V441(0x40)
    0x95bS0x441: v95bV441(0x461bcd) = CONST 
    0x95fS0x441: v95fV441(0xe5) = CONST 
    0x961S0x441: v961V441(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v95fV441(0xe5), v95bV441(0x461bcd)
    0x963S0x441: MSTORE v95aV441, v961V441(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x964S0x441: v964V441(0x20) = CONST 
    0x966S0x441: v966V441(0x4) = CONST 
    0x969S0x441: v969V441 = ADD v95aV441, v966V441(0x4)
    0x96aS0x441: MSTORE v969V441, v964V441(0x20)
    0x96bS0x441: v96bV441(0x1b) = CONST 
    0x96dS0x441: v96dV441(0x24) = CONST 
    0x970S0x441: v970V441 = ADD v95aV441, v96dV441(0x24)
    0x971S0x441: MSTORE v970V441, v96bV441(0x1b)
    0x972S0x441: v972V441(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x993S0x441: v993V441(0x44) = CONST 
    0x996S0x441: v996V441 = ADD v95aV441, v993V441(0x44)
    0x997S0x441: MSTORE v996V441, v972V441(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x999S0x441: v999V441 = MLOAD v957V441(0x40)
    0x99dS0x441: v99dV441(0x0) = SUB v95aV441, v999V441
    0x99eS0x441: v99eV441(0x64) = CONST 
    0x9a0S0x441: v9a0V441(0x64) = ADD v99eV441(0x64), v99dV441(0x0)
    0x9a2S0x441: REVERT v999V441, v9a0V441(0x64)

    Begin block 0x9a3B0x441
    prev=[0x949B0x441], succ=[0xf57]
    =================================
    0x9a9S0x441: JUMP v46e(0xf57)

    Begin block 0xf57
    prev=[0x9a3B0x441], succ=[0xf2f]
    =================================
    0xf58: vf58(0x676) = CONST 
    0xf5b: CALLPRIVATE vf58(0x676), v94eV441, v229, v442, v468(0xf2f)

    Begin block 0xf2f
    prev=[0xf57], succ=[0xd96]
    =================================
    0xf31: vf31(0x1) = CONST 
    0xf37: JUMP v208(0xd96)

    Begin block 0xd96
    prev=[0xf2f], succ=[]
    =================================
    0xd97: vd97(0x40) = CONST 
    0xd9a: vd9a = MLOAD vd97(0x40)
    0xd9c: vd9c = ISZERO vf31(0x1)
    0xd9d: vd9d = ISZERO vd9c
    0xd9f: MSTORE vd9a, vd9d
    0xda0: vda0 = MLOAD vd97(0x40)
    0xda4: vda4(0x0) = SUB vd9a, vda0
    0xda5: vda5(0x20) = CONST 
    0xda7: vda7(0x20) = ADD vda5(0x20), vda4(0x0)
    0xda9: RETURN vda0, vda7(0x20)

}

function balanceOf(address)() public {
    Begin block 0x233
    prev=[], succ=[0x245, 0x249]
    =================================
    0x234: v234(0xdc9) = CONST 
    0x237: v237(0x4) = CONST 
    0x23a: v23a = CALLDATASIZE 
    0x23b: v23b = SUB v23a, v237(0x4)
    0x23c: v23c(0x20) = CONST 
    0x23f: v23f = LT v23b, v23c(0x20)
    0x240: v240 = ISZERO v23f
    0x241: v241(0x249) = CONST 
    0x244: JUMPI v241(0x249), v240

    Begin block 0x245
    prev=[0x233], succ=[]
    =================================
    0x245: v245(0x0) = CONST 
    0x248: REVERT v245(0x0), v245(0x0)

    Begin block 0x249
    prev=[0x233], succ=[0x477]
    =================================
    0x24b: v24b = CALLDATALOAD v237(0x4)
    0x24c: v24c(0x1) = CONST 
    0x24e: v24e(0x1) = CONST 
    0x250: v250(0xa0) = CONST 
    0x252: v252(0x10000000000000000000000000000000000000000) = SHL v250(0xa0), v24e(0x1)
    0x253: v253(0xffffffffffffffffffffffffffffffffffffffff) = SUB v252(0x10000000000000000000000000000000000000000), v24c(0x1)
    0x254: v254 = AND v253(0xffffffffffffffffffffffffffffffffffffffff), v24b
    0x255: v255(0x477) = CONST 
    0x258: JUMP v255(0x477)

    Begin block 0x477
    prev=[0x249], succ=[0xdc9]
    =================================
    0x478: v478(0x1) = CONST 
    0x47a: v47a(0x1) = CONST 
    0x47c: v47c(0xa0) = CONST 
    0x47e: v47e(0x10000000000000000000000000000000000000000) = SHL v47c(0xa0), v47a(0x1)
    0x47f: v47f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v47e(0x10000000000000000000000000000000000000000), v478(0x1)
    0x480: v480 = AND v47f(0xffffffffffffffffffffffffffffffffffffffff), v254
    0x481: v481(0x0) = CONST 
    0x485: MSTORE v481(0x0), v480
    0x486: v486(0x20) = CONST 
    0x48a: MSTORE v486(0x20), v481(0x0)
    0x48b: v48b(0x40) = CONST 
    0x48e: v48e = SHA3 v481(0x0), v48b(0x40)
    0x48f: v48f = SLOAD v48e
    0x491: JUMP v234(0xdc9)

    Begin block 0xdc9
    prev=[0x477], succ=[]
    =================================
    0xdca: vdca(0x40) = CONST 
    0xdcd: vdcd = MLOAD vdca(0x40)
    0xdd0: MSTORE vdcd, v48f
    0xdd1: vdd1 = MLOAD vdca(0x40)
    0xdd5: vdd5(0x0) = SUB vdcd, vdd1
    0xdd6: vdd6(0x20) = CONST 
    0xdd8: vdd8(0x20) = ADD vdd6(0x20), vdd5(0x0)
    0xdda: RETURN vdd1, vdd8(0x20)

}

function symbol()() public {
    Begin block 0x259
    prev=[], succ=[0xdc0x259]
    =================================
    0x25a: v25a(0xdc) = CONST 
    0x25d: v25d(0x492) = CONST 
    0x260: v260_0 = CALLPRIVATE v25d(0x492), v25a(0xdc)

    Begin block 0xdc0x259
    prev=[0x259], succ=[0xfe0x259]
    =================================
    0xdd0x259: v259dd(0x40) = CONST 
    0xe00x259: v259e0 = MLOAD v259dd(0x40)
    0xe10x259: v259e1(0x20) = CONST 
    0xe50x259: MSTORE v259e0, v259e1(0x20)
    0xe70x259: v259e7 = MLOAD v260_0
    0xea0x259: v259ea = ADD v259e0, v259e1(0x20)
    0xeb0x259: MSTORE v259ea, v259e7
    0xed0x259: v259ed = MLOAD v260_0
    0xf40x259: v259f4 = ADD v259e0, v259dd(0x40)
    0xf70x259: v259f7 = ADD v260_0, v259e1(0x20)
    0xfc0x259: v259fc(0x0) = CONST 

    Begin block 0xfe0x259
    prev=[0x1070x259, 0xdc0x259], succ=[0x1160x259, 0x1070x259]
    =================================
    0xfe0x259_0x0: vfe259_0 = PHI v259111, v259fc(0x0)
    0x1010x259: v259101 = LT vfe259_0, v259ed
    0x1020x259: v259102 = ISZERO v259101
    0x1030x259: v259103(0x116) = CONST 
    0x1060x259: JUMPI v259103(0x116), v259102

    Begin block 0x1160x259
    prev=[0xfe0x259], succ=[0x1430x259, 0x12a0x259]
    =================================
    0x11f0x259: v25911f = ADD v259ed, v259f4
    0x1210x259: v259121(0x1f) = CONST 
    0x1230x259: v259123 = AND v259121(0x1f), v259ed
    0x1250x259: v259125 = ISZERO v259123
    0x1260x259: v259126(0x143) = CONST 
    0x1290x259: JUMPI v259126(0x143), v259125

    Begin block 0x1430x259
    prev=[0x1160x259, 0x12a0x259], succ=[]
    =================================
    0x1430x259_0x1: v143259_1 = PHI v259140, v25911f
    0x1490x259: v259149(0x40) = CONST 
    0x14b0x259: v25914b = MLOAD v259149(0x40)
    0x14e0x259: v25914e = SUB v143259_1, v25914b
    0x1500x259: RETURN v25914b, v25914e

    Begin block 0x12a0x259
    prev=[0x1160x259], succ=[0x1430x259]
    =================================
    0x12c0x259: v25912c = SUB v25911f, v259123
    0x12e0x259: v25912e = MLOAD v25912c
    0x12f0x259: v25912f(0x1) = CONST 
    0x1320x259: v259132(0x20) = CONST 
    0x1340x259: v259134 = SUB v259132(0x20), v259123
    0x1350x259: v259135(0x100) = CONST 
    0x1380x259: v259138 = EXP v259135(0x100), v259134
    0x1390x259: v259139 = SUB v259138, v25912f(0x1)
    0x13a0x259: v25913a = NOT v259139
    0x13b0x259: v25913b = AND v25913a, v25912e
    0x13d0x259: MSTORE v25912c, v25913b
    0x13e0x259: v25913e(0x20) = CONST 
    0x1400x259: v259140 = ADD v25913e(0x20), v25912c

    Begin block 0x1070x259
    prev=[0xfe0x259], succ=[0xfe0x259]
    =================================
    0x1070x259_0x0: v107259_0 = PHI v259111, v259fc(0x0)
    0x1090x259: v259109 = ADD v107259_0, v259f7
    0x10a0x259: v25910a = MLOAD v259109
    0x10d0x259: v25910d = ADD v107259_0, v259f4
    0x10e0x259: MSTORE v25910d, v25910a
    0x10f0x259: v25910f(0x20) = CONST 
    0x1110x259: v259111 = ADD v25910f(0x20), v107259_0
    0x1120x259: v259112(0xfe) = CONST 
    0x1150x259: JUMP v259112(0xfe)

}

function initProxy(address)() public {
    Begin block 0x261
    prev=[], succ=[0x273, 0x277]
    =================================
    0x262: v262(0x287) = CONST 
    0x265: v265(0x4) = CONST 
    0x268: v268 = CALLDATASIZE 
    0x269: v269 = SUB v268, v265(0x4)
    0x26a: v26a(0x20) = CONST 
    0x26d: v26d = LT v269, v26a(0x20)
    0x26e: v26e = ISZERO v26d
    0x26f: v26f(0x277) = CONST 
    0x272: JUMPI v26f(0x277), v26e

    Begin block 0x273
    prev=[0x261], succ=[]
    =================================
    0x273: v273(0x0) = CONST 
    0x276: REVERT v273(0x0), v273(0x0)

    Begin block 0x277
    prev=[0x261], succ=[0x4f3]
    =================================
    0x279: v279 = CALLDATALOAD v265(0x4)
    0x27a: v27a(0x1) = CONST 
    0x27c: v27c(0x1) = CONST 
    0x27e: v27e(0xa0) = CONST 
    0x280: v280(0x10000000000000000000000000000000000000000) = SHL v27e(0xa0), v27c(0x1)
    0x281: v281(0xffffffffffffffffffffffffffffffffffffffff) = SUB v280(0x10000000000000000000000000000000000000000), v27a(0x1)
    0x282: v282 = AND v281(0xffffffffffffffffffffffffffffffffffffffff), v279
    0x283: v283(0x4f3) = CONST 
    0x286: JUMP v283(0x4f3)

    Begin block 0x4f3
    prev=[0x277], succ=[0x504, 0x550]
    =================================
    0x4f4: v4f4(0x5) = CONST 
    0x4f6: v4f6 = SLOAD v4f4(0x5)
    0x4f7: v4f7(0x100) = CONST 
    0x4fb: v4fb = DIV v4f6, v4f7(0x100)
    0x4fc: v4fc(0xff) = CONST 
    0x4fe: v4fe = AND v4fc(0xff), v4fb
    0x4ff: v4ff = ISZERO v4fe
    0x500: v500(0x550) = CONST 
    0x503: JUMPI v500(0x550), v4ff

    Begin block 0x504
    prev=[0x4f3], succ=[]
    =================================
    0x504: v504(0x40) = CONST 
    0x507: v507 = MLOAD v504(0x40)
    0x508: v508(0x461bcd) = CONST 
    0x50c: v50c(0xe5) = CONST 
    0x50e: v50e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v50c(0xe5), v508(0x461bcd)
    0x510: MSTORE v507, v50e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x511: v511(0x20) = CONST 
    0x513: v513(0x4) = CONST 
    0x516: v516 = ADD v507, v513(0x4)
    0x517: MSTORE v516, v511(0x20)
    0x518: v518(0x1f) = CONST 
    0x51a: v51a(0x24) = CONST 
    0x51d: v51d = ADD v507, v51a(0x24)
    0x51e: MSTORE v51d, v518(0x1f)
    0x51f: v51f(0x4920686164206265656e20696e697469616c697a656420616c72656164792e00) = CONST 
    0x540: v540(0x44) = CONST 
    0x543: v543 = ADD v507, v540(0x44)
    0x544: MSTORE v543, v51f(0x4920686164206265656e20696e697469616c697a656420616c72656164792e00)
    0x546: v546 = MLOAD v504(0x40)
    0x54a: v54a(0x0) = SUB v507, v546
    0x54b: v54b(0x64) = CONST 
    0x54d: v54d(0x64) = ADD v54b(0x64), v54a(0x0)
    0x54f: REVERT v546, v54d(0x64)

    Begin block 0x550
    prev=[0x4f3], succ=[0xa8eB0x550]
    =================================
    0x551: v551(0x5) = CONST 
    0x554: v554 = SLOAD v551(0x5)
    0x555: v555(0xff00) = CONST 
    0x558: v558(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v555(0xff00)
    0x559: v559 = AND v558(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v554
    0x55a: v55a(0x100) = CONST 
    0x55d: v55d = OR v55a(0x100), v559
    0x55f: SSTORE v551(0x5), v55d
    0x560: v560(0x40) = CONST 
    0x563: v563 = MLOAD v560(0x40)
    0x566: v566 = ADD v560(0x40), v563
    0x569: MSTORE v560(0x40), v566
    0x56a: v56a(0x11) = CONST 
    0x56e: MSTORE v563, v56a(0x11)
    0x56f: v56f(0x676f6c64796561726e2e66696e616e6365) = CONST 
    0x581: v581(0x78) = CONST 
    0x583: v583(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000000) = SHL v581(0x78), v56f(0x676f6c64796561726e2e66696e616e6365)
    0x584: v584(0x20) = CONST 
    0x588: v588 = ADD v563, v584(0x20)
    0x58b: MSTORE v588, v583(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000000)
    0x58c: v58c(0x597) = CONST 
    0x590: v590(0x3) = CONST 
    0x593: v593(0xa8e) = CONST 
    0x596: JUMP v593(0xa8e)

    Begin block 0xa8eB0x550
    prev=[0x550], succ=[0xacfB0x550, 0xabfB0x550]
    =================================
    0xa91S0x550: va91V550 = SLOAD v590(0x3)
    0xa92S0x550: va92V550(0x1) = CONST 
    0xa95S0x550: va95V550(0x1) = CONST 
    0xa97S0x550: va97V550 = AND va95V550(0x1), va91V550
    0xa98S0x550: va98V550 = ISZERO va97V550
    0xa99S0x550: va99V550(0x100) = CONST 
    0xa9cS0x550: va9cV550 = MUL va99V550(0x100), va98V550
    0xa9dS0x550: va9dV550 = SUB va9cV550, va92V550(0x1)
    0xa9eS0x550: va9eV550 = AND va9dV550, va91V550
    0xa9fS0x550: va9fV550(0x2) = CONST 
    0xaa2S0x550: vaa2V550 = DIV va9eV550, va9fV550(0x2)
    0xaa4S0x550: vaa4V550(0x0) = CONST 
    0xaa6S0x550: MSTORE vaa4V550(0x0), v590(0x3)
    0xaa7S0x550: vaa7V550(0x20) = CONST 
    0xaa9S0x550: vaa9V550(0x0) = CONST 
    0xaabS0x550: vaabV550 = SHA3 vaa9V550(0x0), vaa7V550(0x20)
    0xaadS0x550: vaadV550(0x1f) = CONST 
    0xaafS0x550: vaafV550 = ADD vaadV550(0x1f), vaa2V550
    0xab0S0x550: vab0V550(0x20) = CONST 
    0xab3S0x550: vab3V550 = DIV vaafV550, vab0V550(0x20)
    0xab5S0x550: vab5V550 = ADD vaabV550, vab3V550
    0xab8S0x550: vab8V550(0x1f) = CONST 
    0xabaS0x550: vabaV550(0x0) = LT vab8V550(0x1f), v56a(0x11)
    0xabbS0x550: vabbV550(0xacf) = CONST 
    0xabeS0x550: JUMPI vabbV550(0xacf), vabaV550(0x0)

    Begin block 0xacfB0x550
    prev=[0xa8eB0x550], succ=[0xafcB0x550, 0xadeB0x550]
    =================================
    0xad2S0x550: vad2V550(0x22) = ADD v56a(0x11), v56a(0x11)
    0xad3S0x550: vad3V550(0x1) = CONST 
    0xad5S0x550: vad5V550(0x23) = ADD vad3V550(0x1), vad2V550(0x22)
    0xad7S0x550: SSTORE v590(0x3), vad5V550(0x23)
    0xad9S0x550: vad9V550 = ISZERO v56a(0x11)
    0xadaS0x550: vadaV550(0xafc) = CONST 
    0xaddS0x550: JUMPI vadaV550(0xafc), vad9V550

    Begin block 0xafcB0x550
    prev=[0xacfB0x550, 0xae1B0x550, 0xabfB0x550], succ=[0xb0cB0xafcB0x550]
    =================================
    0xafc_0x1S0x550: vafc_1V550 = PHI vaabV550, vaf6V550
    0xafeS0x550: vafeV550(0x1041) = CONST 
    0xb04S0x550: vb04V550(0xb0c) = CONST 
    0xb07S0x550: JUMP vb04V550(0xb0c)

    Begin block 0xb0cB0xafcB0x550
    prev=[0xafcB0x550], succ=[0xb0dB0xafcB0x550]
    =================================

    Begin block 0xb0dB0xafcB0x550
    prev=[0xb16B0xafcB0x550, 0xb0cB0xafcB0x550], succ=[0xb16B0xafcB0x550, 0x1064B0xafcB0x550]
    =================================
    0xb0d_0x0S0xafcS0x550: vb0d_0VafcV550 = PHI vafc_1V550, vb1cVafcV550
    0xb10S0xafcS0x550: vb10VafcV550 = GT vab5V550, vb0d_0VafcV550
    0xb11S0xafcS0x550: vb11VafcV550 = ISZERO vb10VafcV550
    0xb12S0xafcS0x550: vb12VafcV550(0x1064) = CONST 
    0xb15S0xafcS0x550: JUMPI vb12VafcV550(0x1064), vb11VafcV550

    Begin block 0xb16B0xafcB0x550
    prev=[0xb0dB0xafcB0x550], succ=[0xb0dB0xafcB0x550]
    =================================
    0xb16S0xafcS0x550: vb16VafcV550(0x0) = CONST 
    0xb16_0x0S0xafcS0x550: vb16_0VafcV550 = PHI vafc_1V550, vb1cVafcV550
    0xb19S0xafcS0x550: SSTORE vb16_0VafcV550, vb16VafcV550(0x0)
    0xb1aS0xafcS0x550: vb1aVafcV550(0x1) = CONST 
    0xb1cS0xafcS0x550: vb1cVafcV550 = ADD vb1aVafcV550(0x1), vb16_0VafcV550
    0xb1dS0xafcS0x550: vb1dVafcV550(0xb0d) = CONST 
    0xb20S0xafcS0x550: JUMP vb1dVafcV550(0xb0d)

    Begin block 0x1064B0xafcB0x550
    prev=[0xb0dB0xafcB0x550], succ=[0x1041B0x550]
    =================================
    0x1067S0xafcS0x550: JUMP vafeV550(0x1041)

    Begin block 0x1041B0x550
    prev=[0x1064B0xafcB0x550], succ=[0x597]
    =================================
    0x1044S0x550: JUMP v58c(0x597)

    Begin block 0x597
    prev=[0x1041B0x550], succ=[0xa8eB0x597]
    =================================
    0x599: v599(0x40) = CONST 
    0x59c: v59c = MLOAD v599(0x40)
    0x59f: v59f = ADD v599(0x40), v59c
    0x5a2: MSTORE v599(0x40), v59f
    0x5a3: v5a3(0x5) = CONST 
    0x5a7: MSTORE v59c, v5a3(0x5)
    0x5a8: v5a8(0x16519251d1) = CONST 
    0x5ae: v5ae(0xda) = CONST 
    0x5b0: v5b0(0x5946494744000000000000000000000000000000000000000000000000000000) = SHL v5ae(0xda), v5a8(0x16519251d1)
    0x5b1: v5b1(0x20) = CONST 
    0x5b5: v5b5 = ADD v59c, v5b1(0x20)
    0x5b8: MSTORE v5b5, v5b0(0x5946494744000000000000000000000000000000000000000000000000000000)
    0x5b9: v5b9(0x5c4) = CONST 
    0x5bd: v5bd(0x4) = CONST 
    0x5c0: v5c0(0xa8e) = CONST 
    0x5c3: JUMP v5c0(0xa8e)

    Begin block 0xa8eB0x597
    prev=[0x597], succ=[0xacfB0x597, 0xabfB0x597]
    =================================
    0xa91S0x597: va91V597 = SLOAD v5bd(0x4)
    0xa92S0x597: va92V597(0x1) = CONST 
    0xa95S0x597: va95V597(0x1) = CONST 
    0xa97S0x597: va97V597 = AND va95V597(0x1), va91V597
    0xa98S0x597: va98V597 = ISZERO va97V597
    0xa99S0x597: va99V597(0x100) = CONST 
    0xa9cS0x597: va9cV597 = MUL va99V597(0x100), va98V597
    0xa9dS0x597: va9dV597 = SUB va9cV597, va92V597(0x1)
    0xa9eS0x597: va9eV597 = AND va9dV597, va91V597
    0xa9fS0x597: va9fV597(0x2) = CONST 
    0xaa2S0x597: vaa2V597 = DIV va9eV597, va9fV597(0x2)
    0xaa4S0x597: vaa4V597(0x0) = CONST 
    0xaa6S0x597: MSTORE vaa4V597(0x0), v5bd(0x4)
    0xaa7S0x597: vaa7V597(0x20) = CONST 
    0xaa9S0x597: vaa9V597(0x0) = CONST 
    0xaabS0x597: vaabV597 = SHA3 vaa9V597(0x0), vaa7V597(0x20)
    0xaadS0x597: vaadV597(0x1f) = CONST 
    0xaafS0x597: vaafV597 = ADD vaadV597(0x1f), vaa2V597
    0xab0S0x597: vab0V597(0x20) = CONST 
    0xab3S0x597: vab3V597 = DIV vaafV597, vab0V597(0x20)
    0xab5S0x597: vab5V597 = ADD vaabV597, vab3V597
    0xab8S0x597: vab8V597(0x1f) = CONST 
    0xabaS0x597: vabaV597(0x0) = LT vab8V597(0x1f), v5a3(0x5)
    0xabbS0x597: vabbV597(0xacf) = CONST 
    0xabeS0x597: JUMPI vabbV597(0xacf), vabaV597(0x0)

    Begin block 0xacfB0x597
    prev=[0xa8eB0x597], succ=[0xafcB0x597, 0xadeB0x597]
    =================================
    0xad2S0x597: vad2V597(0xa) = ADD v5a3(0x5), v5a3(0x5)
    0xad3S0x597: vad3V597(0x1) = CONST 
    0xad5S0x597: vad5V597(0xb) = ADD vad3V597(0x1), vad2V597(0xa)
    0xad7S0x597: SSTORE v5bd(0x4), vad5V597(0xb)
    0xad9S0x597: vad9V597 = ISZERO v5a3(0x5)
    0xadaS0x597: vadaV597(0xafc) = CONST 
    0xaddS0x597: JUMPI vadaV597(0xafc), vad9V597

    Begin block 0xafcB0x597
    prev=[0xacfB0x597, 0xae1B0x597, 0xabfB0x597], succ=[0xb0cB0xafcB0x597]
    =================================
    0xafc_0x1S0x597: vafc_1V597 = PHI vaabV597, vaf6V597
    0xafeS0x597: vafeV597(0x1041) = CONST 
    0xb04S0x597: vb04V597(0xb0c) = CONST 
    0xb07S0x597: JUMP vb04V597(0xb0c)

    Begin block 0xb0cB0xafcB0x597
    prev=[0xafcB0x597], succ=[0xb0dB0xafcB0x597]
    =================================

    Begin block 0xb0dB0xafcB0x597
    prev=[0xb16B0xafcB0x597, 0xb0cB0xafcB0x597], succ=[0xb16B0xafcB0x597, 0x1064B0xafcB0x597]
    =================================
    0xb0d_0x0S0xafcS0x597: vb0d_0VafcV597 = PHI vafc_1V597, vb1cVafcV597
    0xb10S0xafcS0x597: vb10VafcV597 = GT vab5V597, vb0d_0VafcV597
    0xb11S0xafcS0x597: vb11VafcV597 = ISZERO vb10VafcV597
    0xb12S0xafcS0x597: vb12VafcV597(0x1064) = CONST 
    0xb15S0xafcS0x597: JUMPI vb12VafcV597(0x1064), vb11VafcV597

    Begin block 0xb16B0xafcB0x597
    prev=[0xb0dB0xafcB0x597], succ=[0xb0dB0xafcB0x597]
    =================================
    0xb16S0xafcS0x597: vb16VafcV597(0x0) = CONST 
    0xb16_0x0S0xafcS0x597: vb16_0VafcV597 = PHI vafc_1V597, vb1cVafcV597
    0xb19S0xafcS0x597: SSTORE vb16_0VafcV597, vb16VafcV597(0x0)
    0xb1aS0xafcS0x597: vb1aVafcV597(0x1) = CONST 
    0xb1cS0xafcS0x597: vb1cVafcV597 = ADD vb1aVafcV597(0x1), vb16_0VafcV597
    0xb1dS0xafcS0x597: vb1dVafcV597(0xb0d) = CONST 
    0xb20S0xafcS0x597: JUMP vb1dVafcV597(0xb0d)

    Begin block 0x1064B0xafcB0x597
    prev=[0xb0dB0xafcB0x597], succ=[0x1041B0x597]
    =================================
    0x1067S0xafcS0x597: JUMP vafeV597(0x1041)

    Begin block 0x1041B0x597
    prev=[0x1064B0xafcB0x597], succ=[0x5c4]
    =================================
    0x1044S0x597: JUMP v5b9(0x5c4)

    Begin block 0x5c4
    prev=[0x1041B0x597], succ=[0x9aa]
    =================================
    0x5c6: v5c6(0x5) = CONST 
    0x5c9: v5c9 = SLOAD v5c6(0x5)
    0x5ca: v5ca(0x12) = CONST 
    0x5cc: v5cc(0xff) = CONST 
    0x5ce: v5ce(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v5cc(0xff)
    0x5d1: v5d1 = AND v5c9, v5ce(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x5d2: v5d2 = OR v5d1, v5ca(0x12)
    0x5d6: SSTORE v5c6(0x5), v5d2
    0x5d7: v5d7(0x5ec) = CONST 
    0x5dd: v5dd(0xff) = CONST 
    0x5df: v5df = AND v5dd(0xff), v5d2
    0x5e0: v5e0(0xa) = CONST 
    0x5e2: v5e2 = EXP v5e0(0xa), v5df
    0x5e3: v5e3(0x4c4b40) = CONST 
    0x5e7: v5e7 = MUL v5e3(0x4c4b40), v5e2
    0x5e8: v5e8(0x9aa) = CONST 
    0x5eb: JUMP v5e8(0x9aa)

    Begin block 0x9aa
    prev=[0x5c4], succ=[0x9b9, 0xa05]
    =================================
    0x9ab: v9ab(0x1) = CONST 
    0x9ad: v9ad(0x1) = CONST 
    0x9af: v9af(0xa0) = CONST 
    0x9b1: v9b1(0x10000000000000000000000000000000000000000) = SHL v9af(0xa0), v9ad(0x1)
    0x9b2: v9b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9b1(0x10000000000000000000000000000000000000000), v9ab(0x1)
    0x9b4: v9b4 = AND v282, v9b2(0xffffffffffffffffffffffffffffffffffffffff)
    0x9b5: v9b5(0xa05) = CONST 
    0x9b8: JUMPI v9b5(0xa05), v9b4

    Begin block 0x9b9
    prev=[0x9aa], succ=[]
    =================================
    0x9b9: v9b9(0x40) = CONST 
    0x9bc: v9bc = MLOAD v9b9(0x40)
    0x9bd: v9bd(0x461bcd) = CONST 
    0x9c1: v9c1(0xe5) = CONST 
    0x9c3: v9c3(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v9c1(0xe5), v9bd(0x461bcd)
    0x9c5: MSTORE v9bc, v9c3(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x9c6: v9c6(0x20) = CONST 
    0x9c8: v9c8(0x4) = CONST 
    0x9cb: v9cb = ADD v9bc, v9c8(0x4)
    0x9cc: MSTORE v9cb, v9c6(0x20)
    0x9cd: v9cd(0x1f) = CONST 
    0x9cf: v9cf(0x24) = CONST 
    0x9d2: v9d2 = ADD v9bc, v9cf(0x24)
    0x9d3: MSTORE v9d2, v9cd(0x1f)
    0x9d4: v9d4(0x45524332303a206d696e7420746f20746865207a65726f206164647265737300) = CONST 
    0x9f5: v9f5(0x44) = CONST 
    0x9f8: v9f8 = ADD v9bc, v9f5(0x44)
    0x9f9: MSTORE v9f8, v9d4(0x45524332303a206d696e7420746f20746865207a65726f206164647265737300)
    0x9fb: v9fb = MLOAD v9b9(0x40)
    0x9ff: v9ff(0x0) = SUB v9bc, v9fb
    0xa00: va00(0x64) = CONST 
    0xa02: va02(0x64) = ADD va00(0x64), v9ff(0x0)
    0xa04: REVERT v9fb, va02(0x64)

    Begin block 0xa05
    prev=[0x9aa], succ=[0x949B0xa05]
    =================================
    0xa06: va06(0x2) = CONST 
    0xa08: va08 = SLOAD va06(0x2)
    0xa09: va09(0xa12) = CONST 
    0xa0e: va0e(0x949) = CONST 
    0xa11: JUMP va0e(0x949)

    Begin block 0x949B0xa05
    prev=[0xa05], succ=[0x957B0xa05, 0x9a3B0xa05]
    =================================
    0x94aS0xa05: v94aVa05(0x0) = CONST 
    0x94eS0xa05: v94eVa05 = ADD v5e7, va08
    0x951S0xa05: v951Va05 = LT v94eVa05, va08
    0x952S0xa05: v952Va05 = ISZERO v951Va05
    0x953S0xa05: v953Va05(0x9a3) = CONST 
    0x956S0xa05: JUMPI v953Va05(0x9a3), v952Va05

    Begin block 0x957B0xa05
    prev=[0x949B0xa05], succ=[]
    =================================
    0x957S0xa05: v957Va05(0x40) = CONST 
    0x95aS0xa05: v95aVa05 = MLOAD v957Va05(0x40)
    0x95bS0xa05: v95bVa05(0x461bcd) = CONST 
    0x95fS0xa05: v95fVa05(0xe5) = CONST 
    0x961S0xa05: v961Va05(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v95fVa05(0xe5), v95bVa05(0x461bcd)
    0x963S0xa05: MSTORE v95aVa05, v961Va05(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x964S0xa05: v964Va05(0x20) = CONST 
    0x966S0xa05: v966Va05(0x4) = CONST 
    0x969S0xa05: v969Va05 = ADD v95aVa05, v966Va05(0x4)
    0x96aS0xa05: MSTORE v969Va05, v964Va05(0x20)
    0x96bS0xa05: v96bVa05(0x1b) = CONST 
    0x96dS0xa05: v96dVa05(0x24) = CONST 
    0x970S0xa05: v970Va05 = ADD v95aVa05, v96dVa05(0x24)
    0x971S0xa05: MSTORE v970Va05, v96bVa05(0x1b)
    0x972S0xa05: v972Va05(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x993S0xa05: v993Va05(0x44) = CONST 
    0x996S0xa05: v996Va05 = ADD v95aVa05, v993Va05(0x44)
    0x997S0xa05: MSTORE v996Va05, v972Va05(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x999S0xa05: v999Va05 = MLOAD v957Va05(0x40)
    0x99dS0xa05: v99dVa05(0x0) = SUB v95aVa05, v999Va05
    0x99eS0xa05: v99eVa05(0x64) = CONST 
    0x9a0S0xa05: v9a0Va05(0x64) = ADD v99eVa05(0x64), v99dVa05(0x0)
    0x9a2S0xa05: REVERT v999Va05, v9a0Va05(0x64)

    Begin block 0x9a3B0xa05
    prev=[0x949B0xa05], succ=[0xa12]
    =================================
    0x9a9S0xa05: JUMP va09(0xa12)

    Begin block 0xa12
    prev=[0x9a3B0xa05], succ=[0x949B0xa12]
    =================================
    0xa13: va13(0x2) = CONST 
    0xa15: SSTORE va13(0x2), v94eVa05
    0xa16: va16(0x1) = CONST 
    0xa18: va18(0x1) = CONST 
    0xa1a: va1a(0xa0) = CONST 
    0xa1c: va1c(0x10000000000000000000000000000000000000000) = SHL va1a(0xa0), va18(0x1)
    0xa1d: va1d(0xffffffffffffffffffffffffffffffffffffffff) = SUB va1c(0x10000000000000000000000000000000000000000), va16(0x1)
    0xa1f: va1f = AND v282, va1d(0xffffffffffffffffffffffffffffffffffffffff)
    0xa20: va20(0x0) = CONST 
    0xa24: MSTORE va20(0x0), va1f
    0xa25: va25(0x20) = CONST 
    0xa29: MSTORE va25(0x20), va20(0x0)
    0xa2a: va2a(0x40) = CONST 
    0xa2d: va2d = SHA3 va20(0x0), va2a(0x40)
    0xa2e: va2e = SLOAD va2d
    0xa2f: va2f(0xa38) = CONST 
    0xa34: va34(0x949) = CONST 
    0xa37: JUMP va34(0x949)

    Begin block 0x949B0xa12
    prev=[0xa12], succ=[0x957B0xa12, 0x9a3B0xa12]
    =================================
    0x94aS0xa12: v94aVa12(0x0) = CONST 
    0x94eS0xa12: v94eVa12 = ADD v5e7, va2e
    0x951S0xa12: v951Va12 = LT v94eVa12, va2e
    0x952S0xa12: v952Va12 = ISZERO v951Va12
    0x953S0xa12: v953Va12(0x9a3) = CONST 
    0x956S0xa12: JUMPI v953Va12(0x9a3), v952Va12

    Begin block 0x957B0xa12
    prev=[0x949B0xa12], succ=[]
    =================================
    0x957S0xa12: v957Va12(0x40) = CONST 
    0x95aS0xa12: v95aVa12 = MLOAD v957Va12(0x40)
    0x95bS0xa12: v95bVa12(0x461bcd) = CONST 
    0x95fS0xa12: v95fVa12(0xe5) = CONST 
    0x961S0xa12: v961Va12(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v95fVa12(0xe5), v95bVa12(0x461bcd)
    0x963S0xa12: MSTORE v95aVa12, v961Va12(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x964S0xa12: v964Va12(0x20) = CONST 
    0x966S0xa12: v966Va12(0x4) = CONST 
    0x969S0xa12: v969Va12 = ADD v95aVa12, v966Va12(0x4)
    0x96aS0xa12: MSTORE v969Va12, v964Va12(0x20)
    0x96bS0xa12: v96bVa12(0x1b) = CONST 
    0x96dS0xa12: v96dVa12(0x24) = CONST 
    0x970S0xa12: v970Va12 = ADD v95aVa12, v96dVa12(0x24)
    0x971S0xa12: MSTORE v970Va12, v96bVa12(0x1b)
    0x972S0xa12: v972Va12(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x993S0xa12: v993Va12(0x44) = CONST 
    0x996S0xa12: v996Va12 = ADD v95aVa12, v993Va12(0x44)
    0x997S0xa12: MSTORE v996Va12, v972Va12(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x999S0xa12: v999Va12 = MLOAD v957Va12(0x40)
    0x99dS0xa12: v99dVa12(0x0) = SUB v95aVa12, v999Va12
    0x99eS0xa12: v99eVa12(0x64) = CONST 
    0x9a0S0xa12: v9a0Va12(0x64) = ADD v99eVa12(0x64), v99dVa12(0x0)
    0x9a2S0xa12: REVERT v999Va12, v9a0Va12(0x64)

    Begin block 0x9a3B0xa12
    prev=[0x949B0xa12], succ=[0xa38]
    =================================
    0x9a9S0xa12: JUMP va2f(0xa38)

    Begin block 0xa38
    prev=[0x9a3B0xa12], succ=[0x5ec]
    =================================
    0xa39: va39(0x1) = CONST 
    0xa3b: va3b(0x1) = CONST 
    0xa3d: va3d(0xa0) = CONST 
    0xa3f: va3f(0x10000000000000000000000000000000000000000) = SHL va3d(0xa0), va3b(0x1)
    0xa40: va40(0xffffffffffffffffffffffffffffffffffffffff) = SUB va3f(0x10000000000000000000000000000000000000000), va39(0x1)
    0xa42: va42 = AND v282, va40(0xffffffffffffffffffffffffffffffffffffffff)
    0xa43: va43(0x0) = CONST 
    0xa47: MSTORE va43(0x0), va42
    0xa48: va48(0x20) = CONST 
    0xa4c: MSTORE va48(0x20), va43(0x0)
    0xa4d: va4d(0x40) = CONST 
    0xa51: va51 = SHA3 va43(0x0), va4d(0x40)
    0xa55: SSTORE va51, v94eVa12
    0xa57: va57 = MLOAD va4d(0x40)
    0xa5a: MSTORE va57, v5e7
    0xa5c: va5c = MLOAD va4d(0x40)
    0xa61: va61(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
    0xa85: va85(0x0) = SUB va57, va5c
    0xa88: va88(0x20) = ADD va48(0x20), va85(0x0)
    0xa8a: LOG3 va5c, va88(0x20), va61(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), va43(0x0), va42
    0xa8d: JUMP v5d7(0x5ec)

    Begin block 0x5ec
    prev=[0xa38], succ=[0x287]
    =================================
    0x5ee: JUMP v262(0x287)

    Begin block 0x287
    prev=[0x5ec], succ=[]
    =================================
    0x288: STOP 

    Begin block 0xadeB0x597
    prev=[0xacfB0x597], succ=[0xae1B0x597]
    =================================
    0xae0S0x597: vae0V597 = ADD v5b5, v5a3(0x5)

    Begin block 0xae1B0x597
    prev=[0xadeB0x597, 0xaeaB0x597], succ=[0xafcB0x597, 0xaeaB0x597]
    =================================
    0xae1_0x2S0x597: vae1_2V597 = PHI v5b5, vaf1V597
    0xae4S0x597: vae4V597 = GT vae0V597, vae1_2V597
    0xae5S0x597: vae5V597 = ISZERO vae4V597
    0xae6S0x597: vae6V597(0xafc) = CONST 
    0xae9S0x597: JUMPI vae6V597(0xafc), vae5V597

    Begin block 0xaeaB0x597
    prev=[0xae1B0x597], succ=[0xae1B0x597]
    =================================
    0xaea_0x1S0x597: vaea_1V597 = PHI vaabV597, vaf6V597
    0xaea_0x2S0x597: vaea_2V597 = PHI v5b5, vaf1V597
    0xaebS0x597: vaebV597 = MLOAD vaea_2V597
    0xaedS0x597: SSTORE vaea_1V597, vaebV597
    0xaefS0x597: vaefV597(0x20) = CONST 
    0xaf1S0x597: vaf1V597 = ADD vaefV597(0x20), vaea_2V597
    0xaf4S0x597: vaf4V597(0x1) = CONST 
    0xaf6S0x597: vaf6V597 = ADD vaf4V597(0x1), vaea_1V597
    0xaf8S0x597: vaf8V597(0xae1) = CONST 
    0xafbS0x597: JUMP vaf8V597(0xae1)

    Begin block 0xabfB0x597
    prev=[0xa8eB0x597], succ=[0xafcB0x597]
    =================================
    0xac0S0x597: vac0V597(0x5946494744000000000000000000000000000000000000000000000000000000) = MLOAD v5b5
    0xac1S0x597: vac1V597(0xff) = CONST 
    0xac3S0x597: vac3V597(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vac1V597(0xff)
    0xac4S0x597: vac4V597(0x5946494744000000000000000000000000000000000000000000000000000000) = AND vac3V597(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), vac0V597(0x5946494744000000000000000000000000000000000000000000000000000000)
    0xac7S0x597: vac7V597(0xa) = ADD v5a3(0x5), v5a3(0x5)
    0xac8S0x597: vac8V597(0x594649474400000000000000000000000000000000000000000000000000000a) = OR vac7V597(0xa), vac4V597(0x5946494744000000000000000000000000000000000000000000000000000000)
    0xacaS0x597: SSTORE v5bd(0x4), vac8V597(0x594649474400000000000000000000000000000000000000000000000000000a)
    0xacbS0x597: vacbV597(0xafc) = CONST 
    0xaceS0x597: JUMP vacbV597(0xafc)

    Begin block 0xadeB0x550
    prev=[0xacfB0x550], succ=[0xae1B0x550]
    =================================
    0xae0S0x550: vae0V550 = ADD v588, v56a(0x11)

    Begin block 0xae1B0x550
    prev=[0xadeB0x550, 0xaeaB0x550], succ=[0xafcB0x550, 0xaeaB0x550]
    =================================
    0xae1_0x2S0x550: vae1_2V550 = PHI v588, vaf1V550
    0xae4S0x550: vae4V550 = GT vae0V550, vae1_2V550
    0xae5S0x550: vae5V550 = ISZERO vae4V550
    0xae6S0x550: vae6V550(0xafc) = CONST 
    0xae9S0x550: JUMPI vae6V550(0xafc), vae5V550

    Begin block 0xaeaB0x550
    prev=[0xae1B0x550], succ=[0xae1B0x550]
    =================================
    0xaea_0x1S0x550: vaea_1V550 = PHI vaabV550, vaf6V550
    0xaea_0x2S0x550: vaea_2V550 = PHI v588, vaf1V550
    0xaebS0x550: vaebV550 = MLOAD vaea_2V550
    0xaedS0x550: SSTORE vaea_1V550, vaebV550
    0xaefS0x550: vaefV550(0x20) = CONST 
    0xaf1S0x550: vaf1V550 = ADD vaefV550(0x20), vaea_2V550
    0xaf4S0x550: vaf4V550(0x1) = CONST 
    0xaf6S0x550: vaf6V550 = ADD vaf4V550(0x1), vaea_1V550
    0xaf8S0x550: vaf8V550(0xae1) = CONST 
    0xafbS0x550: JUMP vaf8V550(0xae1)

    Begin block 0xabfB0x550
    prev=[0xa8eB0x550], succ=[0xafcB0x550]
    =================================
    0xac0S0x550: vac0V550(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000000) = MLOAD v588
    0xac1S0x550: vac1V550(0xff) = CONST 
    0xac3S0x550: vac3V550(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vac1V550(0xff)
    0xac4S0x550: vac4V550(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000000) = AND vac3V550(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), vac0V550(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000000)
    0xac7S0x550: vac7V550(0x22) = ADD v56a(0x11), v56a(0x11)
    0xac8S0x550: vac8V550(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000022) = OR vac7V550(0x22), vac4V550(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000000)
    0xacaS0x550: SSTORE v590(0x3), vac8V550(0x676f6c64796561726e2e66696e616e6365000000000000000000000000000022)
    0xacbS0x550: vacbV550(0xafc) = CONST 
    0xaceS0x550: JUMP vacbV550(0xafc)

}

function decreaseAllowance(address,uint256)() public {
    Begin block 0x289
    prev=[], succ=[0x29b, 0x29f]
    =================================
    0x28a: v28a(0xdfa) = CONST 
    0x28d: v28d(0x4) = CONST 
    0x290: v290 = CALLDATASIZE 
    0x291: v291 = SUB v290, v28d(0x4)
    0x292: v292(0x40) = CONST 
    0x295: v295 = LT v291, v292(0x40)
    0x296: v296 = ISZERO v295
    0x297: v297(0x29f) = CONST 
    0x29a: JUMPI v297(0x29f), v296

    Begin block 0x29b
    prev=[0x289], succ=[]
    =================================
    0x29b: v29b(0x0) = CONST 
    0x29e: REVERT v29b(0x0), v29b(0x0)

    Begin block 0x29f
    prev=[0x289], succ=[0x5ef]
    =================================
    0x2a1: v2a1(0x1) = CONST 
    0x2a3: v2a3(0x1) = CONST 
    0x2a5: v2a5(0xa0) = CONST 
    0x2a7: v2a7(0x10000000000000000000000000000000000000000) = SHL v2a5(0xa0), v2a3(0x1)
    0x2a8: v2a8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a7(0x10000000000000000000000000000000000000000), v2a1(0x1)
    0x2aa: v2aa = CALLDATALOAD v28d(0x4)
    0x2ab: v2ab = AND v2aa, v2a8(0xffffffffffffffffffffffffffffffffffffffff)
    0x2ad: v2ad(0x20) = CONST 
    0x2af: v2af(0x24) = ADD v2ad(0x20), v28d(0x4)
    0x2b0: v2b0 = CALLDATALOAD v2af(0x24)
    0x2b1: v2b1(0x5ef) = CONST 
    0x2b4: JUMP v2b1(0x5ef)

    Begin block 0x5ef
    prev=[0x29f], succ=[0xff5]
    =================================
    0x5f0: v5f0(0x0) = CONST 
    0x5f2: v5f2(0xfcd) = CONST 
    0x5f5: v5f5 = CALLER 
    0x5f7: v5f7(0xff5) = CONST 
    0x5fb: v5fb(0x40) = CONST 
    0x5fd: v5fd = MLOAD v5fb(0x40)
    0x5ff: v5ff(0x60) = CONST 
    0x601: v601 = ADD v5ff(0x60), v5fd
    0x602: v602(0x40) = CONST 
    0x604: MSTORE v602(0x40), v601
    0x606: v606(0x25) = CONST 
    0x609: MSTORE v5fd, v606(0x25)
    0x60a: v60a(0x20) = CONST 
    0x60c: v60c = ADD v60a(0x20), v5fd
    0x60d: v60d(0xbfe) = CONST 
    0x610: v610(0x25) = CONST 
    0x613: CODECOPY v60c, v60d(0xbfe), v610(0x25)
    0x614: v614 = CALLER 
    0x615: v615(0x0) = CONST 
    0x619: MSTORE v615(0x0), v614
    0x61a: v61a(0x1) = CONST 
    0x61c: v61c(0x20) = CONST 
    0x620: MSTORE v61c(0x20), v61a(0x1)
    0x621: v621(0x40) = CONST 
    0x625: v625 = SHA3 v615(0x0), v621(0x40)
    0x626: v626(0x1) = CONST 
    0x628: v628(0x1) = CONST 
    0x62a: v62a(0xa0) = CONST 
    0x62c: v62c(0x10000000000000000000000000000000000000000) = SHL v62a(0xa0), v628(0x1)
    0x62d: v62d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v62c(0x10000000000000000000000000000000000000000), v626(0x1)
    0x62f: v62f = AND v2ab, v62d(0xffffffffffffffffffffffffffffffffffffffff)
    0x631: MSTORE v615(0x0), v62f
    0x634: MSTORE v61c(0x20), v625
    0x636: v636 = SHA3 v615(0x0), v621(0x40)
    0x637: v637 = SLOAD v636
    0x63a: v63a(0x8b2) = CONST 
    0x63d: v63d_0 = CALLPRIVATE v63a(0x8b2), v5fd, v2b0, v637, v5f7(0xff5)

    Begin block 0xff5
    prev=[0x5ef], succ=[0xfcd]
    =================================
    0xff6: vff6(0x676) = CONST 
    0xff9: CALLPRIVATE vff6(0x676), v63d_0, v2ab, v5f5, v5f2(0xfcd)

    Begin block 0xfcd
    prev=[0xff5], succ=[0xdfa]
    =================================
    0xfcf: vfcf(0x1) = CONST 
    0xfd5: JUMP v28a(0xdfa)

    Begin block 0xdfa
    prev=[0xfcd], succ=[]
    =================================
    0xdfb: vdfb(0x40) = CONST 
    0xdfe: vdfe = MLOAD vdfb(0x40)
    0xe00: ve00 = ISZERO vfcf(0x1)
    0xe01: ve01 = ISZERO ve00
    0xe03: MSTORE vdfe, ve01
    0xe04: ve04 = MLOAD vdfb(0x40)
    0xe08: ve08(0x0) = SUB vdfe, ve04
    0xe09: ve09(0x20) = CONST 
    0xe0b: ve0b(0x20) = ADD ve09(0x20), ve08(0x0)
    0xe0d: RETURN ve04, ve0b(0x20)

}

function transfer(address,uint256)() public {
    Begin block 0x2b5
    prev=[], succ=[0x2c7, 0x2cb]
    =================================
    0x2b6: v2b6(0xe2d) = CONST 
    0x2b9: v2b9(0x4) = CONST 
    0x2bc: v2bc = CALLDATASIZE 
    0x2bd: v2bd = SUB v2bc, v2b9(0x4)
    0x2be: v2be(0x40) = CONST 
    0x2c1: v2c1 = LT v2bd, v2be(0x40)
    0x2c2: v2c2 = ISZERO v2c1
    0x2c3: v2c3(0x2cb) = CONST 
    0x2c6: JUMPI v2c3(0x2cb), v2c2

    Begin block 0x2c7
    prev=[0x2b5], succ=[]
    =================================
    0x2c7: v2c7(0x0) = CONST 
    0x2ca: REVERT v2c7(0x0), v2c7(0x0)

    Begin block 0x2cb
    prev=[0x2b5], succ=[0x63e]
    =================================
    0x2cd: v2cd(0x1) = CONST 
    0x2cf: v2cf(0x1) = CONST 
    0x2d1: v2d1(0xa0) = CONST 
    0x2d3: v2d3(0x10000000000000000000000000000000000000000) = SHL v2d1(0xa0), v2cf(0x1)
    0x2d4: v2d4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2d3(0x10000000000000000000000000000000000000000), v2cd(0x1)
    0x2d6: v2d6 = CALLDATALOAD v2b9(0x4)
    0x2d7: v2d7 = AND v2d6, v2d4(0xffffffffffffffffffffffffffffffffffffffff)
    0x2d9: v2d9(0x20) = CONST 
    0x2db: v2db(0x24) = ADD v2d9(0x20), v2b9(0x4)
    0x2dc: v2dc = CALLDATALOAD v2db(0x24)
    0x2dd: v2dd(0x63e) = CONST 
    0x2e0: JUMP v2dd(0x63e)

    Begin block 0x63e
    prev=[0x2cb], succ=[0x1019]
    =================================
    0x63f: v63f(0x0) = CONST 
    0x641: v641(0x1019) = CONST 
    0x644: v644 = CALLER 
    0x647: v647(0x762) = CONST 
    0x64a: CALLPRIVATE v647(0x762), v2dc, v2d7, v644, v641(0x1019)

    Begin block 0x1019
    prev=[0x63e], succ=[0xe2d]
    =================================
    0x101b: v101b(0x1) = CONST 
    0x1021: JUMP v2b6(0xe2d)

    Begin block 0xe2d
    prev=[0x1019], succ=[]
    =================================
    0xe2e: ve2e(0x40) = CONST 
    0xe31: ve31 = MLOAD ve2e(0x40)
    0xe33: ve33 = ISZERO v101b(0x1)
    0xe34: ve34 = ISZERO ve33
    0xe36: MSTORE ve31, ve34
    0xe37: ve37 = MLOAD ve2e(0x40)
    0xe3b: ve3b(0x0) = SUB ve31, ve37
    0xe3c: ve3c(0x20) = CONST 
    0xe3e: ve3e(0x20) = ADD ve3c(0x20), ve3b(0x0)
    0xe40: RETURN ve37, ve3e(0x20)

}

function allowance(address,address)() public {
    Begin block 0x2e1
    prev=[], succ=[0x2f3, 0x2f7]
    =================================
    0x2e2: v2e2(0xe60) = CONST 
    0x2e5: v2e5(0x4) = CONST 
    0x2e8: v2e8 = CALLDATASIZE 
    0x2e9: v2e9 = SUB v2e8, v2e5(0x4)
    0x2ea: v2ea(0x40) = CONST 
    0x2ed: v2ed = LT v2e9, v2ea(0x40)
    0x2ee: v2ee = ISZERO v2ed
    0x2ef: v2ef(0x2f7) = CONST 
    0x2f2: JUMPI v2ef(0x2f7), v2ee

    Begin block 0x2f3
    prev=[0x2e1], succ=[]
    =================================
    0x2f3: v2f3(0x0) = CONST 
    0x2f6: REVERT v2f3(0x0), v2f3(0x0)

    Begin block 0x2f7
    prev=[0x2e1], succ=[0x64b]
    =================================
    0x2f9: v2f9(0x1) = CONST 
    0x2fb: v2fb(0x1) = CONST 
    0x2fd: v2fd(0xa0) = CONST 
    0x2ff: v2ff(0x10000000000000000000000000000000000000000) = SHL v2fd(0xa0), v2fb(0x1)
    0x300: v300(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2ff(0x10000000000000000000000000000000000000000), v2f9(0x1)
    0x302: v302 = CALLDATALOAD v2e5(0x4)
    0x304: v304 = AND v300(0xffffffffffffffffffffffffffffffffffffffff), v302
    0x306: v306(0x20) = CONST 
    0x308: v308(0x24) = ADD v306(0x20), v2e5(0x4)
    0x309: v309 = CALLDATALOAD v308(0x24)
    0x30a: v30a = AND v309, v300(0xffffffffffffffffffffffffffffffffffffffff)
    0x30b: v30b(0x64b) = CONST 
    0x30e: JUMP v30b(0x64b)

    Begin block 0x64b
    prev=[0x2f7], succ=[0xe60]
    =================================
    0x64c: v64c(0x1) = CONST 
    0x64e: v64e(0x1) = CONST 
    0x650: v650(0xa0) = CONST 
    0x652: v652(0x10000000000000000000000000000000000000000) = SHL v650(0xa0), v64e(0x1)
    0x653: v653(0xffffffffffffffffffffffffffffffffffffffff) = SUB v652(0x10000000000000000000000000000000000000000), v64c(0x1)
    0x656: v656 = AND v653(0xffffffffffffffffffffffffffffffffffffffff), v304
    0x657: v657(0x0) = CONST 
    0x65b: MSTORE v657(0x0), v656
    0x65c: v65c(0x1) = CONST 
    0x65e: v65e(0x20) = CONST 
    0x662: MSTORE v65e(0x20), v65c(0x1)
    0x663: v663(0x40) = CONST 
    0x667: v667 = SHA3 v657(0x0), v663(0x40)
    0x66b: v66b = AND v653(0xffffffffffffffffffffffffffffffffffffffff), v30a
    0x66d: MSTORE v657(0x0), v66b
    0x671: MSTORE v65e(0x20), v667
    0x672: v672 = SHA3 v657(0x0), v663(0x40)
    0x673: v673 = SLOAD v672
    0x675: JUMP v2e2(0xe60)

    Begin block 0xe60
    prev=[0x64b], succ=[]
    =================================
    0xe61: ve61(0x40) = CONST 
    0xe64: ve64 = MLOAD ve61(0x40)
    0xe67: MSTORE ve64, v673
    0xe68: ve68 = MLOAD ve61(0x40)
    0xe6c: ve6c(0x0) = SUB ve64, ve68
    0xe6d: ve6d(0x20) = CONST 
    0xe6f: ve6f(0x20) = ADD ve6d(0x20), ve6c(0x0)
    0xe71: RETURN ve68, ve6f(0x20)

}

function 0x30f(0x30farg0x0) private {
    Begin block 0x30f
    prev=[], succ=[0xe91, 0x355]
    =================================
    0x310: v310(0x3) = CONST 
    0x313: v313 = SLOAD v310(0x3)
    0x314: v314(0x40) = CONST 
    0x317: v317 = MLOAD v314(0x40)
    0x318: v318(0x20) = CONST 
    0x31a: v31a(0x1f) = CONST 
    0x31c: v31c(0x2) = CONST 
    0x31e: v31e(0x0) = CONST 
    0x320: v320(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v31e(0x0)
    0x321: v321(0x100) = CONST 
    0x324: v324(0x1) = CONST 
    0x327: v327 = AND v313, v324(0x1)
    0x328: v328 = ISZERO v327
    0x329: v329 = MUL v328, v321(0x100)
    0x32a: v32a = ADD v329, v320(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
    0x32d: v32d = AND v313, v32a
    0x331: v331 = DIV v32d, v31c(0x2)
    0x334: v334 = ADD v331, v31a(0x1f)
    0x337: v337 = DIV v334, v318(0x20)
    0x339: v339 = MUL v318(0x20), v337
    0x33b: v33b = ADD v317, v339
    0x33d: v33d = ADD v318(0x20), v33b
    0x340: MSTORE v314(0x40), v33d
    0x343: MSTORE v317, v331
    0x344: v344(0x60) = CONST 
    0x34c: v34c = ADD v317, v318(0x20)
    0x350: v350 = ISZERO v331
    0x351: v351(0xe91) = CONST 
    0x354: JUMPI v351(0xe91), v350

    Begin block 0xe91
    prev=[0x30f], succ=[]
    =================================
    0xe9a: RETURNPRIVATE v30farg0, v317

    Begin block 0x355
    prev=[0x30f], succ=[0x35d, 0x3700x30f]
    =================================
    0x356: v356(0x1f) = CONST 
    0x358: v358 = LT v356(0x1f), v331
    0x359: v359(0x370) = CONST 
    0x35c: JUMPI v359(0x370), v358

    Begin block 0x35d
    prev=[0x355], succ=[0xeba]
    =================================
    0x35d: v35d(0x100) = CONST 
    0x362: v362 = SLOAD v310(0x3)
    0x363: v363 = DIV v362, v35d(0x100)
    0x364: v364 = MUL v363, v35d(0x100)
    0x366: MSTORE v34c, v364
    0x368: v368(0x20) = CONST 
    0x36a: v36a = ADD v368(0x20), v34c
    0x36c: v36c(0xeba) = CONST 
    0x36f: JUMP v36c(0xeba)

    Begin block 0xeba
    prev=[0x35d], succ=[]
    =================================
    0xec3: RETURNPRIVATE v30farg0, v317

    Begin block 0x3700x30f
    prev=[0x355], succ=[0x37e0x30f]
    =================================
    0x3720x30f: v30f372 = ADD v34c, v331
    0x3750x30f: v30f375(0x0) = CONST 
    0x3770x30f: MSTORE v30f375(0x0), v310(0x3)
    0x3780x30f: v30f378(0x20) = CONST 
    0x37a0x30f: v30f37a(0x0) = CONST 
    0x37c0x30f: v30f37c = SHA3 v30f37a(0x0), v30f378(0x20)

    Begin block 0x37e0x30f
    prev=[0x37e0x30f, 0x3700x30f], succ=[0x37e0x30f, 0x3920x30f]
    =================================
    0x37e0x30f_0x0: v37e30f_0 = PHI v34c, v30f38a
    0x37e0x30f_0x1: v37e30f_1 = PHI v30f386, v30f37c
    0x3800x30f: v30f380 = SLOAD v37e30f_1
    0x3820x30f: MSTORE v37e30f_0, v30f380
    0x3840x30f: v30f384(0x1) = CONST 
    0x3860x30f: v30f386 = ADD v30f384(0x1), v37e30f_1
    0x3880x30f: v30f388(0x20) = CONST 
    0x38a0x30f: v30f38a = ADD v30f388(0x20), v37e30f_0
    0x38d0x30f: v30f38d = GT v30f372, v30f38a
    0x38e0x30f: v30f38e(0x37e) = CONST 
    0x3910x30f: JUMPI v30f38e(0x37e), v30f38d

    Begin block 0x3920x30f
    prev=[0x37e0x30f], succ=[0x39b0x30f]
    =================================
    0x3940x30f: v30f394 = SUB v30f38a, v30f372
    0x3950x30f: v30f395(0x1f) = CONST 
    0x3970x30f: v30f397 = AND v30f395(0x1f), v30f394
    0x3990x30f: v30f399 = ADD v30f372, v30f397

    Begin block 0x39b0x30f
    prev=[0x3920x30f], succ=[]
    =================================
    0x3a40x30f: RETURNPRIVATE v30farg0, v317

}

function 0x492(0x492arg0x0) private {
    Begin block 0x492
    prev=[], succ=[0xf7b, 0x4d8]
    =================================
    0x493: v493(0x4) = CONST 
    0x496: v496 = SLOAD v493(0x4)
    0x497: v497(0x40) = CONST 
    0x49a: v49a = MLOAD v497(0x40)
    0x49b: v49b(0x20) = CONST 
    0x49d: v49d(0x1f) = CONST 
    0x49f: v49f(0x2) = CONST 
    0x4a1: v4a1(0x0) = CONST 
    0x4a3: v4a3(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v4a1(0x0)
    0x4a4: v4a4(0x100) = CONST 
    0x4a7: v4a7(0x1) = CONST 
    0x4aa: v4aa = AND v496, v4a7(0x1)
    0x4ab: v4ab = ISZERO v4aa
    0x4ac: v4ac = MUL v4ab, v4a4(0x100)
    0x4ad: v4ad = ADD v4ac, v4a3(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
    0x4b0: v4b0 = AND v496, v4ad
    0x4b4: v4b4 = DIV v4b0, v49f(0x2)
    0x4b7: v4b7 = ADD v4b4, v49d(0x1f)
    0x4ba: v4ba = DIV v4b7, v49b(0x20)
    0x4bc: v4bc = MUL v49b(0x20), v4ba
    0x4be: v4be = ADD v49a, v4bc
    0x4c0: v4c0 = ADD v49b(0x20), v4be
    0x4c3: MSTORE v497(0x40), v4c0
    0x4c6: MSTORE v49a, v4b4
    0x4c7: v4c7(0x60) = CONST 
    0x4cf: v4cf = ADD v49a, v49b(0x20)
    0x4d3: v4d3 = ISZERO v4b4
    0x4d4: v4d4(0xf7b) = CONST 
    0x4d7: JUMPI v4d4(0xf7b), v4d3

    Begin block 0xf7b
    prev=[0x492], succ=[]
    =================================
    0xf84: RETURNPRIVATE v492arg0, v49a

    Begin block 0x4d8
    prev=[0x492], succ=[0x4e0, 0x3700x492]
    =================================
    0x4d9: v4d9(0x1f) = CONST 
    0x4db: v4db = LT v4d9(0x1f), v4b4
    0x4dc: v4dc(0x370) = CONST 
    0x4df: JUMPI v4dc(0x370), v4db

    Begin block 0x4e0
    prev=[0x4d8], succ=[0xfa4]
    =================================
    0x4e0: v4e0(0x100) = CONST 
    0x4e5: v4e5 = SLOAD v493(0x4)
    0x4e6: v4e6 = DIV v4e5, v4e0(0x100)
    0x4e7: v4e7 = MUL v4e6, v4e0(0x100)
    0x4e9: MSTORE v4cf, v4e7
    0x4eb: v4eb(0x20) = CONST 
    0x4ed: v4ed = ADD v4eb(0x20), v4cf
    0x4ef: v4ef(0xfa4) = CONST 
    0x4f2: JUMP v4ef(0xfa4)

    Begin block 0xfa4
    prev=[0x4e0], succ=[]
    =================================
    0xfad: RETURNPRIVATE v492arg0, v49a

    Begin block 0x3700x492
    prev=[0x4d8], succ=[0x37e0x492]
    =================================
    0x3720x492: v492372 = ADD v4cf, v4b4
    0x3750x492: v492375(0x0) = CONST 
    0x3770x492: MSTORE v492375(0x0), v493(0x4)
    0x3780x492: v492378(0x20) = CONST 
    0x37a0x492: v49237a(0x0) = CONST 
    0x37c0x492: v49237c = SHA3 v49237a(0x0), v492378(0x20)

    Begin block 0x37e0x492
    prev=[0x37e0x492, 0x3700x492], succ=[0x37e0x492, 0x3920x492]
    =================================
    0x37e0x492_0x0: v37e492_0 = PHI v4cf, v49238a
    0x37e0x492_0x1: v37e492_1 = PHI v492386, v49237c
    0x3800x492: v492380 = SLOAD v37e492_1
    0x3820x492: MSTORE v37e492_0, v492380
    0x3840x492: v492384(0x1) = CONST 
    0x3860x492: v492386 = ADD v492384(0x1), v37e492_1
    0x3880x492: v492388(0x20) = CONST 
    0x38a0x492: v49238a = ADD v492388(0x20), v37e492_0
    0x38d0x492: v49238d = GT v492372, v49238a
    0x38e0x492: v49238e(0x37e) = CONST 
    0x3910x492: JUMPI v49238e(0x37e), v49238d

    Begin block 0x3920x492
    prev=[0x37e0x492], succ=[0x39b0x492]
    =================================
    0x3940x492: v492394 = SUB v49238a, v492372
    0x3950x492: v492395(0x1f) = CONST 
    0x3970x492: v492397 = AND v492395(0x1f), v492394
    0x3990x492: v492399 = ADD v492372, v492397

    Begin block 0x39b0x492
    prev=[0x3920x492], succ=[]
    =================================
    0x3a40x492: RETURNPRIVATE v492arg0, v49a

}

function 0x676(0x676arg0x0, 0x676arg0x1, 0x676arg0x2, 0x676arg0x3) private {
    Begin block 0x676
    prev=[], succ=[0x685, 0x6bb]
    =================================
    0x677: v677(0x1) = CONST 
    0x679: v679(0x1) = CONST 
    0x67b: v67b(0xa0) = CONST 
    0x67d: v67d(0x10000000000000000000000000000000000000000) = SHL v67b(0xa0), v679(0x1)
    0x67e: v67e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v67d(0x10000000000000000000000000000000000000000), v677(0x1)
    0x680: v680 = AND v676arg2, v67e(0xffffffffffffffffffffffffffffffffffffffff)
    0x681: v681(0x6bb) = CONST 
    0x684: JUMPI v681(0x6bb), v680

    Begin block 0x685
    prev=[0x676], succ=[]
    =================================
    0x685: v685(0x40) = CONST 
    0x687: v687 = MLOAD v685(0x40)
    0x688: v688(0x461bcd) = CONST 
    0x68c: v68c(0xe5) = CONST 
    0x68e: v68e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v68c(0xe5), v688(0x461bcd)
    0x690: MSTORE v687, v68e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x691: v691(0x4) = CONST 
    0x693: v693 = ADD v691(0x4), v687
    0x696: v696(0x20) = CONST 
    0x698: v698 = ADD v696(0x20), v693
    0x69b: v69b(0x20) = SUB v698, v693
    0x69d: MSTORE v693, v69b(0x20)
    0x69e: v69e(0x24) = CONST 
    0x6a1: MSTORE v698, v69e(0x24)
    0x6a2: v6a2(0x20) = CONST 
    0x6a4: v6a4 = ADD v6a2(0x20), v698
    0x6a6: v6a6(0xbda) = CONST 
    0x6a9: v6a9(0x24) = CONST 
    0x6ac: CODECOPY v6a4, v6a6(0xbda), v6a9(0x24)
    0x6ad: v6ad(0x40) = CONST 
    0x6af: v6af = ADD v6ad(0x40), v6a4
    0x6b3: v6b3(0x40) = CONST 
    0x6b5: v6b5 = MLOAD v6b3(0x40)
    0x6b8: v6b8(0x84) = SUB v6af, v6b5
    0x6ba: REVERT v6b5, v6b8(0x84)

    Begin block 0x6bb
    prev=[0x676], succ=[0x6ca, 0x700]
    =================================
    0x6bc: v6bc(0x1) = CONST 
    0x6be: v6be(0x1) = CONST 
    0x6c0: v6c0(0xa0) = CONST 
    0x6c2: v6c2(0x10000000000000000000000000000000000000000) = SHL v6c0(0xa0), v6be(0x1)
    0x6c3: v6c3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6c2(0x10000000000000000000000000000000000000000), v6bc(0x1)
    0x6c5: v6c5 = AND v676arg1, v6c3(0xffffffffffffffffffffffffffffffffffffffff)
    0x6c6: v6c6(0x700) = CONST 
    0x6c9: JUMPI v6c6(0x700), v6c5

    Begin block 0x6ca
    prev=[0x6bb], succ=[]
    =================================
    0x6ca: v6ca(0x40) = CONST 
    0x6cc: v6cc = MLOAD v6ca(0x40)
    0x6cd: v6cd(0x461bcd) = CONST 
    0x6d1: v6d1(0xe5) = CONST 
    0x6d3: v6d3(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6d1(0xe5), v6cd(0x461bcd)
    0x6d5: MSTORE v6cc, v6d3(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x6d6: v6d6(0x4) = CONST 
    0x6d8: v6d8 = ADD v6d6(0x4), v6cc
    0x6db: v6db(0x20) = CONST 
    0x6dd: v6dd = ADD v6db(0x20), v6d8
    0x6e0: v6e0(0x20) = SUB v6dd, v6d8
    0x6e2: MSTORE v6d8, v6e0(0x20)
    0x6e3: v6e3(0x22) = CONST 
    0x6e6: MSTORE v6dd, v6e3(0x22)
    0x6e7: v6e7(0x20) = CONST 
    0x6e9: v6e9 = ADD v6e7(0x20), v6dd
    0x6eb: v6eb(0xb45) = CONST 
    0x6ee: v6ee(0x22) = CONST 
    0x6f1: CODECOPY v6e9, v6eb(0xb45), v6ee(0x22)
    0x6f2: v6f2(0x40) = CONST 
    0x6f4: v6f4 = ADD v6f2(0x40), v6e9
    0x6f8: v6f8(0x40) = CONST 
    0x6fa: v6fa = MLOAD v6f8(0x40)
    0x6fd: v6fd(0x84) = SUB v6f4, v6fa
    0x6ff: REVERT v6fa, v6fd(0x84)

    Begin block 0x700
    prev=[0x6bb], succ=[]
    =================================
    0x701: v701(0x1) = CONST 
    0x703: v703(0x1) = CONST 
    0x705: v705(0xa0) = CONST 
    0x707: v707(0x10000000000000000000000000000000000000000) = SHL v705(0xa0), v703(0x1)
    0x708: v708(0xffffffffffffffffffffffffffffffffffffffff) = SUB v707(0x10000000000000000000000000000000000000000), v701(0x1)
    0x70b: v70b = AND v676arg2, v708(0xffffffffffffffffffffffffffffffffffffffff)
    0x70c: v70c(0x0) = CONST 
    0x710: MSTORE v70c(0x0), v70b
    0x711: v711(0x1) = CONST 
    0x713: v713(0x20) = CONST 
    0x717: MSTORE v713(0x20), v711(0x1)
    0x718: v718(0x40) = CONST 
    0x71c: v71c = SHA3 v70c(0x0), v718(0x40)
    0x71f: v71f = AND v676arg1, v708(0xffffffffffffffffffffffffffffffffffffffff)
    0x722: MSTORE v70c(0x0), v71f
    0x725: MSTORE v713(0x20), v71c
    0x729: v729 = SHA3 v70c(0x0), v718(0x40)
    0x72c: SSTORE v729, v676arg0
    0x72e: v72e = MLOAD v718(0x40)
    0x731: MSTORE v72e, v676arg0
    0x733: v733 = MLOAD v718(0x40)
    0x734: v734(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
    0x758: v758(0x0) = SUB v72e, v733
    0x75b: v75b(0x20) = ADD v713(0x20), v758(0x0)
    0x75d: LOG3 v733, v75b(0x20), v734(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925), v70b, v71f
    0x761: RETURNPRIVATE v676arg3

}

function 0x762(0x762arg0x0, 0x762arg0x1, 0x762arg0x2, 0x762arg0x3) private {
    Begin block 0x762
    prev=[], succ=[0x771, 0x7a7]
    =================================
    0x763: v763(0x1) = CONST 
    0x765: v765(0x1) = CONST 
    0x767: v767(0xa0) = CONST 
    0x769: v769(0x10000000000000000000000000000000000000000) = SHL v767(0xa0), v765(0x1)
    0x76a: v76a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v769(0x10000000000000000000000000000000000000000), v763(0x1)
    0x76c: v76c = AND v762arg2, v76a(0xffffffffffffffffffffffffffffffffffffffff)
    0x76d: v76d(0x7a7) = CONST 
    0x770: JUMPI v76d(0x7a7), v76c

    Begin block 0x771
    prev=[0x762], succ=[]
    =================================
    0x771: v771(0x40) = CONST 
    0x773: v773 = MLOAD v771(0x40)
    0x774: v774(0x461bcd) = CONST 
    0x778: v778(0xe5) = CONST 
    0x77a: v77a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v778(0xe5), v774(0x461bcd)
    0x77c: MSTORE v773, v77a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x77d: v77d(0x4) = CONST 
    0x77f: v77f = ADD v77d(0x4), v773
    0x782: v782(0x20) = CONST 
    0x784: v784 = ADD v782(0x20), v77f
    0x787: v787(0x20) = SUB v784, v77f
    0x789: MSTORE v77f, v787(0x20)
    0x78a: v78a(0x25) = CONST 
    0x78d: MSTORE v784, v78a(0x25)
    0x78e: v78e(0x20) = CONST 
    0x790: v790 = ADD v78e(0x20), v784
    0x792: v792(0xbb5) = CONST 
    0x795: v795(0x25) = CONST 
    0x798: CODECOPY v790, v792(0xbb5), v795(0x25)
    0x799: v799(0x40) = CONST 
    0x79b: v79b = ADD v799(0x40), v790
    0x79f: v79f(0x40) = CONST 
    0x7a1: v7a1 = MLOAD v79f(0x40)
    0x7a4: v7a4(0x84) = SUB v79b, v7a1
    0x7a6: REVERT v7a1, v7a4(0x84)

    Begin block 0x7a7
    prev=[0x762], succ=[0x7b6, 0x7ec]
    =================================
    0x7a8: v7a8(0x1) = CONST 
    0x7aa: v7aa(0x1) = CONST 
    0x7ac: v7ac(0xa0) = CONST 
    0x7ae: v7ae(0x10000000000000000000000000000000000000000) = SHL v7ac(0xa0), v7aa(0x1)
    0x7af: v7af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7ae(0x10000000000000000000000000000000000000000), v7a8(0x1)
    0x7b1: v7b1 = AND v762arg1, v7af(0xffffffffffffffffffffffffffffffffffffffff)
    0x7b2: v7b2(0x7ec) = CONST 
    0x7b5: JUMPI v7b2(0x7ec), v7b1

    Begin block 0x7b6
    prev=[0x7a7], succ=[]
    =================================
    0x7b6: v7b6(0x40) = CONST 
    0x7b8: v7b8 = MLOAD v7b6(0x40)
    0x7b9: v7b9(0x461bcd) = CONST 
    0x7bd: v7bd(0xe5) = CONST 
    0x7bf: v7bf(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v7bd(0xe5), v7b9(0x461bcd)
    0x7c1: MSTORE v7b8, v7bf(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x7c2: v7c2(0x4) = CONST 
    0x7c4: v7c4 = ADD v7c2(0x4), v7b8
    0x7c7: v7c7(0x20) = CONST 
    0x7c9: v7c9 = ADD v7c7(0x20), v7c4
    0x7cc: v7cc(0x20) = SUB v7c9, v7c4
    0x7ce: MSTORE v7c4, v7cc(0x20)
    0x7cf: v7cf(0x23) = CONST 
    0x7d2: MSTORE v7c9, v7cf(0x23)
    0x7d3: v7d3(0x20) = CONST 
    0x7d5: v7d5 = ADD v7d3(0x20), v7c9
    0x7d7: v7d7(0xb22) = CONST 
    0x7da: v7da(0x23) = CONST 
    0x7dd: CODECOPY v7d5, v7d7(0xb22), v7da(0x23)
    0x7de: v7de(0x40) = CONST 
    0x7e0: v7e0 = ADD v7de(0x40), v7d5
    0x7e4: v7e4(0x40) = CONST 
    0x7e6: v7e6 = MLOAD v7e4(0x40)
    0x7e9: v7e9(0x84) = SUB v7e0, v7e6
    0x7eb: REVERT v7e6, v7e9(0x84)

    Begin block 0x7ec
    prev=[0x7a7], succ=[0x829]
    =================================
    0x7ed: v7ed(0x829) = CONST 
    0x7f1: v7f1(0x40) = CONST 
    0x7f3: v7f3 = MLOAD v7f1(0x40)
    0x7f5: v7f5(0x60) = CONST 
    0x7f7: v7f7 = ADD v7f5(0x60), v7f3
    0x7f8: v7f8(0x40) = CONST 
    0x7fa: MSTORE v7f8(0x40), v7f7
    0x7fc: v7fc(0x26) = CONST 
    0x7ff: MSTORE v7f3, v7fc(0x26)
    0x800: v800(0x20) = CONST 
    0x802: v802 = ADD v800(0x20), v7f3
    0x803: v803(0xb67) = CONST 
    0x806: v806(0x26) = CONST 
    0x809: CODECOPY v802, v803(0xb67), v806(0x26)
    0x80a: v80a(0x1) = CONST 
    0x80c: v80c(0x1) = CONST 
    0x80e: v80e(0xa0) = CONST 
    0x810: v810(0x10000000000000000000000000000000000000000) = SHL v80e(0xa0), v80c(0x1)
    0x811: v811(0xffffffffffffffffffffffffffffffffffffffff) = SUB v810(0x10000000000000000000000000000000000000000), v80a(0x1)
    0x813: v813 = AND v762arg2, v811(0xffffffffffffffffffffffffffffffffffffffff)
    0x814: v814(0x0) = CONST 
    0x818: MSTORE v814(0x0), v813
    0x819: v819(0x20) = CONST 
    0x81d: MSTORE v819(0x20), v814(0x0)
    0x81e: v81e(0x40) = CONST 
    0x821: v821 = SHA3 v814(0x0), v81e(0x40)
    0x822: v822 = SLOAD v821
    0x825: v825(0x8b2) = CONST 
    0x828: v828_0 = CALLPRIVATE v825(0x8b2), v7f3, v762arg0, v822, v7ed(0x829)

    Begin block 0x829
    prev=[0x7ec], succ=[0x949B0x829]
    =================================
    0x82a: v82a(0x1) = CONST 
    0x82c: v82c(0x1) = CONST 
    0x82e: v82e(0xa0) = CONST 
    0x830: v830(0x10000000000000000000000000000000000000000) = SHL v82e(0xa0), v82c(0x1)
    0x831: v831(0xffffffffffffffffffffffffffffffffffffffff) = SUB v830(0x10000000000000000000000000000000000000000), v82a(0x1)
    0x834: v834 = AND v762arg2, v831(0xffffffffffffffffffffffffffffffffffffffff)
    0x835: v835(0x0) = CONST 
    0x839: MSTORE v835(0x0), v834
    0x83a: v83a(0x20) = CONST 
    0x83e: MSTORE v83a(0x20), v835(0x0)
    0x83f: v83f(0x40) = CONST 
    0x843: v843 = SHA3 v835(0x0), v83f(0x40)
    0x847: SSTORE v843, v828_0
    0x84a: v84a = AND v762arg1, v831(0xffffffffffffffffffffffffffffffffffffffff)
    0x84c: MSTORE v835(0x0), v84a
    0x84d: v84d = SHA3 v835(0x0), v83f(0x40)
    0x84e: v84e = SLOAD v84d
    0x84f: v84f(0x858) = CONST 
    0x854: v854(0x949) = CONST 
    0x857: JUMP v854(0x949)

    Begin block 0x949B0x829
    prev=[0x829], succ=[0x957B0x829, 0x9a3B0x829]
    =================================
    0x94aS0x829: v94aV829(0x0) = CONST 
    0x94eS0x829: v94eV829 = ADD v762arg0, v84e
    0x951S0x829: v951V829 = LT v94eV829, v84e
    0x952S0x829: v952V829 = ISZERO v951V829
    0x953S0x829: v953V829(0x9a3) = CONST 
    0x956S0x829: JUMPI v953V829(0x9a3), v952V829

    Begin block 0x957B0x829
    prev=[0x949B0x829], succ=[]
    =================================
    0x957S0x829: v957V829(0x40) = CONST 
    0x95aS0x829: v95aV829 = MLOAD v957V829(0x40)
    0x95bS0x829: v95bV829(0x461bcd) = CONST 
    0x95fS0x829: v95fV829(0xe5) = CONST 
    0x961S0x829: v961V829(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v95fV829(0xe5), v95bV829(0x461bcd)
    0x963S0x829: MSTORE v95aV829, v961V829(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x964S0x829: v964V829(0x20) = CONST 
    0x966S0x829: v966V829(0x4) = CONST 
    0x969S0x829: v969V829 = ADD v95aV829, v966V829(0x4)
    0x96aS0x829: MSTORE v969V829, v964V829(0x20)
    0x96bS0x829: v96bV829(0x1b) = CONST 
    0x96dS0x829: v96dV829(0x24) = CONST 
    0x970S0x829: v970V829 = ADD v95aV829, v96dV829(0x24)
    0x971S0x829: MSTORE v970V829, v96bV829(0x1b)
    0x972S0x829: v972V829(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x993S0x829: v993V829(0x44) = CONST 
    0x996S0x829: v996V829 = ADD v95aV829, v993V829(0x44)
    0x997S0x829: MSTORE v996V829, v972V829(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x999S0x829: v999V829 = MLOAD v957V829(0x40)
    0x99dS0x829: v99dV829(0x0) = SUB v95aV829, v999V829
    0x99eS0x829: v99eV829(0x64) = CONST 
    0x9a0S0x829: v9a0V829(0x64) = ADD v99eV829(0x64), v99dV829(0x0)
    0x9a2S0x829: REVERT v999V829, v9a0V829(0x64)

    Begin block 0x9a3B0x829
    prev=[0x949B0x829], succ=[0x858]
    =================================
    0x9a9S0x829: JUMP v84f(0x858)

    Begin block 0x858
    prev=[0x9a3B0x829], succ=[]
    =================================
    0x859: v859(0x1) = CONST 
    0x85b: v85b(0x1) = CONST 
    0x85d: v85d(0xa0) = CONST 
    0x85f: v85f(0x10000000000000000000000000000000000000000) = SHL v85d(0xa0), v85b(0x1)
    0x860: v860(0xffffffffffffffffffffffffffffffffffffffff) = SUB v85f(0x10000000000000000000000000000000000000000), v859(0x1)
    0x863: v863 = AND v762arg1, v860(0xffffffffffffffffffffffffffffffffffffffff)
    0x864: v864(0x0) = CONST 
    0x868: MSTORE v864(0x0), v863
    0x869: v869(0x20) = CONST 
    0x86d: MSTORE v869(0x20), v864(0x0)
    0x86e: v86e(0x40) = CONST 
    0x873: v873 = SHA3 v864(0x0), v86e(0x40)
    0x877: SSTORE v873, v94eV829
    0x879: v879 = MLOAD v86e(0x40)
    0x87c: MSTORE v879, v762arg0
    0x87e: v87e = MLOAD v86e(0x40)
    0x883: v883 = AND v762arg2, v860(0xffffffffffffffffffffffffffffffffffffffff)
    0x885: v885(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
    0x8aa: v8aa(0x0) = SUB v879, v87e
    0x8ab: v8ab(0x20) = ADD v8aa(0x0), v869(0x20)
    0x8ad: LOG3 v87e, v8ab(0x20), v885(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), v883, v863
    0x8b1: RETURNPRIVATE v762arg3

}

function 0x8b2(0x8b2arg0x0, 0x8b2arg0x1, 0x8b2arg0x2, 0x8b2arg0x3) private {
    Begin block 0x8b2
    prev=[], succ=[0x8be, 0x941]
    =================================
    0x8b3: v8b3(0x0) = CONST 
    0x8b8: v8b8 = GT v8b2arg1, v8b2arg2
    0x8b9: v8b9 = ISZERO v8b8
    0x8ba: v8ba(0x941) = CONST 
    0x8bd: JUMPI v8ba(0x941), v8b9

    Begin block 0x8be
    prev=[0x8b2], succ=[0x8ee]
    =================================
    0x8be: v8be(0x40) = CONST 
    0x8c0: v8c0 = MLOAD v8be(0x40)
    0x8c1: v8c1(0x461bcd) = CONST 
    0x8c5: v8c5(0xe5) = CONST 
    0x8c7: v8c7(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v8c5(0xe5), v8c1(0x461bcd)
    0x8c9: MSTORE v8c0, v8c7(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x8ca: v8ca(0x4) = CONST 
    0x8cc: v8cc = ADD v8ca(0x4), v8c0
    0x8cf: v8cf(0x20) = CONST 
    0x8d1: v8d1 = ADD v8cf(0x20), v8cc
    0x8d4: v8d4(0x20) = SUB v8d1, v8cc
    0x8d6: MSTORE v8cc, v8d4(0x20)
    0x8da: v8da = MLOAD v8b2arg0
    0x8dc: MSTORE v8d1, v8da
    0x8dd: v8dd(0x20) = CONST 
    0x8df: v8df = ADD v8dd(0x20), v8d1
    0x8e3: v8e3 = MLOAD v8b2arg0
    0x8e5: v8e5(0x20) = CONST 
    0x8e7: v8e7 = ADD v8e5(0x20), v8b2arg0
    0x8ec: v8ec(0x0) = CONST 

    Begin block 0x8ee
    prev=[0x8be, 0x8f7], succ=[0x906, 0x8f7]
    =================================
    0x8ee_0x0: v8ee_0 = PHI v8ec(0x0), v901
    0x8f1: v8f1 = LT v8ee_0, v8e3
    0x8f2: v8f2 = ISZERO v8f1
    0x8f3: v8f3(0x906) = CONST 
    0x8f6: JUMPI v8f3(0x906), v8f2

    Begin block 0x906
    prev=[0x8ee], succ=[0x933, 0x91a]
    =================================
    0x90f: v90f = ADD v8e3, v8df
    0x911: v911(0x1f) = CONST 
    0x913: v913 = AND v911(0x1f), v8e3
    0x915: v915 = ISZERO v913
    0x916: v916(0x933) = CONST 
    0x919: JUMPI v916(0x933), v915

    Begin block 0x933
    prev=[0x906, 0x91a], succ=[]
    =================================
    0x933_0x1: v933_1 = PHI v90f, v930
    0x939: v939(0x40) = CONST 
    0x93b: v93b = MLOAD v939(0x40)
    0x93e: v93e = SUB v933_1, v93b
    0x940: REVERT v93b, v93e

    Begin block 0x91a
    prev=[0x906], succ=[0x933]
    =================================
    0x91c: v91c = SUB v90f, v913
    0x91e: v91e = MLOAD v91c
    0x91f: v91f(0x1) = CONST 
    0x922: v922(0x20) = CONST 
    0x924: v924 = SUB v922(0x20), v913
    0x925: v925(0x100) = CONST 
    0x928: v928 = EXP v925(0x100), v924
    0x929: v929 = SUB v928, v91f(0x1)
    0x92a: v92a = NOT v929
    0x92b: v92b = AND v92a, v91e
    0x92d: MSTORE v91c, v92b
    0x92e: v92e(0x20) = CONST 
    0x930: v930 = ADD v92e(0x20), v91c

    Begin block 0x8f7
    prev=[0x8ee], succ=[0x8ee]
    =================================
    0x8f7_0x0: v8f7_0 = PHI v8ec(0x0), v901
    0x8f9: v8f9 = ADD v8f7_0, v8e7
    0x8fa: v8fa = MLOAD v8f9
    0x8fd: v8fd = ADD v8f7_0, v8df
    0x8fe: MSTORE v8fd, v8fa
    0x8ff: v8ff(0x20) = CONST 
    0x901: v901 = ADD v8ff(0x20), v8f7_0
    0x902: v902(0x8ee) = CONST 
    0x905: JUMP v902(0x8ee)

    Begin block 0x941
    prev=[0x8b2], succ=[]
    =================================
    0x946: v946 = SUB v8b2arg2, v8b2arg1
    0x948: RETURNPRIVATE v8b2arg3, v946

}

function fallback()() public {
    Begin block 0xc60
    prev=[], succ=[]
    =================================
    0xc61: vc61(0x0) = CONST 
    0xc64: REVERT vc61(0x0), vc61(0x0)

}

function name()() public {
    Begin block 0xd4
    prev=[], succ=[0xdc0xd4]
    =================================
    0xd5: vd5(0xdc) = CONST 
    0xd8: vd8(0x30f) = CONST 
    0xdb: vdb_0 = CALLPRIVATE vd8(0x30f), vd5(0xdc)

    Begin block 0xdc0xd4
    prev=[0xd4], succ=[0xfe0xd4]
    =================================
    0xdd0xd4: vd4dd(0x40) = CONST 
    0xe00xd4: vd4e0 = MLOAD vd4dd(0x40)
    0xe10xd4: vd4e1(0x20) = CONST 
    0xe50xd4: MSTORE vd4e0, vd4e1(0x20)
    0xe70xd4: vd4e7 = MLOAD vdb_0
    0xea0xd4: vd4ea = ADD vd4e0, vd4e1(0x20)
    0xeb0xd4: MSTORE vd4ea, vd4e7
    0xed0xd4: vd4ed = MLOAD vdb_0
    0xf40xd4: vd4f4 = ADD vd4e0, vd4dd(0x40)
    0xf70xd4: vd4f7 = ADD vdb_0, vd4e1(0x20)
    0xfc0xd4: vd4fc(0x0) = CONST 

    Begin block 0xfe0xd4
    prev=[0x1070xd4, 0xdc0xd4], succ=[0x1160xd4, 0x1070xd4]
    =================================
    0xfe0xd4_0x0: vfed4_0 = PHI vd4111, vd4fc(0x0)
    0x1010xd4: vd4101 = LT vfed4_0, vd4ed
    0x1020xd4: vd4102 = ISZERO vd4101
    0x1030xd4: vd4103(0x116) = CONST 
    0x1060xd4: JUMPI vd4103(0x116), vd4102

    Begin block 0x1160xd4
    prev=[0xfe0xd4], succ=[0x1430xd4, 0x12a0xd4]
    =================================
    0x11f0xd4: vd411f = ADD vd4ed, vd4f4
    0x1210xd4: vd4121(0x1f) = CONST 
    0x1230xd4: vd4123 = AND vd4121(0x1f), vd4ed
    0x1250xd4: vd4125 = ISZERO vd4123
    0x1260xd4: vd4126(0x143) = CONST 
    0x1290xd4: JUMPI vd4126(0x143), vd4125

    Begin block 0x1430xd4
    prev=[0x1160xd4, 0x12a0xd4], succ=[]
    =================================
    0x1430xd4_0x1: v143d4_1 = PHI vd4140, vd411f
    0x1490xd4: vd4149(0x40) = CONST 
    0x14b0xd4: vd414b = MLOAD vd4149(0x40)
    0x14e0xd4: vd414e = SUB v143d4_1, vd414b
    0x1500xd4: RETURN vd414b, vd414e

    Begin block 0x12a0xd4
    prev=[0x1160xd4], succ=[0x1430xd4]
    =================================
    0x12c0xd4: vd412c = SUB vd411f, vd4123
    0x12e0xd4: vd412e = MLOAD vd412c
    0x12f0xd4: vd412f(0x1) = CONST 
    0x1320xd4: vd4132(0x20) = CONST 
    0x1340xd4: vd4134 = SUB vd4132(0x20), vd4123
    0x1350xd4: vd4135(0x100) = CONST 
    0x1380xd4: vd4138 = EXP vd4135(0x100), vd4134
    0x1390xd4: vd4139 = SUB vd4138, vd412f(0x1)
    0x13a0xd4: vd413a = NOT vd4139
    0x13b0xd4: vd413b = AND vd413a, vd412e
    0x13d0xd4: MSTORE vd412c, vd413b
    0x13e0xd4: vd413e(0x20) = CONST 
    0x1400xd4: vd4140 = ADD vd413e(0x20), vd412c

    Begin block 0x1070xd4
    prev=[0xfe0xd4], succ=[0xfe0xd4]
    =================================
    0x1070xd4_0x0: v107d4_0 = PHI vd4111, vd4fc(0x0)
    0x1090xd4: vd4109 = ADD v107d4_0, vd4f7
    0x10a0xd4: vd410a = MLOAD vd4109
    0x10d0xd4: vd410d = ADD v107d4_0, vd4f4
    0x10e0xd4: MSTORE vd410d, vd410a
    0x10f0xd4: vd410f(0x20) = CONST 
    0x1110xd4: vd4111 = ADD vd410f(0x20), v107d4_0
    0x1120xd4: vd4112(0xfe) = CONST 
    0x1150xd4: JUMP vd4112(0xfe)

}

