function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x1017]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0xfe3: vfe3(0x1017) = CONST 
    0xfe4: JUMPI vfe3(0x1017), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x66, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x8da7ad23) = CONST 
    0x26: v26 = GT v21(0x8da7ad23), v1f
    0x27: v27(0x66) = CONST 
    0x2a: JUMPI v27(0x66), v26

    Begin block 0x66
    prev=[0x1a], succ=[0xff9, 0x72]
    =================================
    0x68: v68(0x2def6620) = CONST 
    0x6d: v6d = EQ v68(0x2def6620), v1f
    0xfef: vfef(0xff9) = CONST 
    0xff0: JUMPI vfef(0xff9), v6d

    Begin block 0xff9
    prev=[0x66], succ=[]
    =================================
    0xffa: vffa(0xa3) = CONST 
    0xffb: CALLPRIVATE vffa(0xa3)

    Begin block 0x72
    prev=[0x66], succ=[0xffc, 0x7d]
    =================================
    0x73: v73(0x648bf774) = CONST 
    0x78: v78 = EQ v73(0x648bf774), v1f
    0xff1: vff1(0xffc) = CONST 
    0xff2: JUMPI vff1(0xffc), v78

    Begin block 0xffc
    prev=[0x72], succ=[]
    =================================
    0xffd: vffd(0xad) = CONST 
    0xffe: CALLPRIVATE vffd(0xad)

    Begin block 0x7d
    prev=[0x72], succ=[0xfff, 0x88]
    =================================
    0x7e: v7e(0x715018a6) = CONST 
    0x83: v83 = EQ v7e(0x715018a6), v1f
    0xff3: vff3(0xfff) = CONST 
    0xff4: JUMPI vff3(0xfff), v83

    Begin block 0xfff
    prev=[0x7d], succ=[]
    =================================
    0x1000: v1000(0xdb) = CONST 
    0x1001: CALLPRIVATE v1000(0xdb)

    Begin block 0x88
    prev=[0x7d], succ=[0x1002, 0x93]
    =================================
    0x89: v89(0x817b1cd2) = CONST 
    0x8e: v8e = EQ v89(0x817b1cd2), v1f
    0xff5: vff5(0x1002) = CONST 
    0xff6: JUMPI vff5(0x1002), v8e

    Begin block 0x1002
    prev=[0x88], succ=[]
    =================================
    0x1003: v1003(0xe3) = CONST 
    0x1004: CALLPRIVATE v1003(0xe3)

    Begin block 0x93
    prev=[0x88], succ=[0x1005, 0x9e]
    =================================
    0x94: v94(0x8da5cb5b) = CONST 
    0x99: v99 = EQ v94(0x8da5cb5b), v1f
    0xff7: vff7(0x1005) = CONST 
    0xff8: JUMPI vff7(0x1005), v99

    Begin block 0x1005
    prev=[0x93], succ=[]
    =================================
    0x1006: v1006(0xfd) = CONST 
    0x1007: CALLPRIVATE v1006(0xfd)

    Begin block 0x9e
    prev=[0x93], succ=[]
    =================================
    0x9f: v9f(0x0) = CONST 
    0xa2: REVERT v9f(0x0), v9f(0x0)

    Begin block 0x2b
    prev=[0x1a], succ=[0x1008, 0x36]
    =================================
    0x2c: v2c(0x8da7ad23) = CONST 
    0x31: v31 = EQ v2c(0x8da7ad23), v1f
    0xfe5: vfe5(0x1008) = CONST 
    0xfe6: JUMPI vfe5(0x1008), v31

    Begin block 0x1008
    prev=[0x2b], succ=[]
    =================================
    0x1009: v1009(0x121) = CONST 
    0x100a: CALLPRIVATE v1009(0x121)

    Begin block 0x36
    prev=[0x2b], succ=[0x100b, 0x41]
    =================================
    0x37: v37(0xa694fc3a) = CONST 
    0x3c: v3c = EQ v37(0xa694fc3a), v1f
    0xfe7: vfe7(0x100b) = CONST 
    0xfe8: JUMPI vfe7(0x100b), v3c

    Begin block 0x100b
    prev=[0x36], succ=[]
    =================================
    0x100c: v100c(0x147) = CONST 
    0x100d: CALLPRIVATE v100c(0x147)

    Begin block 0x41
    prev=[0x36], succ=[0x100e, 0x4c]
    =================================
    0x42: v42(0xc4d66de8) = CONST 
    0x47: v47 = EQ v42(0xc4d66de8), v1f
    0xfe9: vfe9(0x100e) = CONST 
    0xfea: JUMPI vfe9(0x100e), v47

    Begin block 0x100e
    prev=[0x41], succ=[]
    =================================
    0x100f: v100f(0x164) = CONST 
    0x1010: CALLPRIVATE v100f(0x164)

    Begin block 0x4c
    prev=[0x41], succ=[0x1011, 0x57]
    =================================
    0x4d: v4d(0xcad92a4b) = CONST 
    0x52: v52 = EQ v4d(0xcad92a4b), v1f
    0xfeb: vfeb(0x1011) = CONST 
    0xfec: JUMPI vfeb(0x1011), v52

    Begin block 0x1011
    prev=[0x4c], succ=[]
    =================================
    0x1012: v1012(0x18a) = CONST 
    0x1013: CALLPRIVATE v1012(0x18a)

    Begin block 0x57
    prev=[0x4c], succ=[0x62, 0x1014]
    =================================
    0x58: v58(0xf2fde38b) = CONST 
    0x5d: v5d = EQ v58(0xf2fde38b), v1f
    0xfed: vfed(0x1014) = CONST 
    0xfee: JUMPI vfed(0x1014), v5d

    Begin block 0x62
    prev=[0x57], succ=[0xdda]
    =================================
    0x62: v62(0xdda) = CONST 
    0x65: JUMP v62(0xdda)

    Begin block 0xdda
    prev=[0x62], succ=[]
    =================================
    0xddb: vddb(0x0) = CONST 
    0xdde: REVERT vddb(0x0), vddb(0x0)

    Begin block 0x1014
    prev=[0x57], succ=[]
    =================================
    0x1015: v1015(0x192) = CONST 
    0x1016: CALLPRIVATE v1015(0x192)

    Begin block 0x1017
    prev=[0x10], succ=[]
    =================================
    0x1018: v1018(0xdb6) = CONST 
    0x1019: CALLPRIVATE v1018(0xdb6)

}

function userStakes(address)() public {
    Begin block 0x121
    prev=[], succ=[0x133, 0x137]
    =================================
    0x122: v122(0xecd) = CONST 
    0x125: v125(0x4) = CONST 
    0x128: v128 = CALLDATASIZE 
    0x129: v129 = SUB v128, v125(0x4)
    0x12a: v12a(0x20) = CONST 
    0x12d: v12d = LT v129, v12a(0x20)
    0x12e: v12e = ISZERO v12d
    0x12f: v12f(0x137) = CONST 
    0x132: JUMPI v12f(0x137), v12e

    Begin block 0x133
    prev=[0x121], succ=[]
    =================================
    0x133: v133(0x0) = CONST 
    0x136: REVERT v133(0x0), v133(0x0)

    Begin block 0x137
    prev=[0x121], succ=[0x52d]
    =================================
    0x139: v139 = CALLDATALOAD v125(0x4)
    0x13a: v13a(0x1) = CONST 
    0x13c: v13c(0x1) = CONST 
    0x13e: v13e(0xa0) = CONST 
    0x140: v140(0x10000000000000000000000000000000000000000) = SHL v13e(0xa0), v13c(0x1)
    0x141: v141(0xffffffffffffffffffffffffffffffffffffffff) = SUB v140(0x10000000000000000000000000000000000000000), v13a(0x1)
    0x142: v142 = AND v141(0xffffffffffffffffffffffffffffffffffffffff), v139
    0x143: v143(0x52d) = CONST 
    0x146: JUMP v143(0x52d)

    Begin block 0x52d
    prev=[0x137], succ=[0xecd]
    =================================
    0x52e: v52e(0x67) = CONST 
    0x530: v530(0x20) = CONST 
    0x532: MSTORE v530(0x20), v52e(0x67)
    0x533: v533(0x0) = CONST 
    0x537: MSTORE v533(0x0), v142
    0x538: v538(0x40) = CONST 
    0x53b: v53b = SHA3 v533(0x0), v538(0x40)
    0x53c: v53c = SLOAD v53b
    0x53e: JUMP v122(0xecd)

    Begin block 0xecd
    prev=[0x52d], succ=[]
    =================================
    0xece: vece(0x40) = CONST 
    0xed1: ved1 = MLOAD vece(0x40)
    0xed4: MSTORE ved1, v53c
    0xed5: ved5 = MLOAD vece(0x40)
    0xed9: ved9(0x0) = SUB ved1, ved5
    0xeda: veda(0x20) = CONST 
    0xedc: vedc(0x20) = ADD veda(0x20), ved9(0x0)
    0xede: RETURN ved5, vedc(0x20)

}

function stake(uint256)() public {
    Begin block 0x147
    prev=[], succ=[0x159, 0x15d]
    =================================
    0x148: v148(0xefe) = CONST 
    0x14b: v14b(0x4) = CONST 
    0x14e: v14e = CALLDATASIZE 
    0x14f: v14f = SUB v14e, v14b(0x4)
    0x150: v150(0x20) = CONST 
    0x153: v153 = LT v14f, v150(0x20)
    0x154: v154 = ISZERO v153
    0x155: v155(0x15d) = CONST 
    0x158: JUMPI v155(0x15d), v154

    Begin block 0x159
    prev=[0x147], succ=[]
    =================================
    0x159: v159(0x0) = CONST 
    0x15c: REVERT v159(0x0), v159(0x0)

    Begin block 0x15d
    prev=[0x147], succ=[0x53f]
    =================================
    0x15f: v15f = CALLDATALOAD v14b(0x4)
    0x160: v160(0x53f) = CONST 
    0x163: JUMP v160(0x53f)

    Begin block 0x53f
    prev=[0x15d], succ=[0x548, 0x585]
    =================================
    0x540: v540(0x0) = CONST 
    0x543: v543 = GT v15f, v540(0x0)
    0x544: v544(0x585) = CONST 
    0x547: JUMPI v544(0x585), v543

    Begin block 0x548
    prev=[0x53f], succ=[]
    =================================
    0x548: v548(0x40) = CONST 
    0x54b: v54b = MLOAD v548(0x40)
    0x54c: v54c(0x461bcd) = CONST 
    0x550: v550(0xe5) = CONST 
    0x552: v552(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v550(0xe5), v54c(0x461bcd)
    0x554: MSTORE v54b, v552(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x555: v555(0x20) = CONST 
    0x557: v557(0x4) = CONST 
    0x55a: v55a = ADD v54b, v557(0x4)
    0x55b: MSTORE v55a, v555(0x20)
    0x55c: v55c(0xe) = CONST 
    0x55e: v55e(0x24) = CONST 
    0x561: v561 = ADD v54b, v55e(0x24)
    0x562: MSTORE v561, v55c(0xe)
    0x563: v563(0x125b9d985b1a5908185b5bdd5b9d) = CONST 
    0x572: v572(0x92) = CONST 
    0x574: v574(0x496e76616c696420616d6f756e74000000000000000000000000000000000000) = SHL v572(0x92), v563(0x125b9d985b1a5908185b5bdd5b9d)
    0x575: v575(0x44) = CONST 
    0x578: v578 = ADD v54b, v575(0x44)
    0x579: MSTORE v578, v574(0x496e76616c696420616d6f756e74000000000000000000000000000000000000)
    0x57b: v57b = MLOAD v548(0x40)
    0x57f: v57f(0x0) = SUB v54b, v57b
    0x580: v580(0x64) = CONST 
    0x582: v582(0x64) = ADD v580(0x64), v57f(0x0)
    0x584: REVERT v57b, v582(0x64)

    Begin block 0x585
    prev=[0x53f], succ=[0xa1dB0x585]
    =================================
    0x586: v586 = CALLER 
    0x587: v587(0x0) = CONST 
    0x58b: MSTORE v587(0x0), v586
    0x58c: v58c(0x67) = CONST 
    0x58e: v58e(0x20) = CONST 
    0x590: MSTORE v58e(0x20), v58c(0x67)
    0x591: v591(0x40) = CONST 
    0x594: v594 = SHA3 v587(0x0), v591(0x40)
    0x595: v595 = SLOAD v594
    0x596: v596(0x59f) = CONST 
    0x59b: v59b(0xa1d) = CONST 
    0x59e: JUMP v59b(0xa1d)

    Begin block 0xa1dB0x585
    prev=[0x585], succ=[0xa2bB0x585, 0xa77B0x585]
    =================================
    0xa1eS0x585: va1eV585(0x0) = CONST 
    0xa22S0x585: va22V585 = ADD v15f, v595
    0xa25S0x585: va25V585 = LT va22V585, v595
    0xa26S0x585: va26V585 = ISZERO va25V585
    0xa27S0x585: va27V585(0xa77) = CONST 
    0xa2aS0x585: JUMPI va27V585(0xa77), va26V585

    Begin block 0xa2bB0x585
    prev=[0xa1dB0x585], succ=[]
    =================================
    0xa2bS0x585: va2bV585(0x40) = CONST 
    0xa2eS0x585: va2eV585 = MLOAD va2bV585(0x40)
    0xa2fS0x585: va2fV585(0x461bcd) = CONST 
    0xa33S0x585: va33V585(0xe5) = CONST 
    0xa35S0x585: va35V585(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va33V585(0xe5), va2fV585(0x461bcd)
    0xa37S0x585: MSTORE va2eV585, va35V585(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xa38S0x585: va38V585(0x20) = CONST 
    0xa3aS0x585: va3aV585(0x4) = CONST 
    0xa3dS0x585: va3dV585 = ADD va2eV585, va3aV585(0x4)
    0xa3eS0x585: MSTORE va3dV585, va38V585(0x20)
    0xa3fS0x585: va3fV585(0x1b) = CONST 
    0xa41S0x585: va41V585(0x24) = CONST 
    0xa44S0x585: va44V585 = ADD va2eV585, va41V585(0x24)
    0xa45S0x585: MSTORE va44V585, va3fV585(0x1b)
    0xa46S0x585: va46V585(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0xa67S0x585: va67V585(0x44) = CONST 
    0xa6aS0x585: va6aV585 = ADD va2eV585, va67V585(0x44)
    0xa6bS0x585: MSTORE va6aV585, va46V585(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0xa6dS0x585: va6dV585 = MLOAD va2bV585(0x40)
    0xa71S0x585: va71V585(0x0) = SUB va2eV585, va6dV585
    0xa72S0x585: va72V585(0x64) = CONST 
    0xa74S0x585: va74V585(0x64) = ADD va72V585(0x64), va71V585(0x0)
    0xa76S0x585: REVERT va6dV585, va74V585(0x64)

    Begin block 0xa77B0x585
    prev=[0xa1dB0x585], succ=[0x59f]
    =================================
    0xa7dS0x585: JUMP v596(0x59f)

    Begin block 0x59f
    prev=[0xa77B0x585], succ=[0x606, 0x60a]
    =================================
    0x5a0: v5a0 = CALLER 
    0x5a1: v5a1(0x0) = CONST 
    0x5a5: MSTORE v5a1(0x0), v5a0
    0x5a6: v5a6(0x67) = CONST 
    0x5a8: v5a8(0x20) = CONST 
    0x5ac: MSTORE v5a8(0x20), v5a6(0x67)
    0x5ad: v5ad(0x40) = CONST 
    0x5b1: v5b1 = SHA3 v5a1(0x0), v5ad(0x40)
    0x5b5: SSTORE v5b1, va22V585
    0x5b6: v5b6(0x65) = CONST 
    0x5b8: v5b8 = SLOAD v5b6(0x65)
    0x5ba: v5ba = MLOAD v5ad(0x40)
    0x5bb: v5bb(0x23b872dd) = CONST 
    0x5c0: v5c0(0xe0) = CONST 
    0x5c2: v5c2(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v5c0(0xe0), v5bb(0x23b872dd)
    0x5c4: MSTORE v5ba, v5c2(0x23b872dd00000000000000000000000000000000000000000000000000000000)
    0x5c5: v5c5(0x4) = CONST 
    0x5c8: v5c8 = ADD v5ba, v5c5(0x4)
    0x5cc: MSTORE v5c8, v5a0
    0x5cd: v5cd = ADDRESS 
    0x5ce: v5ce(0x24) = CONST 
    0x5d1: v5d1 = ADD v5ba, v5ce(0x24)
    0x5d2: MSTORE v5d1, v5cd
    0x5d3: v5d3(0x44) = CONST 
    0x5d6: v5d6 = ADD v5ba, v5d3(0x44)
    0x5d9: MSTORE v5d6, v15f
    0x5db: v5db = MLOAD v5ad(0x40)
    0x5dc: v5dc(0x1) = CONST 
    0x5de: v5de(0x1) = CONST 
    0x5e0: v5e0(0xa0) = CONST 
    0x5e2: v5e2(0x10000000000000000000000000000000000000000) = SHL v5e0(0xa0), v5de(0x1)
    0x5e3: v5e3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5e2(0x10000000000000000000000000000000000000000), v5dc(0x1)
    0x5e6: v5e6 = AND v5b8, v5e3(0xffffffffffffffffffffffffffffffffffffffff)
    0x5e8: v5e8(0x23b872dd) = CONST 
    0x5ee: v5ee(0x64) = CONST 
    0x5f2: v5f2 = ADD v5ba, v5ee(0x64)
    0x5f7: v5f7(0x0) = SUB v5ba, v5db
    0x5f8: v5f8(0x64) = ADD v5f7(0x0), v5ee(0x64)
    0x5fe: v5fe = EXTCODESIZE v5e6
    0x5ff: v5ff = ISZERO v5fe
    0x601: v601 = ISZERO v5ff
    0x602: v602(0x60a) = CONST 
    0x605: JUMPI v602(0x60a), v601

    Begin block 0x606
    prev=[0x59f], succ=[]
    =================================
    0x606: v606(0x0) = CONST 
    0x609: REVERT v606(0x0), v606(0x0)

    Begin block 0x60a
    prev=[0x59f], succ=[0x615, 0x61e]
    =================================
    0x60c: v60c = GAS 
    0x60d: v60d = CALL v60c, v5e6, v5a1(0x0), v5db, v5f8(0x64), v5db, v5a8(0x20)
    0x60e: v60e = ISZERO v60d
    0x610: v610 = ISZERO v60e
    0x611: v611(0x61e) = CONST 
    0x614: JUMPI v611(0x61e), v610

    Begin block 0x615
    prev=[0x60a], succ=[]
    =================================
    0x615: v615 = RETURNDATASIZE 
    0x616: v616(0x0) = CONST 
    0x619: RETURNDATACOPY v616(0x0), v616(0x0), v615
    0x61a: v61a = RETURNDATASIZE 
    0x61b: v61b(0x0) = CONST 
    0x61d: REVERT v61b(0x0), v61a

    Begin block 0x61e
    prev=[0x60a], succ=[0x630, 0x634]
    =================================
    0x623: v623(0x40) = CONST 
    0x625: v625 = MLOAD v623(0x40)
    0x626: v626 = RETURNDATASIZE 
    0x627: v627(0x20) = CONST 
    0x62a: v62a = LT v626, v627(0x20)
    0x62b: v62b = ISZERO v62a
    0x62c: v62c(0x634) = CONST 
    0x62f: JUMPI v62c(0x634), v62b

    Begin block 0x630
    prev=[0x61e], succ=[]
    =================================
    0x630: v630(0x0) = CONST 
    0x633: REVERT v630(0x0), v630(0x0)

    Begin block 0x634
    prev=[0x61e], succ=[0xa1dB0x634]
    =================================
    0x637: v637(0x66) = CONST 
    0x639: v639 = SLOAD v637(0x66)
    0x63a: v63a(0x643) = CONST 
    0x63f: v63f(0xa1d) = CONST 
    0x642: JUMP v63f(0xa1d)

    Begin block 0xa1dB0x634
    prev=[0x634], succ=[0xa2bB0x634, 0xa77B0x634]
    =================================
    0xa1eS0x634: va1eV634(0x0) = CONST 
    0xa22S0x634: va22V634 = ADD v15f, v639
    0xa25S0x634: va25V634 = LT va22V634, v639
    0xa26S0x634: va26V634 = ISZERO va25V634
    0xa27S0x634: va27V634(0xa77) = CONST 
    0xa2aS0x634: JUMPI va27V634(0xa77), va26V634

    Begin block 0xa2bB0x634
    prev=[0xa1dB0x634], succ=[]
    =================================
    0xa2bS0x634: va2bV634(0x40) = CONST 
    0xa2eS0x634: va2eV634 = MLOAD va2bV634(0x40)
    0xa2fS0x634: va2fV634(0x461bcd) = CONST 
    0xa33S0x634: va33V634(0xe5) = CONST 
    0xa35S0x634: va35V634(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va33V634(0xe5), va2fV634(0x461bcd)
    0xa37S0x634: MSTORE va2eV634, va35V634(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xa38S0x634: va38V634(0x20) = CONST 
    0xa3aS0x634: va3aV634(0x4) = CONST 
    0xa3dS0x634: va3dV634 = ADD va2eV634, va3aV634(0x4)
    0xa3eS0x634: MSTORE va3dV634, va38V634(0x20)
    0xa3fS0x634: va3fV634(0x1b) = CONST 
    0xa41S0x634: va41V634(0x24) = CONST 
    0xa44S0x634: va44V634 = ADD va2eV634, va41V634(0x24)
    0xa45S0x634: MSTORE va44V634, va3fV634(0x1b)
    0xa46S0x634: va46V634(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0xa67S0x634: va67V634(0x44) = CONST 
    0xa6aS0x634: va6aV634 = ADD va2eV634, va67V634(0x44)
    0xa6bS0x634: MSTORE va6aV634, va46V634(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0xa6dS0x634: va6dV634 = MLOAD va2bV634(0x40)
    0xa71S0x634: va71V634(0x0) = SUB va2eV634, va6dV634
    0xa72S0x634: va72V634(0x64) = CONST 
    0xa74S0x634: va74V634(0x64) = ADD va72V634(0x64), va71V634(0x0)
    0xa76S0x634: REVERT va6dV634, va74V634(0x64)

    Begin block 0xa77B0x634
    prev=[0xa1dB0x634], succ=[0x643]
    =================================
    0xa7dS0x634: JUMP v63a(0x643)

    Begin block 0x643
    prev=[0xa77B0x634], succ=[0xefe]
    =================================
    0x644: v644(0x66) = CONST 
    0x646: SSTORE v644(0x66), va22V634
    0x647: v647(0x40) = CONST 
    0x64a: v64a = MLOAD v647(0x40)
    0x64d: MSTORE v64a, v15f
    0x64f: v64f = MLOAD v647(0x40)
    0x650: v650 = CALLER 
    0x652: v652(0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d) = CONST 
    0x677: v677(0x0) = SUB v64a, v64f
    0x678: v678(0x20) = CONST 
    0x67a: v67a(0x20) = ADD v678(0x20), v677(0x0)
    0x67c: LOG2 v64f, v67a(0x20), v652(0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d), v650
    0x67e: JUMP v148(0xefe)

    Begin block 0xefe
    prev=[0x643], succ=[]
    =================================
    0xeff: STOP 

}

function initialize(address)() public {
    Begin block 0x164
    prev=[], succ=[0x176, 0x17a]
    =================================
    0x165: v165(0xf1f) = CONST 
    0x168: v168(0x4) = CONST 
    0x16b: v16b = CALLDATASIZE 
    0x16c: v16c = SUB v16b, v168(0x4)
    0x16d: v16d(0x20) = CONST 
    0x170: v170 = LT v16c, v16d(0x20)
    0x171: v171 = ISZERO v170
    0x172: v172(0x17a) = CONST 
    0x175: JUMPI v172(0x17a), v171

    Begin block 0x176
    prev=[0x164], succ=[]
    =================================
    0x176: v176(0x0) = CONST 
    0x179: REVERT v176(0x0), v176(0x0)

    Begin block 0x17a
    prev=[0x164], succ=[0x67f]
    =================================
    0x17c: v17c = CALLDATALOAD v168(0x4)
    0x17d: v17d(0x1) = CONST 
    0x17f: v17f(0x1) = CONST 
    0x181: v181(0xa0) = CONST 
    0x183: v183(0x10000000000000000000000000000000000000000) = SHL v181(0xa0), v17f(0x1)
    0x184: v184(0xffffffffffffffffffffffffffffffffffffffff) = SUB v183(0x10000000000000000000000000000000000000000), v17d(0x1)
    0x185: v185 = AND v184(0xffffffffffffffffffffffffffffffffffffffff), v17c
    0x186: v186(0x67f) = CONST 
    0x189: JUMP v186(0x67f)

    Begin block 0x67f
    prev=[0x17a], succ=[0x698, 0x690]
    =================================
    0x680: v680(0x0) = CONST 
    0x682: v682 = SLOAD v680(0x0)
    0x683: v683(0x100) = CONST 
    0x687: v687 = DIV v682, v683(0x100)
    0x688: v688(0xff) = CONST 
    0x68a: v68a = AND v688(0xff), v687
    0x68c: v68c(0x698) = CONST 
    0x68f: JUMPI v68c(0x698), v68a

    Begin block 0x698
    prev=[0x67f, 0xa89B0x690], succ=[0x6a6, 0x69e]
    =================================
    0x698_0x0: v698_0 = PHI v68a, va8aV690
    0x69a: v69a(0x6a6) = CONST 
    0x69d: JUMPI v69a(0x6a6), v698_0

    Begin block 0x6a6
    prev=[0x698, 0x69e], succ=[0x6ab, 0x6e1]
    =================================
    0x6a6_0x0: v6a6_0 = PHI v68a, v6a5, va8aV690
    0x6a7: v6a7(0x6e1) = CONST 
    0x6aa: JUMPI v6a7(0x6e1), v6a6_0

    Begin block 0x6ab
    prev=[0x6a6], succ=[]
    =================================
    0x6ab: v6ab(0x40) = CONST 
    0x6ad: v6ad = MLOAD v6ab(0x40)
    0x6ae: v6ae(0x461bcd) = CONST 
    0x6b2: v6b2(0xe5) = CONST 
    0x6b4: v6b4(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v6b2(0xe5), v6ae(0x461bcd)
    0x6b6: MSTORE v6ad, v6b4(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x6b7: v6b7(0x4) = CONST 
    0x6b9: v6b9 = ADD v6b7(0x4), v6ad
    0x6bc: v6bc(0x20) = CONST 
    0x6be: v6be = ADD v6bc(0x20), v6b9
    0x6c1: v6c1(0x20) = SUB v6be, v6b9
    0x6c3: MSTORE v6b9, v6c1(0x20)
    0x6c4: v6c4(0x2e) = CONST 
    0x6c7: MSTORE v6be, v6c4(0x2e)
    0x6c8: v6c8(0x20) = CONST 
    0x6ca: v6ca = ADD v6c8(0x20), v6be
    0x6cc: v6cc(0xd07) = CONST 
    0x6cf: v6cf(0x2e) = CONST 
    0x6d2: CODECOPY v6ca, v6cc(0xd07), v6cf(0x2e)
    0x6d3: v6d3(0x40) = CONST 
    0x6d5: v6d5 = ADD v6d3(0x40), v6ca
    0x6d9: v6d9(0x40) = CONST 
    0x6db: v6db = MLOAD v6d9(0x40)
    0x6de: v6de(0x84) = SUB v6d5, v6db
    0x6e0: REVERT v6db, v6de(0x84)

    Begin block 0x6e1
    prev=[0x6a6], succ=[0x6f4, 0x70c]
    =================================
    0x6e2: v6e2(0x0) = CONST 
    0x6e4: v6e4 = SLOAD v6e2(0x0)
    0x6e5: v6e5(0x100) = CONST 
    0x6e9: v6e9 = DIV v6e4, v6e5(0x100)
    0x6ea: v6ea(0xff) = CONST 
    0x6ec: v6ec = AND v6ea(0xff), v6e9
    0x6ed: v6ed = ISZERO v6ec
    0x6ef: v6ef = ISZERO v6ed
    0x6f0: v6f0(0x70c) = CONST 
    0x6f3: JUMPI v6f0(0x70c), v6ef

    Begin block 0x6f4
    prev=[0x6e1], succ=[0x70c]
    =================================
    0x6f4: v6f4(0x0) = CONST 
    0x6f7: v6f7 = SLOAD v6f4(0x0)
    0x6f8: v6f8(0xff) = CONST 
    0x6fa: v6fa(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v6f8(0xff)
    0x6fb: v6fb(0xff00) = CONST 
    0x6fe: v6fe(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v6fb(0xff00)
    0x701: v701 = AND v6f7, v6fe(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0x702: v702(0x100) = CONST 
    0x705: v705 = OR v702(0x100), v701
    0x706: v706 = AND v705, v6fa(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x707: v707(0x1) = CONST 
    0x709: v709 = OR v707(0x1), v706
    0x70b: SSTORE v6f4(0x0), v709

    Begin block 0x70c
    prev=[0x6f4, 0x6e1], succ=[0xa8fB0x70c]
    =================================
    0x70d: v70d(0x714) = CONST 
    0x710: v710(0xa8f) = CONST 
    0x713: JUMP v710(0xa8f), v70d(0x714)

    Begin block 0xa8fB0x70c
    prev=[0x70c], succ=[0xaa8B0x70c, 0xaa0B0x70c]
    =================================
    0xa90S0x70c: va90V70c(0x0) = CONST 
    0xa92S0x70c: va92V70c = SLOAD va90V70c(0x0)
    0xa93S0x70c: va93V70c(0x100) = CONST 
    0xa97S0x70c: va97V70c = DIV va92V70c, va93V70c(0x100)
    0xa98S0x70c: va98V70c(0xff) = CONST 
    0xa9aS0x70c: va9aV70c = AND va98V70c(0xff), va97V70c
    0xa9cS0x70c: va9cV70c(0xaa8) = CONST 
    0xa9fS0x70c: JUMPI va9cV70c(0xaa8), va9aV70c

    Begin block 0xaa8B0x70c
    prev=[0xa8fB0x70c, 0xa89B0xaa0B0x70c], succ=[0xab6B0x70c, 0xaaeB0x70c]
    =================================
    0xaa8_0x0S0x70c: vaa8_0V70c = PHI va9aV70c, va8aVaa0V70c
    0xaaaS0x70c: vaaaV70c(0xab6) = CONST 
    0xaadS0x70c: JUMPI vaaaV70c(0xab6), vaa8_0V70c

    Begin block 0xab6B0x70c
    prev=[0xaa8B0x70c, 0xaaeB0x70c], succ=[0xabbB0x70c, 0xaf1B0x70c]
    =================================
    0xab6_0x0S0x70c: vab6_0V70c = PHI va9aV70c, vab5V70c, va8aVaa0V70c
    0xab7S0x70c: vab7V70c(0xaf1) = CONST 
    0xabaS0x70c: JUMPI vab7V70c(0xaf1), vab6_0V70c

    Begin block 0xabbB0x70c
    prev=[0xab6B0x70c], succ=[]
    =================================
    0xabbS0x70c: vabbV70c(0x40) = CONST 
    0xabdS0x70c: vabdV70c = MLOAD vabbV70c(0x40)
    0xabeS0x70c: vabeV70c(0x461bcd) = CONST 
    0xac2S0x70c: vac2V70c(0xe5) = CONST 
    0xac4S0x70c: vac4V70c(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vac2V70c(0xe5), vabeV70c(0x461bcd)
    0xac6S0x70c: MSTORE vabdV70c, vac4V70c(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xac7S0x70c: vac7V70c(0x4) = CONST 
    0xac9S0x70c: vac9V70c = ADD vac7V70c(0x4), vabdV70c
    0xaccS0x70c: vaccV70c(0x20) = CONST 
    0xaceS0x70c: vaceV70c = ADD vaccV70c(0x20), vac9V70c
    0xad1S0x70c: vad1V70c(0x20) = SUB vaceV70c, vac9V70c
    0xad3S0x70c: MSTORE vac9V70c, vad1V70c(0x20)
    0xad4S0x70c: vad4V70c(0x2e) = CONST 
    0xad7S0x70c: MSTORE vaceV70c, vad4V70c(0x2e)
    0xad8S0x70c: vad8V70c(0x20) = CONST 
    0xadaS0x70c: vadaV70c = ADD vad8V70c(0x20), vaceV70c
    0xadcS0x70c: vadcV70c(0xd07) = CONST 
    0xadfS0x70c: vadfV70c(0x2e) = CONST 
    0xae2S0x70c: CODECOPY vadaV70c, vadcV70c(0xd07), vadfV70c(0x2e)
    0xae3S0x70c: vae3V70c(0x40) = CONST 
    0xae5S0x70c: vae5V70c = ADD vae3V70c(0x40), vadaV70c
    0xae9S0x70c: vae9V70c(0x40) = CONST 
    0xaebS0x70c: vaebV70c = MLOAD vae9V70c(0x40)
    0xaeeS0x70c: vaeeV70c(0x84) = SUB vae5V70c, vaebV70c
    0xaf0S0x70c: REVERT vaebV70c, vaeeV70c(0x84)

    Begin block 0xaf1B0x70c
    prev=[0xab6B0x70c], succ=[0xb04B0x70c, 0xb1cB0x70c]
    =================================
    0xaf2S0x70c: vaf2V70c(0x0) = CONST 
    0xaf4S0x70c: vaf4V70c = SLOAD vaf2V70c(0x0)
    0xaf5S0x70c: vaf5V70c(0x100) = CONST 
    0xaf9S0x70c: vaf9V70c = DIV vaf4V70c, vaf5V70c(0x100)
    0xafaS0x70c: vafaV70c(0xff) = CONST 
    0xafcS0x70c: vafcV70c = AND vafaV70c(0xff), vaf9V70c
    0xafdS0x70c: vafdV70c = ISZERO vafcV70c
    0xaffS0x70c: vaffV70c = ISZERO vafdV70c
    0xb00S0x70c: vb00V70c(0xb1c) = CONST 
    0xb03S0x70c: JUMPI vb00V70c(0xb1c), vaffV70c

    Begin block 0xb04B0x70c
    prev=[0xaf1B0x70c], succ=[0xb1cB0x70c]
    =================================
    0xb04S0x70c: vb04V70c(0x0) = CONST 
    0xb07S0x70c: vb07V70c = SLOAD vb04V70c(0x0)
    0xb08S0x70c: vb08V70c(0xff) = CONST 
    0xb0aS0x70c: vb0aV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vb08V70c(0xff)
    0xb0bS0x70c: vb0bV70c(0xff00) = CONST 
    0xb0eS0x70c: vb0eV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vb0bV70c(0xff00)
    0xb11S0x70c: vb11V70c = AND vb07V70c, vb0eV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xb12S0x70c: vb12V70c(0x100) = CONST 
    0xb15S0x70c: vb15V70c = OR vb12V70c(0x100), vb11V70c
    0xb16S0x70c: vb16V70c = AND vb15V70c, vb0aV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xb17S0x70c: vb17V70c(0x1) = CONST 
    0xb19S0x70c: vb19V70c = OR vb17V70c(0x1), vb16V70c
    0xb1bS0x70c: SSTORE vb04V70c(0x0), vb19V70c

    Begin block 0xb1cB0x70c
    prev=[0xb04B0x70c, 0xaf1B0x70c], succ=[0xb47B0xb1cB0x70c]
    =================================
    0xb1dS0x70c: vb1dV70c(0xb24) = CONST 
    0xb20S0x70c: vb20V70c(0xb47) = CONST 
    0xb23S0x70c: JUMP vb20V70c(0xb47), vb1dV70c(0xb24)

    Begin block 0xb47B0xb1cB0x70c
    prev=[0xb1cB0x70c], succ=[0xb60B0xb1cB0x70c, 0xb58B0xb1cB0x70c]
    =================================
    0xb48S0xb1cS0x70c: vb48Vb1cV70c(0x0) = CONST 
    0xb4aS0xb1cS0x70c: vb4aVb1cV70c = SLOAD vb48Vb1cV70c(0x0)
    0xb4bS0xb1cS0x70c: vb4bVb1cV70c(0x100) = CONST 
    0xb4fS0xb1cS0x70c: vb4fVb1cV70c = DIV vb4aVb1cV70c, vb4bVb1cV70c(0x100)
    0xb50S0xb1cS0x70c: vb50Vb1cV70c(0xff) = CONST 
    0xb52S0xb1cS0x70c: vb52Vb1cV70c = AND vb50Vb1cV70c(0xff), vb4fVb1cV70c
    0xb54S0xb1cS0x70c: vb54Vb1cV70c(0xb60) = CONST 
    0xb57S0xb1cS0x70c: JUMPI vb54Vb1cV70c(0xb60), vb52Vb1cV70c

    Begin block 0xb60B0xb1cB0x70c
    prev=[0xb47B0xb1cB0x70c, 0xa89B0xb58B0xb1cB0x70c], succ=[0xb6eB0xb1cB0x70c, 0xb66B0xb1cB0x70c]
    =================================
    0xb60_0x0S0xb1cS0x70c: vb60_0Vb1cV70c = PHI vb52Vb1cV70c, va8aVb58Vb1cV70c
    0xb62S0xb1cS0x70c: vb62Vb1cV70c(0xb6e) = CONST 
    0xb65S0xb1cS0x70c: JUMPI vb62Vb1cV70c(0xb6e), vb60_0Vb1cV70c

    Begin block 0xb6eB0xb1cB0x70c
    prev=[0xb60B0xb1cB0x70c, 0xb66B0xb1cB0x70c], succ=[0xb73B0xb1cB0x70c, 0xba9B0xb1cB0x70c]
    =================================
    0xb6e_0x0S0xb1cS0x70c: vb6e_0Vb1cV70c = PHI vb52Vb1cV70c, vb6dVb1cV70c, va8aVb58Vb1cV70c
    0xb6fS0xb1cS0x70c: vb6fVb1cV70c(0xba9) = CONST 
    0xb72S0xb1cS0x70c: JUMPI vb6fVb1cV70c(0xba9), vb6e_0Vb1cV70c

    Begin block 0xb73B0xb1cB0x70c
    prev=[0xb6eB0xb1cB0x70c], succ=[]
    =================================
    0xb73S0xb1cS0x70c: vb73Vb1cV70c(0x40) = CONST 
    0xb75S0xb1cS0x70c: vb75Vb1cV70c = MLOAD vb73Vb1cV70c(0x40)
    0xb76S0xb1cS0x70c: vb76Vb1cV70c(0x461bcd) = CONST 
    0xb7aS0xb1cS0x70c: vb7aVb1cV70c(0xe5) = CONST 
    0xb7cS0xb1cS0x70c: vb7cVb1cV70c(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vb7aVb1cV70c(0xe5), vb76Vb1cV70c(0x461bcd)
    0xb7eS0xb1cS0x70c: MSTORE vb75Vb1cV70c, vb7cVb1cV70c(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xb7fS0xb1cS0x70c: vb7fVb1cV70c(0x4) = CONST 
    0xb81S0xb1cS0x70c: vb81Vb1cV70c = ADD vb7fVb1cV70c(0x4), vb75Vb1cV70c
    0xb84S0xb1cS0x70c: vb84Vb1cV70c(0x20) = CONST 
    0xb86S0xb1cS0x70c: vb86Vb1cV70c = ADD vb84Vb1cV70c(0x20), vb81Vb1cV70c
    0xb89S0xb1cS0x70c: vb89Vb1cV70c(0x20) = SUB vb86Vb1cV70c, vb81Vb1cV70c
    0xb8bS0xb1cS0x70c: MSTORE vb81Vb1cV70c, vb89Vb1cV70c(0x20)
    0xb8cS0xb1cS0x70c: vb8cVb1cV70c(0x2e) = CONST 
    0xb8fS0xb1cS0x70c: MSTORE vb86Vb1cV70c, vb8cVb1cV70c(0x2e)
    0xb90S0xb1cS0x70c: vb90Vb1cV70c(0x20) = CONST 
    0xb92S0xb1cS0x70c: vb92Vb1cV70c = ADD vb90Vb1cV70c(0x20), vb86Vb1cV70c
    0xb94S0xb1cS0x70c: vb94Vb1cV70c(0xd07) = CONST 
    0xb97S0xb1cS0x70c: vb97Vb1cV70c(0x2e) = CONST 
    0xb9aS0xb1cS0x70c: CODECOPY vb92Vb1cV70c, vb94Vb1cV70c(0xd07), vb97Vb1cV70c(0x2e)
    0xb9bS0xb1cS0x70c: vb9bVb1cV70c(0x40) = CONST 
    0xb9dS0xb1cS0x70c: vb9dVb1cV70c = ADD vb9bVb1cV70c(0x40), vb92Vb1cV70c
    0xba1S0xb1cS0x70c: vba1Vb1cV70c(0x40) = CONST 
    0xba3S0xb1cS0x70c: vba3Vb1cV70c = MLOAD vba1Vb1cV70c(0x40)
    0xba6S0xb1cS0x70c: vba6Vb1cV70c(0x84) = SUB vb9dVb1cV70c, vba3Vb1cV70c
    0xba8S0xb1cS0x70c: REVERT vba3Vb1cV70c, vba6Vb1cV70c(0x84)

    Begin block 0xba9B0xb1cB0x70c
    prev=[0xb6eB0xb1cB0x70c], succ=[0xbbcB0xb1cB0x70c, 0xb2c0xb47B0xb1cB0x70c]
    =================================
    0xbaaS0xb1cS0x70c: vbaaVb1cV70c(0x0) = CONST 
    0xbacS0xb1cS0x70c: vbacVb1cV70c = SLOAD vbaaVb1cV70c(0x0)
    0xbadS0xb1cS0x70c: vbadVb1cV70c(0x100) = CONST 
    0xbb1S0xb1cS0x70c: vbb1Vb1cV70c = DIV vbacVb1cV70c, vbadVb1cV70c(0x100)
    0xbb2S0xb1cS0x70c: vbb2Vb1cV70c(0xff) = CONST 
    0xbb4S0xb1cS0x70c: vbb4Vb1cV70c = AND vbb2Vb1cV70c(0xff), vbb1Vb1cV70c
    0xbb5S0xb1cS0x70c: vbb5Vb1cV70c = ISZERO vbb4Vb1cV70c
    0xbb7S0xb1cS0x70c: vbb7Vb1cV70c = ISZERO vbb5Vb1cV70c
    0xbb8S0xb1cS0x70c: vbb8Vb1cV70c(0xb2c) = CONST 
    0xbbbS0xb1cS0x70c: JUMPI vbb8Vb1cV70c(0xb2c), vbb7Vb1cV70c

    Begin block 0xbbcB0xb1cB0x70c
    prev=[0xba9B0xb1cB0x70c], succ=[0xbdaB0xb1cB0x70c, 0xfbeB0xb1cB0x70c]
    =================================
    0xbbcS0xb1cS0x70c: vbbcVb1cV70c(0x0) = CONST 
    0xbbfS0xb1cS0x70c: vbbfVb1cV70c = SLOAD vbbcVb1cV70c(0x0)
    0xbc0S0xb1cS0x70c: vbc0Vb1cV70c(0xff) = CONST 
    0xbc2S0xb1cS0x70c: vbc2Vb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vbc0Vb1cV70c(0xff)
    0xbc3S0xb1cS0x70c: vbc3Vb1cV70c(0xff00) = CONST 
    0xbc6S0xb1cS0x70c: vbc6Vb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vbc3Vb1cV70c(0xff00)
    0xbc9S0xb1cS0x70c: vbc9Vb1cV70c = AND vbbfVb1cV70c, vbc6Vb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xbcaS0xb1cS0x70c: vbcaVb1cV70c(0x100) = CONST 
    0xbcdS0xb1cS0x70c: vbcdVb1cV70c = OR vbcaVb1cV70c(0x100), vbc9Vb1cV70c
    0xbceS0xb1cS0x70c: vbceVb1cV70c = AND vbcdVb1cV70c, vbc2Vb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xbcfS0xb1cS0x70c: vbcfVb1cV70c(0x1) = CONST 
    0xbd1S0xb1cS0x70c: vbd1Vb1cV70c = OR vbcfVb1cV70c(0x1), vbceVb1cV70c
    0xbd3S0xb1cS0x70c: SSTORE vbbcVb1cV70c(0x0), vbd1Vb1cV70c
    0xbd5S0xb1cS0x70c: vbd5Vb1cV70c = ISZERO vbb5Vb1cV70c
    0xbd6S0xb1cS0x70c: vbd6Vb1cV70c(0xfbe) = CONST 
    0xbd9S0xb1cS0x70c: JUMPI vbd6Vb1cV70c(0xfbe), vbd5Vb1cV70c

    Begin block 0xbdaB0xb1cB0x70c
    prev=[0xbbcB0xb1cB0x70c], succ=[0xb24B0x70c]
    =================================
    0xbdaS0xb1cS0x70c: vbdaVb1cV70c(0x0) = CONST 
    0xbddS0xb1cS0x70c: vbddVb1cV70c = SLOAD vbdaVb1cV70c(0x0)
    0xbdeS0xb1cS0x70c: vbdeVb1cV70c(0xff00) = CONST 
    0xbe1S0xb1cS0x70c: vbe1Vb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vbdeVb1cV70c(0xff00)
    0xbe2S0xb1cS0x70c: vbe2Vb1cV70c = AND vbe1Vb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vbddVb1cV70c
    0xbe4S0xb1cS0x70c: SSTORE vbdaVb1cV70c(0x0), vbe2Vb1cV70c
    0xbe6S0xb1cS0x70c: JUMP vb1dV70c(0xb24)

    Begin block 0xb24B0x70c
    prev=[0xbdaB0xb1cB0x70c, 0xfbeB0xb1cB0x70c, 0xb3e0xb47B0xb1cB0x70c, 0xf9c0xb47B0xb1cB0x70c], succ=[0xbe7B0xb24B0x70c]
    =================================
    0xb25S0x70c: vb25V70c(0xb2c) = CONST 
    0xb28S0x70c: vb28V70c(0xbe7) = CONST 
    0xb2bS0x70c: JUMP vb28V70c(0xbe7), vb25V70c(0xb2c)

    Begin block 0xbe7B0xb24B0x70c
    prev=[0xb24B0x70c], succ=[0xc00B0xb24B0x70c, 0xbf8B0xb24B0x70c]
    =================================
    0xbe8S0xb24S0x70c: vbe8Vb24V70c(0x0) = CONST 
    0xbeaS0xb24S0x70c: vbeaVb24V70c = SLOAD vbe8Vb24V70c(0x0)
    0xbebS0xb24S0x70c: vbebVb24V70c(0x100) = CONST 
    0xbefS0xb24S0x70c: vbefVb24V70c = DIV vbeaVb24V70c, vbebVb24V70c(0x100)
    0xbf0S0xb24S0x70c: vbf0Vb24V70c(0xff) = CONST 
    0xbf2S0xb24S0x70c: vbf2Vb24V70c = AND vbf0Vb24V70c(0xff), vbefVb24V70c
    0xbf4S0xb24S0x70c: vbf4Vb24V70c(0xc00) = CONST 
    0xbf7S0xb24S0x70c: JUMPI vbf4Vb24V70c(0xc00), vbf2Vb24V70c

    Begin block 0xc00B0xb24B0x70c
    prev=[0xbe7B0xb24B0x70c, 0xa89B0xbf8B0xb24B0x70c], succ=[0xc0eB0xb24B0x70c, 0xc06B0xb24B0x70c]
    =================================
    0xc00_0x0S0xb24S0x70c: vc00_0Vb24V70c = PHI vbf2Vb24V70c, va8aVbf8Vb24V70c
    0xc02S0xb24S0x70c: vc02Vb24V70c(0xc0e) = CONST 
    0xc05S0xb24S0x70c: JUMPI vc02Vb24V70c(0xc0e), vc00_0Vb24V70c

    Begin block 0xc0eB0xb24B0x70c
    prev=[0xc00B0xb24B0x70c, 0xc06B0xb24B0x70c], succ=[0xc13B0xb24B0x70c, 0xc49B0xb24B0x70c]
    =================================
    0xc0e_0x0S0xb24S0x70c: vc0e_0Vb24V70c = PHI vbf2Vb24V70c, vc0dVb24V70c, va8aVbf8Vb24V70c
    0xc0fS0xb24S0x70c: vc0fVb24V70c(0xc49) = CONST 
    0xc12S0xb24S0x70c: JUMPI vc0fVb24V70c(0xc49), vc0e_0Vb24V70c

    Begin block 0xc13B0xb24B0x70c
    prev=[0xc0eB0xb24B0x70c], succ=[]
    =================================
    0xc13S0xb24S0x70c: vc13Vb24V70c(0x40) = CONST 
    0xc15S0xb24S0x70c: vc15Vb24V70c = MLOAD vc13Vb24V70c(0x40)
    0xc16S0xb24S0x70c: vc16Vb24V70c(0x461bcd) = CONST 
    0xc1aS0xb24S0x70c: vc1aVb24V70c(0xe5) = CONST 
    0xc1cS0xb24S0x70c: vc1cVb24V70c(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vc1aVb24V70c(0xe5), vc16Vb24V70c(0x461bcd)
    0xc1eS0xb24S0x70c: MSTORE vc15Vb24V70c, vc1cVb24V70c(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xc1fS0xb24S0x70c: vc1fVb24V70c(0x4) = CONST 
    0xc21S0xb24S0x70c: vc21Vb24V70c = ADD vc1fVb24V70c(0x4), vc15Vb24V70c
    0xc24S0xb24S0x70c: vc24Vb24V70c(0x20) = CONST 
    0xc26S0xb24S0x70c: vc26Vb24V70c = ADD vc24Vb24V70c(0x20), vc21Vb24V70c
    0xc29S0xb24S0x70c: vc29Vb24V70c(0x20) = SUB vc26Vb24V70c, vc21Vb24V70c
    0xc2bS0xb24S0x70c: MSTORE vc21Vb24V70c, vc29Vb24V70c(0x20)
    0xc2cS0xb24S0x70c: vc2cVb24V70c(0x2e) = CONST 
    0xc2fS0xb24S0x70c: MSTORE vc26Vb24V70c, vc2cVb24V70c(0x2e)
    0xc30S0xb24S0x70c: vc30Vb24V70c(0x20) = CONST 
    0xc32S0xb24S0x70c: vc32Vb24V70c = ADD vc30Vb24V70c(0x20), vc26Vb24V70c
    0xc34S0xb24S0x70c: vc34Vb24V70c(0xd07) = CONST 
    0xc37S0xb24S0x70c: vc37Vb24V70c(0x2e) = CONST 
    0xc3aS0xb24S0x70c: CODECOPY vc32Vb24V70c, vc34Vb24V70c(0xd07), vc37Vb24V70c(0x2e)
    0xc3bS0xb24S0x70c: vc3bVb24V70c(0x40) = CONST 
    0xc3dS0xb24S0x70c: vc3dVb24V70c = ADD vc3bVb24V70c(0x40), vc32Vb24V70c
    0xc41S0xb24S0x70c: vc41Vb24V70c(0x40) = CONST 
    0xc43S0xb24S0x70c: vc43Vb24V70c = MLOAD vc41Vb24V70c(0x40)
    0xc46S0xb24S0x70c: vc46Vb24V70c(0x84) = SUB vc3dVb24V70c, vc43Vb24V70c
    0xc48S0xb24S0x70c: REVERT vc43Vb24V70c, vc46Vb24V70c(0x84)

    Begin block 0xc49B0xb24B0x70c
    prev=[0xc0eB0xb24B0x70c], succ=[0xc5cB0xb24B0x70c, 0xc74B0xb24B0x70c]
    =================================
    0xc4aS0xb24S0x70c: vc4aVb24V70c(0x0) = CONST 
    0xc4cS0xb24S0x70c: vc4cVb24V70c = SLOAD vc4aVb24V70c(0x0)
    0xc4dS0xb24S0x70c: vc4dVb24V70c(0x100) = CONST 
    0xc51S0xb24S0x70c: vc51Vb24V70c = DIV vc4cVb24V70c, vc4dVb24V70c(0x100)
    0xc52S0xb24S0x70c: vc52Vb24V70c(0xff) = CONST 
    0xc54S0xb24S0x70c: vc54Vb24V70c = AND vc52Vb24V70c(0xff), vc51Vb24V70c
    0xc55S0xb24S0x70c: vc55Vb24V70c = ISZERO vc54Vb24V70c
    0xc57S0xb24S0x70c: vc57Vb24V70c = ISZERO vc55Vb24V70c
    0xc58S0xb24S0x70c: vc58Vb24V70c(0xc74) = CONST 
    0xc5bS0xb24S0x70c: JUMPI vc58Vb24V70c(0xc74), vc57Vb24V70c

    Begin block 0xc5cB0xb24B0x70c
    prev=[0xc49B0xb24B0x70c], succ=[0xc74B0xb24B0x70c]
    =================================
    0xc5cS0xb24S0x70c: vc5cVb24V70c(0x0) = CONST 
    0xc5fS0xb24S0x70c: vc5fVb24V70c = SLOAD vc5cVb24V70c(0x0)
    0xc60S0xb24S0x70c: vc60Vb24V70c(0xff) = CONST 
    0xc62S0xb24S0x70c: vc62Vb24V70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vc60Vb24V70c(0xff)
    0xc63S0xb24S0x70c: vc63Vb24V70c(0xff00) = CONST 
    0xc66S0xb24S0x70c: vc66Vb24V70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vc63Vb24V70c(0xff00)
    0xc69S0xb24S0x70c: vc69Vb24V70c = AND vc5fVb24V70c, vc66Vb24V70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xc6aS0xb24S0x70c: vc6aVb24V70c(0x100) = CONST 
    0xc6dS0xb24S0x70c: vc6dVb24V70c = OR vc6aVb24V70c(0x100), vc69Vb24V70c
    0xc6eS0xb24S0x70c: vc6eVb24V70c = AND vc6dVb24V70c, vc62Vb24V70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xc6fS0xb24S0x70c: vc6fVb24V70c(0x1) = CONST 
    0xc71S0xb24S0x70c: vc71Vb24V70c = OR vc6fVb24V70c(0x1), vc6eVb24V70c
    0xc73S0xb24S0x70c: SSTORE vc5cVb24V70c(0x0), vc71Vb24V70c

    Begin block 0xc74B0xb24B0x70c
    prev=[0xc5cB0xb24B0x70c, 0xc49B0xb24B0x70c], succ=[0x8c6B0xc74B0xb24B0x70c]
    =================================
    0xc75S0xb24S0x70c: vc75Vb24V70c(0x0) = CONST 
    0xc77S0xb24S0x70c: vc77Vb24V70c(0xc7e) = CONST 
    0xc7aS0xb24S0x70c: vc7aVb24V70c(0x8c6) = CONST 
    0xc7dS0xb24S0x70c: JUMP vc7aVb24V70c(0x8c6)

    Begin block 0x8c6B0xc74B0xb24B0x70c
    prev=[0xc74B0xb24B0x70c], succ=[0xc7eB0xb24B0x70c]
    =================================
    0x8c7S0xc74S0xb24S0x70c: v8c7Vc74Vb24V70c = CALLER 
    0x8c9S0xc74S0xb24S0x70c: JUMP vc77Vb24V70c(0xc7e)

    Begin block 0xc7eB0xb24B0x70c
    prev=[0x8c6B0xc74B0xb24B0x70c], succ=[0xcd3B0xb24B0x70c, 0xfe0B0xb24B0x70c]
    =================================
    0xc7fS0xb24S0x70c: vc7fVb24V70c(0x33) = CONST 
    0xc82S0xb24S0x70c: vc82Vb24V70c = SLOAD vc7fVb24V70c(0x33)
    0xc83S0xb24S0x70c: vc83Vb24V70c(0x1) = CONST 
    0xc85S0xb24S0x70c: vc85Vb24V70c(0x1) = CONST 
    0xc87S0xb24S0x70c: vc87Vb24V70c(0xa0) = CONST 
    0xc89S0xb24S0x70c: vc89Vb24V70c(0x10000000000000000000000000000000000000000) = SHL vc87Vb24V70c(0xa0), vc85Vb24V70c(0x1)
    0xc8aS0xb24S0x70c: vc8aVb24V70c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc89Vb24V70c(0x10000000000000000000000000000000000000000), vc83Vb24V70c(0x1)
    0xc8bS0xb24S0x70c: vc8bVb24V70c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vc8aVb24V70c(0xffffffffffffffffffffffffffffffffffffffff)
    0xc8cS0xb24S0x70c: vc8cVb24V70c = AND vc8bVb24V70c(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vc82Vb24V70c
    0xc8dS0xb24S0x70c: vc8dVb24V70c(0x1) = CONST 
    0xc8fS0xb24S0x70c: vc8fVb24V70c(0x1) = CONST 
    0xc91S0xb24S0x70c: vc91Vb24V70c(0xa0) = CONST 
    0xc93S0xb24S0x70c: vc93Vb24V70c(0x10000000000000000000000000000000000000000) = SHL vc91Vb24V70c(0xa0), vc8fVb24V70c(0x1)
    0xc94S0xb24S0x70c: vc94Vb24V70c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc93Vb24V70c(0x10000000000000000000000000000000000000000), vc8dVb24V70c(0x1)
    0xc96S0xb24S0x70c: vc96Vb24V70c = AND v8c7Vc74Vb24V70c, vc94Vb24V70c(0xffffffffffffffffffffffffffffffffffffffff)
    0xc99S0xb24S0x70c: vc99Vb24V70c = OR vc96Vb24V70c, vc8cVb24V70c
    0xc9cS0xb24S0x70c: SSTORE vc7fVb24V70c(0x33), vc99Vb24V70c
    0xc9dS0xb24S0x70c: vc9dVb24V70c(0x40) = CONST 
    0xc9fS0xb24S0x70c: vc9fVb24V70c = MLOAD vc9dVb24V70c(0x40)
    0xca4S0xb24S0x70c: vca4Vb24V70c(0x0) = CONST 
    0xca7S0xb24S0x70c: vca7Vb24V70c(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0xccbS0xb24S0x70c: LOG3 vc9fVb24V70c, vca4Vb24V70c(0x0), vca7Vb24V70c(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), vca4Vb24V70c(0x0), vc96Vb24V70c
    0xcceS0xb24S0x70c: vcceVb24V70c = ISZERO vc55Vb24V70c
    0xccfS0xb24S0x70c: vccfVb24V70c(0xfe0) = CONST 
    0xcd2S0xb24S0x70c: JUMPI vccfVb24V70c(0xfe0), vcceVb24V70c

    Begin block 0xcd3B0xb24B0x70c
    prev=[0xc7eB0xb24B0x70c], succ=[0xb2c0xa8fB0x70c]
    =================================
    0xcd3S0xb24S0x70c: vcd3Vb24V70c(0x0) = CONST 
    0xcd6S0xb24S0x70c: vcd6Vb24V70c = SLOAD vcd3Vb24V70c(0x0)
    0xcd7S0xb24S0x70c: vcd7Vb24V70c(0xff00) = CONST 
    0xcdaS0xb24S0x70c: vcdaVb24V70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vcd7Vb24V70c(0xff00)
    0xcdbS0xb24S0x70c: vcdbVb24V70c = AND vcdaVb24V70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vcd6Vb24V70c
    0xcddS0xb24S0x70c: SSTORE vcd3Vb24V70c(0x0), vcdbVb24V70c
    0xcdfS0xb24S0x70c: JUMP vb25V70c(0xb2c)

    Begin block 0xb2c0xa8fB0x70c
    prev=[0xcd3B0xb24B0x70c, 0xfe0B0xb24B0x70c], succ=[0xb330xa8fB0x70c, 0xf9c0xa8fB0x70c]
    =================================
    0xb2e0xa8fS0x70c: va8fb2eV70c = ISZERO vafdV70c
    0xb2f0xa8fS0x70c: va8fb2fV70c(0xf9c) = CONST 
    0xb320xa8fS0x70c: JUMPI va8fb2fV70c(0xf9c), va8fb2eV70c

    Begin block 0xb330xa8fB0x70c
    prev=[0xb2c0xa8fB0x70c], succ=[0xb3e0xa8fB0x70c]
    =================================
    0xb330xa8fS0x70c: va8fb33V70c(0x0) = CONST 
    0xb360xa8fS0x70c: va8fb36V70c = SLOAD va8fb33V70c(0x0)
    0xb370xa8fS0x70c: va8fb37V70c(0xff00) = CONST 
    0xb3a0xa8fS0x70c: va8fb3aV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT va8fb37V70c(0xff00)
    0xb3b0xa8fS0x70c: va8fb3bV70c = AND va8fb3aV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), va8fb36V70c
    0xb3d0xa8fS0x70c: SSTORE va8fb33V70c(0x0), va8fb3bV70c

    Begin block 0xb3e0xa8fB0x70c
    prev=[0xb330xa8fB0x70c], succ=[0x714]
    =================================
    0xb400xa8fS0x70c: JUMP v70d(0x714)

    Begin block 0x714
    prev=[0xb3e0xa8fB0x70c, 0xf9c0xa8fB0x70c], succ=[0x736, 0x741]
    =================================
    0x715: v715(0x65) = CONST 
    0x718: v718 = SLOAD v715(0x65)
    0x719: v719(0x1) = CONST 
    0x71b: v71b(0x1) = CONST 
    0x71d: v71d(0xa0) = CONST 
    0x71f: v71f(0x10000000000000000000000000000000000000000) = SHL v71d(0xa0), v71b(0x1)
    0x720: v720(0xffffffffffffffffffffffffffffffffffffffff) = SUB v71f(0x10000000000000000000000000000000000000000), v719(0x1)
    0x721: v721(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v720(0xffffffffffffffffffffffffffffffffffffffff)
    0x722: v722 = AND v721(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v718
    0x723: v723(0x1) = CONST 
    0x725: v725(0x1) = CONST 
    0x727: v727(0xa0) = CONST 
    0x729: v729(0x10000000000000000000000000000000000000000) = SHL v727(0xa0), v725(0x1)
    0x72a: v72a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v729(0x10000000000000000000000000000000000000000), v723(0x1)
    0x72c: v72c = AND v185, v72a(0xffffffffffffffffffffffffffffffffffffffff)
    0x72d: v72d = OR v72c, v722
    0x72f: SSTORE v715(0x65), v72d
    0x731: v731 = ISZERO v6ed
    0x732: v732(0x741) = CONST 
    0x735: JUMPI v732(0x741), v731

    Begin block 0x736
    prev=[0x714], succ=[0x741]
    =================================
    0x736: v736(0x0) = CONST 
    0x739: v739 = SLOAD v736(0x0)
    0x73a: v73a(0xff00) = CONST 
    0x73d: v73d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v73a(0xff00)
    0x73e: v73e = AND v73d(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v739
    0x740: SSTORE v736(0x0), v73e

    Begin block 0x741
    prev=[0x736, 0x714], succ=[0xf1f]
    =================================
    0x744: JUMP v165(0xf1f)

    Begin block 0xf1f
    prev=[0x741], succ=[]
    =================================
    0xf20: STOP 

    Begin block 0xf9c0xa8fB0x70c
    prev=[0xb2c0xa8fB0x70c], succ=[0x714]
    =================================
    0xf9e0xa8fS0x70c: JUMP v70d(0x714)

    Begin block 0xfe0B0xb24B0x70c
    prev=[0xc7eB0xb24B0x70c], succ=[0xb2c0xa8fB0x70c]
    =================================
    0xfe2S0xb24S0x70c: JUMP vb25V70c(0xb2c)

    Begin block 0xc06B0xb24B0x70c
    prev=[0xc00B0xb24B0x70c], succ=[0xc0eB0xb24B0x70c]
    =================================
    0xc07S0xb24S0x70c: vc07Vb24V70c(0x0) = CONST 
    0xc09S0xb24S0x70c: vc09Vb24V70c = SLOAD vc07Vb24V70c(0x0)
    0xc0aS0xb24S0x70c: vc0aVb24V70c(0xff) = CONST 
    0xc0cS0xb24S0x70c: vc0cVb24V70c = AND vc0aVb24V70c(0xff), vc09Vb24V70c
    0xc0dS0xb24S0x70c: vc0dVb24V70c = ISZERO vc0cVb24V70c

    Begin block 0xbf8B0xb24B0x70c
    prev=[0xbe7B0xb24B0x70c], succ=[0xa7eB0xbf8B0xb24B0x70c]
    =================================
    0xbf9S0xb24S0x70c: vbf9Vb24V70c(0xc00) = CONST 
    0xbfcS0xb24S0x70c: vbfcVb24V70c(0xa7e) = CONST 
    0xbffS0xb24S0x70c: JUMP vbfcVb24V70c(0xa7e)

    Begin block 0xa7eB0xbf8B0xb24B0x70c
    prev=[0xbf8B0xb24B0x70c], succ=[0xb41B0xbf8B0xb24B0x70c]
    =================================
    0xa7fS0xbf8S0xb24S0x70c: va7fVbf8Vb24V70c(0x0) = CONST 
    0xa81S0xbf8S0xb24S0x70c: va81Vbf8Vb24V70c(0xa89) = CONST 
    0xa84S0xbf8S0xb24S0x70c: va84Vbf8Vb24V70c = ADDRESS 
    0xa85S0xbf8S0xb24S0x70c: va85Vbf8Vb24V70c(0xb41) = CONST 
    0xa88S0xbf8S0xb24S0x70c: JUMP va85Vbf8Vb24V70c(0xb41)

    Begin block 0xb41B0xbf8B0xb24B0x70c
    prev=[0xa7eB0xbf8B0xb24B0x70c], succ=[0xa89B0xbf8B0xb24B0x70c]
    =================================
    0xb42S0xbf8S0xb24S0x70c: vb42Vbf8Vb24V70c = EXTCODESIZE va84Vbf8Vb24V70c
    0xb43S0xbf8S0xb24S0x70c: vb43Vbf8Vb24V70c = ISZERO vb42Vbf8Vb24V70c
    0xb44S0xbf8S0xb24S0x70c: vb44Vbf8Vb24V70c = ISZERO vb43Vbf8Vb24V70c
    0xb46S0xbf8S0xb24S0x70c: JUMP va81Vbf8Vb24V70c(0xa89)

    Begin block 0xa89B0xbf8B0xb24B0x70c
    prev=[0xb41B0xbf8B0xb24B0x70c], succ=[0xc00B0xb24B0x70c]
    =================================
    0xa8aS0xbf8S0xb24S0x70c: va8aVbf8Vb24V70c = ISZERO vb44Vbf8Vb24V70c
    0xa8eS0xbf8S0xb24S0x70c: JUMP vbf9Vb24V70c(0xc00)

    Begin block 0xfbeB0xb1cB0x70c
    prev=[0xbbcB0xb1cB0x70c], succ=[0xb24B0x70c]
    =================================
    0xfc0S0xb1cS0x70c: JUMP vb1dV70c(0xb24)

    Begin block 0xb2c0xb47B0xb1cB0x70c
    prev=[0xba9B0xb1cB0x70c], succ=[0xb330xb47B0xb1cB0x70c, 0xf9c0xb47B0xb1cB0x70c]
    =================================
    0xb2e0xb47S0xb1cS0x70c: vb47b2eVb1cV70c = ISZERO vbb5Vb1cV70c
    0xb2f0xb47S0xb1cS0x70c: vb47b2fVb1cV70c(0xf9c) = CONST 
    0xb320xb47S0xb1cS0x70c: JUMPI vb47b2fVb1cV70c(0xf9c), vb47b2eVb1cV70c

    Begin block 0xb330xb47B0xb1cB0x70c
    prev=[0xb2c0xb47B0xb1cB0x70c], succ=[0xb3e0xb47B0xb1cB0x70c]
    =================================
    0xb330xb47S0xb1cS0x70c: vb47b33Vb1cV70c(0x0) = CONST 
    0xb360xb47S0xb1cS0x70c: vb47b36Vb1cV70c = SLOAD vb47b33Vb1cV70c(0x0)
    0xb370xb47S0xb1cS0x70c: vb47b37Vb1cV70c(0xff00) = CONST 
    0xb3a0xb47S0xb1cS0x70c: vb47b3aVb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vb47b37Vb1cV70c(0xff00)
    0xb3b0xb47S0xb1cS0x70c: vb47b3bVb1cV70c = AND vb47b3aVb1cV70c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vb47b36Vb1cV70c
    0xb3d0xb47S0xb1cS0x70c: SSTORE vb47b33Vb1cV70c(0x0), vb47b3bVb1cV70c

    Begin block 0xb3e0xb47B0xb1cB0x70c
    prev=[0xb330xb47B0xb1cB0x70c], succ=[0xb24B0x70c]
    =================================
    0xb400xb47S0xb1cS0x70c: JUMP vb1dV70c(0xb24)

    Begin block 0xf9c0xb47B0xb1cB0x70c
    prev=[0xb2c0xb47B0xb1cB0x70c], succ=[0xb24B0x70c]
    =================================
    0xf9e0xb47S0xb1cS0x70c: JUMP vb1dV70c(0xb24)

    Begin block 0xb66B0xb1cB0x70c
    prev=[0xb60B0xb1cB0x70c], succ=[0xb6eB0xb1cB0x70c]
    =================================
    0xb67S0xb1cS0x70c: vb67Vb1cV70c(0x0) = CONST 
    0xb69S0xb1cS0x70c: vb69Vb1cV70c = SLOAD vb67Vb1cV70c(0x0)
    0xb6aS0xb1cS0x70c: vb6aVb1cV70c(0xff) = CONST 
    0xb6cS0xb1cS0x70c: vb6cVb1cV70c = AND vb6aVb1cV70c(0xff), vb69Vb1cV70c
    0xb6dS0xb1cS0x70c: vb6dVb1cV70c = ISZERO vb6cVb1cV70c

    Begin block 0xb58B0xb1cB0x70c
    prev=[0xb47B0xb1cB0x70c], succ=[0xa7eB0xb58B0xb1cB0x70c]
    =================================
    0xb59S0xb1cS0x70c: vb59Vb1cV70c(0xb60) = CONST 
    0xb5cS0xb1cS0x70c: vb5cVb1cV70c(0xa7e) = CONST 
    0xb5fS0xb1cS0x70c: JUMP vb5cVb1cV70c(0xa7e)

    Begin block 0xa7eB0xb58B0xb1cB0x70c
    prev=[0xb58B0xb1cB0x70c], succ=[0xb41B0xb58B0xb1cB0x70c]
    =================================
    0xa7fS0xb58S0xb1cS0x70c: va7fVb58Vb1cV70c(0x0) = CONST 
    0xa81S0xb58S0xb1cS0x70c: va81Vb58Vb1cV70c(0xa89) = CONST 
    0xa84S0xb58S0xb1cS0x70c: va84Vb58Vb1cV70c = ADDRESS 
    0xa85S0xb58S0xb1cS0x70c: va85Vb58Vb1cV70c(0xb41) = CONST 
    0xa88S0xb58S0xb1cS0x70c: JUMP va85Vb58Vb1cV70c(0xb41)

    Begin block 0xb41B0xb58B0xb1cB0x70c
    prev=[0xa7eB0xb58B0xb1cB0x70c], succ=[0xa89B0xb58B0xb1cB0x70c]
    =================================
    0xb42S0xb58S0xb1cS0x70c: vb42Vb58Vb1cV70c = EXTCODESIZE va84Vb58Vb1cV70c
    0xb43S0xb58S0xb1cS0x70c: vb43Vb58Vb1cV70c = ISZERO vb42Vb58Vb1cV70c
    0xb44S0xb58S0xb1cS0x70c: vb44Vb58Vb1cV70c = ISZERO vb43Vb58Vb1cV70c
    0xb46S0xb58S0xb1cS0x70c: JUMP va81Vb58Vb1cV70c(0xa89)

    Begin block 0xa89B0xb58B0xb1cB0x70c
    prev=[0xb41B0xb58B0xb1cB0x70c], succ=[0xb60B0xb1cB0x70c]
    =================================
    0xa8aS0xb58S0xb1cS0x70c: va8aVb58Vb1cV70c = ISZERO vb44Vb58Vb1cV70c
    0xa8eS0xb58S0xb1cS0x70c: JUMP vb59Vb1cV70c(0xb60)

    Begin block 0xaaeB0x70c
    prev=[0xaa8B0x70c], succ=[0xab6B0x70c]
    =================================
    0xaafS0x70c: vaafV70c(0x0) = CONST 
    0xab1S0x70c: vab1V70c = SLOAD vaafV70c(0x0)
    0xab2S0x70c: vab2V70c(0xff) = CONST 
    0xab4S0x70c: vab4V70c = AND vab2V70c(0xff), vab1V70c
    0xab5S0x70c: vab5V70c = ISZERO vab4V70c

    Begin block 0xaa0B0x70c
    prev=[0xa8fB0x70c], succ=[0xa7eB0xaa0B0x70c]
    =================================
    0xaa1S0x70c: vaa1V70c(0xaa8) = CONST 
    0xaa4S0x70c: vaa4V70c(0xa7e) = CONST 
    0xaa7S0x70c: JUMP vaa4V70c(0xa7e)

    Begin block 0xa7eB0xaa0B0x70c
    prev=[0xaa0B0x70c], succ=[0xb41B0xaa0B0x70c]
    =================================
    0xa7fS0xaa0S0x70c: va7fVaa0V70c(0x0) = CONST 
    0xa81S0xaa0S0x70c: va81Vaa0V70c(0xa89) = CONST 
    0xa84S0xaa0S0x70c: va84Vaa0V70c = ADDRESS 
    0xa85S0xaa0S0x70c: va85Vaa0V70c(0xb41) = CONST 
    0xa88S0xaa0S0x70c: JUMP va85Vaa0V70c(0xb41)

    Begin block 0xb41B0xaa0B0x70c
    prev=[0xa7eB0xaa0B0x70c], succ=[0xa89B0xaa0B0x70c]
    =================================
    0xb42S0xaa0S0x70c: vb42Vaa0V70c = EXTCODESIZE va84Vaa0V70c
    0xb43S0xaa0S0x70c: vb43Vaa0V70c = ISZERO vb42Vaa0V70c
    0xb44S0xaa0S0x70c: vb44Vaa0V70c = ISZERO vb43Vaa0V70c
    0xb46S0xaa0S0x70c: JUMP va81Vaa0V70c(0xa89)

    Begin block 0xa89B0xaa0B0x70c
    prev=[0xb41B0xaa0B0x70c], succ=[0xaa8B0x70c]
    =================================
    0xa8aS0xaa0S0x70c: va8aVaa0V70c = ISZERO vb44Vaa0V70c
    0xa8eS0xaa0S0x70c: JUMP vaa1V70c(0xaa8)

    Begin block 0x69e
    prev=[0x698], succ=[0x6a6]
    =================================
    0x69f: v69f(0x0) = CONST 
    0x6a1: v6a1 = SLOAD v69f(0x0)
    0x6a2: v6a2(0xff) = CONST 
    0x6a4: v6a4 = AND v6a2(0xff), v6a1
    0x6a5: v6a5 = ISZERO v6a4

    Begin block 0x690
    prev=[0x67f], succ=[0xa7eB0x690]
    =================================
    0x691: v691(0x698) = CONST 
    0x694: v694(0xa7e) = CONST 
    0x697: JUMP v694(0xa7e)

    Begin block 0xa7eB0x690
    prev=[0x690], succ=[0xb41B0x690]
    =================================
    0xa7fS0x690: va7fV690(0x0) = CONST 
    0xa81S0x690: va81V690(0xa89) = CONST 
    0xa84S0x690: va84V690 = ADDRESS 
    0xa85S0x690: va85V690(0xb41) = CONST 
    0xa88S0x690: JUMP va85V690(0xb41)

    Begin block 0xb41B0x690
    prev=[0xa7eB0x690], succ=[0xa89B0x690]
    =================================
    0xb42S0x690: vb42V690 = EXTCODESIZE va84V690
    0xb43S0x690: vb43V690 = ISZERO vb42V690
    0xb44S0x690: vb44V690 = ISZERO vb43V690
    0xb46S0x690: JUMP va81V690(0xa89)

    Begin block 0xa89B0x690
    prev=[0xb41B0x690], succ=[0x698]
    =================================
    0xa8aS0x690: va8aV690 = ISZERO vb44V690
    0xa8eS0x690: JUMP v691(0x698)

}

function botto()() public {
    Begin block 0x18a
    prev=[], succ=[0x745]
    =================================
    0x18b: v18b(0xf40) = CONST 
    0x18e: v18e(0x745) = CONST 
    0x191: JUMP v18e(0x745)

    Begin block 0x745
    prev=[0x18a], succ=[0xf40]
    =================================
    0x746: v746(0x65) = CONST 
    0x748: v748 = SLOAD v746(0x65)
    0x749: v749(0x1) = CONST 
    0x74b: v74b(0x1) = CONST 
    0x74d: v74d(0xa0) = CONST 
    0x74f: v74f(0x10000000000000000000000000000000000000000) = SHL v74d(0xa0), v74b(0x1)
    0x750: v750(0xffffffffffffffffffffffffffffffffffffffff) = SUB v74f(0x10000000000000000000000000000000000000000), v749(0x1)
    0x751: v751 = AND v750(0xffffffffffffffffffffffffffffffffffffffff), v748
    0x753: JUMP v18b(0xf40)

    Begin block 0xf40
    prev=[0x745], succ=[]
    =================================
    0xf41: vf41(0x40) = CONST 
    0xf44: vf44 = MLOAD vf41(0x40)
    0xf45: vf45(0x1) = CONST 
    0xf47: vf47(0x1) = CONST 
    0xf49: vf49(0xa0) = CONST 
    0xf4b: vf4b(0x10000000000000000000000000000000000000000) = SHL vf49(0xa0), vf47(0x1)
    0xf4c: vf4c(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf4b(0x10000000000000000000000000000000000000000), vf45(0x1)
    0xf4f: vf4f = AND v751, vf4c(0xffffffffffffffffffffffffffffffffffffffff)
    0xf51: MSTORE vf44, vf4f
    0xf52: vf52 = MLOAD vf41(0x40)
    0xf56: vf56(0x0) = SUB vf44, vf52
    0xf57: vf57(0x20) = CONST 
    0xf59: vf59(0x20) = ADD vf57(0x20), vf56(0x0)
    0xf5b: RETURN vf52, vf59(0x20)

}

function transferOwnership(address)() public {
    Begin block 0x192
    prev=[], succ=[0x1a4, 0x1a8]
    =================================
    0x193: v193(0xf7b) = CONST 
    0x196: v196(0x4) = CONST 
    0x199: v199 = CALLDATASIZE 
    0x19a: v19a = SUB v199, v196(0x4)
    0x19b: v19b(0x20) = CONST 
    0x19e: v19e = LT v19a, v19b(0x20)
    0x19f: v19f = ISZERO v19e
    0x1a0: v1a0(0x1a8) = CONST 
    0x1a3: JUMPI v1a0(0x1a8), v19f

    Begin block 0x1a4
    prev=[0x192], succ=[]
    =================================
    0x1a4: v1a4(0x0) = CONST 
    0x1a7: REVERT v1a4(0x0), v1a4(0x0)

    Begin block 0x1a8
    prev=[0x192], succ=[0x754]
    =================================
    0x1aa: v1aa = CALLDATALOAD v196(0x4)
    0x1ab: v1ab(0x1) = CONST 
    0x1ad: v1ad(0x1) = CONST 
    0x1af: v1af(0xa0) = CONST 
    0x1b1: v1b1(0x10000000000000000000000000000000000000000) = SHL v1af(0xa0), v1ad(0x1)
    0x1b2: v1b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1b1(0x10000000000000000000000000000000000000000), v1ab(0x1)
    0x1b3: v1b3 = AND v1b2(0xffffffffffffffffffffffffffffffffffffffff), v1aa
    0x1b4: v1b4(0x754) = CONST 
    0x1b7: JUMP v1b4(0x754)

    Begin block 0x754
    prev=[0x1a8], succ=[0x8c6B0x754]
    =================================
    0x755: v755(0x75c) = CONST 
    0x758: v758(0x8c6) = CONST 
    0x75b: JUMP v758(0x8c6)

    Begin block 0x8c6B0x754
    prev=[0x754], succ=[0x75c]
    =================================
    0x8c7S0x754: v8c7V754 = CALLER 
    0x8c9S0x754: JUMP v755(0x75c)

    Begin block 0x75c
    prev=[0x8c6B0x754], succ=[0x51eB0x75c]
    =================================
    0x75d: v75d(0x1) = CONST 
    0x75f: v75f(0x1) = CONST 
    0x761: v761(0xa0) = CONST 
    0x763: v763(0x10000000000000000000000000000000000000000) = SHL v761(0xa0), v75f(0x1)
    0x764: v764(0xffffffffffffffffffffffffffffffffffffffff) = SUB v763(0x10000000000000000000000000000000000000000), v75d(0x1)
    0x765: v765 = AND v764(0xffffffffffffffffffffffffffffffffffffffff), v8c7V754
    0x766: v766(0x76d) = CONST 
    0x769: v769(0x51e) = CONST 
    0x76c: JUMP v769(0x51e)

    Begin block 0x51eB0x75c
    prev=[0x75c], succ=[0x76d]
    =================================
    0x51fS0x75c: v51fV75c(0x33) = CONST 
    0x521S0x75c: v521V75c = SLOAD v51fV75c(0x33)
    0x522S0x75c: v522V75c(0x1) = CONST 
    0x524S0x75c: v524V75c(0x1) = CONST 
    0x526S0x75c: v526V75c(0xa0) = CONST 
    0x528S0x75c: v528V75c(0x10000000000000000000000000000000000000000) = SHL v526V75c(0xa0), v524V75c(0x1)
    0x529S0x75c: v529V75c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v528V75c(0x10000000000000000000000000000000000000000), v522V75c(0x1)
    0x52aS0x75c: v52aV75c = AND v529V75c(0xffffffffffffffffffffffffffffffffffffffff), v521V75c
    0x52cS0x75c: JUMP v766(0x76d)

    Begin block 0x76d
    prev=[0x51eB0x75c], succ=[0x77c, 0x7c8]
    =================================
    0x76e: v76e(0x1) = CONST 
    0x770: v770(0x1) = CONST 
    0x772: v772(0xa0) = CONST 
    0x774: v774(0x10000000000000000000000000000000000000000) = SHL v772(0xa0), v770(0x1)
    0x775: v775(0xffffffffffffffffffffffffffffffffffffffff) = SUB v774(0x10000000000000000000000000000000000000000), v76e(0x1)
    0x776: v776 = AND v775(0xffffffffffffffffffffffffffffffffffffffff), v52aV75c
    0x777: v777 = EQ v776, v765
    0x778: v778(0x7c8) = CONST 
    0x77b: JUMPI v778(0x7c8), v777

    Begin block 0x77c
    prev=[0x76d], succ=[]
    =================================
    0x77c: v77c(0x40) = CONST 
    0x77f: v77f = MLOAD v77c(0x40)
    0x780: v780(0x461bcd) = CONST 
    0x784: v784(0xe5) = CONST 
    0x786: v786(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v784(0xe5), v780(0x461bcd)
    0x788: MSTORE v77f, v786(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x789: v789(0x20) = CONST 
    0x78b: v78b(0x4) = CONST 
    0x78e: v78e = ADD v77f, v78b(0x4)
    0x791: MSTORE v78e, v789(0x20)
    0x792: v792(0x24) = CONST 
    0x795: v795 = ADD v77f, v792(0x24)
    0x796: MSTORE v795, v789(0x20)
    0x797: v797(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
    0x7b8: v7b8(0x44) = CONST 
    0x7bb: v7bb = ADD v77f, v7b8(0x44)
    0x7bc: MSTORE v7bb, v797(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x7be: v7be = MLOAD v77c(0x40)
    0x7c2: v7c2(0x0) = SUB v77f, v7be
    0x7c3: v7c3(0x64) = CONST 
    0x7c5: v7c5(0x64) = ADD v7c3(0x64), v7c2(0x0)
    0x7c7: REVERT v7be, v7c5(0x64)

    Begin block 0x7c8
    prev=[0x76d], succ=[0x7d7, 0x80d]
    =================================
    0x7c9: v7c9(0x1) = CONST 
    0x7cb: v7cb(0x1) = CONST 
    0x7cd: v7cd(0xa0) = CONST 
    0x7cf: v7cf(0x10000000000000000000000000000000000000000) = SHL v7cd(0xa0), v7cb(0x1)
    0x7d0: v7d0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7cf(0x10000000000000000000000000000000000000000), v7c9(0x1)
    0x7d2: v7d2 = AND v1b3, v7d0(0xffffffffffffffffffffffffffffffffffffffff)
    0x7d3: v7d3(0x80d) = CONST 
    0x7d6: JUMPI v7d3(0x80d), v7d2

    Begin block 0x7d7
    prev=[0x7c8], succ=[]
    =================================
    0x7d7: v7d7(0x40) = CONST 
    0x7d9: v7d9 = MLOAD v7d7(0x40)
    0x7da: v7da(0x461bcd) = CONST 
    0x7de: v7de(0xe5) = CONST 
    0x7e0: v7e0(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v7de(0xe5), v7da(0x461bcd)
    0x7e2: MSTORE v7d9, v7e0(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x7e3: v7e3(0x4) = CONST 
    0x7e5: v7e5 = ADD v7e3(0x4), v7d9
    0x7e8: v7e8(0x20) = CONST 
    0x7ea: v7ea = ADD v7e8(0x20), v7e5
    0x7ed: v7ed(0x20) = SUB v7ea, v7e5
    0x7ef: MSTORE v7e5, v7ed(0x20)
    0x7f0: v7f0(0x26) = CONST 
    0x7f3: MSTORE v7ea, v7f0(0x26)
    0x7f4: v7f4(0x20) = CONST 
    0x7f6: v7f6 = ADD v7f4(0x20), v7ea
    0x7f8: v7f8(0xce1) = CONST 
    0x7fb: v7fb(0x26) = CONST 
    0x7fe: CODECOPY v7f6, v7f8(0xce1), v7fb(0x26)
    0x7ff: v7ff(0x40) = CONST 
    0x801: v801 = ADD v7ff(0x40), v7f6
    0x805: v805(0x40) = CONST 
    0x807: v807 = MLOAD v805(0x40)
    0x80a: v80a(0x84) = SUB v801, v807
    0x80c: REVERT v807, v80a(0x84)

    Begin block 0x80d
    prev=[0x7c8], succ=[0xf7b]
    =================================
    0x80e: v80e(0x33) = CONST 
    0x810: v810 = SLOAD v80e(0x33)
    0x811: v811(0x40) = CONST 
    0x813: v813 = MLOAD v811(0x40)
    0x814: v814(0x1) = CONST 
    0x816: v816(0x1) = CONST 
    0x818: v818(0xa0) = CONST 
    0x81a: v81a(0x10000000000000000000000000000000000000000) = SHL v818(0xa0), v816(0x1)
    0x81b: v81b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v81a(0x10000000000000000000000000000000000000000), v814(0x1)
    0x81e: v81e = AND v1b3, v81b(0xffffffffffffffffffffffffffffffffffffffff)
    0x820: v820 = AND v810, v81b(0xffffffffffffffffffffffffffffffffffffffff)
    0x822: v822(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x844: v844(0x0) = CONST 
    0x847: LOG3 v813, v844(0x0), v822(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v820, v81e
    0x848: v848(0x33) = CONST 
    0x84b: v84b = SLOAD v848(0x33)
    0x84c: v84c(0x1) = CONST 
    0x84e: v84e(0x1) = CONST 
    0x850: v850(0xa0) = CONST 
    0x852: v852(0x10000000000000000000000000000000000000000) = SHL v850(0xa0), v84e(0x1)
    0x853: v853(0xffffffffffffffffffffffffffffffffffffffff) = SUB v852(0x10000000000000000000000000000000000000000), v84c(0x1)
    0x854: v854(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v853(0xffffffffffffffffffffffffffffffffffffffff)
    0x855: v855 = AND v854(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v84b
    0x856: v856(0x1) = CONST 
    0x858: v858(0x1) = CONST 
    0x85a: v85a(0xa0) = CONST 
    0x85c: v85c(0x10000000000000000000000000000000000000000) = SHL v85a(0xa0), v858(0x1)
    0x85d: v85d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v85c(0x10000000000000000000000000000000000000000), v856(0x1)
    0x861: v861 = AND v85d(0xffffffffffffffffffffffffffffffffffffffff), v1b3
    0x865: v865 = OR v861, v855
    0x867: SSTORE v848(0x33), v865
    0x868: JUMP v193(0xf7b)

    Begin block 0xf7b
    prev=[0x80d], succ=[]
    =================================
    0xf7c: STOP 

}

function unstake()() public {
    Begin block 0xa3
    prev=[], succ=[0x1b8]
    =================================
    0xa4: va4(0xdfe) = CONST 
    0xa7: va7(0x1b8) = CONST 
    0xaa: JUMP va7(0x1b8)

    Begin block 0x1b8
    prev=[0xa3], succ=[0x1ce, 0x20e]
    =================================
    0x1b9: v1b9 = CALLER 
    0x1ba: v1ba(0x0) = CONST 
    0x1be: MSTORE v1ba(0x0), v1b9
    0x1bf: v1bf(0x67) = CONST 
    0x1c1: v1c1(0x20) = CONST 
    0x1c3: MSTORE v1c1(0x20), v1bf(0x67)
    0x1c4: v1c4(0x40) = CONST 
    0x1c7: v1c7 = SHA3 v1ba(0x0), v1c4(0x40)
    0x1c8: v1c8 = SLOAD v1c7
    0x1ca: v1ca(0x20e) = CONST 
    0x1cd: JUMPI v1ca(0x20e), v1c8

    Begin block 0x1ce
    prev=[0x1b8], succ=[]
    =================================
    0x1ce: v1ce(0x40) = CONST 
    0x1d1: v1d1 = MLOAD v1ce(0x40)
    0x1d2: v1d2(0x461bcd) = CONST 
    0x1d6: v1d6(0xe5) = CONST 
    0x1d8: v1d8(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1d6(0xe5), v1d2(0x461bcd)
    0x1da: MSTORE v1d1, v1d8(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1db: v1db(0x20) = CONST 
    0x1dd: v1dd(0x4) = CONST 
    0x1e0: v1e0 = ADD v1d1, v1dd(0x4)
    0x1e1: MSTORE v1e0, v1db(0x20)
    0x1e2: v1e2(0x11) = CONST 
    0x1e4: v1e4(0x24) = CONST 
    0x1e7: v1e7 = ADD v1d1, v1e4(0x24)
    0x1e8: MSTORE v1e7, v1e2(0x11)
    0x1e9: v1e9(0x4e6f206578697374696e67207374616b65) = CONST 
    0x1fb: v1fb(0x78) = CONST 
    0x1fd: v1fd(0x4e6f206578697374696e67207374616b65000000000000000000000000000000) = SHL v1fb(0x78), v1e9(0x4e6f206578697374696e67207374616b65)
    0x1fe: v1fe(0x44) = CONST 
    0x201: v201 = ADD v1d1, v1fe(0x44)
    0x202: MSTORE v201, v1fd(0x4e6f206578697374696e67207374616b65000000000000000000000000000000)
    0x204: v204 = MLOAD v1ce(0x40)
    0x208: v208(0x0) = SUB v1d1, v204
    0x209: v209(0x64) = CONST 
    0x20b: v20b(0x64) = ADD v209(0x64), v208(0x0)
    0x20d: REVERT v204, v20b(0x64)

    Begin block 0x20e
    prev=[0x1b8], succ=[0x869B0x20e]
    =================================
    0x20f: v20f = CALLER 
    0x210: v210(0x0) = CONST 
    0x214: MSTORE v210(0x0), v20f
    0x215: v215(0x67) = CONST 
    0x217: v217(0x20) = CONST 
    0x219: MSTORE v217(0x20), v215(0x67)
    0x21a: v21a(0x40) = CONST 
    0x21d: v21d = SHA3 v210(0x0), v21a(0x40)
    0x21e: SSTORE v21d, v210(0x0)
    0x21f: v21f(0x66) = CONST 
    0x221: v221 = SLOAD v21f(0x66)
    0x222: v222(0x22b) = CONST 
    0x227: v227(0x869) = CONST 
    0x22a: JUMP v227(0x869)

    Begin block 0x869B0x20e
    prev=[0x20e], succ=[0x874B0x20e, 0x8c0B0x20e]
    =================================
    0x86aS0x20e: v86aV20e(0x0) = CONST 
    0x86eS0x20e: v86eV20e = GT v1c8, v221
    0x86fS0x20e: v86fV20e = ISZERO v86eV20e
    0x870S0x20e: v870V20e(0x8c0) = CONST 
    0x873S0x20e: JUMPI v870V20e(0x8c0), v86fV20e

    Begin block 0x874B0x20e
    prev=[0x869B0x20e], succ=[]
    =================================
    0x874S0x20e: v874V20e(0x40) = CONST 
    0x877S0x20e: v877V20e = MLOAD v874V20e(0x40)
    0x878S0x20e: v878V20e(0x461bcd) = CONST 
    0x87cS0x20e: v87cV20e(0xe5) = CONST 
    0x87eS0x20e: v87eV20e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v87cV20e(0xe5), v878V20e(0x461bcd)
    0x880S0x20e: MSTORE v877V20e, v87eV20e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x881S0x20e: v881V20e(0x20) = CONST 
    0x883S0x20e: v883V20e(0x4) = CONST 
    0x886S0x20e: v886V20e = ADD v877V20e, v883V20e(0x4)
    0x887S0x20e: MSTORE v886V20e, v881V20e(0x20)
    0x888S0x20e: v888V20e(0x1e) = CONST 
    0x88aS0x20e: v88aV20e(0x24) = CONST 
    0x88dS0x20e: v88dV20e = ADD v877V20e, v88aV20e(0x24)
    0x88eS0x20e: MSTORE v88dV20e, v888V20e(0x1e)
    0x88fS0x20e: v88fV20e(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
    0x8b0S0x20e: v8b0V20e(0x44) = CONST 
    0x8b3S0x20e: v8b3V20e = ADD v877V20e, v8b0V20e(0x44)
    0x8b4S0x20e: MSTORE v8b3V20e, v88fV20e(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
    0x8b6S0x20e: v8b6V20e = MLOAD v874V20e(0x40)
    0x8baS0x20e: v8baV20e(0x0) = SUB v877V20e, v8b6V20e
    0x8bbS0x20e: v8bbV20e(0x64) = CONST 
    0x8bdS0x20e: v8bdV20e(0x64) = ADD v8bbV20e(0x64), v8baV20e(0x0)
    0x8bfS0x20e: REVERT v8b6V20e, v8bdV20e(0x64)

    Begin block 0x8c0B0x20e
    prev=[0x869B0x20e], succ=[0x22b]
    =================================
    0x8c3S0x20e: v8c3V20e = SUB v221, v1c8
    0x8c5S0x20e: JUMP v222(0x22b)

    Begin block 0x22b
    prev=[0x8c0B0x20e], succ=[0x27e, 0x282]
    =================================
    0x22c: v22c(0x66) = CONST 
    0x22e: SSTORE v22c(0x66), v8c3V20e
    0x22f: v22f(0x65) = CONST 
    0x231: v231 = SLOAD v22f(0x65)
    0x232: v232(0x40) = CONST 
    0x235: v235 = MLOAD v232(0x40)
    0x236: v236(0xa9059cbb) = CONST 
    0x23b: v23b(0xe0) = CONST 
    0x23d: v23d(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v23b(0xe0), v236(0xa9059cbb)
    0x23f: MSTORE v235, v23d(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
    0x240: v240 = CALLER 
    0x241: v241(0x4) = CONST 
    0x244: v244 = ADD v235, v241(0x4)
    0x245: MSTORE v244, v240
    0x246: v246(0x24) = CONST 
    0x249: v249 = ADD v235, v246(0x24)
    0x24c: MSTORE v249, v1c8
    0x24e: v24e = MLOAD v232(0x40)
    0x24f: v24f(0x1) = CONST 
    0x251: v251(0x1) = CONST 
    0x253: v253(0xa0) = CONST 
    0x255: v255(0x10000000000000000000000000000000000000000) = SHL v253(0xa0), v251(0x1)
    0x256: v256(0xffffffffffffffffffffffffffffffffffffffff) = SUB v255(0x10000000000000000000000000000000000000000), v24f(0x1)
    0x259: v259 = AND v231, v256(0xffffffffffffffffffffffffffffffffffffffff)
    0x25b: v25b(0xa9059cbb) = CONST 
    0x261: v261(0x44) = CONST 
    0x265: v265 = ADD v235, v261(0x44)
    0x267: v267(0x20) = CONST 
    0x26f: v26f(0x0) = SUB v235, v24e
    0x270: v270(0x44) = ADD v26f(0x0), v261(0x44)
    0x272: v272(0x0) = CONST 
    0x276: v276 = EXTCODESIZE v259
    0x277: v277 = ISZERO v276
    0x279: v279 = ISZERO v277
    0x27a: v27a(0x282) = CONST 
    0x27d: JUMPI v27a(0x282), v279

    Begin block 0x27e
    prev=[0x22b], succ=[]
    =================================
    0x27e: v27e(0x0) = CONST 
    0x281: REVERT v27e(0x0), v27e(0x0)

    Begin block 0x282
    prev=[0x22b], succ=[0x28d, 0x296]
    =================================
    0x284: v284 = GAS 
    0x285: v285 = CALL v284, v259, v272(0x0), v24e, v270(0x44), v24e, v267(0x20)
    0x286: v286 = ISZERO v285
    0x288: v288 = ISZERO v286
    0x289: v289(0x296) = CONST 
    0x28c: JUMPI v289(0x296), v288

    Begin block 0x28d
    prev=[0x282], succ=[]
    =================================
    0x28d: v28d = RETURNDATASIZE 
    0x28e: v28e(0x0) = CONST 
    0x291: RETURNDATACOPY v28e(0x0), v28e(0x0), v28d
    0x292: v292 = RETURNDATASIZE 
    0x293: v293(0x0) = CONST 
    0x295: REVERT v293(0x0), v292

    Begin block 0x296
    prev=[0x282], succ=[0x2a8, 0x2ac]
    =================================
    0x29b: v29b(0x40) = CONST 
    0x29d: v29d = MLOAD v29b(0x40)
    0x29e: v29e = RETURNDATASIZE 
    0x29f: v29f(0x20) = CONST 
    0x2a2: v2a2 = LT v29e, v29f(0x20)
    0x2a3: v2a3 = ISZERO v2a2
    0x2a4: v2a4(0x2ac) = CONST 
    0x2a7: JUMPI v2a4(0x2ac), v2a3

    Begin block 0x2a8
    prev=[0x296], succ=[]
    =================================
    0x2a8: v2a8(0x0) = CONST 
    0x2ab: REVERT v2a8(0x0), v2a8(0x0)

    Begin block 0x2ac
    prev=[0x296], succ=[0xdfe]
    =================================
    0x2af: v2af(0x40) = CONST 
    0x2b2: v2b2 = MLOAD v2af(0x40)
    0x2b5: MSTORE v2b2, v1c8
    0x2b7: v2b7 = MLOAD v2af(0x40)
    0x2b8: v2b8 = CALLER 
    0x2ba: v2ba(0xf5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75) = CONST 
    0x2df: v2df(0x0) = SUB v2b2, v2b7
    0x2e0: v2e0(0x20) = CONST 
    0x2e2: v2e2(0x20) = ADD v2e0(0x20), v2df(0x0)
    0x2e4: LOG2 v2b7, v2e2(0x20), v2ba(0xf5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75), v2b8
    0x2e6: JUMP va4(0xdfe)

    Begin block 0xdfe
    prev=[0x2ac], succ=[]
    =================================
    0xdff: STOP 

}

function recover(address,address)() public {
    Begin block 0xad
    prev=[], succ=[0xbf, 0xc3]
    =================================
    0xae: vae(0xe1f) = CONST 
    0xb1: vb1(0x4) = CONST 
    0xb4: vb4 = CALLDATASIZE 
    0xb5: vb5 = SUB vb4, vb1(0x4)
    0xb6: vb6(0x40) = CONST 
    0xb9: vb9 = LT vb5, vb6(0x40)
    0xba: vba = ISZERO vb9
    0xbb: vbb(0xc3) = CONST 
    0xbe: JUMPI vbb(0xc3), vba

    Begin block 0xbf
    prev=[0xad], succ=[]
    =================================
    0xbf: vbf(0x0) = CONST 
    0xc2: REVERT vbf(0x0), vbf(0x0)

    Begin block 0xc3
    prev=[0xad], succ=[0x2e7]
    =================================
    0xc5: vc5(0x1) = CONST 
    0xc7: vc7(0x1) = CONST 
    0xc9: vc9(0xa0) = CONST 
    0xcb: vcb(0x10000000000000000000000000000000000000000) = SHL vc9(0xa0), vc7(0x1)
    0xcc: vcc(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcb(0x10000000000000000000000000000000000000000), vc5(0x1)
    0xce: vce = CALLDATALOAD vb1(0x4)
    0xd0: vd0 = AND vcc(0xffffffffffffffffffffffffffffffffffffffff), vce
    0xd2: vd2(0x20) = CONST 
    0xd4: vd4(0x24) = ADD vd2(0x20), vb1(0x4)
    0xd5: vd5 = CALLDATALOAD vd4(0x24)
    0xd6: vd6 = AND vd5, vcc(0xffffffffffffffffffffffffffffffffffffffff)
    0xd7: vd7(0x2e7) = CONST 
    0xda: JUMP vd7(0x2e7)

    Begin block 0x2e7
    prev=[0xc3], succ=[0x8c6B0x2e7]
    =================================
    0x2e8: v2e8(0x2ef) = CONST 
    0x2eb: v2eb(0x8c6) = CONST 
    0x2ee: JUMP v2eb(0x8c6)

    Begin block 0x8c6B0x2e7
    prev=[0x2e7], succ=[0x2ef]
    =================================
    0x8c7S0x2e7: v8c7V2e7 = CALLER 
    0x8c9S0x2e7: JUMP v2e8(0x2ef)

    Begin block 0x2ef
    prev=[0x8c6B0x2e7], succ=[0x51eB0x2ef]
    =================================
    0x2f0: v2f0(0x1) = CONST 
    0x2f2: v2f2(0x1) = CONST 
    0x2f4: v2f4(0xa0) = CONST 
    0x2f6: v2f6(0x10000000000000000000000000000000000000000) = SHL v2f4(0xa0), v2f2(0x1)
    0x2f7: v2f7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2f6(0x10000000000000000000000000000000000000000), v2f0(0x1)
    0x2f8: v2f8 = AND v2f7(0xffffffffffffffffffffffffffffffffffffffff), v8c7V2e7
    0x2f9: v2f9(0x300) = CONST 
    0x2fc: v2fc(0x51e) = CONST 
    0x2ff: JUMP v2fc(0x51e)

    Begin block 0x51eB0x2ef
    prev=[0x2ef], succ=[0x300]
    =================================
    0x51fS0x2ef: v51fV2ef(0x33) = CONST 
    0x521S0x2ef: v521V2ef = SLOAD v51fV2ef(0x33)
    0x522S0x2ef: v522V2ef(0x1) = CONST 
    0x524S0x2ef: v524V2ef(0x1) = CONST 
    0x526S0x2ef: v526V2ef(0xa0) = CONST 
    0x528S0x2ef: v528V2ef(0x10000000000000000000000000000000000000000) = SHL v526V2ef(0xa0), v524V2ef(0x1)
    0x529S0x2ef: v529V2ef(0xffffffffffffffffffffffffffffffffffffffff) = SUB v528V2ef(0x10000000000000000000000000000000000000000), v522V2ef(0x1)
    0x52aS0x2ef: v52aV2ef = AND v529V2ef(0xffffffffffffffffffffffffffffffffffffffff), v521V2ef
    0x52cS0x2ef: JUMP v2f9(0x300)

    Begin block 0x300
    prev=[0x51eB0x2ef], succ=[0x30f, 0x35b]
    =================================
    0x301: v301(0x1) = CONST 
    0x303: v303(0x1) = CONST 
    0x305: v305(0xa0) = CONST 
    0x307: v307(0x10000000000000000000000000000000000000000) = SHL v305(0xa0), v303(0x1)
    0x308: v308(0xffffffffffffffffffffffffffffffffffffffff) = SUB v307(0x10000000000000000000000000000000000000000), v301(0x1)
    0x309: v309 = AND v308(0xffffffffffffffffffffffffffffffffffffffff), v52aV2ef
    0x30a: v30a = EQ v309, v2f8
    0x30b: v30b(0x35b) = CONST 
    0x30e: JUMPI v30b(0x35b), v30a

    Begin block 0x30f
    prev=[0x300], succ=[]
    =================================
    0x30f: v30f(0x40) = CONST 
    0x312: v312 = MLOAD v30f(0x40)
    0x313: v313(0x461bcd) = CONST 
    0x317: v317(0xe5) = CONST 
    0x319: v319(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v317(0xe5), v313(0x461bcd)
    0x31b: MSTORE v312, v319(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x31c: v31c(0x20) = CONST 
    0x31e: v31e(0x4) = CONST 
    0x321: v321 = ADD v312, v31e(0x4)
    0x324: MSTORE v321, v31c(0x20)
    0x325: v325(0x24) = CONST 
    0x328: v328 = ADD v312, v325(0x24)
    0x329: MSTORE v328, v31c(0x20)
    0x32a: v32a(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
    0x34b: v34b(0x44) = CONST 
    0x34e: v34e = ADD v312, v34b(0x44)
    0x34f: MSTORE v34e, v32a(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x351: v351 = MLOAD v30f(0x40)
    0x355: v355(0x0) = SUB v312, v351
    0x356: v356(0x64) = CONST 
    0x358: v358(0x64) = ADD v356(0x64), v355(0x0)
    0x35a: REVERT v351, v358(0x64)

    Begin block 0x35b
    prev=[0x300], succ=[0x3a6, 0x3aa]
    =================================
    0x35c: v35c(0x0) = CONST 
    0x35f: v35f(0x1) = CONST 
    0x361: v361(0x1) = CONST 
    0x363: v363(0xa0) = CONST 
    0x365: v365(0x10000000000000000000000000000000000000000) = SHL v363(0xa0), v361(0x1)
    0x366: v366(0xffffffffffffffffffffffffffffffffffffffff) = SUB v365(0x10000000000000000000000000000000000000000), v35f(0x1)
    0x367: v367 = AND v366(0xffffffffffffffffffffffffffffffffffffffff), vd0
    0x368: v368(0x70a08231) = CONST 
    0x36d: v36d = ADDRESS 
    0x36e: v36e(0x40) = CONST 
    0x370: v370 = MLOAD v36e(0x40)
    0x372: v372(0xffffffff) = CONST 
    0x377: v377(0x70a08231) = AND v372(0xffffffff), v368(0x70a08231)
    0x378: v378(0xe0) = CONST 
    0x37a: v37a(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL v378(0xe0), v377(0x70a08231)
    0x37c: MSTORE v370, v37a(0x70a0823100000000000000000000000000000000000000000000000000000000)
    0x37d: v37d(0x4) = CONST 
    0x37f: v37f = ADD v37d(0x4), v370
    0x382: v382(0x1) = CONST 
    0x384: v384(0x1) = CONST 
    0x386: v386(0xa0) = CONST 
    0x388: v388(0x10000000000000000000000000000000000000000) = SHL v386(0xa0), v384(0x1)
    0x389: v389(0xffffffffffffffffffffffffffffffffffffffff) = SUB v388(0x10000000000000000000000000000000000000000), v382(0x1)
    0x38a: v38a = AND v389(0xffffffffffffffffffffffffffffffffffffffff), v36d
    0x38c: MSTORE v37f, v38a
    0x38d: v38d(0x20) = CONST 
    0x38f: v38f = ADD v38d(0x20), v37f
    0x393: v393(0x20) = CONST 
    0x395: v395(0x40) = CONST 
    0x397: v397 = MLOAD v395(0x40)
    0x39a: v39a(0x24) = SUB v38f, v397
    0x39e: v39e = EXTCODESIZE v367
    0x39f: v39f = ISZERO v39e
    0x3a1: v3a1 = ISZERO v39f
    0x3a2: v3a2(0x3aa) = CONST 
    0x3a5: JUMPI v3a2(0x3aa), v3a1

    Begin block 0x3a6
    prev=[0x35b], succ=[]
    =================================
    0x3a6: v3a6(0x0) = CONST 
    0x3a9: REVERT v3a6(0x0), v3a6(0x0)

    Begin block 0x3aa
    prev=[0x35b], succ=[0x3b5, 0x3be]
    =================================
    0x3ac: v3ac = GAS 
    0x3ad: v3ad = STATICCALL v3ac, v367, v397, v39a(0x24), v397, v393(0x20)
    0x3ae: v3ae = ISZERO v3ad
    0x3b0: v3b0 = ISZERO v3ae
    0x3b1: v3b1(0x3be) = CONST 
    0x3b4: JUMPI v3b1(0x3be), v3b0

    Begin block 0x3b5
    prev=[0x3aa], succ=[]
    =================================
    0x3b5: v3b5 = RETURNDATASIZE 
    0x3b6: v3b6(0x0) = CONST 
    0x3b9: RETURNDATACOPY v3b6(0x0), v3b6(0x0), v3b5
    0x3ba: v3ba = RETURNDATASIZE 
    0x3bb: v3bb(0x0) = CONST 
    0x3bd: REVERT v3bb(0x0), v3ba

    Begin block 0x3be
    prev=[0x3aa], succ=[0x3d0, 0x3d4]
    =================================
    0x3c3: v3c3(0x40) = CONST 
    0x3c5: v3c5 = MLOAD v3c3(0x40)
    0x3c6: v3c6 = RETURNDATASIZE 
    0x3c7: v3c7(0x20) = CONST 
    0x3ca: v3ca = LT v3c6, v3c7(0x20)
    0x3cb: v3cb = ISZERO v3ca
    0x3cc: v3cc(0x3d4) = CONST 
    0x3cf: JUMPI v3cc(0x3d4), v3cb

    Begin block 0x3d0
    prev=[0x3be], succ=[]
    =================================
    0x3d0: v3d0(0x0) = CONST 
    0x3d3: REVERT v3d0(0x0), v3d0(0x0)

    Begin block 0x3d4
    prev=[0x3be], succ=[0x3f0, 0x400]
    =================================
    0x3d6: v3d6 = MLOAD v3c5
    0x3d7: v3d7(0x65) = CONST 
    0x3d9: v3d9 = SLOAD v3d7(0x65)
    0x3dd: v3dd(0x1) = CONST 
    0x3df: v3df(0x1) = CONST 
    0x3e1: v3e1(0xa0) = CONST 
    0x3e3: v3e3(0x10000000000000000000000000000000000000000) = SHL v3e1(0xa0), v3df(0x1)
    0x3e4: v3e4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3e3(0x10000000000000000000000000000000000000000), v3dd(0x1)
    0x3e7: v3e7 = AND v3e4(0xffffffffffffffffffffffffffffffffffffffff), vd0
    0x3e9: v3e9 = AND v3d9, v3e4(0xffffffffffffffffffffffffffffffffffffffff)
    0x3ea: v3ea = EQ v3e9, v3e7
    0x3eb: v3eb = ISZERO v3ea
    0x3ec: v3ec(0x400) = CONST 
    0x3ef: JUMPI v3ec(0x400), v3eb

    Begin block 0x3f0
    prev=[0x3d4], succ=[0x869B0x3f0]
    =================================
    0x3f0: v3f0(0x66) = CONST 
    0x3f2: v3f2 = SLOAD v3f0(0x66)
    0x3f3: v3f3(0x3fd) = CONST 
    0x3f9: v3f9(0x869) = CONST 
    0x3fc: JUMP v3f9(0x869)

    Begin block 0x869B0x3f0
    prev=[0x3f0], succ=[0x874B0x3f0, 0x8c0B0x3f0]
    =================================
    0x86aS0x3f0: v86aV3f0(0x0) = CONST 
    0x86eS0x3f0: v86eV3f0 = GT v3f2, v3d6
    0x86fS0x3f0: v86fV3f0 = ISZERO v86eV3f0
    0x870S0x3f0: v870V3f0(0x8c0) = CONST 
    0x873S0x3f0: JUMPI v870V3f0(0x8c0), v86fV3f0

    Begin block 0x874B0x3f0
    prev=[0x869B0x3f0], succ=[]
    =================================
    0x874S0x3f0: v874V3f0(0x40) = CONST 
    0x877S0x3f0: v877V3f0 = MLOAD v874V3f0(0x40)
    0x878S0x3f0: v878V3f0(0x461bcd) = CONST 
    0x87cS0x3f0: v87cV3f0(0xe5) = CONST 
    0x87eS0x3f0: v87eV3f0(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v87cV3f0(0xe5), v878V3f0(0x461bcd)
    0x880S0x3f0: MSTORE v877V3f0, v87eV3f0(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x881S0x3f0: v881V3f0(0x20) = CONST 
    0x883S0x3f0: v883V3f0(0x4) = CONST 
    0x886S0x3f0: v886V3f0 = ADD v877V3f0, v883V3f0(0x4)
    0x887S0x3f0: MSTORE v886V3f0, v881V3f0(0x20)
    0x888S0x3f0: v888V3f0(0x1e) = CONST 
    0x88aS0x3f0: v88aV3f0(0x24) = CONST 
    0x88dS0x3f0: v88dV3f0 = ADD v877V3f0, v88aV3f0(0x24)
    0x88eS0x3f0: MSTORE v88dV3f0, v888V3f0(0x1e)
    0x88fS0x3f0: v88fV3f0(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
    0x8b0S0x3f0: v8b0V3f0(0x44) = CONST 
    0x8b3S0x3f0: v8b3V3f0 = ADD v877V3f0, v8b0V3f0(0x44)
    0x8b4S0x3f0: MSTORE v8b3V3f0, v88fV3f0(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
    0x8b6S0x3f0: v8b6V3f0 = MLOAD v874V3f0(0x40)
    0x8baS0x3f0: v8baV3f0(0x0) = SUB v877V3f0, v8b6V3f0
    0x8bbS0x3f0: v8bbV3f0(0x64) = CONST 
    0x8bdS0x3f0: v8bdV3f0(0x64) = ADD v8bbV3f0(0x64), v8baV3f0(0x0)
    0x8bfS0x3f0: REVERT v8b6V3f0, v8bdV3f0(0x64)

    Begin block 0x8c0B0x3f0
    prev=[0x869B0x3f0], succ=[0x3fd]
    =================================
    0x8c3S0x3f0: v8c3V3f0 = SUB v3d6, v3f2
    0x8c5S0x3f0: JUMP v3f3(0x3fd)

    Begin block 0x3fd
    prev=[0x8c0B0x3f0], succ=[0x400]
    =================================

    Begin block 0x400
    prev=[0x3d4, 0x3fd], succ=[0x8caB0x400]
    =================================
    0x400_0x0: v400_0 = PHI v3d6, v8c3V3f0
    0x401: v401(0x40b) = CONST 
    0x407: v407(0x8ca) = CONST 
    0x40a: JUMP v407(0x8ca), v400_0, vd6, vd0, v401(0x40b)

    Begin block 0x8caB0x400
    prev=[0x400], succ=[0x927B0x400]
    =================================
    0x8cbS0x400: v8cbV400(0x40) = CONST 
    0x8ceS0x400: v8ceV400 = MLOAD v8cbV400(0x40)
    0x8cfS0x400: v8cfV400(0x1) = CONST 
    0x8d1S0x400: v8d1V400(0x1) = CONST 
    0x8d3S0x400: v8d3V400(0xa0) = CONST 
    0x8d5S0x400: v8d5V400(0x10000000000000000000000000000000000000000) = SHL v8d3V400(0xa0), v8d1V400(0x1)
    0x8d6S0x400: v8d6V400(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8d5V400(0x10000000000000000000000000000000000000000), v8cfV400(0x1)
    0x8d9S0x400: v8d9V400 = AND v8d6V400(0xffffffffffffffffffffffffffffffffffffffff), vd6
    0x8daS0x400: v8daV400(0x24) = CONST 
    0x8ddS0x400: v8ddV400 = ADD v8ceV400, v8daV400(0x24)
    0x8deS0x400: MSTORE v8ddV400, v8d9V400
    0x8dfS0x400: v8dfV400(0x44) = CONST 
    0x8e3S0x400: v8e3V400 = ADD v8ceV400, v8dfV400(0x44)
    0x8e6S0x400: MSTORE v8e3V400, v400_0
    0x8e8S0x400: v8e8V400 = MLOAD v8cbV400(0x40)
    0x8ebS0x400: v8ebV400(0x0) = SUB v8ceV400, v8e8V400
    0x8eeS0x400: v8eeV400(0x44) = ADD v8dfV400(0x44), v8ebV400(0x0)
    0x8f0S0x400: MSTORE v8e8V400, v8eeV400(0x44)
    0x8f1S0x400: v8f1V400(0x64) = CONST 
    0x8f5S0x400: v8f5V400 = ADD v8ceV400, v8f1V400(0x64)
    0x8f7S0x400: MSTORE v8cbV400(0x40), v8f5V400
    0x8f8S0x400: v8f8V400(0x20) = CONST 
    0x8fbS0x400: v8fbV400 = ADD v8e8V400, v8f8V400(0x20)
    0x8fdS0x400: v8fdV400 = MLOAD v8fbV400
    0x8feS0x400: v8feV400(0x1) = CONST 
    0x900S0x400: v900V400(0x1) = CONST 
    0x902S0x400: v902V400(0xe0) = CONST 
    0x904S0x400: v904V400(0x100000000000000000000000000000000000000000000000000000000) = SHL v902V400(0xe0), v900V400(0x1)
    0x905S0x400: v905V400(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v904V400(0x100000000000000000000000000000000000000000000000000000000), v8feV400(0x1)
    0x906S0x400: v906V400 = AND v905V400(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v8fdV400
    0x907S0x400: v907V400(0xa9059cbb) = CONST 
    0x90cS0x400: v90cV400(0xe0) = CONST 
    0x90eS0x400: v90eV400(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v90cV400(0xe0), v907V400(0xa9059cbb)
    0x90fS0x400: v90fV400 = OR v90eV400(0xa9059cbb00000000000000000000000000000000000000000000000000000000), v906V400
    0x911S0x400: MSTORE v8fbV400, v90fV400
    0x913S0x400: v913V400 = MLOAD v8cbV400(0x40)
    0x915S0x400: v915V400(0x44) = MLOAD v8e8V400
    0x916S0x400: v916V400(0x0) = CONST 
    0x91dS0x400: v91dV400 = AND vd0, v8d6V400(0xffffffffffffffffffffffffffffffffffffffff)

    Begin block 0x927B0x400
    prev=[0x8caB0x400, 0x930B0x400], succ=[0x946B0x400, 0x930B0x400]
    =================================
    0x927_0x2S0x400: v927_2V400 = PHI v915V400(0x44), v939V400
    0x928S0x400: v928V400(0x20) = CONST 
    0x92bS0x400: v92bV400 = LT v927_2V400, v928V400(0x20)
    0x92cS0x400: v92cV400(0x946) = CONST 
    0x92fS0x400: JUMPI v92cV400(0x946), v92bV400

    Begin block 0x946B0x400
    prev=[0x927B0x400], succ=[0x987B0x400, 0x9a8B0x400]
    =================================
    0x946_0x0S0x400: v946_0V400 = PHI v8fbV400, v941V400
    0x946_0x1S0x400: v946_1V400 = PHI v913V400, v93fV400
    0x946_0x2S0x400: v946_2V400 = PHI v915V400(0x44), v939V400
    0x947S0x400: v947V400(0x1) = CONST 
    0x94aS0x400: v94aV400(0x20) = CONST 
    0x94cS0x400: v94cV400 = SUB v94aV400(0x20), v946_2V400
    0x94dS0x400: v94dV400(0x100) = CONST 
    0x950S0x400: v950V400 = EXP v94dV400(0x100), v94cV400
    0x951S0x400: v951V400 = SUB v950V400, v947V400(0x1)
    0x953S0x400: v953V400 = NOT v951V400
    0x955S0x400: v955V400 = MLOAD v946_0V400
    0x956S0x400: v956V400 = AND v955V400, v953V400
    0x959S0x400: v959V400 = MLOAD v946_1V400
    0x95aS0x400: v95aV400 = AND v959V400, v951V400
    0x95dS0x400: v95dV400 = OR v956V400, v95aV400
    0x95fS0x400: MSTORE v946_1V400, v95dV400
    0x968S0x400: v968V400 = ADD v915V400(0x44), v913V400
    0x96cS0x400: v96cV400(0x0) = CONST 
    0x96eS0x400: v96eV400(0x40) = CONST 
    0x970S0x400: v970V400 = MLOAD v96eV400(0x40)
    0x973S0x400: v973V400(0x44) = SUB v968V400, v970V400
    0x975S0x400: v975V400(0x0) = CONST 
    0x978S0x400: v978V400 = GAS 
    0x979S0x400: v979V400 = CALL v978V400, v91dV400, v975V400(0x0), v970V400, v973V400(0x44), v970V400, v96cV400(0x0)
    0x97dS0x400: v97dV400 = RETURNDATASIZE 
    0x97fS0x400: v97fV400(0x0) = CONST 
    0x982S0x400: v982V400 = EQ v97dV400, v97fV400(0x0)
    0x983S0x400: v983V400(0x9a8) = CONST 
    0x986S0x400: JUMPI v983V400(0x9a8), v982V400

    Begin block 0x987B0x400
    prev=[0x946B0x400], succ=[0x9adB0x400]
    =================================
    0x987S0x400: v987V400(0x40) = CONST 
    0x989S0x400: v989V400 = MLOAD v987V400(0x40)
    0x98cS0x400: v98cV400(0x1f) = CONST 
    0x98eS0x400: v98eV400(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v98cV400(0x1f)
    0x98fS0x400: v98fV400(0x3f) = CONST 
    0x991S0x400: v991V400 = RETURNDATASIZE 
    0x992S0x400: v992V400 = ADD v991V400, v98fV400(0x3f)
    0x993S0x400: v993V400 = AND v992V400, v98eV400(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x995S0x400: v995V400 = ADD v989V400, v993V400
    0x996S0x400: v996V400(0x40) = CONST 
    0x998S0x400: MSTORE v996V400(0x40), v995V400
    0x999S0x400: v999V400 = RETURNDATASIZE 
    0x99bS0x400: MSTORE v989V400, v999V400
    0x99cS0x400: v99cV400 = RETURNDATASIZE 
    0x99dS0x400: v99dV400(0x0) = CONST 
    0x99fS0x400: v99fV400(0x20) = CONST 
    0x9a2S0x400: v9a2V400 = ADD v989V400, v99fV400(0x20)
    0x9a3S0x400: RETURNDATACOPY v9a2V400, v99dV400(0x0), v99cV400
    0x9a4S0x400: v9a4V400(0x9ad) = CONST 
    0x9a7S0x400: JUMP v9a4V400(0x9ad)

    Begin block 0x9adB0x400
    prev=[0x987B0x400, 0x9a8B0x400], succ=[0x9dbB0x400, 0x9baB0x400]
    =================================
    0x9b5S0x400: v9b5V400 = ISZERO v979V400
    0x9b6S0x400: v9b6V400(0x9db) = CONST 
    0x9b9S0x400: JUMPI v9b6V400(0x9db), v9b5V400

    Begin block 0x9dbB0x400
    prev=[0x9adB0x400, 0x9d8B0x400, 0x9baB0x400], succ=[0x9e0B0x400, 0xa16B0x400]
    =================================
    0x9db_0x0S0x400: v9db_0V400 = PHI v979V400, v9daV400, v9bdV400
    0x9dcS0x400: v9dcV400(0xa16) = CONST 
    0x9dfS0x400: JUMPI v9dcV400(0xa16), v9db_0V400

    Begin block 0x9e0B0x400
    prev=[0x9dbB0x400], succ=[]
    =================================
    0x9e0S0x400: v9e0V400(0x40) = CONST 
    0x9e2S0x400: v9e2V400 = MLOAD v9e0V400(0x40)
    0x9e3S0x400: v9e3V400(0x461bcd) = CONST 
    0x9e7S0x400: v9e7V400(0xe5) = CONST 
    0x9e9S0x400: v9e9V400(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v9e7V400(0xe5), v9e3V400(0x461bcd)
    0x9ebS0x400: MSTORE v9e2V400, v9e9V400(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x9ecS0x400: v9ecV400(0x4) = CONST 
    0x9eeS0x400: v9eeV400 = ADD v9ecV400(0x4), v9e2V400
    0x9f1S0x400: v9f1V400(0x20) = CONST 
    0x9f3S0x400: v9f3V400 = ADD v9f1V400(0x20), v9eeV400
    0x9f6S0x400: v9f6V400(0x20) = SUB v9f3V400, v9eeV400
    0x9f8S0x400: MSTORE v9eeV400, v9f6V400(0x20)
    0x9f9S0x400: v9f9V400(0x2d) = CONST 
    0x9fcS0x400: MSTORE v9f3V400, v9f9V400(0x2d)
    0x9fdS0x400: v9fdV400(0x20) = CONST 
    0x9ffS0x400: v9ffV400 = ADD v9fdV400(0x20), v9f3V400
    0xa01S0x400: va01V400(0xd35) = CONST 
    0xa04S0x400: va04V400(0x2d) = CONST 
    0xa07S0x400: CODECOPY v9ffV400, va01V400(0xd35), va04V400(0x2d)
    0xa08S0x400: va08V400(0x40) = CONST 
    0xa0aS0x400: va0aV400 = ADD va08V400(0x40), v9ffV400
    0xa0eS0x400: va0eV400(0x40) = CONST 
    0xa10S0x400: va10V400 = MLOAD va0eV400(0x40)
    0xa13S0x400: va13V400(0x84) = SUB va0aV400, va10V400
    0xa15S0x400: REVERT va10V400, va13V400(0x84)

    Begin block 0xa16B0x400
    prev=[0x9dbB0x400], succ=[0x40b]
    =================================
    0xa1cS0x400: JUMP v401(0x40b)

    Begin block 0x40b
    prev=[0xa16B0x400], succ=[0xe1f]
    =================================
    0x40b_0x0: v40b_0 = PHI v3d6, v8c3V3f0
    0x40c: v40c(0x40) = CONST 
    0x40f: v40f = MLOAD v40c(0x40)
    0x410: v410(0x1) = CONST 
    0x412: v412(0x1) = CONST 
    0x414: v414(0xa0) = CONST 
    0x416: v416(0x10000000000000000000000000000000000000000) = SHL v414(0xa0), v412(0x1)
    0x417: v417(0xffffffffffffffffffffffffffffffffffffffff) = SUB v416(0x10000000000000000000000000000000000000000), v410(0x1)
    0x41a: v41a = AND vd0, v417(0xffffffffffffffffffffffffffffffffffffffff)
    0x41c: MSTORE v40f, v41a
    0x41d: v41d(0x20) = CONST 
    0x420: v420 = ADD v40f, v41d(0x20)
    0x423: MSTORE v420, v40b_0
    0x425: v425 = AND vd6, v417(0xffffffffffffffffffffffffffffffffffffffff)
    0x428: v428 = ADD v40c(0x40), v40f
    0x429: MSTORE v428, v425
    0x42b: v42b = MLOAD v40c(0x40)
    0x42c: v42c(0x996808f206844561ab15563a6bef55ef199bcf1a5280d770271b29c012a3cfef) = CONST 
    0x450: v450(0x0) = SUB v40f, v42b
    0x451: v451(0x60) = CONST 
    0x453: v453(0x60) = ADD v451(0x60), v450(0x0)
    0x455: LOG1 v42b, v453(0x60), v42c(0x996808f206844561ab15563a6bef55ef199bcf1a5280d770271b29c012a3cfef)
    0x459: JUMP vae(0xe1f)

    Begin block 0xe1f
    prev=[0x40b], succ=[]
    =================================
    0xe20: STOP 

    Begin block 0x9baB0x400
    prev=[0x9adB0x400], succ=[0x9dbB0x400, 0x9c3B0x400]
    =================================
    0x9ba_0x1S0x400: v9ba_1V400 = PHI v989V400, v9a9V400(0x60)
    0x9bcS0x400: v9bcV400 = MLOAD v9ba_1V400
    0x9bdS0x400: v9bdV400 = ISZERO v9bcV400
    0x9bfS0x400: v9bfV400(0x9db) = CONST 
    0x9c2S0x400: JUMPI v9bfV400(0x9db), v9bdV400

    Begin block 0x9c3B0x400
    prev=[0x9baB0x400], succ=[0x9d4B0x400, 0x9d8B0x400]
    =================================
    0x9c3_0x1S0x400: v9c3_1V400 = PHI v989V400, v9a9V400(0x60)
    0x9c6S0x400: v9c6V400(0x20) = CONST 
    0x9c8S0x400: v9c8V400 = ADD v9c6V400(0x20), v9c3_1V400
    0x9caS0x400: v9caV400 = MLOAD v9c3_1V400
    0x9cbS0x400: v9cbV400(0x20) = CONST 
    0x9ceS0x400: v9ceV400 = LT v9caV400, v9cbV400(0x20)
    0x9cfS0x400: v9cfV400 = ISZERO v9ceV400
    0x9d0S0x400: v9d0V400(0x9d8) = CONST 
    0x9d3S0x400: JUMPI v9d0V400(0x9d8), v9cfV400

    Begin block 0x9d4B0x400
    prev=[0x9c3B0x400], succ=[]
    =================================
    0x9d4S0x400: v9d4V400(0x0) = CONST 
    0x9d7S0x400: REVERT v9d4V400(0x0), v9d4V400(0x0)

    Begin block 0x9d8B0x400
    prev=[0x9c3B0x400], succ=[0x9dbB0x400]
    =================================
    0x9daS0x400: v9daV400 = MLOAD v9c8V400

    Begin block 0x9a8B0x400
    prev=[0x946B0x400], succ=[0x9adB0x400]
    =================================
    0x9a9S0x400: v9a9V400(0x60) = CONST 

    Begin block 0x930B0x400
    prev=[0x927B0x400], succ=[0x927B0x400]
    =================================
    0x930_0x0S0x400: v930_0V400 = PHI v8fbV400, v941V400
    0x930_0x1S0x400: v930_1V400 = PHI v913V400, v93fV400
    0x930_0x2S0x400: v930_2V400 = PHI v915V400(0x44), v939V400
    0x931S0x400: v931V400 = MLOAD v930_0V400
    0x933S0x400: MSTORE v930_1V400, v931V400
    0x934S0x400: v934V400(0x1f) = CONST 
    0x936S0x400: v936V400(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v934V400(0x1f)
    0x939S0x400: v939V400 = ADD v930_2V400, v936V400(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x93bS0x400: v93bV400(0x20) = CONST 
    0x93fS0x400: v93fV400 = ADD v93bV400(0x20), v930_1V400
    0x941S0x400: v941V400 = ADD v93bV400(0x20), v930_0V400
    0x942S0x400: v942V400(0x927) = CONST 
    0x945S0x400: JUMP v942V400(0x927)

}

function renounceOwnership()() public {
    Begin block 0xdb
    prev=[], succ=[0x45a]
    =================================
    0xdc: vdc(0xe40) = CONST 
    0xdf: vdf(0x45a) = CONST 
    0xe2: JUMP vdf(0x45a)

    Begin block 0x45a
    prev=[0xdb], succ=[0x8c6B0x45a]
    =================================
    0x45b: v45b(0x462) = CONST 
    0x45e: v45e(0x8c6) = CONST 
    0x461: JUMP v45e(0x8c6)

    Begin block 0x8c6B0x45a
    prev=[0x45a], succ=[0x462]
    =================================
    0x8c7S0x45a: v8c7V45a = CALLER 
    0x8c9S0x45a: JUMP v45b(0x462)

    Begin block 0x462
    prev=[0x8c6B0x45a], succ=[0x51eB0x462]
    =================================
    0x463: v463(0x1) = CONST 
    0x465: v465(0x1) = CONST 
    0x467: v467(0xa0) = CONST 
    0x469: v469(0x10000000000000000000000000000000000000000) = SHL v467(0xa0), v465(0x1)
    0x46a: v46a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v469(0x10000000000000000000000000000000000000000), v463(0x1)
    0x46b: v46b = AND v46a(0xffffffffffffffffffffffffffffffffffffffff), v8c7V45a
    0x46c: v46c(0x473) = CONST 
    0x46f: v46f(0x51e) = CONST 
    0x472: JUMP v46f(0x51e)

    Begin block 0x51eB0x462
    prev=[0x462], succ=[0x473]
    =================================
    0x51fS0x462: v51fV462(0x33) = CONST 
    0x521S0x462: v521V462 = SLOAD v51fV462(0x33)
    0x522S0x462: v522V462(0x1) = CONST 
    0x524S0x462: v524V462(0x1) = CONST 
    0x526S0x462: v526V462(0xa0) = CONST 
    0x528S0x462: v528V462(0x10000000000000000000000000000000000000000) = SHL v526V462(0xa0), v524V462(0x1)
    0x529S0x462: v529V462(0xffffffffffffffffffffffffffffffffffffffff) = SUB v528V462(0x10000000000000000000000000000000000000000), v522V462(0x1)
    0x52aS0x462: v52aV462 = AND v529V462(0xffffffffffffffffffffffffffffffffffffffff), v521V462
    0x52cS0x462: JUMP v46c(0x473)

    Begin block 0x473
    prev=[0x51eB0x462], succ=[0x482, 0x4ce]
    =================================
    0x474: v474(0x1) = CONST 
    0x476: v476(0x1) = CONST 
    0x478: v478(0xa0) = CONST 
    0x47a: v47a(0x10000000000000000000000000000000000000000) = SHL v478(0xa0), v476(0x1)
    0x47b: v47b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v47a(0x10000000000000000000000000000000000000000), v474(0x1)
    0x47c: v47c = AND v47b(0xffffffffffffffffffffffffffffffffffffffff), v52aV462
    0x47d: v47d = EQ v47c, v46b
    0x47e: v47e(0x4ce) = CONST 
    0x481: JUMPI v47e(0x4ce), v47d

    Begin block 0x482
    prev=[0x473], succ=[]
    =================================
    0x482: v482(0x40) = CONST 
    0x485: v485 = MLOAD v482(0x40)
    0x486: v486(0x461bcd) = CONST 
    0x48a: v48a(0xe5) = CONST 
    0x48c: v48c(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v48a(0xe5), v486(0x461bcd)
    0x48e: MSTORE v485, v48c(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x48f: v48f(0x20) = CONST 
    0x491: v491(0x4) = CONST 
    0x494: v494 = ADD v485, v491(0x4)
    0x497: MSTORE v494, v48f(0x20)
    0x498: v498(0x24) = CONST 
    0x49b: v49b = ADD v485, v498(0x24)
    0x49c: MSTORE v49b, v48f(0x20)
    0x49d: v49d(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 
    0x4be: v4be(0x44) = CONST 
    0x4c1: v4c1 = ADD v485, v4be(0x44)
    0x4c2: MSTORE v4c1, v49d(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x4c4: v4c4 = MLOAD v482(0x40)
    0x4c8: v4c8(0x0) = SUB v485, v4c4
    0x4c9: v4c9(0x64) = CONST 
    0x4cb: v4cb(0x64) = ADD v4c9(0x64), v4c8(0x0)
    0x4cd: REVERT v4c4, v4cb(0x64)

    Begin block 0x4ce
    prev=[0x473], succ=[0xe40]
    =================================
    0x4cf: v4cf(0x33) = CONST 
    0x4d1: v4d1 = SLOAD v4cf(0x33)
    0x4d2: v4d2(0x40) = CONST 
    0x4d4: v4d4 = MLOAD v4d2(0x40)
    0x4d5: v4d5(0x0) = CONST 
    0x4d8: v4d8(0x1) = CONST 
    0x4da: v4da(0x1) = CONST 
    0x4dc: v4dc(0xa0) = CONST 
    0x4de: v4de(0x10000000000000000000000000000000000000000) = SHL v4dc(0xa0), v4da(0x1)
    0x4df: v4df(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4de(0x10000000000000000000000000000000000000000), v4d8(0x1)
    0x4e0: v4e0 = AND v4df(0xffffffffffffffffffffffffffffffffffffffff), v4d1
    0x4e2: v4e2(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x506: LOG3 v4d4, v4d5(0x0), v4e2(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v4e0, v4d5(0x0)
    0x507: v507(0x33) = CONST 
    0x50a: v50a = SLOAD v507(0x33)
    0x50b: v50b(0x1) = CONST 
    0x50d: v50d(0x1) = CONST 
    0x50f: v50f(0xa0) = CONST 
    0x511: v511(0x10000000000000000000000000000000000000000) = SHL v50f(0xa0), v50d(0x1)
    0x512: v512(0xffffffffffffffffffffffffffffffffffffffff) = SUB v511(0x10000000000000000000000000000000000000000), v50b(0x1)
    0x513: v513(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v512(0xffffffffffffffffffffffffffffffffffffffff)
    0x514: v514 = AND v513(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v50a
    0x516: SSTORE v507(0x33), v514
    0x517: JUMP vdc(0xe40)

    Begin block 0xe40
    prev=[0x4ce], succ=[]
    =================================
    0xe41: STOP 

}

function fallback()() public {
    Begin block 0xdb6
    prev=[], succ=[]
    =================================
    0xdb7: vdb7(0x0) = CONST 
    0xdba: REVERT vdb7(0x0), vdb7(0x0)

}

function totalStaked()() public {
    Begin block 0xe3
    prev=[], succ=[0x518]
    =================================
    0xe4: ve4(0xe61) = CONST 
    0xe7: ve7(0x518) = CONST 
    0xea: JUMP ve7(0x518)

    Begin block 0x518
    prev=[0xe3], succ=[0xe61]
    =================================
    0x519: v519(0x66) = CONST 
    0x51b: v51b = SLOAD v519(0x66)
    0x51d: JUMP ve4(0xe61)

    Begin block 0xe61
    prev=[0x518], succ=[]
    =================================
    0xe62: ve62(0x40) = CONST 
    0xe65: ve65 = MLOAD ve62(0x40)
    0xe68: MSTORE ve65, v51b
    0xe69: ve69 = MLOAD ve62(0x40)
    0xe6d: ve6d(0x0) = SUB ve65, ve69
    0xe6e: ve6e(0x20) = CONST 
    0xe70: ve70(0x20) = ADD ve6e(0x20), ve6d(0x0)
    0xe72: RETURN ve69, ve70(0x20)

}

function owner()() public {
    Begin block 0xfd
    prev=[], succ=[0x51eB0xfd]
    =================================
    0xfe: vfe(0xe92) = CONST 
    0x101: v101(0x51e) = CONST 
    0x104: JUMP v101(0x51e)

    Begin block 0x51eB0xfd
    prev=[0xfd], succ=[0xe92]
    =================================
    0x51fS0xfd: v51fVfd(0x33) = CONST 
    0x521S0xfd: v521Vfd = SLOAD v51fVfd(0x33)
    0x522S0xfd: v522Vfd(0x1) = CONST 
    0x524S0xfd: v524Vfd(0x1) = CONST 
    0x526S0xfd: v526Vfd(0xa0) = CONST 
    0x528S0xfd: v528Vfd(0x10000000000000000000000000000000000000000) = SHL v526Vfd(0xa0), v524Vfd(0x1)
    0x529S0xfd: v529Vfd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v528Vfd(0x10000000000000000000000000000000000000000), v522Vfd(0x1)
    0x52aS0xfd: v52aVfd = AND v529Vfd(0xffffffffffffffffffffffffffffffffffffffff), v521Vfd
    0x52cS0xfd: JUMP vfe(0xe92)

    Begin block 0xe92
    prev=[0x51eB0xfd], succ=[]
    =================================
    0xe93: ve93(0x40) = CONST 
    0xe96: ve96 = MLOAD ve93(0x40)
    0xe97: ve97(0x1) = CONST 
    0xe99: ve99(0x1) = CONST 
    0xe9b: ve9b(0xa0) = CONST 
    0xe9d: ve9d(0x10000000000000000000000000000000000000000) = SHL ve9b(0xa0), ve99(0x1)
    0xe9e: ve9e(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve9d(0x10000000000000000000000000000000000000000), ve97(0x1)
    0xea1: vea1 = AND v52aVfd, ve9e(0xffffffffffffffffffffffffffffffffffffffff)
    0xea3: MSTORE ve96, vea1
    0xea4: vea4 = MLOAD ve93(0x40)
    0xea8: vea8(0x0) = SUB ve96, vea4
    0xea9: vea9(0x20) = CONST 
    0xeab: veab(0x20) = ADD vea9(0x20), vea8(0x0)
    0xead: RETURN vea4, veab(0x20)

}

