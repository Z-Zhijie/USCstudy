function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x23c1]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x230b: v230b(0x23c1) = CONST 
    0x230c: JUMPI v230b(0x23c1), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x10f, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x8980f11f) = CONST 
    0x26: v26 = GT v21(0x8980f11f), v1f
    0x27: v27(0x10f) = CONST 
    0x2a: JUMPI v27(0x10f), v26

    Begin block 0x10f
    prev=[0x1a], succ=[0x187, 0x11b]
    =================================
    0x111: v111(0x3fc6df6e) = CONST 
    0x116: v116 = GT v111(0x3fc6df6e), v1f
    0x117: v117(0x187) = CONST 
    0x11a: JUMPI v117(0x187), v116

    Begin block 0x187
    prev=[0x10f], succ=[0x1c3, 0x193]
    =================================
    0x189: v189(0x19762143) = CONST 
    0x18e: v18e = GT v189(0x19762143), v1f
    0x18f: v18f(0x1c3) = CONST 
    0x192: JUMPI v18f(0x1c3), v18e

    Begin block 0x1c3
    prev=[0x187], succ=[0x234b, 0x1ce]
    =================================
    0x1c5: v1c5(0x8cc262) = CONST 
    0x1c9: v1c9 = EQ v1c5(0x8cc262), v1f
    0x2345: v2345(0x234b) = CONST 
    0x2346: JUMPI v2345(0x234b), v1c9

    Begin block 0x234b
    prev=[0x1c3], succ=[]
    =================================
    0x234c: v234c(0x1e9) = CONST 
    0x234d: CALLPRIVATE v234c(0x1e9)

    Begin block 0x1ce
    prev=[0x1c3], succ=[0x234e, 0x1d9]
    =================================
    0x1cf: v1cf(0x700037d) = CONST 
    0x1d4: v1d4 = EQ v1cf(0x700037d), v1f
    0x2347: v2347(0x234e) = CONST 
    0x2348: JUMPI v2347(0x234e), v1d4

    Begin block 0x234e
    prev=[0x1ce], succ=[]
    =================================
    0x234f: v234f(0x221) = CONST 
    0x2350: CALLPRIVATE v234f(0x221)

    Begin block 0x1d9
    prev=[0x1ce], succ=[0x2351, 0x1e4]
    =================================
    0x1da: v1da(0x18160ddd) = CONST 
    0x1df: v1df = EQ v1da(0x18160ddd), v1f
    0x2349: v2349(0x2351) = CONST 
    0x234a: JUMPI v2349(0x2351), v1df

    Begin block 0x2351
    prev=[0x1d9], succ=[]
    =================================
    0x2352: v2352(0x247) = CONST 
    0x2353: CALLPRIVATE v2352(0x247)

    Begin block 0x1e4
    prev=[0x1d9], succ=[]
    =================================
    0x1e5: v1e5(0x0) = CONST 
    0x1e8: REVERT v1e5(0x0), v1e5(0x0)

    Begin block 0x193
    prev=[0x187], succ=[0x2354, 0x19e]
    =================================
    0x194: v194(0x19762143) = CONST 
    0x199: v199 = EQ v194(0x19762143), v1f
    0x233d: v233d(0x2354) = CONST 
    0x233e: JUMPI v233d(0x2354), v199

    Begin block 0x2354
    prev=[0x193], succ=[]
    =================================
    0x2355: v2355(0x24f) = CONST 
    0x2356: CALLPRIVATE v2355(0x24f)

    Begin block 0x19e
    prev=[0x193], succ=[0x2357, 0x1a9]
    =================================
    0x19f: v19f(0x1c1f78eb) = CONST 
    0x1a4: v1a4 = EQ v19f(0x1c1f78eb), v1f
    0x233f: v233f(0x2357) = CONST 
    0x2340: JUMPI v233f(0x2357), v1a4

    Begin block 0x2357
    prev=[0x19e], succ=[]
    =================================
    0x2358: v2358(0x277) = CONST 
    0x2359: CALLPRIVATE v2358(0x277)

    Begin block 0x1a9
    prev=[0x19e], succ=[0x235a, 0x1b4]
    =================================
    0x1aa: v1aa(0x386a9525) = CONST 
    0x1af: v1af = EQ v1aa(0x386a9525), v1f
    0x2341: v2341(0x235a) = CONST 
    0x2342: JUMPI v2341(0x235a), v1af

    Begin block 0x235a
    prev=[0x1a9], succ=[]
    =================================
    0x235b: v235b(0x27f) = CONST 
    0x235c: CALLPRIVATE v235b(0x27f)

    Begin block 0x1b4
    prev=[0x1a9], succ=[0x1bf, 0x235d]
    =================================
    0x1b5: v1b5(0x3c6b16ab) = CONST 
    0x1ba: v1ba = EQ v1b5(0x3c6b16ab), v1f
    0x2343: v2343(0x235d) = CONST 
    0x2344: JUMPI v2343(0x235d), v1ba

    Begin block 0x1bf
    prev=[0x1b4], succ=[0x1a09]
    =================================
    0x1bf: v1bf(0x1a09) = CONST 
    0x1c2: JUMP v1bf(0x1a09)

    Begin block 0x1a09
    prev=[0x1bf], succ=[]
    =================================
    0x1a0a: v1a0a(0x0) = CONST 
    0x1a0d: REVERT v1a0a(0x0), v1a0a(0x0)

    Begin block 0x235d
    prev=[0x1b4], succ=[]
    =================================
    0x235e: v235e(0x287) = CONST 
    0x235f: CALLPRIVATE v235e(0x287)

    Begin block 0x11b
    prev=[0x10f], succ=[0x156, 0x126]
    =================================
    0x11c: v11c(0x7b0a47ee) = CONST 
    0x121: v121 = GT v11c(0x7b0a47ee), v1f
    0x122: v122(0x156) = CONST 
    0x125: JUMPI v122(0x156), v121

    Begin block 0x156
    prev=[0x11b], succ=[0x2360, 0x162]
    =================================
    0x158: v158(0x3fc6df6e) = CONST 
    0x15d: v15d = EQ v158(0x3fc6df6e), v1f
    0x2335: v2335(0x2360) = CONST 
    0x2336: JUMPI v2335(0x2360), v15d

    Begin block 0x2360
    prev=[0x156], succ=[]
    =================================
    0x2361: v2361(0x2a4) = CONST 
    0x2362: CALLPRIVATE v2361(0x2a4)

    Begin block 0x162
    prev=[0x156], succ=[0x2363, 0x16d]
    =================================
    0x163: v163(0x70a08231) = CONST 
    0x168: v168 = EQ v163(0x70a08231), v1f
    0x2337: v2337(0x2363) = CONST 
    0x2338: JUMPI v2337(0x2363), v168

    Begin block 0x2363
    prev=[0x162], succ=[]
    =================================
    0x2364: v2364(0x2c8) = CONST 
    0x2365: CALLPRIVATE v2364(0x2c8)

    Begin block 0x16d
    prev=[0x162], succ=[0x2366, 0x178]
    =================================
    0x16e: v16e(0x715018a6) = CONST 
    0x173: v173 = EQ v16e(0x715018a6), v1f
    0x2339: v2339(0x2366) = CONST 
    0x233a: JUMPI v2339(0x2366), v173

    Begin block 0x2366
    prev=[0x16d], succ=[]
    =================================
    0x2367: v2367(0x2ee) = CONST 
    0x2368: CALLPRIVATE v2367(0x2ee)

    Begin block 0x178
    prev=[0x16d], succ=[0x183, 0x2369]
    =================================
    0x179: v179(0x72f702f3) = CONST 
    0x17e: v17e = EQ v179(0x72f702f3), v1f
    0x233b: v233b(0x2369) = CONST 
    0x233c: JUMPI v233b(0x2369), v17e

    Begin block 0x183
    prev=[0x178], succ=[0x19e5]
    =================================
    0x183: v183(0x19e5) = CONST 
    0x186: JUMP v183(0x19e5)

    Begin block 0x19e5
    prev=[0x183], succ=[]
    =================================
    0x19e6: v19e6(0x0) = CONST 
    0x19e9: REVERT v19e6(0x0), v19e6(0x0)

    Begin block 0x2369
    prev=[0x178], succ=[]
    =================================
    0x236a: v236a(0x2f6) = CONST 
    0x236b: CALLPRIVATE v236a(0x2f6)

    Begin block 0x126
    prev=[0x11b], succ=[0x236c, 0x131]
    =================================
    0x127: v127(0x7b0a47ee) = CONST 
    0x12c: v12c = EQ v127(0x7b0a47ee), v1f
    0x232d: v232d(0x236c) = CONST 
    0x232e: JUMPI v232d(0x236c), v12c

    Begin block 0x236c
    prev=[0x126], succ=[]
    =================================
    0x236d: v236d(0x2fe) = CONST 
    0x236e: CALLPRIVATE v236d(0x2fe)

    Begin block 0x131
    prev=[0x126], succ=[0x236f, 0x13c]
    =================================
    0x132: v132(0x80faa57d) = CONST 
    0x137: v137 = EQ v132(0x80faa57d), v1f
    0x232f: v232f(0x236f) = CONST 
    0x2330: JUMPI v232f(0x236f), v137

    Begin block 0x236f
    prev=[0x131], succ=[]
    =================================
    0x2370: v2370(0x306) = CONST 
    0x2371: CALLPRIVATE v2370(0x306)

    Begin block 0x13c
    prev=[0x131], succ=[0x2372, 0x147]
    =================================
    0x13d: v13d(0x8129fc1c) = CONST 
    0x142: v142 = EQ v13d(0x8129fc1c), v1f
    0x2331: v2331(0x2372) = CONST 
    0x2332: JUMPI v2331(0x2372), v142

    Begin block 0x2372
    prev=[0x13c], succ=[]
    =================================
    0x2373: v2373(0x30e) = CONST 
    0x2374: CALLPRIVATE v2373(0x30e)

    Begin block 0x147
    prev=[0x13c], succ=[0x152, 0x2375]
    =================================
    0x148: v148(0x853828b6) = CONST 
    0x14d: v14d = EQ v148(0x853828b6), v1f
    0x2333: v2333(0x2375) = CONST 
    0x2334: JUMPI v2333(0x2375), v14d

    Begin block 0x152
    prev=[0x147], succ=[0x19c1]
    =================================
    0x152: v152(0x19c1) = CONST 
    0x155: JUMP v152(0x19c1)

    Begin block 0x19c1
    prev=[0x152], succ=[]
    =================================
    0x19c2: v19c2(0x0) = CONST 
    0x19c5: REVERT v19c2(0x0), v19c2(0x0)

    Begin block 0x2375
    prev=[0x147], succ=[]
    =================================
    0x2376: v2376(0x316) = CONST 
    0x2377: CALLPRIVATE v2376(0x316)

    Begin block 0x2b
    prev=[0x1a], succ=[0xa2, 0x36]
    =================================
    0x2c: v2c(0xc8f33c91) = CONST 
    0x31: v31 = GT v2c(0xc8f33c91), v1f
    0x32: v32(0xa2) = CONST 
    0x35: JUMPI v32(0xa2), v31

    Begin block 0xa2
    prev=[0x2b], succ=[0xde, 0xae]
    =================================
    0xa4: va4(0xa430be6c) = CONST 
    0xa9: va9 = GT va4(0xa430be6c), v1f
    0xaa: vaa(0xde) = CONST 
    0xad: JUMPI vaa(0xde), va9

    Begin block 0xde
    prev=[0xa2], succ=[0x2378, 0xea]
    =================================
    0xe0: ve0(0x8980f11f) = CONST 
    0xe5: ve5 = EQ ve0(0x8980f11f), v1f
    0x2325: v2325(0x2378) = CONST 
    0x2326: JUMPI v2325(0x2378), ve5

    Begin block 0x2378
    prev=[0xde], succ=[]
    =================================
    0x2379: v2379(0x31e) = CONST 
    0x237a: CALLPRIVATE v2379(0x31e)

    Begin block 0xea
    prev=[0xde], succ=[0x237b, 0xf5]
    =================================
    0xeb: veb(0x8b876347) = CONST 
    0xf0: vf0 = EQ veb(0x8b876347), v1f
    0x2327: v2327(0x237b) = CONST 
    0x2328: JUMPI v2327(0x237b), vf0

    Begin block 0x237b
    prev=[0xea], succ=[]
    =================================
    0x237c: v237c(0x34a) = CONST 
    0x237d: CALLPRIVATE v237c(0x34a)

    Begin block 0xf5
    prev=[0xea], succ=[0x100, 0x237e]
    =================================
    0xf6: vf6(0x8da5cb5b) = CONST 
    0xfb: vfb = EQ vf6(0x8da5cb5b), v1f
    0x2329: v2329(0x237e) = CONST 
    0x232a: JUMPI v2329(0x237e), vfb

    Begin block 0x100
    prev=[0xf5], succ=[0x10b, 0x2381]
    =================================
    0x101: v101(0x8f32d59b) = CONST 
    0x106: v106 = EQ v101(0x8f32d59b), v1f
    0x232b: v232b(0x2381) = CONST 
    0x232c: JUMPI v232b(0x2381), v106

    Begin block 0x10b
    prev=[0x100], succ=[0x199d]
    =================================
    0x10b: v10b(0x199d) = CONST 
    0x10e: JUMP v10b(0x199d)

    Begin block 0x199d
    prev=[0x10b], succ=[]
    =================================
    0x199e: v199e(0x0) = CONST 
    0x19a1: REVERT v199e(0x0), v199e(0x0)

    Begin block 0x2381
    prev=[0x100], succ=[]
    =================================
    0x2382: v2382(0x378) = CONST 
    0x2383: CALLPRIVATE v2382(0x378)

    Begin block 0x237e
    prev=[0xf5], succ=[]
    =================================
    0x237f: v237f(0x370) = CONST 
    0x2380: CALLPRIVATE v237f(0x370)

    Begin block 0xae
    prev=[0xa2], succ=[0x2384, 0xb9]
    =================================
    0xaf: vaf(0xa430be6c) = CONST 
    0xb4: vb4 = EQ vaf(0xa430be6c), v1f
    0x231d: v231d(0x2384) = CONST 
    0x231e: JUMPI v231d(0x2384), vb4

    Begin block 0x2384
    prev=[0xae], succ=[]
    =================================
    0x2385: v2385(0x394) = CONST 
    0x2386: CALLPRIVATE v2385(0x394)

    Begin block 0xb9
    prev=[0xae], succ=[0x2387, 0xc4]
    =================================
    0xba: vba(0xa694fc3a) = CONST 
    0xbf: vbf = EQ vba(0xa694fc3a), v1f
    0x231f: v231f(0x2387) = CONST 
    0x2320: JUMPI v231f(0x2387), vbf

    Begin block 0x2387
    prev=[0xb9], succ=[]
    =================================
    0x2388: v2388(0x39c) = CONST 
    0x2389: CALLPRIVATE v2388(0x39c)

    Begin block 0xc4
    prev=[0xb9], succ=[0x238a, 0xcf]
    =================================
    0xc5: vc5(0xc0c53b8b) = CONST 
    0xca: vca = EQ vc5(0xc0c53b8b), v1f
    0x2321: v2321(0x238a) = CONST 
    0x2322: JUMPI v2321(0x238a), vca

    Begin block 0x238a
    prev=[0xc4], succ=[]
    =================================
    0x238b: v238b(0x3b9) = CONST 
    0x238c: CALLPRIVATE v238b(0x3b9)

    Begin block 0xcf
    prev=[0xc4], succ=[0xda, 0x238d]
    =================================
    0xd0: vd0(0xc4d66de8) = CONST 
    0xd5: vd5 = EQ vd0(0xc4d66de8), v1f
    0x2323: v2323(0x238d) = CONST 
    0x2324: JUMPI v2323(0x238d), vd5

    Begin block 0xda
    prev=[0xcf], succ=[0x1979]
    =================================
    0xda: vda(0x1979) = CONST 
    0xdd: JUMP vda(0x1979)

    Begin block 0x1979
    prev=[0xda], succ=[]
    =================================
    0x197a: v197a(0x0) = CONST 
    0x197d: REVERT v197a(0x0), v197a(0x0)

    Begin block 0x238d
    prev=[0xcf], succ=[]
    =================================
    0x238e: v238e(0x3f1) = CONST 
    0x238f: CALLPRIVATE v238e(0x3f1)

    Begin block 0x36
    prev=[0x2b], succ=[0x71, 0x41]
    =================================
    0x37: v37(0xdf136d65) = CONST 
    0x3c: v3c = GT v37(0xdf136d65), v1f
    0x3d: v3d(0x71) = CONST 
    0x40: JUMPI v3d(0x71), v3c

    Begin block 0x71
    prev=[0x36], succ=[0x2390, 0x7d]
    =================================
    0x73: v73(0xc8f33c91) = CONST 
    0x78: v78 = EQ v73(0xc8f33c91), v1f
    0x2315: v2315(0x2390) = CONST 
    0x2316: JUMPI v2315(0x2390), v78

    Begin block 0x2390
    prev=[0x71], succ=[]
    =================================
    0x2391: v2391(0x417) = CONST 
    0x2392: CALLPRIVATE v2391(0x417)

    Begin block 0x7d
    prev=[0x71], succ=[0x2393, 0x88]
    =================================
    0x7e: v7e(0xcc1a378f) = CONST 
    0x83: v83 = EQ v7e(0xcc1a378f), v1f
    0x2317: v2317(0x2393) = CONST 
    0x2318: JUMPI v2317(0x2393), v83

    Begin block 0x2393
    prev=[0x7d], succ=[]
    =================================
    0x2394: v2394(0x41f) = CONST 
    0x2395: CALLPRIVATE v2394(0x41f)

    Begin block 0x88
    prev=[0x7d], succ=[0x2396, 0x93]
    =================================
    0x89: v89(0xcd3daf9d) = CONST 
    0x8e: v8e = EQ v89(0xcd3daf9d), v1f
    0x2319: v2319(0x2396) = CONST 
    0x231a: JUMPI v2319(0x2396), v8e

    Begin block 0x2396
    prev=[0x88], succ=[]
    =================================
    0x2397: v2397(0x43c) = CONST 
    0x2398: CALLPRIVATE v2397(0x43c)

    Begin block 0x93
    prev=[0x88], succ=[0x9e, 0x2399]
    =================================
    0x94: v94(0xd1af0c7d) = CONST 
    0x99: v99 = EQ v94(0xd1af0c7d), v1f
    0x231b: v231b(0x2399) = CONST 
    0x231c: JUMPI v231b(0x2399), v99

    Begin block 0x9e
    prev=[0x93], succ=[0x1955]
    =================================
    0x9e: v9e(0x1955) = CONST 
    0xa1: JUMP v9e(0x1955)

    Begin block 0x1955
    prev=[0x9e], succ=[]
    =================================
    0x1956: v1956(0x0) = CONST 
    0x1959: REVERT v1956(0x0), v1956(0x0)

    Begin block 0x2399
    prev=[0x93], succ=[]
    =================================
    0x239a: v239a(0x444) = CONST 
    0x239b: CALLPRIVATE v239a(0x444)

    Begin block 0x41
    prev=[0x36], succ=[0x239c, 0x4c]
    =================================
    0x42: v42(0xdf136d65) = CONST 
    0x47: v47 = EQ v42(0xdf136d65), v1f
    0x230d: v230d(0x239c) = CONST 
    0x230e: JUMPI v230d(0x239c), v47

    Begin block 0x239c
    prev=[0x41], succ=[]
    =================================
    0x239d: v239d(0x44c) = CONST 
    0x239e: CALLPRIVATE v239d(0x44c)

    Begin block 0x4c
    prev=[0x41], succ=[0x239f, 0x57]
    =================================
    0x4d: v4d(0xe9fad8ee) = CONST 
    0x52: v52 = EQ v4d(0xe9fad8ee), v1f
    0x230f: v230f(0x239f) = CONST 
    0x2310: JUMPI v230f(0x239f), v52

    Begin block 0x239f
    prev=[0x4c], succ=[]
    =================================
    0x23a0: v23a0(0x454) = CONST 
    0x23a1: CALLPRIVATE v23a0(0x454)

    Begin block 0x57
    prev=[0x4c], succ=[0x23a2, 0x62]
    =================================
    0x58: v58(0xebe2b12b) = CONST 
    0x5d: v5d = EQ v58(0xebe2b12b), v1f
    0x2311: v2311(0x23a2) = CONST 
    0x2312: JUMPI v2311(0x23a2), v5d

    Begin block 0x23a2
    prev=[0x57], succ=[]
    =================================
    0x23a3: v23a3(0x45c) = CONST 
    0x23a4: CALLPRIVATE v23a3(0x45c)

    Begin block 0x62
    prev=[0x57], succ=[0x6d, 0x23a5]
    =================================
    0x63: v63(0xf2fde38b) = CONST 
    0x68: v68 = EQ v63(0xf2fde38b), v1f
    0x2313: v2313(0x23a5) = CONST 
    0x2314: JUMPI v2313(0x23a5), v68

    Begin block 0x6d
    prev=[0x62], succ=[0x1931]
    =================================
    0x6d: v6d(0x1931) = CONST 
    0x70: JUMP v6d(0x1931)

    Begin block 0x1931
    prev=[0x6d], succ=[]
    =================================
    0x1932: v1932(0x0) = CONST 
    0x1935: REVERT v1932(0x0), v1932(0x0)

    Begin block 0x23a5
    prev=[0x62], succ=[]
    =================================
    0x23a6: v23a6(0x464) = CONST 
    0x23a7: CALLPRIVATE v23a6(0x464)

    Begin block 0x23c1
    prev=[0x10], succ=[]
    =================================
    0x23c2: v23c2(0x190d) = CONST 
    0x23c3: CALLPRIVATE v23c2(0x190d)

}

function 0x1035(0x1035arg0x0, 0x1035arg0x1, 0x1035arg0x2) private {
    Begin block 0x1035
    prev=[], succ=[0x147d]
    =================================
    0x1036: v1036(0x0) = CONST 
    0x1038: v1038(0x21b6) = CONST 
    0x103d: v103d(0x40) = CONST 
    0x103f: v103f = MLOAD v103d(0x40)
    0x1041: v1041(0x40) = CONST 
    0x1043: v1043 = ADD v1041(0x40), v103f
    0x1044: v1044(0x40) = CONST 
    0x1046: MSTORE v1044(0x40), v1043
    0x1048: v1048(0x1e) = CONST 
    0x104b: MSTORE v103f, v1048(0x1e)
    0x104c: v104c(0x20) = CONST 
    0x104e: v104e = ADD v104c(0x20), v103f
    0x104f: v104f(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
    0x1071: MSTORE v104e, v104f(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
    0x1073: v1073(0x147d) = CONST 
    0x1076: JUMP v1073(0x147d)

    Begin block 0x147d
    prev=[0x1035], succ=[0x1489, 0x150c]
    =================================
    0x147e: v147e(0x0) = CONST 
    0x1483: v1483 = GT v1035arg0, v1035arg1
    0x1484: v1484 = ISZERO v1483
    0x1485: v1485(0x150c) = CONST 
    0x1488: JUMPI v1485(0x150c), v1484

    Begin block 0x1489
    prev=[0x147d], succ=[0x14b90x1035]
    =================================
    0x1489: v1489(0x40) = CONST 
    0x148b: v148b = MLOAD v1489(0x40)
    0x148c: v148c(0x461bcd) = CONST 
    0x1490: v1490(0xe5) = CONST 
    0x1492: v1492(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1490(0xe5), v148c(0x461bcd)
    0x1494: MSTORE v148b, v1492(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1495: v1495(0x4) = CONST 
    0x1497: v1497 = ADD v1495(0x4), v148b
    0x149a: v149a(0x20) = CONST 
    0x149c: v149c = ADD v149a(0x20), v1497
    0x149f: v149f(0x20) = SUB v149c, v1497
    0x14a1: MSTORE v1497, v149f(0x20)
    0x14a5: v14a5(0x1e) = MLOAD v103f
    0x14a7: MSTORE v149c, v14a5(0x1e)
    0x14a8: v14a8(0x20) = CONST 
    0x14aa: v14aa = ADD v14a8(0x20), v149c
    0x14ae: v14ae(0x1e) = MLOAD v103f
    0x14b0: v14b0(0x20) = CONST 
    0x14b2: v14b2 = ADD v14b0(0x20), v103f
    0x14b7: v14b7(0x0) = CONST 

    Begin block 0x14b90x1035
    prev=[0x1489, 0x14c20x1035], succ=[0x14d10x1035, 0x14c20x1035]
    =================================
    0x14b90x1035_0x0: v14b91035_0 = PHI v14b7(0x0), v103514cc
    0x14bc0x1035: v103514bc = LT v14b91035_0, v14ae(0x1e)
    0x14bd0x1035: v103514bd = ISZERO v103514bc
    0x14be0x1035: v103514be(0x14d1) = CONST 
    0x14c10x1035: JUMPI v103514be(0x14d1), v103514bd

    Begin block 0x14d10x1035
    prev=[0x14b90x1035], succ=[0x14fe0x1035, 0x14e50x1035]
    =================================
    0x14da0x1035: v103514da = ADD v14ae(0x1e), v14aa
    0x14dc0x1035: v103514dc(0x1f) = CONST 
    0x14de0x1035: v103514de(0x1e) = AND v103514dc(0x1f), v14ae(0x1e)
    0x14e00x1035: v103514e0 = ISZERO v103514de(0x1e)
    0x14e10x1035: v103514e1(0x14fe) = CONST 
    0x14e40x1035: JUMPI v103514e1(0x14fe), v103514e0

    Begin block 0x14fe0x1035
    prev=[0x14d10x1035, 0x14e50x1035], succ=[]
    =================================
    0x14fe0x1035_0x1: v14fe1035_1 = PHI v103514fb, v103514da
    0x15040x1035: v10351504(0x40) = CONST 
    0x15060x1035: v10351506 = MLOAD v10351504(0x40)
    0x15090x1035: v10351509 = SUB v14fe1035_1, v10351506
    0x150b0x1035: REVERT v10351506, v10351509

    Begin block 0x14e50x1035
    prev=[0x14d10x1035], succ=[0x14fe0x1035]
    =================================
    0x14e70x1035: v103514e7 = SUB v103514da, v103514de(0x1e)
    0x14e90x1035: v103514e9 = MLOAD v103514e7
    0x14ea0x1035: v103514ea(0x1) = CONST 
    0x14ed0x1035: v103514ed(0x20) = CONST 
    0x14ef0x1035: v103514ef(0x2) = SUB v103514ed(0x20), v103514de(0x1e)
    0x14f00x1035: v103514f0(0x100) = CONST 
    0x14f30x1035: v103514f3(0x10000) = EXP v103514f0(0x100), v103514ef(0x2)
    0x14f40x1035: v103514f4(0xffff) = SUB v103514f3(0x10000), v103514ea(0x1)
    0x14f50x1035: v103514f5 = NOT v103514f4(0xffff)
    0x14f60x1035: v103514f6 = AND v103514f5, v103514e9
    0x14f80x1035: MSTORE v103514e7, v103514f6
    0x14f90x1035: v103514f9(0x20) = CONST 
    0x14fb0x1035: v103514fb = ADD v103514f9(0x20), v103514e7

    Begin block 0x14c20x1035
    prev=[0x14b90x1035], succ=[0x14b90x1035]
    =================================
    0x14c20x1035_0x0: v14c21035_0 = PHI v14b7(0x0), v103514cc
    0x14c40x1035: v103514c4 = ADD v14c21035_0, v14b2
    0x14c50x1035: v103514c5 = MLOAD v103514c4
    0x14c80x1035: v103514c8 = ADD v14c21035_0, v14aa
    0x14c90x1035: MSTORE v103514c8, v103514c5
    0x14ca0x1035: v103514ca(0x20) = CONST 
    0x14cc0x1035: v103514cc = ADD v103514ca(0x20), v14c21035_0
    0x14cd0x1035: v103514cd(0x14b9) = CONST 
    0x14d00x1035: JUMP v103514cd(0x14b9)

    Begin block 0x150c
    prev=[0x147d], succ=[0x21b6]
    =================================
    0x1511: v1511 = SUB v1035arg1, v1035arg0
    0x1513: JUMP v1038(0x21b6)

    Begin block 0x21b6
    prev=[0x150c], succ=[]
    =================================
    0x21bc: RETURNPRIVATE v1035arg2, v1511

}

function 0x107e(0x107earg0x0, 0x107earg0x1, 0x107earg0x2) private {
    Begin block 0x107e
    prev=[], succ=[0x108d, 0x1086]
    =================================
    0x107f: v107f(0x0) = CONST 
    0x1082: v1082(0x108d) = CONST 
    0x1085: JUMPI v1082(0x108d), v107earg1

    Begin block 0x108d
    prev=[0x107e], succ=[0x1099, 0x109a]
    =================================
    0x1090: v1090 = MUL v107earg0, v107earg1
    0x1095: v1095(0x109a) = CONST 
    0x1098: JUMPI v1095(0x109a), v107earg1

    Begin block 0x1099
    prev=[0x108d], succ=[]
    =================================
    0x1099: THROW 

    Begin block 0x109a
    prev=[0x108d], succ=[0x10a1, 0x2201]
    =================================
    0x109b: v109b = DIV v1090, v107earg1
    0x109c: v109c = EQ v109b, v107earg0
    0x109d: v109d(0x2201) = CONST 
    0x10a0: JUMPI v109d(0x2201), v109c

    Begin block 0x10a1
    prev=[0x109a], succ=[]
    =================================
    0x10a1: v10a1(0x40) = CONST 
    0x10a3: v10a3 = MLOAD v10a1(0x40)
    0x10a4: v10a4(0x461bcd) = CONST 
    0x10a8: v10a8(0xe5) = CONST 
    0x10aa: v10aa(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v10a8(0xe5), v10a4(0x461bcd)
    0x10ac: MSTORE v10a3, v10aa(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x10ad: v10ad(0x4) = CONST 
    0x10af: v10af = ADD v10ad(0x4), v10a3
    0x10b2: v10b2(0x20) = CONST 
    0x10b4: v10b4 = ADD v10b2(0x20), v10af
    0x10b7: v10b7(0x20) = SUB v10b4, v10af
    0x10b9: MSTORE v10af, v10b7(0x20)
    0x10ba: v10ba(0x21) = CONST 
    0x10bd: MSTORE v10b4, v10ba(0x21)
    0x10be: v10be(0x20) = CONST 
    0x10c0: v10c0 = ADD v10be(0x20), v10b4
    0x10c2: v10c2(0x17ec) = CONST 
    0x10c5: v10c5(0x21) = CONST 
    0x10c8: CODECOPY v10c0, v10c2(0x17ec), v10c5(0x21)
    0x10c9: v10c9(0x40) = CONST 
    0x10cb: v10cb = ADD v10c9(0x40), v10c0
    0x10cf: v10cf(0x40) = CONST 
    0x10d1: v10d1 = MLOAD v10cf(0x40)
    0x10d4: v10d4(0x84) = SUB v10cb, v10d1
    0x10d6: REVERT v10d1, v10d4(0x84)

    Begin block 0x2201
    prev=[0x109a], succ=[]
    =================================
    0x2207: RETURNPRIVATE v107earg2, v1090

    Begin block 0x1086
    prev=[0x107e], succ=[0x21dc]
    =================================
    0x1087: v1087(0x0) = CONST 
    0x1089: v1089(0x21dc) = CONST 
    0x108c: JUMP v1089(0x21dc)

    Begin block 0x21dc
    prev=[0x1086], succ=[]
    =================================
    0x21e1: RETURNPRIVATE v107earg2, v1087(0x0)

}

function 0x10d7(0x10d7arg0x0, 0x10d7arg0x1, 0x10d7arg0x2) private {
    Begin block 0x10d7
    prev=[], succ=[0x1514]
    =================================
    0x10d8: v10d8(0x0) = CONST 
    0x10da: v10da(0x2227) = CONST 
    0x10df: v10df(0x40) = CONST 
    0x10e1: v10e1 = MLOAD v10df(0x40)
    0x10e3: v10e3(0x40) = CONST 
    0x10e5: v10e5 = ADD v10e3(0x40), v10e1
    0x10e6: v10e6(0x40) = CONST 
    0x10e8: MSTORE v10e6(0x40), v10e5
    0x10ea: v10ea(0x1a) = CONST 
    0x10ed: MSTORE v10e1, v10ea(0x1a)
    0x10ee: v10ee(0x20) = CONST 
    0x10f0: v10f0 = ADD v10ee(0x20), v10e1
    0x10f1: v10f1(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000) = CONST 
    0x1113: MSTORE v10f0, v10f1(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000)
    0x1115: v1115(0x1514) = CONST 
    0x1118: JUMP v1115(0x1514)

    Begin block 0x1514
    prev=[0x10d7], succ=[0x151d, 0x1563]
    =================================
    0x1515: v1515(0x0) = CONST 
    0x1519: v1519(0x1563) = CONST 
    0x151c: JUMPI v1519(0x1563), v10d7arg0

    Begin block 0x151d
    prev=[0x1514], succ=[0x1554, 0x14d10x10d7]
    =================================
    0x151d: v151d(0x40) = CONST 
    0x151f: v151f = MLOAD v151d(0x40)
    0x1520: v1520(0x461bcd) = CONST 
    0x1524: v1524(0xe5) = CONST 
    0x1526: v1526(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1524(0xe5), v1520(0x461bcd)
    0x1528: MSTORE v151f, v1526(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1529: v1529(0x20) = CONST 
    0x152b: v152b(0x4) = CONST 
    0x152e: v152e = ADD v151f, v152b(0x4)
    0x1531: MSTORE v152e, v1529(0x20)
    0x1533: v1533(0x1a) = MLOAD v10e1
    0x1534: v1534(0x24) = CONST 
    0x1537: v1537 = ADD v151f, v1534(0x24)
    0x1538: MSTORE v1537, v1533(0x1a)
    0x153a: v153a(0x1a) = MLOAD v10e1
    0x153f: v153f(0x44) = CONST 
    0x1543: v1543 = ADD v151f, v153f(0x44)
    0x1547: v1547 = ADD v10e1, v1529(0x20)
    0x154c: v154c(0x0) = CONST 
    0x154f: v154f = ISZERO v153a(0x1a)
    0x1550: v1550(0x14d1) = CONST 
    0x1553: JUMPI v1550(0x14d1), v154f

    Begin block 0x1554
    prev=[0x151d], succ=[0x14b90x10d7]
    =================================
    0x1556: v1556 = ADD v154c(0x0), v1547
    0x1557: v1557 = MLOAD v1556
    0x155a: v155a = ADD v154c(0x0), v1543
    0x155b: MSTORE v155a, v1557
    0x155c: v155c(0x20) = CONST 
    0x155e: v155e(0x20) = ADD v155c(0x20), v154c(0x0)
    0x155f: v155f(0x14b9) = CONST 
    0x1562: JUMP v155f(0x14b9)

    Begin block 0x14b90x10d7
    prev=[0x1554, 0x14c20x10d7], succ=[0x14d10x10d7, 0x14c20x10d7]
    =================================
    0x14b90x10d7_0x0: v14b910d7_0 = PHI v155e(0x20), v10d714cc
    0x14bc0x10d7: v10d714bc = LT v14b910d7_0, v153a(0x1a)
    0x14bd0x10d7: v10d714bd = ISZERO v10d714bc
    0x14be0x10d7: v10d714be(0x14d1) = CONST 
    0x14c10x10d7: JUMPI v10d714be(0x14d1), v10d714bd

    Begin block 0x14d10x10d7
    prev=[0x151d, 0x14b90x10d7], succ=[0x14fe0x10d7, 0x14e50x10d7]
    =================================
    0x14da0x10d7: v10d714da = ADD v153a(0x1a), v1543
    0x14dc0x10d7: v10d714dc(0x1f) = CONST 
    0x14de0x10d7: v10d714de(0x1a) = AND v10d714dc(0x1f), v153a(0x1a)
    0x14e00x10d7: v10d714e0 = ISZERO v10d714de(0x1a)
    0x14e10x10d7: v10d714e1(0x14fe) = CONST 
    0x14e40x10d7: JUMPI v10d714e1(0x14fe), v10d714e0

    Begin block 0x14fe0x10d7
    prev=[0x14d10x10d7, 0x14e50x10d7], succ=[]
    =================================
    0x14fe0x10d7_0x1: v14fe10d7_1 = PHI v10d714fb, v10d714da
    0x15040x10d7: v10d71504(0x40) = CONST 
    0x15060x10d7: v10d71506 = MLOAD v10d71504(0x40)
    0x15090x10d7: v10d71509 = SUB v14fe10d7_1, v10d71506
    0x150b0x10d7: REVERT v10d71506, v10d71509

    Begin block 0x14e50x10d7
    prev=[0x14d10x10d7], succ=[0x14fe0x10d7]
    =================================
    0x14e70x10d7: v10d714e7 = SUB v10d714da, v10d714de(0x1a)
    0x14e90x10d7: v10d714e9 = MLOAD v10d714e7
    0x14ea0x10d7: v10d714ea(0x1) = CONST 
    0x14ed0x10d7: v10d714ed(0x20) = CONST 
    0x14ef0x10d7: v10d714ef(0x6) = SUB v10d714ed(0x20), v10d714de(0x1a)
    0x14f00x10d7: v10d714f0(0x100) = CONST 
    0x14f30x10d7: v10d714f3(0x1000000000000) = EXP v10d714f0(0x100), v10d714ef(0x6)
    0x14f40x10d7: v10d714f4(0xffffffffffff) = SUB v10d714f3(0x1000000000000), v10d714ea(0x1)
    0x14f50x10d7: v10d714f5 = NOT v10d714f4(0xffffffffffff)
    0x14f60x10d7: v10d714f6 = AND v10d714f5, v10d714e9
    0x14f80x10d7: MSTORE v10d714e7, v10d714f6
    0x14f90x10d7: v10d714f9(0x20) = CONST 
    0x14fb0x10d7: v10d714fb = ADD v10d714f9(0x20), v10d714e7

    Begin block 0x14c20x10d7
    prev=[0x14b90x10d7], succ=[0x14b90x10d7]
    =================================
    0x14c20x10d7_0x0: v14c210d7_0 = PHI v155e(0x20), v10d714cc
    0x14c40x10d7: v10d714c4 = ADD v14c210d7_0, v1547
    0x14c50x10d7: v10d714c5 = MLOAD v10d714c4
    0x14c80x10d7: v10d714c8 = ADD v14c210d7_0, v1543
    0x14c90x10d7: MSTORE v10d714c8, v10d714c5
    0x14ca0x10d7: v10d714ca(0x20) = CONST 
    0x14cc0x10d7: v10d714cc = ADD v10d714ca(0x20), v14c210d7_0
    0x14cd0x10d7: v10d714cd(0x14b9) = CONST 
    0x14d00x10d7: JUMP v10d714cd(0x14b9)

    Begin block 0x1563
    prev=[0x1514], succ=[0x156e, 0x156f]
    =================================
    0x1565: v1565(0x0) = CONST 
    0x156a: v156a(0x156f) = CONST 
    0x156d: JUMPI v156a(0x156f), v10d7arg0

    Begin block 0x156e
    prev=[0x1563], succ=[]
    =================================
    0x156e: THROW 

    Begin block 0x156f
    prev=[0x1563], succ=[0x2227]
    =================================
    0x1570: v1570 = DIV v10d7arg1, v10d7arg0
    0x1578: JUMP v10da(0x2227)

    Begin block 0x2227
    prev=[0x156f], succ=[]
    =================================
    0x222d: RETURNPRIVATE v10d7arg2, v1570

}

function 0x1173(0x1173arg0x0, 0x1173arg0x1, 0x1173arg0x2) private {
    Begin block 0x1173
    prev=[], succ=[0x1182, 0x117d]
    =================================
    0x1174: v1174(0x0) = CONST 
    0x1178: v1178 = LT v1173arg1, v1173arg0
    0x1179: v1179(0x1182) = CONST 
    0x117c: JUMPI v1179(0x1182), v1178

    Begin block 0x1182
    prev=[0x1173], succ=[]
    =================================
    0x1188: RETURNPRIVATE v1173arg2, v1173arg1

    Begin block 0x117d
    prev=[0x1173], succ=[0x2273]
    =================================
    0x117e: v117e(0x2273) = CONST 
    0x1181: JUMP v117e(0x2273)

    Begin block 0x2273
    prev=[0x117d], succ=[]
    =================================
    0x2279: RETURNPRIVATE v1173arg2, v1173arg0

}

function 0x118f(0x118farg0x0, 0x118farg0x1) private {
    Begin block 0x118f
    prev=[], succ=[0x1198, 0x11d8]
    =================================
    0x1190: v1190(0x0) = CONST 
    0x1193: v1193 = GT v118farg0, v1190(0x0)
    0x1194: v1194(0x11d8) = CONST 
    0x1197: JUMPI v1194(0x11d8), v1193

    Begin block 0x1198
    prev=[0x118f], succ=[]
    =================================
    0x1198: v1198(0x40) = CONST 
    0x119b: v119b = MLOAD v1198(0x40)
    0x119c: v119c(0x461bcd) = CONST 
    0x11a0: v11a0(0xe5) = CONST 
    0x11a2: v11a2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v11a0(0xe5), v119c(0x461bcd)
    0x11a4: MSTORE v119b, v11a2(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x11a5: v11a5(0x20) = CONST 
    0x11a7: v11a7(0x4) = CONST 
    0x11aa: v11aa = ADD v119b, v11a7(0x4)
    0x11ab: MSTORE v11aa, v11a5(0x20)
    0x11ac: v11ac(0x11) = CONST 
    0x11ae: v11ae(0x24) = CONST 
    0x11b1: v11b1 = ADD v119b, v11ae(0x24)
    0x11b2: MSTORE v11b1, v11ac(0x11)
    0x11b3: v11b3(0x43616e6e6f74207769746864726177203) = CONST 
    0x11c5: v11c5(0x7c) = CONST 
    0x11c7: v11c7(0x43616e6e6f742077697468647261772030000000000000000000000000000000) = SHL v11c5(0x7c), v11b3(0x43616e6e6f74207769746864726177203)
    0x11c8: v11c8(0x44) = CONST 
    0x11cb: v11cb = ADD v119b, v11c8(0x44)
    0x11cc: MSTORE v11cb, v11c7(0x43616e6e6f742077697468647261772030000000000000000000000000000000)
    0x11ce: v11ce = MLOAD v1198(0x40)
    0x11d2: v11d2(0x0) = SUB v119b, v11ce
    0x11d3: v11d3(0x64) = CONST 
    0x11d5: v11d5(0x64) = ADD v11d3(0x64), v11d2(0x0)
    0x11d7: REVERT v11ce, v11d5(0x64)

    Begin block 0x11d8
    prev=[0x118f], succ=[0x11eb]
    =================================
    0x11d9: v11d9(0xa3) = CONST 
    0x11db: v11db = SLOAD v11d9(0xa3)
    0x11dc: v11dc(0x11eb) = CONST 
    0x11e1: v11e1(0xffffffff) = CONST 
    0x11e6: v11e6(0x1035) = CONST 
    0x11e9: v11e9(0x1035) = AND v11e6(0x1035), v11e1(0xffffffff)
    0x11ea: v11ea_0 = CALLPRIVATE v11e9(0x1035), v118farg0, v11db, v11dc(0x11eb)

    Begin block 0x11eb
    prev=[0x11d8], succ=[0x120e]
    =================================
    0x11ec: v11ec(0xa3) = CONST 
    0x11ee: SSTORE v11ec(0xa3), v11ea_0
    0x11ef: v11ef = CALLER 
    0x11f0: v11f0(0x0) = CONST 
    0x11f4: MSTORE v11f0(0x0), v11ef
    0x11f5: v11f5(0xa4) = CONST 
    0x11f7: v11f7(0x20) = CONST 
    0x11f9: MSTORE v11f7(0x20), v11f5(0xa4)
    0x11fa: v11fa(0x40) = CONST 
    0x11fd: v11fd = SHA3 v11f0(0x0), v11fa(0x40)
    0x11fe: v11fe = SLOAD v11fd
    0x11ff: v11ff(0x120e) = CONST 
    0x1204: v1204(0xffffffff) = CONST 
    0x1209: v1209(0x1035) = CONST 
    0x120c: v120c(0x1035) = AND v1209(0x1035), v1204(0xffffffff)
    0x120d: v120d_0 = CALLPRIVATE v120c(0x1035), v118farg0, v11fe, v11ff(0x120e)

    Begin block 0x120e
    prev=[0x11eb], succ=[0x123a]
    =================================
    0x120f: v120f = CALLER 
    0x1210: v1210(0x0) = CONST 
    0x1214: MSTORE v1210(0x0), v120f
    0x1215: v1215(0xa4) = CONST 
    0x1217: v1217(0x20) = CONST 
    0x1219: MSTORE v1217(0x20), v1215(0xa4)
    0x121a: v121a(0x40) = CONST 
    0x121d: v121d = SHA3 v1210(0x0), v121a(0x40)
    0x1221: SSTORE v121d, v120d_0
    0x1222: v1222(0x9b) = CONST 
    0x1224: v1224 = SLOAD v1222(0x9b)
    0x1225: v1225(0x123a) = CONST 
    0x1229: v1229(0x1) = CONST 
    0x122b: v122b(0x1) = CONST 
    0x122d: v122d(0xa0) = CONST 
    0x122f: v122f(0x10000000000000000000000000000000000000000) = SHL v122d(0xa0), v122b(0x1)
    0x1230: v1230(0xffffffffffffffffffffffffffffffffffffffff) = SUB v122f(0x10000000000000000000000000000000000000000), v1229(0x1)
    0x1233: v1233 = AND v1224, v1230(0xffffffffffffffffffffffffffffffffffffffff)
    0x1236: v1236(0x1273) = CONST 
    0x1239: CALLPRIVATE v1236(0x1273), v118farg0, v120f, v1233, v1225(0x123a)

    Begin block 0x123a
    prev=[0x120e], succ=[]
    =================================
    0x123b: v123b(0x40) = CONST 
    0x123e: v123e = MLOAD v123b(0x40)
    0x1241: MSTORE v123e, v118farg0
    0x1243: v1243 = MLOAD v123b(0x40)
    0x1244: v1244 = CALLER 
    0x1246: v1246(0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5) = CONST 
    0x126b: v126b(0x0) = SUB v123e, v1243
    0x126c: v126c(0x20) = CONST 
    0x126e: v126e(0x20) = ADD v126c(0x20), v126b(0x0)
    0x1270: LOG2 v1243, v126e(0x20), v1246(0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5), v1244
    0x1272: RETURNPRIVATE v118farg1

}

function 0x1273(0x1273arg0x0, 0x1273arg0x1, 0x1273arg0x2, 0x1273arg0x3) private {
    Begin block 0x1273
    prev=[], succ=[0x1579B0x1273]
    =================================
    0x1274: v1274(0x40) = CONST 
    0x1277: v1277 = MLOAD v1274(0x40)
    0x1278: v1278(0x1) = CONST 
    0x127a: v127a(0x1) = CONST 
    0x127c: v127c(0xa0) = CONST 
    0x127e: v127e(0x10000000000000000000000000000000000000000) = SHL v127c(0xa0), v127a(0x1)
    0x127f: v127f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v127e(0x10000000000000000000000000000000000000000), v1278(0x1)
    0x1281: v1281 = AND v1273arg1, v127f(0xffffffffffffffffffffffffffffffffffffffff)
    0x1282: v1282(0x24) = CONST 
    0x1285: v1285 = ADD v1277, v1282(0x24)
    0x1286: MSTORE v1285, v1281
    0x1287: v1287(0x44) = CONST 
    0x128b: v128b = ADD v1277, v1287(0x44)
    0x128e: MSTORE v128b, v1273arg0
    0x1290: v1290 = MLOAD v1274(0x40)
    0x1293: v1293(0x0) = SUB v1277, v1290
    0x1296: v1296(0x44) = ADD v1287(0x44), v1293(0x0)
    0x1298: MSTORE v1290, v1296(0x44)
    0x1299: v1299(0x64) = CONST 
    0x129d: v129d = ADD v1277, v1299(0x64)
    0x12a0: MSTORE v1274(0x40), v129d
    0x12a1: v12a1(0x20) = CONST 
    0x12a4: v12a4 = ADD v1290, v12a1(0x20)
    0x12a6: v12a6 = MLOAD v12a4
    0x12a7: v12a7(0x1) = CONST 
    0x12a9: v12a9(0x1) = CONST 
    0x12ab: v12ab(0xe0) = CONST 
    0x12ad: v12ad(0x100000000000000000000000000000000000000000000000000000000) = SHL v12ab(0xe0), v12a9(0x1)
    0x12ae: v12ae(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v12ad(0x100000000000000000000000000000000000000000000000000000000), v12a7(0x1)
    0x12af: v12af = AND v12ae(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v12a6
    0x12b0: v12b0(0xa9059cbb) = CONST 
    0x12b5: v12b5(0xe0) = CONST 
    0x12b7: v12b7(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v12b5(0xe0), v12b0(0xa9059cbb)
    0x12b8: v12b8 = OR v12b7(0xa9059cbb00000000000000000000000000000000000000000000000000000000), v12af
    0x12ba: MSTORE v12a4, v12b8
    0x12bb: v12bb(0x12c5) = CONST 
    0x12c1: v12c1(0x1579) = CONST 
    0x12c4: JUMP v12c1(0x1579), v1290, v1273arg2, v12bb(0x12c5)

    Begin block 0x1579B0x1273
    prev=[0x1273], succ=[0x1731B0x1579B0x1273]
    =================================
    0x157aS0x1273: v157aV1273(0x158b) = CONST 
    0x157eS0x1273: v157eV1273(0x1) = CONST 
    0x1580S0x1273: v1580V1273(0x1) = CONST 
    0x1582S0x1273: v1582V1273(0xa0) = CONST 
    0x1584S0x1273: v1584V1273(0x10000000000000000000000000000000000000000) = SHL v1582V1273(0xa0), v1580V1273(0x1)
    0x1585S0x1273: v1585V1273(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1584V1273(0x10000000000000000000000000000000000000000), v157eV1273(0x1)
    0x1586S0x1273: v1586V1273 = AND v1585V1273(0xffffffffffffffffffffffffffffffffffffffff), v1273arg2
    0x1587S0x1273: v1587V1273(0x1731) = CONST 
    0x158aS0x1273: JUMP v1587V1273(0x1731)

    Begin block 0x1731B0x1579B0x1273
    prev=[0x1579B0x1273], succ=[0x1765B0x1579B0x1273, 0x1761B0x1579B0x1273]
    =================================
    0x1732S0x1579S0x1273: v1732V1579V1273(0x0) = CONST 
    0x1735S0x1579S0x1273: v1735V1579V1273 = EXTCODEHASH v1586V1273
    0x1736S0x1579S0x1273: v1736V1579V1273(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) = CONST 
    0x1759S0x1579S0x1273: v1759V1579V1273 = EQ v1736V1579V1273(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470), v1735V1579V1273
    0x175bS0x1579S0x1273: v175bV1579V1273 = ISZERO v1759V1579V1273
    0x175dS0x1579S0x1273: v175dV1579V1273(0x1765) = CONST 
    0x1760S0x1579S0x1273: JUMPI v175dV1579V1273(0x1765), v1759V1579V1273

    Begin block 0x1765B0x1579B0x1273
    prev=[0x1731B0x1579B0x1273, 0x1761B0x1579B0x1273], succ=[0x158bB0x1273]
    =================================
    0x1765_0x0S0x1579S0x1273: v1765_0V1579V1273 = PHI v175bV1579V1273, v1764V1579V1273
    0x176cS0x1579S0x1273: JUMP v157aV1273(0x158b)

    Begin block 0x158bB0x1273
    prev=[0x1765B0x1579B0x1273], succ=[0x1590B0x1273, 0x15dcB0x1273]
    =================================
    0x158cS0x1273: v158cV1273(0x15dc) = CONST 
    0x158fS0x1273: JUMPI v158cV1273(0x15dc), v1765_0V1579V1273

    Begin block 0x1590B0x1273
    prev=[0x158bB0x1273], succ=[]
    =================================
    0x1590S0x1273: v1590V1273(0x40) = CONST 
    0x1593S0x1273: v1593V1273 = MLOAD v1590V1273(0x40)
    0x1594S0x1273: v1594V1273(0x461bcd) = CONST 
    0x1598S0x1273: v1598V1273(0xe5) = CONST 
    0x159aS0x1273: v159aV1273(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1598V1273(0xe5), v1594V1273(0x461bcd)
    0x159cS0x1273: MSTORE v1593V1273, v159aV1273(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x159dS0x1273: v159dV1273(0x20) = CONST 
    0x159fS0x1273: v159fV1273(0x4) = CONST 
    0x15a2S0x1273: v15a2V1273 = ADD v1593V1273, v159fV1273(0x4)
    0x15a3S0x1273: MSTORE v15a2V1273, v159dV1273(0x20)
    0x15a4S0x1273: v15a4V1273(0x1f) = CONST 
    0x15a6S0x1273: v15a6V1273(0x24) = CONST 
    0x15a9S0x1273: v15a9V1273 = ADD v1593V1273, v15a6V1273(0x24)
    0x15aaS0x1273: MSTORE v15a9V1273, v15a4V1273(0x1f)
    0x15abS0x1273: v15abV1273(0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400) = CONST 
    0x15ccS0x1273: v15ccV1273(0x44) = CONST 
    0x15cfS0x1273: v15cfV1273 = ADD v1593V1273, v15ccV1273(0x44)
    0x15d0S0x1273: MSTORE v15cfV1273, v15abV1273(0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400)
    0x15d2S0x1273: v15d2V1273 = MLOAD v1590V1273(0x40)
    0x15d6S0x1273: v15d6V1273(0x0) = SUB v1593V1273, v15d2V1273
    0x15d7S0x1273: v15d7V1273(0x64) = CONST 
    0x15d9S0x1273: v15d9V1273(0x64) = ADD v15d7V1273(0x64), v15d6V1273(0x0)
    0x15dbS0x1273: REVERT v15d2V1273, v15d9V1273(0x64)

    Begin block 0x15dcB0x1273
    prev=[0x158bB0x1273], succ=[0x15fbB0x1273]
    =================================
    0x15ddS0x1273: v15ddV1273(0x0) = CONST 
    0x15dfS0x1273: v15dfV1273(0x60) = CONST 
    0x15e2S0x1273: v15e2V1273(0x1) = CONST 
    0x15e4S0x1273: v15e4V1273(0x1) = CONST 
    0x15e6S0x1273: v15e6V1273(0xa0) = CONST 
    0x15e8S0x1273: v15e8V1273(0x10000000000000000000000000000000000000000) = SHL v15e6V1273(0xa0), v15e4V1273(0x1)
    0x15e9S0x1273: v15e9V1273(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15e8V1273(0x10000000000000000000000000000000000000000), v15e2V1273(0x1)
    0x15eaS0x1273: v15eaV1273 = AND v15e9V1273(0xffffffffffffffffffffffffffffffffffffffff), v1273arg2
    0x15ecS0x1273: v15ecV1273(0x40) = CONST 
    0x15eeS0x1273: v15eeV1273 = MLOAD v15ecV1273(0x40)
    0x15f2S0x1273: v15f2V1273(0x44) = MLOAD v1290
    0x15f4S0x1273: v15f4V1273(0x20) = CONST 
    0x15f6S0x1273: v15f6V1273 = ADD v15f4V1273(0x20), v1290

    Begin block 0x15fbB0x1273
    prev=[0x15dcB0x1273, 0x1604B0x1273], succ=[0x161aB0x1273, 0x1604B0x1273]
    =================================
    0x15fb_0x2S0x1273: v15fb_2V1273 = PHI v15f2V1273(0x44), v160dV1273
    0x15fcS0x1273: v15fcV1273(0x20) = CONST 
    0x15ffS0x1273: v15ffV1273 = LT v15fb_2V1273, v15fcV1273(0x20)
    0x1600S0x1273: v1600V1273(0x161a) = CONST 
    0x1603S0x1273: JUMPI v1600V1273(0x161a), v15ffV1273

    Begin block 0x161aB0x1273
    prev=[0x15fbB0x1273], succ=[0x165bB0x1273, 0x167cB0x1273]
    =================================
    0x161a_0x0S0x1273: v161a_0V1273 = PHI v15f6V1273, v1615V1273
    0x161a_0x1S0x1273: v161a_1V1273 = PHI v15eeV1273, v1613V1273
    0x161a_0x2S0x1273: v161a_2V1273 = PHI v15f2V1273(0x44), v160dV1273
    0x161bS0x1273: v161bV1273(0x1) = CONST 
    0x161eS0x1273: v161eV1273(0x20) = CONST 
    0x1620S0x1273: v1620V1273 = SUB v161eV1273(0x20), v161a_2V1273
    0x1621S0x1273: v1621V1273(0x100) = CONST 
    0x1624S0x1273: v1624V1273 = EXP v1621V1273(0x100), v1620V1273
    0x1625S0x1273: v1625V1273 = SUB v1624V1273, v161bV1273(0x1)
    0x1627S0x1273: v1627V1273 = NOT v1625V1273
    0x1629S0x1273: v1629V1273 = MLOAD v161a_0V1273
    0x162aS0x1273: v162aV1273 = AND v1629V1273, v1627V1273
    0x162dS0x1273: v162dV1273 = MLOAD v161a_1V1273
    0x162eS0x1273: v162eV1273 = AND v162dV1273, v1625V1273
    0x1631S0x1273: v1631V1273 = OR v162aV1273, v162eV1273
    0x1633S0x1273: MSTORE v161a_1V1273, v1631V1273
    0x163cS0x1273: v163cV1273 = ADD v15f2V1273(0x44), v15eeV1273
    0x1640S0x1273: v1640V1273(0x0) = CONST 
    0x1642S0x1273: v1642V1273(0x40) = CONST 
    0x1644S0x1273: v1644V1273 = MLOAD v1642V1273(0x40)
    0x1647S0x1273: v1647V1273(0x44) = SUB v163cV1273, v1644V1273
    0x1649S0x1273: v1649V1273(0x0) = CONST 
    0x164cS0x1273: v164cV1273 = GAS 
    0x164dS0x1273: v164dV1273 = CALL v164cV1273, v15eaV1273, v1649V1273(0x0), v1644V1273, v1647V1273(0x44), v1644V1273, v1640V1273(0x0)
    0x1651S0x1273: v1651V1273 = RETURNDATASIZE 
    0x1653S0x1273: v1653V1273(0x0) = CONST 
    0x1656S0x1273: v1656V1273 = EQ v1651V1273, v1653V1273(0x0)
    0x1657S0x1273: v1657V1273(0x167c) = CONST 
    0x165aS0x1273: JUMPI v1657V1273(0x167c), v1656V1273

    Begin block 0x165bB0x1273
    prev=[0x161aB0x1273], succ=[0x1681B0x1273]
    =================================
    0x165bS0x1273: v165bV1273(0x40) = CONST 
    0x165dS0x1273: v165dV1273 = MLOAD v165bV1273(0x40)
    0x1660S0x1273: v1660V1273(0x1f) = CONST 
    0x1662S0x1273: v1662V1273(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1660V1273(0x1f)
    0x1663S0x1273: v1663V1273(0x3f) = CONST 
    0x1665S0x1273: v1665V1273 = RETURNDATASIZE 
    0x1666S0x1273: v1666V1273 = ADD v1665V1273, v1663V1273(0x3f)
    0x1667S0x1273: v1667V1273 = AND v1666V1273, v1662V1273(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x1669S0x1273: v1669V1273 = ADD v165dV1273, v1667V1273
    0x166aS0x1273: v166aV1273(0x40) = CONST 
    0x166cS0x1273: MSTORE v166aV1273(0x40), v1669V1273
    0x166dS0x1273: v166dV1273 = RETURNDATASIZE 
    0x166fS0x1273: MSTORE v165dV1273, v166dV1273
    0x1670S0x1273: v1670V1273 = RETURNDATASIZE 
    0x1671S0x1273: v1671V1273(0x0) = CONST 
    0x1673S0x1273: v1673V1273(0x20) = CONST 
    0x1676S0x1273: v1676V1273 = ADD v165dV1273, v1673V1273(0x20)
    0x1677S0x1273: RETURNDATACOPY v1676V1273, v1671V1273(0x0), v1670V1273
    0x1678S0x1273: v1678V1273(0x1681) = CONST 
    0x167bS0x1273: JUMP v1678V1273(0x1681)

    Begin block 0x1681B0x1273
    prev=[0x165bB0x1273, 0x167cB0x1273], succ=[0x168cB0x1273, 0x16d8B0x1273]
    =================================
    0x1688S0x1273: v1688V1273(0x16d8) = CONST 
    0x168bS0x1273: JUMPI v1688V1273(0x16d8), v164dV1273

    Begin block 0x168cB0x1273
    prev=[0x1681B0x1273], succ=[]
    =================================
    0x168cS0x1273: v168cV1273(0x40) = CONST 
    0x168fS0x1273: v168fV1273 = MLOAD v168cV1273(0x40)
    0x1690S0x1273: v1690V1273(0x461bcd) = CONST 
    0x1694S0x1273: v1694V1273(0xe5) = CONST 
    0x1696S0x1273: v1696V1273(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1694V1273(0xe5), v1690V1273(0x461bcd)
    0x1698S0x1273: MSTORE v168fV1273, v1696V1273(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1699S0x1273: v1699V1273(0x20) = CONST 
    0x169bS0x1273: v169bV1273(0x4) = CONST 
    0x169eS0x1273: v169eV1273 = ADD v168fV1273, v169bV1273(0x4)
    0x16a1S0x1273: MSTORE v169eV1273, v1699V1273(0x20)
    0x16a2S0x1273: v16a2V1273(0x24) = CONST 
    0x16a5S0x1273: v16a5V1273 = ADD v168fV1273, v16a2V1273(0x24)
    0x16a6S0x1273: MSTORE v16a5V1273, v1699V1273(0x20)
    0x16a7S0x1273: v16a7V1273(0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564) = CONST 
    0x16c8S0x1273: v16c8V1273(0x44) = CONST 
    0x16cbS0x1273: v16cbV1273 = ADD v168fV1273, v16c8V1273(0x44)
    0x16ccS0x1273: MSTORE v16cbV1273, v16a7V1273(0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564)
    0x16ceS0x1273: v16ceV1273 = MLOAD v168cV1273(0x40)
    0x16d2S0x1273: v16d2V1273(0x0) = SUB v168fV1273, v16ceV1273
    0x16d3S0x1273: v16d3V1273(0x64) = CONST 
    0x16d5S0x1273: v16d5V1273(0x64) = ADD v16d3V1273(0x64), v16d2V1273(0x0)
    0x16d7S0x1273: REVERT v16ceV1273, v16d5V1273(0x64)

    Begin block 0x16d8B0x1273
    prev=[0x1681B0x1273], succ=[0x16e0B0x1273, 0x22e0B0x1273]
    =================================
    0x16d8_0x0S0x1273: v16d8_0V1273 = PHI v165dV1273, v167dV1273(0x60)
    0x16daS0x1273: v16daV1273 = MLOAD v16d8_0V1273
    0x16dbS0x1273: v16dbV1273 = ISZERO v16daV1273
    0x16dcS0x1273: v16dcV1273(0x22e0) = CONST 
    0x16dfS0x1273: JUMPI v16dcV1273(0x22e0), v16dbV1273

    Begin block 0x16e0B0x1273
    prev=[0x16d8B0x1273], succ=[0x16f0B0x1273, 0x16f4B0x1273]
    =================================
    0x16e0_0x0S0x1273: v16e0_0V1273 = PHI v165dV1273, v167dV1273(0x60)
    0x16e2S0x1273: v16e2V1273(0x20) = CONST 
    0x16e4S0x1273: v16e4V1273 = ADD v16e2V1273(0x20), v16e0_0V1273
    0x16e6S0x1273: v16e6V1273 = MLOAD v16e0_0V1273
    0x16e7S0x1273: v16e7V1273(0x20) = CONST 
    0x16eaS0x1273: v16eaV1273 = LT v16e6V1273, v16e7V1273(0x20)
    0x16ebS0x1273: v16ebV1273 = ISZERO v16eaV1273
    0x16ecS0x1273: v16ecV1273(0x16f4) = CONST 
    0x16efS0x1273: JUMPI v16ecV1273(0x16f4), v16ebV1273

    Begin block 0x16f0B0x1273
    prev=[0x16e0B0x1273], succ=[]
    =================================
    0x16f0S0x1273: v16f0V1273(0x0) = CONST 
    0x16f3S0x1273: REVERT v16f0V1273(0x0), v16f0V1273(0x0)

    Begin block 0x16f4B0x1273
    prev=[0x16e0B0x1273], succ=[0x16fbB0x1273, 0x2305B0x1273]
    =================================
    0x16f6S0x1273: v16f6V1273 = MLOAD v16e4V1273
    0x16f7S0x1273: v16f7V1273(0x2305) = CONST 
    0x16faS0x1273: JUMPI v16f7V1273(0x2305), v16f6V1273

    Begin block 0x16fbB0x1273
    prev=[0x16f4B0x1273], succ=[]
    =================================
    0x16fbS0x1273: v16fbV1273(0x40) = CONST 
    0x16fdS0x1273: v16fdV1273 = MLOAD v16fbV1273(0x40)
    0x16feS0x1273: v16feV1273(0x461bcd) = CONST 
    0x1702S0x1273: v1702V1273(0xe5) = CONST 
    0x1704S0x1273: v1704V1273(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1702V1273(0xe5), v16feV1273(0x461bcd)
    0x1706S0x1273: MSTORE v16fdV1273, v1704V1273(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1707S0x1273: v1707V1273(0x4) = CONST 
    0x1709S0x1273: v1709V1273 = ADD v1707V1273(0x4), v16fdV1273
    0x170cS0x1273: v170cV1273(0x20) = CONST 
    0x170eS0x1273: v170eV1273 = ADD v170cV1273(0x20), v1709V1273
    0x1711S0x1273: v1711V1273(0x20) = SUB v170eV1273, v1709V1273
    0x1713S0x1273: MSTORE v1709V1273, v1711V1273(0x20)
    0x1714S0x1273: v1714V1273(0x2a) = CONST 
    0x1717S0x1273: MSTORE v170eV1273, v1714V1273(0x2a)
    0x1718S0x1273: v1718V1273(0x20) = CONST 
    0x171aS0x1273: v171aV1273 = ADD v1718V1273(0x20), v170eV1273
    0x171cS0x1273: v171cV1273(0x1885) = CONST 
    0x171fS0x1273: v171fV1273(0x2a) = CONST 
    0x1722S0x1273: CODECOPY v171aV1273, v171cV1273(0x1885), v171fV1273(0x2a)
    0x1723S0x1273: v1723V1273(0x40) = CONST 
    0x1725S0x1273: v1725V1273 = ADD v1723V1273(0x40), v171aV1273
    0x1729S0x1273: v1729V1273(0x40) = CONST 
    0x172bS0x1273: v172bV1273 = MLOAD v1729V1273(0x40)
    0x172eS0x1273: v172eV1273(0x84) = SUB v1725V1273, v172bV1273
    0x1730S0x1273: REVERT v172bV1273, v172eV1273(0x84)

    Begin block 0x2305B0x1273
    prev=[0x16f4B0x1273], succ=[0x12c5]
    =================================
    0x230aS0x1273: JUMP v12bb(0x12c5)

    Begin block 0x12c5
    prev=[0x22e0B0x1273, 0x2305B0x1273], succ=[]
    =================================
    0x12c9: RETURNPRIVATE v1273arg3

    Begin block 0x22e0B0x1273
    prev=[0x16d8B0x1273], succ=[0x12c5]
    =================================
    0x22e5S0x1273: JUMP v12bb(0x12c5)

    Begin block 0x167cB0x1273
    prev=[0x161aB0x1273], succ=[0x1681B0x1273]
    =================================
    0x167dS0x1273: v167dV1273(0x60) = CONST 

    Begin block 0x1604B0x1273
    prev=[0x15fbB0x1273], succ=[0x15fbB0x1273]
    =================================
    0x1604_0x0S0x1273: v1604_0V1273 = PHI v15f6V1273, v1615V1273
    0x1604_0x1S0x1273: v1604_1V1273 = PHI v15eeV1273, v1613V1273
    0x1604_0x2S0x1273: v1604_2V1273 = PHI v15f2V1273(0x44), v160dV1273
    0x1605S0x1273: v1605V1273 = MLOAD v1604_0V1273
    0x1607S0x1273: MSTORE v1604_1V1273, v1605V1273
    0x1608S0x1273: v1608V1273(0x1f) = CONST 
    0x160aS0x1273: v160aV1273(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1608V1273(0x1f)
    0x160dS0x1273: v160dV1273 = ADD v1604_2V1273, v160aV1273(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x160fS0x1273: v160fV1273(0x20) = CONST 
    0x1613S0x1273: v1613V1273 = ADD v160fV1273(0x20), v1604_1V1273
    0x1615S0x1273: v1615V1273 = ADD v160fV1273(0x20), v1604_0V1273
    0x1616S0x1273: v1616V1273(0x15fb) = CONST 
    0x1619S0x1273: JUMP v1616V1273(0x15fb)

    Begin block 0x1761B0x1579B0x1273
    prev=[0x1731B0x1579B0x1273], succ=[0x1765B0x1579B0x1273]
    =================================
    0x1763S0x1579S0x1273: v1763V1579V1273 = ISZERO v1735V1579V1273
    0x1764S0x1579S0x1273: v1764V1579V1273 = ISZERO v1763V1579V1273

}

function fallback()() public {
    Begin block 0x190d
    prev=[], succ=[]
    =================================
    0x190e: v190e(0x0) = CONST 
    0x1911: REVERT v190e(0x0), v190e(0x0)

}

function earned(address)() public {
    Begin block 0x1e9
    prev=[], succ=[0x1fb, 0x1ff]
    =================================
    0x1ea: v1ea(0x1a2d) = CONST 
    0x1ed: v1ed(0x4) = CONST 
    0x1f0: v1f0 = CALLDATASIZE 
    0x1f1: v1f1 = SUB v1f0, v1ed(0x4)
    0x1f2: v1f2(0x20) = CONST 
    0x1f5: v1f5 = LT v1f1, v1f2(0x20)
    0x1f6: v1f6 = ISZERO v1f5
    0x1f7: v1f7(0x1ff) = CONST 
    0x1fa: JUMPI v1f7(0x1ff), v1f6

    Begin block 0x1fb
    prev=[0x1e9], succ=[]
    =================================
    0x1fb: v1fb(0x0) = CONST 
    0x1fe: REVERT v1fb(0x0), v1fb(0x0)

    Begin block 0x1ff
    prev=[0x1e9], succ=[0x48a0x1e9]
    =================================
    0x201: v201 = CALLDATALOAD v1ed(0x4)
    0x202: v202(0x1) = CONST 
    0x204: v204(0x1) = CONST 
    0x206: v206(0xa0) = CONST 
    0x208: v208(0x10000000000000000000000000000000000000000) = SHL v206(0xa0), v204(0x1)
    0x209: v209(0xffffffffffffffffffffffffffffffffffffffff) = SUB v208(0x10000000000000000000000000000000000000000), v202(0x1)
    0x20a: v20a = AND v209(0xffffffffffffffffffffffffffffffffffffffff), v201
    0x20b: v20b(0x48a) = CONST 
    0x20e: JUMP v20b(0x48a)

    Begin block 0x48a0x1e9
    prev=[0x1ff], succ=[0x1fad0x1e9]
    =================================
    0x48b0x1e9: v1e948b(0x1) = CONST 
    0x48d0x1e9: v1e948d(0x1) = CONST 
    0x48f0x1e9: v1e948f(0xa0) = CONST 
    0x4910x1e9: v1e9491(0x10000000000000000000000000000000000000000) = SHL v1e948f(0xa0), v1e948d(0x1)
    0x4920x1e9: v1e9492(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1e9491(0x10000000000000000000000000000000000000000), v1e948b(0x1)
    0x4940x1e9: v1e9494 = AND v20a, v1e9492(0xffffffffffffffffffffffffffffffffffffffff)
    0x4950x1e9: v1e9495(0x0) = CONST 
    0x4990x1e9: MSTORE v1e9495(0x0), v1e9494
    0x49a0x1e9: v1e949a(0xa2) = CONST 
    0x49c0x1e9: v1e949c(0x20) = CONST 
    0x4a00x1e9: MSTORE v1e949c(0x20), v1e949a(0xa2)
    0x4a10x1e9: v1e94a1(0x40) = CONST 
    0x4a50x1e9: v1e94a5 = SHA3 v1e9495(0x0), v1e94a1(0x40)
    0x4a60x1e9: v1e94a6 = SLOAD v1e94a5
    0x4a70x1e9: v1e94a7(0xa1) = CONST 
    0x4ab0x1e9: MSTORE v1e949c(0x20), v1e94a7(0xa1)
    0x4ad0x1e9: v1e94ad = SHA3 v1e9495(0x0), v1e94a1(0x40)
    0x4ae0x1e9: v1e94ae = SLOAD v1e94ad
    0x4af0x1e9: v1e94af(0x1f5d) = CONST 
    0x4b40x1e9: v1e94b4(0x50e) = CONST 
    0x4b80x1e9: v1e94b8(0xde0b6b3a7640000) = CONST 
    0x4c20x1e9: v1e94c2(0x1f82) = CONST 
    0x4c60x1e9: v1e94c6(0x4dd) = CONST 
    0x4ca0x1e9: v1e94ca(0x1fad) = CONST 
    0x4cd0x1e9: v1e94cd(0xf4f) = CONST 
    0x4d00x1e9: v1e94d0_0, v1e94d0_1 = CALLPRIVATE v1e94cd(0xf4f), v1e94ca(0x1fad)

    Begin block 0x1fad0x1e9
    prev=[0x48a0x1e9], succ=[0x4dd0x1e9]
    =================================
    0x1faf0x1e9: v1e91faf(0xffffffff) = CONST 
    0x1fb40x1e9: v1e91fb4(0x1035) = CONST 
    0x1fb70x1e9: v1e91fb7(0x1035) = AND v1e91fb4(0x1035), v1e91faf(0xffffffff)
    0x1fb80x1e9: v1e91fb8_0 = CALLPRIVATE v1e91fb7(0x1035), v1e94d0_1, v1e94d0_0, v1e94ae

    Begin block 0x4dd0x1e9
    prev=[0x1fad0x1e9], succ=[0x1f820x1e9]
    =================================
    0x4de0x1e9: v1e94de(0x1) = CONST 
    0x4e00x1e9: v1e94e0(0x1) = CONST 
    0x4e20x1e9: v1e94e2(0xa0) = CONST 
    0x4e40x1e9: v1e94e4(0x10000000000000000000000000000000000000000) = SHL v1e94e2(0xa0), v1e94e0(0x1)
    0x4e50x1e9: v1e94e5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1e94e4(0x10000000000000000000000000000000000000000), v1e94de(0x1)
    0x4e70x1e9: v1e94e7(0x0) = AND v1e9495(0x0), v1e94e5(0xffffffffffffffffffffffffffffffffffffffff)
    0x4e80x1e9: v1e94e8(0x0) = CONST 
    0x4ec0x1e9: MSTORE v1e94e8(0x0), v1e94e7(0x0)
    0x4ed0x1e9: v1e94ed(0xa4) = CONST 
    0x4ef0x1e9: v1e94ef(0x20) = CONST 
    0x4f10x1e9: MSTORE v1e94ef(0x20), v1e94ed(0xa4)
    0x4f20x1e9: v1e94f2(0x40) = CONST 
    0x4f50x1e9: v1e94f5 = SHA3 v1e94e8(0x0), v1e94f2(0x40)
    0x4f60x1e9: v1e94f6 = SLOAD v1e94f5
    0x4f80x1e9: v1e94f8(0xffffffff) = CONST 
    0x4fd0x1e9: v1e94fd(0x107e) = CONST 
    0x5000x1e9: v1e9500(0x107e) = AND v1e94fd(0x107e), v1e94f8(0xffffffff)
    0x5010x1e9: v1e9501_0 = CALLPRIVATE v1e9500(0x107e), v1e91fb8_0, v1e94f6, v1e94c6(0x4dd)

    Begin block 0x1f820x1e9
    prev=[0x4dd0x1e9], succ=[0x50e0x1e9]
    =================================
    0x1f840x1e9: v1e91f84(0xffffffff) = CONST 
    0x1f890x1e9: v1e91f89(0x10d7) = CONST 
    0x1f8c0x1e9: v1e91f8c(0x10d7) = AND v1e91f89(0x10d7), v1e91f84(0xffffffff)
    0x1f8d0x1e9: v1e91f8d_0 = CALLPRIVATE v1e91f8c(0x10d7), v1e94c2(0x1f82), v1e9501_0, v1e94b8(0xde0b6b3a7640000)

    Begin block 0x50e0x1e9
    prev=[0x1f820x1e9], succ=[0x1119B0x50e0x1e9]
    =================================
    0x5100x1e9: v1e9510(0xffffffff) = CONST 
    0x5150x1e9: v1e9515(0x1119) = CONST 
    0x5180x1e9: v1e9518(0x1119) = AND v1e9515(0x1119), v1e9510(0xffffffff)
    0x5190x1e9: JUMP v1e9518(0x1119)

    Begin block 0x1119B0x50e0x1e9
    prev=[0x50e0x1e9], succ=[0x1127B0x50e0x1e9, 0x224dB0x50e0x1e9]
    =================================
    0x111aS0x50e0x1e9: v111aV50e1e9(0x0) = CONST 
    0x111eS0x50e0x1e9: v111eV50e1e9 = ADD v1e94b4(0x50e), v1e91f8d_0
    0x1121S0x50e0x1e9: v1121V50e1e9 = LT v111eV50e1e9, v1e91f8d_0
    0x1122S0x50e0x1e9: v1122V50e1e9 = ISZERO v1121V50e1e9
    0x1123S0x50e0x1e9: v1123V50e1e9(0x224d) = CONST 
    0x1126S0x50e0x1e9: JUMPI v1123V50e1e9(0x224d), v1122V50e1e9

    Begin block 0x1127B0x50e0x1e9
    prev=[0x1119B0x50e0x1e9], succ=[]
    =================================
    0x1127S0x50e0x1e9: v1127V50e1e9(0x40) = CONST 
    0x112aS0x50e0x1e9: v112aV50e1e9 = MLOAD v1127V50e1e9(0x40)
    0x112bS0x50e0x1e9: v112bV50e1e9(0x461bcd) = CONST 
    0x112fS0x50e0x1e9: v112fV50e1e9(0xe5) = CONST 
    0x1131S0x50e0x1e9: v1131V50e1e9(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fV50e1e9(0xe5), v112bV50e1e9(0x461bcd)
    0x1133S0x50e0x1e9: MSTORE v112aV50e1e9, v1131V50e1e9(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0x50e0x1e9: v1134V50e1e9(0x20) = CONST 
    0x1136S0x50e0x1e9: v1136V50e1e9(0x4) = CONST 
    0x1139S0x50e0x1e9: v1139V50e1e9 = ADD v112aV50e1e9, v1136V50e1e9(0x4)
    0x113aS0x50e0x1e9: MSTORE v1139V50e1e9, v1134V50e1e9(0x20)
    0x113bS0x50e0x1e9: v113bV50e1e9(0x1b) = CONST 
    0x113dS0x50e0x1e9: v113dV50e1e9(0x24) = CONST 
    0x1140S0x50e0x1e9: v1140V50e1e9 = ADD v112aV50e1e9, v113dV50e1e9(0x24)
    0x1141S0x50e0x1e9: MSTORE v1140V50e1e9, v113bV50e1e9(0x1b)
    0x1142S0x50e0x1e9: v1142V50e1e9(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0x50e0x1e9: v1163V50e1e9(0x44) = CONST 
    0x1166S0x50e0x1e9: v1166V50e1e9 = ADD v112aV50e1e9, v1163V50e1e9(0x44)
    0x1167S0x50e0x1e9: MSTORE v1166V50e1e9, v1142V50e1e9(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0x50e0x1e9: v1169V50e1e9 = MLOAD v1127V50e1e9(0x40)
    0x116dS0x50e0x1e9: v116dV50e1e9(0x0) = SUB v112aV50e1e9, v1169V50e1e9
    0x116eS0x50e0x1e9: v116eV50e1e9(0x64) = CONST 
    0x1170S0x50e0x1e9: v1170V50e1e9(0x64) = ADD v116eV50e1e9(0x64), v116dV50e1e9(0x0)
    0x1172S0x50e0x1e9: REVERT v1169V50e1e9, v1170V50e1e9(0x64)

    Begin block 0x224dB0x50e0x1e9
    prev=[0x1119B0x50e0x1e9], succ=[0x1f5d0x1e9]
    =================================
    0x2253S0x50e0x1e9: JUMP v1e94a6

    Begin block 0x1f5d0x1e9
    prev=[0x224dB0x50e0x1e9], succ=[0x1a2d]
    =================================
    0x1f620x1e9: JUMP v20a

    Begin block 0x1a2d
    prev=[0x1f5d0x1e9], succ=[]
    =================================
    0x1a2e: v1a2e(0x40) = CONST 
    0x1a31: v1a31 = MLOAD v1a2e(0x40)
    0x1a34: MSTORE v1a31, v111eV50e1e9
    0x1a35: v1a35 = MLOAD v1a2e(0x40)
    0x1a39: v1a39(0x0) = SUB v1a31, v1a35
    0x1a3a: v1a3a(0x20) = CONST 
    0x1a3c: v1a3c(0x20) = ADD v1a3a(0x20), v1a39(0x0)
    0x1a3e: RETURN v1a35, v1a3c(0x20)

}

function rewards(address)() public {
    Begin block 0x221
    prev=[], succ=[0x233, 0x237]
    =================================
    0x222: v222(0x1a5e) = CONST 
    0x225: v225(0x4) = CONST 
    0x228: v228 = CALLDATASIZE 
    0x229: v229 = SUB v228, v225(0x4)
    0x22a: v22a(0x20) = CONST 
    0x22d: v22d = LT v229, v22a(0x20)
    0x22e: v22e = ISZERO v22d
    0x22f: v22f(0x237) = CONST 
    0x232: JUMPI v22f(0x237), v22e

    Begin block 0x233
    prev=[0x221], succ=[]
    =================================
    0x233: v233(0x0) = CONST 
    0x236: REVERT v233(0x0), v233(0x0)

    Begin block 0x237
    prev=[0x221], succ=[0x520]
    =================================
    0x239: v239 = CALLDATALOAD v225(0x4)
    0x23a: v23a(0x1) = CONST 
    0x23c: v23c(0x1) = CONST 
    0x23e: v23e(0xa0) = CONST 
    0x240: v240(0x10000000000000000000000000000000000000000) = SHL v23e(0xa0), v23c(0x1)
    0x241: v241(0xffffffffffffffffffffffffffffffffffffffff) = SUB v240(0x10000000000000000000000000000000000000000), v23a(0x1)
    0x242: v242 = AND v241(0xffffffffffffffffffffffffffffffffffffffff), v239
    0x243: v243(0x520) = CONST 
    0x246: JUMP v243(0x520)

    Begin block 0x520
    prev=[0x237], succ=[0x1a5e]
    =================================
    0x521: v521(0xa2) = CONST 
    0x523: v523(0x20) = CONST 
    0x525: MSTORE v523(0x20), v521(0xa2)
    0x526: v526(0x0) = CONST 
    0x52a: MSTORE v526(0x0), v242
    0x52b: v52b(0x40) = CONST 
    0x52e: v52e = SHA3 v526(0x0), v52b(0x40)
    0x52f: v52f = SLOAD v52e
    0x531: JUMP v222(0x1a5e)

    Begin block 0x1a5e
    prev=[0x520], succ=[]
    =================================
    0x1a5f: v1a5f(0x40) = CONST 
    0x1a62: v1a62 = MLOAD v1a5f(0x40)
    0x1a65: MSTORE v1a62, v52f
    0x1a66: v1a66 = MLOAD v1a5f(0x40)
    0x1a6a: v1a6a(0x0) = SUB v1a62, v1a66
    0x1a6b: v1a6b(0x20) = CONST 
    0x1a6d: v1a6d(0x20) = ADD v1a6b(0x20), v1a6a(0x0)
    0x1a6f: RETURN v1a66, v1a6d(0x20)

}

function totalSupply()() public {
    Begin block 0x247
    prev=[], succ=[0x532B0x247]
    =================================
    0x248: v248(0x1a8f) = CONST 
    0x24b: v24b(0x532) = CONST 
    0x24e: JUMP v24b(0x532)

    Begin block 0x532B0x247
    prev=[0x247], succ=[0x5360x532B0x247]
    =================================
    0x533S0x247: v533V247(0xa3) = CONST 
    0x535S0x247: v535V247 = SLOAD v533V247(0xa3)

    Begin block 0x5360x532B0x247
    prev=[0x532B0x247], succ=[0x1a8f]
    =================================
    0x5380x532S0x247: JUMP v248(0x1a8f)

    Begin block 0x1a8f
    prev=[0x5360x532B0x247], succ=[]
    =================================
    0x1a90: v1a90(0x40) = CONST 
    0x1a93: v1a93 = MLOAD v1a90(0x40)
    0x1a96: MSTORE v1a93, v535V247
    0x1a97: v1a97 = MLOAD v1a90(0x40)
    0x1a9b: v1a9b(0x0) = SUB v1a93, v1a97
    0x1a9c: v1a9c(0x20) = CONST 
    0x1a9e: v1a9e(0x20) = ADD v1a9c(0x20), v1a9b(0x0)
    0x1aa0: RETURN v1a97, v1a9e(0x20)

}

function setRewardsDistribution(address)() public {
    Begin block 0x24f
    prev=[], succ=[0x261, 0x265]
    =================================
    0x250: v250(0x1ac0) = CONST 
    0x253: v253(0x4) = CONST 
    0x256: v256 = CALLDATASIZE 
    0x257: v257 = SUB v256, v253(0x4)
    0x258: v258(0x20) = CONST 
    0x25b: v25b = LT v257, v258(0x20)
    0x25c: v25c = ISZERO v25b
    0x25d: v25d(0x265) = CONST 
    0x260: JUMPI v25d(0x265), v25c

    Begin block 0x261
    prev=[0x24f], succ=[]
    =================================
    0x261: v261(0x0) = CONST 
    0x264: REVERT v261(0x0), v261(0x0)

    Begin block 0x265
    prev=[0x24f], succ=[0x539]
    =================================
    0x267: v267 = CALLDATALOAD v253(0x4)
    0x268: v268(0x1) = CONST 
    0x26a: v26a(0x1) = CONST 
    0x26c: v26c(0xa0) = CONST 
    0x26e: v26e(0x10000000000000000000000000000000000000000) = SHL v26c(0xa0), v26a(0x1)
    0x26f: v26f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26e(0x10000000000000000000000000000000000000000), v268(0x1)
    0x270: v270 = AND v26f(0xffffffffffffffffffffffffffffffffffffffff), v267
    0x271: v271(0x539) = CONST 
    0x274: JUMP v271(0x539)

    Begin block 0x539
    prev=[0x265], succ=[0xad6B0x539]
    =================================
    0x53a: v53a(0x541) = CONST 
    0x53d: v53d(0xad6) = CONST 
    0x540: JUMP v53d(0xad6)

    Begin block 0xad6B0x539
    prev=[0x539], succ=[0x12caB0x539]
    =================================
    0xad7S0x539: vad7V539(0x33) = CONST 
    0xad9S0x539: vad9V539 = SLOAD vad7V539(0x33)
    0xadaS0x539: vadaV539(0x0) = CONST 
    0xaddS0x539: vaddV539(0x1) = CONST 
    0xadfS0x539: vadfV539(0x1) = CONST 
    0xae1S0x539: vae1V539(0xa0) = CONST 
    0xae3S0x539: vae3V539(0x10000000000000000000000000000000000000000) = SHL vae1V539(0xa0), vadfV539(0x1)
    0xae4S0x539: vae4V539(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V539(0x10000000000000000000000000000000000000000), vaddV539(0x1)
    0xae5S0x539: vae5V539 = AND vae4V539(0xffffffffffffffffffffffffffffffffffffffff), vad9V539
    0xae6S0x539: vae6V539(0xaed) = CONST 
    0xae9S0x539: vae9V539(0x12ca) = CONST 
    0xaecS0x539: JUMP vae9V539(0x12ca)

    Begin block 0x12caB0x539
    prev=[0xad6B0x539], succ=[0xaedB0x539]
    =================================
    0x12cbS0x539: v12cbV539 = CALLER 
    0x12cdS0x539: JUMP vae6V539(0xaed)

    Begin block 0xaedB0x539
    prev=[0x12caB0x539], succ=[0x541]
    =================================
    0xaeeS0x539: vaeeV539(0x1) = CONST 
    0xaf0S0x539: vaf0V539(0x1) = CONST 
    0xaf2S0x539: vaf2V539(0xa0) = CONST 
    0xaf4S0x539: vaf4V539(0x10000000000000000000000000000000000000000) = SHL vaf2V539(0xa0), vaf0V539(0x1)
    0xaf5S0x539: vaf5V539(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf4V539(0x10000000000000000000000000000000000000000), vaeeV539(0x1)
    0xaf6S0x539: vaf6V539 = AND vaf5V539(0xffffffffffffffffffffffffffffffffffffffff), v12cbV539
    0xaf7S0x539: vaf7V539 = EQ vaf6V539, vae5V539
    0xafbS0x539: JUMP v53a(0x541)

    Begin block 0x541
    prev=[0xaedB0x539], succ=[0x546, 0x580]
    =================================
    0x542: v542(0x580) = CONST 
    0x545: JUMPI v542(0x580), vaf7V539

    Begin block 0x546
    prev=[0x541], succ=[]
    =================================
    0x546: v546(0x40) = CONST 
    0x549: v549 = MLOAD v546(0x40)
    0x54a: v54a(0x461bcd) = CONST 
    0x54e: v54e(0xe5) = CONST 
    0x550: v550(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v54e(0xe5), v54a(0x461bcd)
    0x552: MSTORE v549, v550(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x553: v553(0x20) = CONST 
    0x555: v555(0x4) = CONST 
    0x558: v558 = ADD v549, v555(0x4)
    0x55b: MSTORE v558, v553(0x20)
    0x55c: v55c(0x24) = CONST 
    0x55f: v55f = ADD v549, v55c(0x24)
    0x560: MSTORE v55f, v553(0x20)
    0x561: v561(0x0) = CONST 
    0x564: v564 = MLOAD v561(0x0)
    0x565: v565(0x20) = CONST 
    0x567: v567(0x180d) = CONST 
    0x56f: MSTORE v561(0x0), v564
    0x570: v570(0x44) = CONST 
    0x573: v573 = ADD v549, v570(0x44)
    0x574: MSTORE v573, v23ac(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x576: v576 = MLOAD v546(0x40)
    0x57a: v57a(0x0) = SUB v549, v576
    0x57b: v57b(0x64) = CONST 
    0x57d: v57d(0x64) = ADD v57b(0x64), v57a(0x0)
    0x57f: REVERT v576, v57d(0x64)
    0x23ac: v23ac(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x580
    prev=[0x541], succ=[0x1ac0]
    =================================
    0x581: v581(0x66) = CONST 
    0x584: v584 = SLOAD v581(0x66)
    0x585: v585(0x1) = CONST 
    0x587: v587(0x1) = CONST 
    0x589: v589(0xa0) = CONST 
    0x58b: v58b(0x10000000000000000000000000000000000000000) = SHL v589(0xa0), v587(0x1)
    0x58c: v58c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v58b(0x10000000000000000000000000000000000000000), v585(0x1)
    0x58d: v58d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v58c(0xffffffffffffffffffffffffffffffffffffffff)
    0x58e: v58e = AND v58d(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v584
    0x58f: v58f(0x1) = CONST 
    0x591: v591(0x1) = CONST 
    0x593: v593(0xa0) = CONST 
    0x595: v595(0x10000000000000000000000000000000000000000) = SHL v593(0xa0), v591(0x1)
    0x596: v596(0xffffffffffffffffffffffffffffffffffffffff) = SUB v595(0x10000000000000000000000000000000000000000), v58f(0x1)
    0x59a: v59a = AND v596(0xffffffffffffffffffffffffffffffffffffffff), v270
    0x59e: v59e = OR v59a, v58e
    0x5a0: SSTORE v581(0x66), v59e
    0x5a1: JUMP v250(0x1ac0)

    Begin block 0x1ac0
    prev=[0x580], succ=[]
    =================================
    0x1ac1: STOP 

}

function getRewardForDuration()() public {
    Begin block 0x277
    prev=[], succ=[0x5a2B0x277]
    =================================
    0x278: v278(0x1ae1) = CONST 
    0x27b: v27b(0x5a2) = CONST 
    0x27e: JUMP v27b(0x5a2)

    Begin block 0x5a2B0x277
    prev=[0x277], succ=[0x1fd8B0x277]
    =================================
    0x5a3S0x277: v5a3V277(0x0) = CONST 
    0x5a5S0x277: v5a5V277(0x1fd8) = CONST 
    0x5a8S0x277: v5a8V277(0x9e) = CONST 
    0x5aaS0x277: v5aaV277 = SLOAD v5a8V277(0x9e)
    0x5abS0x277: v5abV277(0x9d) = CONST 
    0x5adS0x277: v5adV277 = SLOAD v5abV277(0x9d)
    0x5aeS0x277: v5aeV277(0x107e) = CONST 
    0x5b4S0x277: v5b4V277(0xffffffff) = CONST 
    0x5b9S0x277: v5b9V277(0x107e) = AND v5b4V277(0xffffffff), v5aeV277(0x107e)
    0x5baS0x277: v5ba_0V277 = CALLPRIVATE v5b9V277(0x107e), v5aaV277, v5adV277, v5a5V277(0x1fd8)

    Begin block 0x1fd8B0x277
    prev=[0x5a2B0x277], succ=[0x1ae1]
    =================================
    0x1fdcS0x277: JUMP v278(0x1ae1)

    Begin block 0x1ae1
    prev=[0x1fd8B0x277], succ=[]
    =================================
    0x1ae2: v1ae2(0x40) = CONST 
    0x1ae5: v1ae5 = MLOAD v1ae2(0x40)
    0x1ae8: MSTORE v1ae5, v5ba_0V277
    0x1ae9: v1ae9 = MLOAD v1ae2(0x40)
    0x1aed: v1aed(0x0) = SUB v1ae5, v1ae9
    0x1aee: v1aee(0x20) = CONST 
    0x1af0: v1af0(0x20) = ADD v1aee(0x20), v1aed(0x0)
    0x1af2: RETURN v1ae9, v1af0(0x20)

}

function rewardsDuration()() public {
    Begin block 0x27f
    prev=[], succ=[0x5c0]
    =================================
    0x280: v280(0x1b12) = CONST 
    0x283: v283(0x5c0) = CONST 
    0x286: JUMP v283(0x5c0)

    Begin block 0x5c0
    prev=[0x27f], succ=[0x1b12]
    =================================
    0x5c1: v5c1(0x9e) = CONST 
    0x5c3: v5c3 = SLOAD v5c1(0x9e)
    0x5c5: JUMP v280(0x1b12)

    Begin block 0x1b12
    prev=[0x5c0], succ=[]
    =================================
    0x1b13: v1b13(0x40) = CONST 
    0x1b16: v1b16 = MLOAD v1b13(0x40)
    0x1b19: MSTORE v1b16, v5c3
    0x1b1a: v1b1a = MLOAD v1b13(0x40)
    0x1b1e: v1b1e(0x0) = SUB v1b16, v1b1a
    0x1b1f: v1b1f(0x20) = CONST 
    0x1b21: v1b21(0x20) = ADD v1b1f(0x20), v1b1e(0x0)
    0x1b23: RETURN v1b1a, v1b21(0x20)

}

function notifyRewardAmount(uint256)() public {
    Begin block 0x287
    prev=[], succ=[0x299, 0x29d]
    =================================
    0x288: v288(0x1b43) = CONST 
    0x28b: v28b(0x4) = CONST 
    0x28e: v28e = CALLDATASIZE 
    0x28f: v28f = SUB v28e, v28b(0x4)
    0x290: v290(0x20) = CONST 
    0x293: v293 = LT v28f, v290(0x20)
    0x294: v294 = ISZERO v293
    0x295: v295(0x29d) = CONST 
    0x298: JUMPI v295(0x29d), v294

    Begin block 0x299
    prev=[0x287], succ=[]
    =================================
    0x299: v299(0x0) = CONST 
    0x29c: REVERT v299(0x0), v299(0x0)

    Begin block 0x29d
    prev=[0x287], succ=[0x5c6]
    =================================
    0x29f: v29f = CALLDATALOAD v28b(0x4)
    0x2a0: v2a0(0x5c6) = CONST 
    0x2a3: JUMP v2a0(0x5c6)

    Begin block 0x5c6
    prev=[0x29d], succ=[0x5d9, 0x60f]
    =================================
    0x5c7: v5c7(0x66) = CONST 
    0x5c9: v5c9 = SLOAD v5c7(0x66)
    0x5ca: v5ca(0x1) = CONST 
    0x5cc: v5cc(0x1) = CONST 
    0x5ce: v5ce(0xa0) = CONST 
    0x5d0: v5d0(0x10000000000000000000000000000000000000000) = SHL v5ce(0xa0), v5cc(0x1)
    0x5d1: v5d1(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d0(0x10000000000000000000000000000000000000000), v5ca(0x1)
    0x5d2: v5d2 = AND v5d1(0xffffffffffffffffffffffffffffffffffffffff), v5c9
    0x5d3: v5d3 = CALLER 
    0x5d4: v5d4 = EQ v5d3, v5d2
    0x5d5: v5d5(0x60f) = CONST 
    0x5d8: JUMPI v5d5(0x60f), v5d4

    Begin block 0x5d9
    prev=[0x5c6], succ=[]
    =================================
    0x5d9: v5d9(0x40) = CONST 
    0x5db: v5db = MLOAD v5d9(0x40)
    0x5dc: v5dc(0x461bcd) = CONST 
    0x5e0: v5e0(0xe5) = CONST 
    0x5e2: v5e2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v5e0(0xe5), v5dc(0x461bcd)
    0x5e4: MSTORE v5db, v5e2(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x5e5: v5e5(0x4) = CONST 
    0x5e7: v5e7 = ADD v5e5(0x4), v5db
    0x5ea: v5ea(0x20) = CONST 
    0x5ec: v5ec = ADD v5ea(0x20), v5e7
    0x5ef: v5ef(0x20) = SUB v5ec, v5e7
    0x5f1: MSTORE v5e7, v5ef(0x20)
    0x5f2: v5f2(0x2a) = CONST 
    0x5f5: MSTORE v5ec, v5f2(0x2a)
    0x5f6: v5f6(0x20) = CONST 
    0x5f8: v5f8 = ADD v5f6(0x20), v5ec
    0x5fa: v5fa(0x185b) = CONST 
    0x5fd: v5fd(0x2a) = CONST 
    0x600: CODECOPY v5f8, v5fa(0x185b), v5fd(0x2a)
    0x601: v601(0x40) = CONST 
    0x603: v603 = ADD v601(0x40), v5f8
    0x607: v607(0x40) = CONST 
    0x609: v609 = MLOAD v607(0x40)
    0x60c: v60c(0x84) = SUB v603, v609
    0x60e: REVERT v609, v60c(0x84)

    Begin block 0x60f
    prev=[0x5c6], succ=[0x619]
    =================================
    0x610: v610(0x0) = CONST 
    0x612: v612(0x619) = CONST 
    0x615: v615(0xf4f) = CONST 
    0x618: v618_0, v618_1 = CALLPRIVATE v615(0xf4f), v612(0x619)

    Begin block 0x619
    prev=[0x60f], succ=[0x8e7B0x619]
    =================================
    0x61a: v61a(0xa0) = CONST 
    0x61c: SSTORE v61a(0xa0), v618_0
    0x61d: v61d(0x624) = CONST 
    0x620: v620(0x8e7) = CONST 
    0x623: JUMP v620(0x8e7)

    Begin block 0x8e7B0x619
    prev=[0x619], succ=[0x2027B0x619]
    =================================
    0x8e8S0x619: v8e8V619(0x0) = CONST 
    0x8eaS0x619: v8eaV619(0x2027) = CONST 
    0x8edS0x619: v8edV619 = TIMESTAMP 
    0x8eeS0x619: v8eeV619(0x9c) = CONST 
    0x8f0S0x619: v8f0V619 = SLOAD v8eeV619(0x9c)
    0x8f1S0x619: v8f1V619(0x1173) = CONST 
    0x8f4S0x619: v8f4_0V619 = CALLPRIVATE v8f1V619(0x1173), v8f0V619, v8edV619, v8eaV619(0x2027)

    Begin block 0x2027B0x619
    prev=[0x8e7B0x619], succ=[0x624]
    =================================
    0x202bS0x619: JUMP v61d(0x624)

    Begin block 0x624
    prev=[0x2027B0x619], succ=[0x637, 0x66b]
    =================================
    0x625: v625(0x9f) = CONST 
    0x627: SSTORE v625(0x9f), v8f4_0V619
    0x628: v628(0x1) = CONST 
    0x62a: v62a(0x1) = CONST 
    0x62c: v62c(0xa0) = CONST 
    0x62e: v62e(0x10000000000000000000000000000000000000000) = SHL v62c(0xa0), v62a(0x1)
    0x62f: v62f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v62e(0x10000000000000000000000000000000000000000), v628(0x1)
    0x631: v631 = AND v618_1, v62f(0xffffffffffffffffffffffffffffffffffffffff)
    0x632: v632 = ISZERO v631
    0x633: v633(0x66b) = CONST 
    0x636: JUMPI v633(0x66b), v632

    Begin block 0x637
    prev=[0x624], succ=[0x63f]
    =================================
    0x637: v637(0x63f) = CONST 
    0x63b: v63b(0x48a) = CONST 
    0x63e: v63e_0 = CALLPRIVATE v63b(0x48a), v618_1

    Begin block 0x63f
    prev=[0x637], succ=[0x66b]
    =================================
    0x640: v640(0x1) = CONST 
    0x642: v642(0x1) = CONST 
    0x644: v644(0xa0) = CONST 
    0x646: v646(0x10000000000000000000000000000000000000000) = SHL v644(0xa0), v642(0x1)
    0x647: v647(0xffffffffffffffffffffffffffffffffffffffff) = SUB v646(0x10000000000000000000000000000000000000000), v640(0x1)
    0x649: v649(0x63f) = AND v637(0x63f), v647(0xffffffffffffffffffffffffffffffffffffffff)
    0x64a: v64a(0x0) = CONST 
    0x64e: MSTORE v64a(0x0), v649(0x63f)
    0x64f: v64f(0xa2) = CONST 
    0x651: v651(0x20) = CONST 
    0x655: MSTORE v651(0x20), v64f(0xa2)
    0x656: v656(0x40) = CONST 
    0x65a: v65a = SHA3 v64a(0x0), v656(0x40)
    0x65e: SSTORE v65a, v63e_0
    0x65f: v65f(0xa0) = CONST 
    0x661: v661 = SLOAD v65f(0xa0)
    0x662: v662(0xa1) = CONST 
    0x666: MSTORE v651(0x20), v662(0xa1)
    0x669: v669 = SHA3 v64a(0x0), v656(0x40)
    0x66a: SSTORE v669, v661

    Begin block 0x66b
    prev=[0x624, 0x63f], succ=[0x675, 0x690]
    =================================
    0x66c: v66c(0x9c) = CONST 
    0x66e: v66e = SLOAD v66c(0x9c)
    0x66f: v66f = TIMESTAMP 
    0x670: v670 = LT v66f, v66e
    0x671: v671(0x690) = CONST 
    0x674: JUMPI v671(0x690), v670

    Begin block 0x675
    prev=[0x66b], succ=[0x688]
    =================================
    0x675: v675(0x9e) = CONST 
    0x675_0x1: v675_1 = PHI v610(0x0), v618_1
    0x677: v677 = SLOAD v675(0x9e)
    0x678: v678(0x688) = CONST 
    0x67e: v67e(0xffffffff) = CONST 
    0x683: v683(0x10d7) = CONST 
    0x686: v686(0x10d7) = AND v683(0x10d7), v67e(0xffffffff)
    0x687: v687_0 = CALLPRIVATE v686(0x10d7), v677, v675_1, v678(0x688)

    Begin block 0x688
    prev=[0x675], succ=[0x6df]
    =================================
    0x689: v689(0x9d) = CONST 
    0x68b: SSTORE v689(0x9d), v687_0
    0x68c: v68c(0x6df) = CONST 
    0x68f: JUMP v68c(0x6df)

    Begin block 0x6df
    prev=[0x688, 0x6d9], succ=[0x726, 0x72a]
    =================================
    0x6e0: v6e0(0x9a) = CONST 
    0x6e2: v6e2 = SLOAD v6e0(0x9a)
    0x6e3: v6e3(0x40) = CONST 
    0x6e6: v6e6 = MLOAD v6e3(0x40)
    0x6e7: v6e7(0x70a08231) = CONST 
    0x6ec: v6ec(0xe0) = CONST 
    0x6ee: v6ee(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL v6ec(0xe0), v6e7(0x70a08231)
    0x6f0: MSTORE v6e6, v6ee(0x70a0823100000000000000000000000000000000000000000000000000000000)
    0x6f1: v6f1 = ADDRESS 
    0x6f2: v6f2(0x4) = CONST 
    0x6f5: v6f5 = ADD v6e6, v6f2(0x4)
    0x6f6: MSTORE v6f5, v6f1
    0x6f8: v6f8 = MLOAD v6e3(0x40)
    0x6f9: v6f9(0x0) = CONST 
    0x6fc: v6fc(0x1) = CONST 
    0x6fe: v6fe(0x1) = CONST 
    0x700: v700(0xa0) = CONST 
    0x702: v702(0x10000000000000000000000000000000000000000) = SHL v700(0xa0), v6fe(0x1)
    0x703: v703(0xffffffffffffffffffffffffffffffffffffffff) = SUB v702(0x10000000000000000000000000000000000000000), v6fc(0x1)
    0x704: v704 = AND v703(0xffffffffffffffffffffffffffffffffffffffff), v6e2
    0x706: v706(0x70a08231) = CONST 
    0x70c: v70c(0x24) = CONST 
    0x710: v710 = ADD v6e6, v70c(0x24)
    0x712: v712(0x20) = CONST 
    0x719: v719(0x0) = SUB v6e6, v6f8
    0x71a: v71a(0x24) = ADD v719(0x0), v70c(0x24)
    0x71e: v71e = EXTCODESIZE v704
    0x71f: v71f = ISZERO v71e
    0x721: v721 = ISZERO v71f
    0x722: v722(0x72a) = CONST 
    0x725: JUMPI v722(0x72a), v721

    Begin block 0x726
    prev=[0x6df], succ=[]
    =================================
    0x726: v726(0x0) = CONST 
    0x729: REVERT v726(0x0), v726(0x0)

    Begin block 0x72a
    prev=[0x6df], succ=[0x735, 0x73e]
    =================================
    0x72c: v72c = GAS 
    0x72d: v72d = STATICCALL v72c, v704, v6f8, v71a(0x24), v6f8, v712(0x20)
    0x72e: v72e = ISZERO v72d
    0x730: v730 = ISZERO v72e
    0x731: v731(0x73e) = CONST 
    0x734: JUMPI v731(0x73e), v730

    Begin block 0x735
    prev=[0x72a], succ=[]
    =================================
    0x735: v735 = RETURNDATASIZE 
    0x736: v736(0x0) = CONST 
    0x739: RETURNDATACOPY v736(0x0), v736(0x0), v735
    0x73a: v73a = RETURNDATASIZE 
    0x73b: v73b(0x0) = CONST 
    0x73d: REVERT v73b(0x0), v73a

    Begin block 0x73e
    prev=[0x72a], succ=[0x750, 0x754]
    =================================
    0x743: v743(0x40) = CONST 
    0x745: v745 = MLOAD v743(0x40)
    0x746: v746 = RETURNDATASIZE 
    0x747: v747(0x20) = CONST 
    0x74a: v74a = LT v746, v747(0x20)
    0x74b: v74b = ISZERO v74a
    0x74c: v74c(0x754) = CONST 
    0x74f: JUMPI v74c(0x754), v74b

    Begin block 0x750
    prev=[0x73e], succ=[]
    =================================
    0x750: v750(0x0) = CONST 
    0x753: REVERT v750(0x0), v750(0x0)

    Begin block 0x754
    prev=[0x73e], succ=[0x76d]
    =================================
    0x756: v756 = MLOAD v745
    0x757: v757(0x9e) = CONST 
    0x759: v759 = SLOAD v757(0x9e)
    0x75d: v75d(0x76d) = CONST 
    0x763: v763(0xffffffff) = CONST 
    0x768: v768(0x10d7) = CONST 
    0x76b: v76b(0x10d7) = AND v768(0x10d7), v763(0xffffffff)
    0x76c: v76c_0 = CALLPRIVATE v76b(0x10d7), v759, v756, v75d(0x76d)

    Begin block 0x76d
    prev=[0x754], succ=[0x777, 0x7c3]
    =================================
    0x76e: v76e(0x9d) = CONST 
    0x770: v770 = SLOAD v76e(0x9d)
    0x771: v771 = GT v770, v76c_0
    0x772: v772 = ISZERO v771
    0x773: v773(0x7c3) = CONST 
    0x776: JUMPI v773(0x7c3), v772

    Begin block 0x777
    prev=[0x76d], succ=[]
    =================================
    0x777: v777(0x40) = CONST 
    0x77a: v77a = MLOAD v777(0x40)
    0x77b: v77b(0x461bcd) = CONST 
    0x77f: v77f(0xe5) = CONST 
    0x781: v781(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v77f(0xe5), v77b(0x461bcd)
    0x783: MSTORE v77a, v781(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x784: v784(0x20) = CONST 
    0x786: v786(0x4) = CONST 
    0x789: v789 = ADD v77a, v786(0x4)
    0x78a: MSTORE v789, v784(0x20)
    0x78b: v78b(0x18) = CONST 
    0x78d: v78d(0x24) = CONST 
    0x790: v790 = ADD v77a, v78d(0x24)
    0x791: MSTORE v790, v78b(0x18)
    0x792: v792(0x50726f76696465642072657761726420746f6f20686967680000000000000000) = CONST 
    0x7b3: v7b3(0x44) = CONST 
    0x7b6: v7b6 = ADD v77a, v7b3(0x44)
    0x7b7: MSTORE v7b6, v792(0x50726f76696465642072657761726420746f6f20686967680000000000000000)
    0x7b9: v7b9 = MLOAD v777(0x40)
    0x7bd: v7bd(0x0) = SUB v77a, v7b9
    0x7be: v7be(0x64) = CONST 
    0x7c0: v7c0(0x64) = ADD v7be(0x64), v7bd(0x0)
    0x7c2: REVERT v7b9, v7c0(0x64)

    Begin block 0x7c3
    prev=[0x76d], succ=[0x1119B0x7c3]
    =================================
    0x7c4: v7c4 = TIMESTAMP 
    0x7c5: v7c5(0x9f) = CONST 
    0x7c9: SSTORE v7c5(0x9f), v7c4
    0x7ca: v7ca(0x9e) = CONST 
    0x7cc: v7cc = SLOAD v7ca(0x9e)
    0x7cd: v7cd(0x7dc) = CONST 
    0x7d2: v7d2(0xffffffff) = CONST 
    0x7d7: v7d7(0x1119) = CONST 
    0x7da: v7da(0x1119) = AND v7d7(0x1119), v7d2(0xffffffff)
    0x7db: JUMP v7da(0x1119)

    Begin block 0x1119B0x7c3
    prev=[0x7c3], succ=[0x1127B0x7c3, 0x224dB0x7c3]
    =================================
    0x111aS0x7c3: v111aV7c3(0x0) = CONST 
    0x111eS0x7c3: v111eV7c3 = ADD v7cc, v7c4
    0x1121S0x7c3: v1121V7c3 = LT v111eV7c3, v7c4
    0x1122S0x7c3: v1122V7c3 = ISZERO v1121V7c3
    0x1123S0x7c3: v1123V7c3(0x224d) = CONST 
    0x1126S0x7c3: JUMPI v1123V7c3(0x224d), v1122V7c3

    Begin block 0x1127B0x7c3
    prev=[0x1119B0x7c3], succ=[]
    =================================
    0x1127S0x7c3: v1127V7c3(0x40) = CONST 
    0x112aS0x7c3: v112aV7c3 = MLOAD v1127V7c3(0x40)
    0x112bS0x7c3: v112bV7c3(0x461bcd) = CONST 
    0x112fS0x7c3: v112fV7c3(0xe5) = CONST 
    0x1131S0x7c3: v1131V7c3(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fV7c3(0xe5), v112bV7c3(0x461bcd)
    0x1133S0x7c3: MSTORE v112aV7c3, v1131V7c3(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0x7c3: v1134V7c3(0x20) = CONST 
    0x1136S0x7c3: v1136V7c3(0x4) = CONST 
    0x1139S0x7c3: v1139V7c3 = ADD v112aV7c3, v1136V7c3(0x4)
    0x113aS0x7c3: MSTORE v1139V7c3, v1134V7c3(0x20)
    0x113bS0x7c3: v113bV7c3(0x1b) = CONST 
    0x113dS0x7c3: v113dV7c3(0x24) = CONST 
    0x1140S0x7c3: v1140V7c3 = ADD v112aV7c3, v113dV7c3(0x24)
    0x1141S0x7c3: MSTORE v1140V7c3, v113bV7c3(0x1b)
    0x1142S0x7c3: v1142V7c3(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0x7c3: v1163V7c3(0x44) = CONST 
    0x1166S0x7c3: v1166V7c3 = ADD v112aV7c3, v1163V7c3(0x44)
    0x1167S0x7c3: MSTORE v1166V7c3, v1142V7c3(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0x7c3: v1169V7c3 = MLOAD v1127V7c3(0x40)
    0x116dS0x7c3: v116dV7c3(0x0) = SUB v112aV7c3, v1169V7c3
    0x116eS0x7c3: v116eV7c3(0x64) = CONST 
    0x1170S0x7c3: v1170V7c3(0x64) = ADD v116eV7c3(0x64), v116dV7c3(0x0)
    0x1172S0x7c3: REVERT v1169V7c3, v1170V7c3(0x64)

    Begin block 0x224dB0x7c3
    prev=[0x1119B0x7c3], succ=[0x7dc]
    =================================
    0x2253S0x7c3: JUMP v7cd(0x7dc)

    Begin block 0x7dc
    prev=[0x224dB0x7c3], succ=[0x1b43]
    =================================
    0x7dc_0x3: v7dc_3 = PHI v610(0x0), v618_1
    0x7dc_0x4: v7dc_4 = PHI v29f, v610(0x0)
    0x7dd: v7dd(0x9c) = CONST 
    0x7df: SSTORE v7dd(0x9c), v111eV7c3
    0x7e0: v7e0(0x40) = CONST 
    0x7e3: v7e3 = MLOAD v7e0(0x40)
    0x7e6: MSTORE v7e3, v7dc_3
    0x7e8: v7e8 = MLOAD v7e0(0x40)
    0x7e9: v7e9(0xde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d) = CONST 
    0x80d: v80d(0x0) = SUB v7e3, v7e8
    0x80e: v80e(0x20) = CONST 
    0x810: v810(0x20) = ADD v80e(0x20), v80d(0x0)
    0x812: LOG1 v7e8, v810(0x20), v7e9(0xde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d)
    0x816: JUMP v7dc_4

    Begin block 0x1b43
    prev=[0x7dc], succ=[]
    =================================
    0x1b44: STOP 

    Begin block 0x690
    prev=[0x66b], succ=[0x6a6]
    =================================
    0x691: v691(0x9c) = CONST 
    0x693: v693 = SLOAD v691(0x9c)
    0x694: v694(0x0) = CONST 
    0x697: v697(0x6a6) = CONST 
    0x69b: v69b = TIMESTAMP 
    0x69c: v69c(0xffffffff) = CONST 
    0x6a1: v6a1(0x1035) = CONST 
    0x6a4: v6a4(0x1035) = AND v6a1(0x1035), v69c(0xffffffff)
    0x6a5: v6a5_0 = CALLPRIVATE v6a4(0x1035), v69b, v693, v697(0x6a6)

    Begin block 0x6a6
    prev=[0x690], succ=[0x6bf]
    =================================
    0x6a9: v6a9(0x0) = CONST 
    0x6ab: v6ab(0x6bf) = CONST 
    0x6ae: v6ae(0x9d) = CONST 
    0x6b0: v6b0 = SLOAD v6ae(0x9d)
    0x6b2: v6b2(0x107e) = CONST 
    0x6b8: v6b8(0xffffffff) = CONST 
    0x6bd: v6bd(0x107e) = AND v6b8(0xffffffff), v6b2(0x107e)
    0x6be: v6be_0 = CALLPRIVATE v6bd(0x107e), v6b0, v6a5_0, v6ab(0x6bf)

    Begin block 0x6bf
    prev=[0x6a6], succ=[0x1119B0x6bf]
    =================================
    0x6bf_0x4: v6bf_4 = PHI v610(0x0), v618_1
    0x6c0: v6c0(0x9e) = CONST 
    0x6c2: v6c2 = SLOAD v6c0(0x9e)
    0x6c6: v6c6(0x6d9) = CONST 
    0x6ca: v6ca(0x1ffc) = CONST 
    0x6cf: v6cf(0xffffffff) = CONST 
    0x6d4: v6d4(0x1119) = CONST 
    0x6d7: v6d7(0x1119) = AND v6d4(0x1119), v6cf(0xffffffff)
    0x6d8: JUMP v6d7(0x1119)

    Begin block 0x1119B0x6bf
    prev=[0x6bf], succ=[0x1127B0x6bf, 0x224dB0x6bf]
    =================================
    0x111aS0x6bf: v111aV6bf(0x0) = CONST 
    0x111eS0x6bf: v111eV6bf = ADD v6be_0, v6bf_4
    0x1121S0x6bf: v1121V6bf = LT v111eV6bf, v6bf_4
    0x1122S0x6bf: v1122V6bf = ISZERO v1121V6bf
    0x1123S0x6bf: v1123V6bf(0x224d) = CONST 
    0x1126S0x6bf: JUMPI v1123V6bf(0x224d), v1122V6bf

    Begin block 0x1127B0x6bf
    prev=[0x1119B0x6bf], succ=[]
    =================================
    0x1127S0x6bf: v1127V6bf(0x40) = CONST 
    0x112aS0x6bf: v112aV6bf = MLOAD v1127V6bf(0x40)
    0x112bS0x6bf: v112bV6bf(0x461bcd) = CONST 
    0x112fS0x6bf: v112fV6bf(0xe5) = CONST 
    0x1131S0x6bf: v1131V6bf(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fV6bf(0xe5), v112bV6bf(0x461bcd)
    0x1133S0x6bf: MSTORE v112aV6bf, v1131V6bf(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0x6bf: v1134V6bf(0x20) = CONST 
    0x1136S0x6bf: v1136V6bf(0x4) = CONST 
    0x1139S0x6bf: v1139V6bf = ADD v112aV6bf, v1136V6bf(0x4)
    0x113aS0x6bf: MSTORE v1139V6bf, v1134V6bf(0x20)
    0x113bS0x6bf: v113bV6bf(0x1b) = CONST 
    0x113dS0x6bf: v113dV6bf(0x24) = CONST 
    0x1140S0x6bf: v1140V6bf = ADD v112aV6bf, v113dV6bf(0x24)
    0x1141S0x6bf: MSTORE v1140V6bf, v113bV6bf(0x1b)
    0x1142S0x6bf: v1142V6bf(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0x6bf: v1163V6bf(0x44) = CONST 
    0x1166S0x6bf: v1166V6bf = ADD v112aV6bf, v1163V6bf(0x44)
    0x1167S0x6bf: MSTORE v1166V6bf, v1142V6bf(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0x6bf: v1169V6bf = MLOAD v1127V6bf(0x40)
    0x116dS0x6bf: v116dV6bf(0x0) = SUB v112aV6bf, v1169V6bf
    0x116eS0x6bf: v116eV6bf(0x64) = CONST 
    0x1170S0x6bf: v1170V6bf(0x64) = ADD v116eV6bf(0x64), v116dV6bf(0x0)
    0x1172S0x6bf: REVERT v1169V6bf, v1170V6bf(0x64)

    Begin block 0x224dB0x6bf
    prev=[0x1119B0x6bf], succ=[0x1ffc]
    =================================
    0x2253S0x6bf: JUMP v6ca(0x1ffc)

    Begin block 0x1ffc
    prev=[0x224dB0x6bf], succ=[0x6d9]
    =================================
    0x1ffe: v1ffe(0xffffffff) = CONST 
    0x2003: v2003(0x10d7) = CONST 
    0x2006: v2006(0x10d7) = AND v2003(0x10d7), v1ffe(0xffffffff)
    0x2007: v2007_0 = CALLPRIVATE v2006(0x10d7), v6c2, v111eV6bf, v6c6(0x6d9)

    Begin block 0x6d9
    prev=[0x1ffc], succ=[0x6df]
    =================================
    0x6da: v6da(0x9d) = CONST 
    0x6dc: SSTORE v6da(0x9d), v2007_0

}

function rewardsDistribution()() public {
    Begin block 0x2a4
    prev=[], succ=[0x817]
    =================================
    0x2a5: v2a5(0x1b64) = CONST 
    0x2a8: v2a8(0x817) = CONST 
    0x2ab: JUMP v2a8(0x817)

    Begin block 0x817
    prev=[0x2a4], succ=[0x1b64]
    =================================
    0x818: v818(0x66) = CONST 
    0x81a: v81a = SLOAD v818(0x66)
    0x81b: v81b(0x1) = CONST 
    0x81d: v81d(0x1) = CONST 
    0x81f: v81f(0xa0) = CONST 
    0x821: v821(0x10000000000000000000000000000000000000000) = SHL v81f(0xa0), v81d(0x1)
    0x822: v822(0xffffffffffffffffffffffffffffffffffffffff) = SUB v821(0x10000000000000000000000000000000000000000), v81b(0x1)
    0x823: v823 = AND v822(0xffffffffffffffffffffffffffffffffffffffff), v81a
    0x825: JUMP v2a5(0x1b64)

    Begin block 0x1b64
    prev=[0x817], succ=[]
    =================================
    0x1b65: v1b65(0x40) = CONST 
    0x1b68: v1b68 = MLOAD v1b65(0x40)
    0x1b69: v1b69(0x1) = CONST 
    0x1b6b: v1b6b(0x1) = CONST 
    0x1b6d: v1b6d(0xa0) = CONST 
    0x1b6f: v1b6f(0x10000000000000000000000000000000000000000) = SHL v1b6d(0xa0), v1b6b(0x1)
    0x1b70: v1b70(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1b6f(0x10000000000000000000000000000000000000000), v1b69(0x1)
    0x1b73: v1b73 = AND v823, v1b70(0xffffffffffffffffffffffffffffffffffffffff)
    0x1b75: MSTORE v1b68, v1b73
    0x1b76: v1b76 = MLOAD v1b65(0x40)
    0x1b7a: v1b7a(0x0) = SUB v1b68, v1b76
    0x1b7b: v1b7b(0x20) = CONST 
    0x1b7d: v1b7d(0x20) = ADD v1b7b(0x20), v1b7a(0x0)
    0x1b7f: RETURN v1b76, v1b7d(0x20)

}

function balanceOf(address)() public {
    Begin block 0x2c8
    prev=[], succ=[0x2da, 0x2de]
    =================================
    0x2c9: v2c9(0x1b9f) = CONST 
    0x2cc: v2cc(0x4) = CONST 
    0x2cf: v2cf = CALLDATASIZE 
    0x2d0: v2d0 = SUB v2cf, v2cc(0x4)
    0x2d1: v2d1(0x20) = CONST 
    0x2d4: v2d4 = LT v2d0, v2d1(0x20)
    0x2d5: v2d5 = ISZERO v2d4
    0x2d6: v2d6(0x2de) = CONST 
    0x2d9: JUMPI v2d6(0x2de), v2d5

    Begin block 0x2da
    prev=[0x2c8], succ=[]
    =================================
    0x2da: v2da(0x0) = CONST 
    0x2dd: REVERT v2da(0x0), v2da(0x0)

    Begin block 0x2de
    prev=[0x2c8], succ=[0x826]
    =================================
    0x2e0: v2e0 = CALLDATALOAD v2cc(0x4)
    0x2e1: v2e1(0x1) = CONST 
    0x2e3: v2e3(0x1) = CONST 
    0x2e5: v2e5(0xa0) = CONST 
    0x2e7: v2e7(0x10000000000000000000000000000000000000000) = SHL v2e5(0xa0), v2e3(0x1)
    0x2e8: v2e8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2e7(0x10000000000000000000000000000000000000000), v2e1(0x1)
    0x2e9: v2e9 = AND v2e8(0xffffffffffffffffffffffffffffffffffffffff), v2e0
    0x2ea: v2ea(0x826) = CONST 
    0x2ed: JUMP v2ea(0x826)

    Begin block 0x826
    prev=[0x2de], succ=[0x1b9f]
    =================================
    0x827: v827(0x1) = CONST 
    0x829: v829(0x1) = CONST 
    0x82b: v82b(0xa0) = CONST 
    0x82d: v82d(0x10000000000000000000000000000000000000000) = SHL v82b(0xa0), v829(0x1)
    0x82e: v82e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v82d(0x10000000000000000000000000000000000000000), v827(0x1)
    0x82f: v82f = AND v82e(0xffffffffffffffffffffffffffffffffffffffff), v2e9
    0x830: v830(0x0) = CONST 
    0x834: MSTORE v830(0x0), v82f
    0x835: v835(0xa4) = CONST 
    0x837: v837(0x20) = CONST 
    0x839: MSTORE v837(0x20), v835(0xa4)
    0x83a: v83a(0x40) = CONST 
    0x83d: v83d = SHA3 v830(0x0), v83a(0x40)
    0x83e: v83e = SLOAD v83d
    0x840: JUMP v2c9(0x1b9f)

    Begin block 0x1b9f
    prev=[0x826], succ=[]
    =================================
    0x1ba0: v1ba0(0x40) = CONST 
    0x1ba3: v1ba3 = MLOAD v1ba0(0x40)
    0x1ba6: MSTORE v1ba3, v83e
    0x1ba7: v1ba7 = MLOAD v1ba0(0x40)
    0x1bab: v1bab(0x0) = SUB v1ba3, v1ba7
    0x1bac: v1bac(0x20) = CONST 
    0x1bae: v1bae(0x20) = ADD v1bac(0x20), v1bab(0x0)
    0x1bb0: RETURN v1ba7, v1bae(0x20)

}

function renounceOwnership()() public {
    Begin block 0x2ee
    prev=[], succ=[0x841]
    =================================
    0x2ef: v2ef(0x1bd0) = CONST 
    0x2f2: v2f2(0x841) = CONST 
    0x2f5: JUMP v2f2(0x841)

    Begin block 0x841
    prev=[0x2ee], succ=[0xad6B0x841]
    =================================
    0x842: v842(0x849) = CONST 
    0x845: v845(0xad6) = CONST 
    0x848: JUMP v845(0xad6)

    Begin block 0xad6B0x841
    prev=[0x841], succ=[0x12caB0x841]
    =================================
    0xad7S0x841: vad7V841(0x33) = CONST 
    0xad9S0x841: vad9V841 = SLOAD vad7V841(0x33)
    0xadaS0x841: vadaV841(0x0) = CONST 
    0xaddS0x841: vaddV841(0x1) = CONST 
    0xadfS0x841: vadfV841(0x1) = CONST 
    0xae1S0x841: vae1V841(0xa0) = CONST 
    0xae3S0x841: vae3V841(0x10000000000000000000000000000000000000000) = SHL vae1V841(0xa0), vadfV841(0x1)
    0xae4S0x841: vae4V841(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V841(0x10000000000000000000000000000000000000000), vaddV841(0x1)
    0xae5S0x841: vae5V841 = AND vae4V841(0xffffffffffffffffffffffffffffffffffffffff), vad9V841
    0xae6S0x841: vae6V841(0xaed) = CONST 
    0xae9S0x841: vae9V841(0x12ca) = CONST 
    0xaecS0x841: JUMP vae9V841(0x12ca)

    Begin block 0x12caB0x841
    prev=[0xad6B0x841], succ=[0xaedB0x841]
    =================================
    0x12cbS0x841: v12cbV841 = CALLER 
    0x12cdS0x841: JUMP vae6V841(0xaed)

    Begin block 0xaedB0x841
    prev=[0x12caB0x841], succ=[0x849]
    =================================
    0xaeeS0x841: vaeeV841(0x1) = CONST 
    0xaf0S0x841: vaf0V841(0x1) = CONST 
    0xaf2S0x841: vaf2V841(0xa0) = CONST 
    0xaf4S0x841: vaf4V841(0x10000000000000000000000000000000000000000) = SHL vaf2V841(0xa0), vaf0V841(0x1)
    0xaf5S0x841: vaf5V841(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf4V841(0x10000000000000000000000000000000000000000), vaeeV841(0x1)
    0xaf6S0x841: vaf6V841 = AND vaf5V841(0xffffffffffffffffffffffffffffffffffffffff), v12cbV841
    0xaf7S0x841: vaf7V841 = EQ vaf6V841, vae5V841
    0xafbS0x841: JUMP v842(0x849)

    Begin block 0x849
    prev=[0xaedB0x841], succ=[0x84e, 0x888]
    =================================
    0x84a: v84a(0x888) = CONST 
    0x84d: JUMPI v84a(0x888), vaf7V841

    Begin block 0x84e
    prev=[0x849], succ=[]
    =================================
    0x84e: v84e(0x40) = CONST 
    0x851: v851 = MLOAD v84e(0x40)
    0x852: v852(0x461bcd) = CONST 
    0x856: v856(0xe5) = CONST 
    0x858: v858(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v856(0xe5), v852(0x461bcd)
    0x85a: MSTORE v851, v858(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x85b: v85b(0x20) = CONST 
    0x85d: v85d(0x4) = CONST 
    0x860: v860 = ADD v851, v85d(0x4)
    0x863: MSTORE v860, v85b(0x20)
    0x864: v864(0x24) = CONST 
    0x867: v867 = ADD v851, v864(0x24)
    0x868: MSTORE v867, v85b(0x20)
    0x869: v869(0x0) = CONST 
    0x86c: v86c = MLOAD v869(0x0)
    0x86d: v86d(0x20) = CONST 
    0x86f: v86f(0x180d) = CONST 
    0x877: MSTORE v869(0x0), v86c
    0x878: v878(0x44) = CONST 
    0x87b: v87b = ADD v851, v878(0x44)
    0x87c: MSTORE v87b, v23b1(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x87e: v87e = MLOAD v84e(0x40)
    0x882: v882(0x0) = SUB v851, v87e
    0x883: v883(0x64) = CONST 
    0x885: v885(0x64) = ADD v883(0x64), v882(0x0)
    0x887: REVERT v87e, v885(0x64)
    0x23b1: v23b1(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x888
    prev=[0x849], succ=[0x1bd0]
    =================================
    0x889: v889(0x33) = CONST 
    0x88b: v88b = SLOAD v889(0x33)
    0x88c: v88c(0x40) = CONST 
    0x88e: v88e = MLOAD v88c(0x40)
    0x88f: v88f(0x0) = CONST 
    0x892: v892(0x1) = CONST 
    0x894: v894(0x1) = CONST 
    0x896: v896(0xa0) = CONST 
    0x898: v898(0x10000000000000000000000000000000000000000) = SHL v896(0xa0), v894(0x1)
    0x899: v899(0xffffffffffffffffffffffffffffffffffffffff) = SUB v898(0x10000000000000000000000000000000000000000), v892(0x1)
    0x89a: v89a = AND v899(0xffffffffffffffffffffffffffffffffffffffff), v88b
    0x89c: v89c(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x8c0: LOG3 v88e, v88f(0x0), v89c(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v89a, v88f(0x0)
    0x8c1: v8c1(0x33) = CONST 
    0x8c4: v8c4 = SLOAD v8c1(0x33)
    0x8c5: v8c5(0x1) = CONST 
    0x8c7: v8c7(0x1) = CONST 
    0x8c9: v8c9(0xa0) = CONST 
    0x8cb: v8cb(0x10000000000000000000000000000000000000000) = SHL v8c9(0xa0), v8c7(0x1)
    0x8cc: v8cc(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8cb(0x10000000000000000000000000000000000000000), v8c5(0x1)
    0x8cd: v8cd(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v8cc(0xffffffffffffffffffffffffffffffffffffffff)
    0x8ce: v8ce = AND v8cd(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v8c4
    0x8d0: SSTORE v8c1(0x33), v8ce
    0x8d1: JUMP v2ef(0x1bd0)

    Begin block 0x1bd0
    prev=[0x888], succ=[]
    =================================
    0x1bd1: STOP 

}

function stakingToken()() public {
    Begin block 0x2f6
    prev=[], succ=[0x8d2]
    =================================
    0x2f7: v2f7(0x1bf1) = CONST 
    0x2fa: v2fa(0x8d2) = CONST 
    0x2fd: JUMP v2fa(0x8d2)

    Begin block 0x8d2
    prev=[0x2f6], succ=[0x1bf1]
    =================================
    0x8d3: v8d3(0x9b) = CONST 
    0x8d5: v8d5 = SLOAD v8d3(0x9b)
    0x8d6: v8d6(0x1) = CONST 
    0x8d8: v8d8(0x1) = CONST 
    0x8da: v8da(0xa0) = CONST 
    0x8dc: v8dc(0x10000000000000000000000000000000000000000) = SHL v8da(0xa0), v8d8(0x1)
    0x8dd: v8dd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8dc(0x10000000000000000000000000000000000000000), v8d6(0x1)
    0x8de: v8de = AND v8dd(0xffffffffffffffffffffffffffffffffffffffff), v8d5
    0x8e0: JUMP v2f7(0x1bf1)

    Begin block 0x1bf1
    prev=[0x8d2], succ=[]
    =================================
    0x1bf2: v1bf2(0x40) = CONST 
    0x1bf5: v1bf5 = MLOAD v1bf2(0x40)
    0x1bf6: v1bf6(0x1) = CONST 
    0x1bf8: v1bf8(0x1) = CONST 
    0x1bfa: v1bfa(0xa0) = CONST 
    0x1bfc: v1bfc(0x10000000000000000000000000000000000000000) = SHL v1bfa(0xa0), v1bf8(0x1)
    0x1bfd: v1bfd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1bfc(0x10000000000000000000000000000000000000000), v1bf6(0x1)
    0x1c00: v1c00 = AND v8de, v1bfd(0xffffffffffffffffffffffffffffffffffffffff)
    0x1c02: MSTORE v1bf5, v1c00
    0x1c03: v1c03 = MLOAD v1bf2(0x40)
    0x1c07: v1c07(0x0) = SUB v1bf5, v1c03
    0x1c08: v1c08(0x20) = CONST 
    0x1c0a: v1c0a(0x20) = ADD v1c08(0x20), v1c07(0x0)
    0x1c0c: RETURN v1c03, v1c0a(0x20)

}

function rewardRate()() public {
    Begin block 0x2fe
    prev=[], succ=[0x8e1]
    =================================
    0x2ff: v2ff(0x1c2c) = CONST 
    0x302: v302(0x8e1) = CONST 
    0x305: JUMP v302(0x8e1)

    Begin block 0x8e1
    prev=[0x2fe], succ=[0x1c2c]
    =================================
    0x8e2: v8e2(0x9d) = CONST 
    0x8e4: v8e4 = SLOAD v8e2(0x9d)
    0x8e6: JUMP v2ff(0x1c2c)

    Begin block 0x1c2c
    prev=[0x8e1], succ=[]
    =================================
    0x1c2d: v1c2d(0x40) = CONST 
    0x1c30: v1c30 = MLOAD v1c2d(0x40)
    0x1c33: MSTORE v1c30, v8e4
    0x1c34: v1c34 = MLOAD v1c2d(0x40)
    0x1c38: v1c38(0x0) = SUB v1c30, v1c34
    0x1c39: v1c39(0x20) = CONST 
    0x1c3b: v1c3b(0x20) = ADD v1c39(0x20), v1c38(0x0)
    0x1c3d: RETURN v1c34, v1c3b(0x20)

}

function lastTimeRewardApplicable()() public {
    Begin block 0x306
    prev=[], succ=[0x8e7B0x306]
    =================================
    0x307: v307(0x1c5d) = CONST 
    0x30a: v30a(0x8e7) = CONST 
    0x30d: JUMP v30a(0x8e7)

    Begin block 0x8e7B0x306
    prev=[0x306], succ=[0x2027B0x306]
    =================================
    0x8e8S0x306: v8e8V306(0x0) = CONST 
    0x8eaS0x306: v8eaV306(0x2027) = CONST 
    0x8edS0x306: v8edV306 = TIMESTAMP 
    0x8eeS0x306: v8eeV306(0x9c) = CONST 
    0x8f0S0x306: v8f0V306 = SLOAD v8eeV306(0x9c)
    0x8f1S0x306: v8f1V306(0x1173) = CONST 
    0x8f4S0x306: v8f4_0V306 = CALLPRIVATE v8f1V306(0x1173), v8f0V306, v8edV306, v8eaV306(0x2027)

    Begin block 0x2027B0x306
    prev=[0x8e7B0x306], succ=[0x1c5d]
    =================================
    0x202bS0x306: JUMP v307(0x1c5d)

    Begin block 0x1c5d
    prev=[0x2027B0x306], succ=[]
    =================================
    0x1c5e: v1c5e(0x40) = CONST 
    0x1c61: v1c61 = MLOAD v1c5e(0x40)
    0x1c64: MSTORE v1c61, v8f4_0V306
    0x1c65: v1c65 = MLOAD v1c5e(0x40)
    0x1c69: v1c69(0x0) = SUB v1c61, v1c65
    0x1c6a: v1c6a(0x20) = CONST 
    0x1c6c: v1c6c(0x20) = ADD v1c6a(0x20), v1c69(0x0)
    0x1c6e: RETURN v1c65, v1c6c(0x20)

}

function initialize()() public {
    Begin block 0x30e
    prev=[], succ=[0x8f5B0x30e]
    =================================
    0x30f: v30f(0x1c8e) = CONST 
    0x312: v312(0x8f5) = CONST 
    0x315: JUMP v312(0x8f5), v30f(0x1c8e)

    Begin block 0x8f5B0x30e
    prev=[0x30e], succ=[0x90eB0x30e, 0x906B0x30e]
    =================================
    0x8f6S0x30e: v8f6V30e(0x0) = CONST 
    0x8f8S0x30e: v8f8V30e = SLOAD v8f6V30e(0x0)
    0x8f9S0x30e: v8f9V30e(0x100) = CONST 
    0x8fdS0x30e: v8fdV30e = DIV v8f8V30e, v8f9V30e(0x100)
    0x8feS0x30e: v8feV30e(0xff) = CONST 
    0x900S0x30e: v900V30e = AND v8feV30e(0xff), v8fdV30e
    0x902S0x30e: v902V30e(0x90e) = CONST 
    0x905S0x30e: JUMPI v902V30e(0x90e), v900V30e

    Begin block 0x90eB0x30e
    prev=[0x8f5B0x30e, 0x1189B0x906B0x30e], succ=[0x91cB0x30e, 0x914B0x30e]
    =================================
    0x90e_0x0S0x30e: v90e_0V30e = PHI v900V30e, v118cV906V30e
    0x910S0x30e: v910V30e(0x91c) = CONST 
    0x913S0x30e: JUMPI v910V30e(0x91c), v90e_0V30e

    Begin block 0x91cB0x30e
    prev=[0x90eB0x30e, 0x914B0x30e], succ=[0x921B0x30e, 0x957B0x30e]
    =================================
    0x91c_0x0S0x30e: v91c_0V30e = PHI v900V30e, v91bV30e, v118cV906V30e
    0x91dS0x30e: v91dV30e(0x957) = CONST 
    0x920S0x30e: JUMPI v91dV30e(0x957), v91c_0V30e

    Begin block 0x921B0x30e
    prev=[0x91cB0x30e], succ=[]
    =================================
    0x921S0x30e: v921V30e(0x40) = CONST 
    0x923S0x30e: v923V30e = MLOAD v921V30e(0x40)
    0x924S0x30e: v924V30e(0x461bcd) = CONST 
    0x928S0x30e: v928V30e(0xe5) = CONST 
    0x92aS0x30e: v92aV30e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v928V30e(0xe5), v924V30e(0x461bcd)
    0x92cS0x30e: MSTORE v923V30e, v92aV30e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x92dS0x30e: v92dV30e(0x4) = CONST 
    0x92fS0x30e: v92fV30e = ADD v92dV30e(0x4), v923V30e
    0x932S0x30e: v932V30e(0x20) = CONST 
    0x934S0x30e: v934V30e = ADD v932V30e(0x20), v92fV30e
    0x937S0x30e: v937V30e(0x20) = SUB v934V30e, v92fV30e
    0x939S0x30e: MSTORE v92fV30e, v937V30e(0x20)
    0x93aS0x30e: v93aV30e(0x2e) = CONST 
    0x93dS0x30e: MSTORE v934V30e, v93aV30e(0x2e)
    0x93eS0x30e: v93eV30e(0x20) = CONST 
    0x940S0x30e: v940V30e = ADD v93eV30e(0x20), v934V30e
    0x942S0x30e: v942V30e(0x182d) = CONST 
    0x945S0x30e: v945V30e(0x2e) = CONST 
    0x948S0x30e: CODECOPY v940V30e, v942V30e(0x182d), v945V30e(0x2e)
    0x949S0x30e: v949V30e(0x40) = CONST 
    0x94bS0x30e: v94bV30e = ADD v949V30e(0x40), v940V30e
    0x94fS0x30e: v94fV30e(0x40) = CONST 
    0x951S0x30e: v951V30e = MLOAD v94fV30e(0x40)
    0x954S0x30e: v954V30e(0x84) = SUB v94bV30e, v951V30e
    0x956S0x30e: REVERT v951V30e, v954V30e(0x84)

    Begin block 0x957B0x30e
    prev=[0x91cB0x30e], succ=[0x96aB0x30e, 0x982B0x30e]
    =================================
    0x958S0x30e: v958V30e(0x0) = CONST 
    0x95aS0x30e: v95aV30e = SLOAD v958V30e(0x0)
    0x95bS0x30e: v95bV30e(0x100) = CONST 
    0x95fS0x30e: v95fV30e = DIV v95aV30e, v95bV30e(0x100)
    0x960S0x30e: v960V30e(0xff) = CONST 
    0x962S0x30e: v962V30e = AND v960V30e(0xff), v95fV30e
    0x963S0x30e: v963V30e = ISZERO v962V30e
    0x965S0x30e: v965V30e = ISZERO v963V30e
    0x966S0x30e: v966V30e(0x982) = CONST 
    0x969S0x30e: JUMPI v966V30e(0x982), v965V30e

    Begin block 0x96aB0x30e
    prev=[0x957B0x30e], succ=[0x982B0x30e]
    =================================
    0x96aS0x30e: v96aV30e(0x0) = CONST 
    0x96dS0x30e: v96dV30e = SLOAD v96aV30e(0x0)
    0x96eS0x30e: v96eV30e(0xff) = CONST 
    0x970S0x30e: v970V30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v96eV30e(0xff)
    0x971S0x30e: v971V30e(0xff00) = CONST 
    0x974S0x30e: v974V30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v971V30e(0xff00)
    0x977S0x30e: v977V30e = AND v96dV30e, v974V30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0x978S0x30e: v978V30e(0x100) = CONST 
    0x97bS0x30e: v97bV30e = OR v978V30e(0x100), v977V30e
    0x97cS0x30e: v97cV30e = AND v97bV30e, v970V30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x97dS0x30e: v97dV30e(0x1) = CONST 
    0x97fS0x30e: v97fV30e = OR v97dV30e(0x1), v97cV30e
    0x981S0x30e: SSTORE v96aV30e(0x0), v97fV30e

    Begin block 0x982B0x30e
    prev=[0x96aB0x30e, 0x957B0x30e], succ=[0x98eB0x30e, 0x204bB0x30e]
    =================================
    0x983S0x30e: v983V30e(0x1) = CONST 
    0x985S0x30e: v985V30e(0x67) = CONST 
    0x987S0x30e: SSTORE v985V30e(0x67), v983V30e(0x1)
    0x989S0x30e: v989V30e = ISZERO v963V30e
    0x98aS0x30e: v98aV30e(0x204b) = CONST 
    0x98dS0x30e: JUMPI v98aV30e(0x204b), v989V30e

    Begin block 0x98eB0x30e
    prev=[0x982B0x30e], succ=[0x999B0x30e]
    =================================
    0x98eS0x30e: v98eV30e(0x0) = CONST 
    0x991S0x30e: v991V30e = SLOAD v98eV30e(0x0)
    0x992S0x30e: v992V30e(0xff00) = CONST 
    0x995S0x30e: v995V30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v992V30e(0xff00)
    0x996S0x30e: v996V30e = AND v995V30e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v991V30e
    0x998S0x30e: SSTORE v98eV30e(0x0), v996V30e

    Begin block 0x999B0x30e
    prev=[0x98eB0x30e], succ=[0x1c8e]
    =================================
    0x99bS0x30e: JUMP v30f(0x1c8e)

    Begin block 0x1c8e
    prev=[0x204bB0x30e, 0x999B0x30e], succ=[]
    =================================
    0x1c8f: STOP 

    Begin block 0x204bB0x30e
    prev=[0x982B0x30e], succ=[0x1c8e]
    =================================
    0x204dS0x30e: JUMP v30f(0x1c8e)

    Begin block 0x914B0x30e
    prev=[0x90eB0x30e], succ=[0x91cB0x30e]
    =================================
    0x915S0x30e: v915V30e(0x0) = CONST 
    0x917S0x30e: v917V30e = SLOAD v915V30e(0x0)
    0x918S0x30e: v918V30e(0xff) = CONST 
    0x91aS0x30e: v91aV30e = AND v918V30e(0xff), v917V30e
    0x91bS0x30e: v91bV30e = ISZERO v91aV30e

    Begin block 0x906B0x30e
    prev=[0x8f5B0x30e], succ=[0x1189B0x906B0x30e]
    =================================
    0x907S0x30e: v907V30e(0x90e) = CONST 
    0x90aS0x30e: v90aV30e(0x1189) = CONST 
    0x90dS0x30e: JUMP v90aV30e(0x1189)

    Begin block 0x1189B0x906B0x30e
    prev=[0x906B0x30e], succ=[0x90eB0x30e]
    =================================
    0x118aS0x906S0x30e: v118aV906V30e = ADDRESS 
    0x118bS0x906S0x30e: v118bV906V30e = EXTCODESIZE v118aV906V30e
    0x118cS0x906S0x30e: v118cV906V30e = ISZERO v118bV906V30e
    0x118eS0x906S0x30e: JUMP v907V30e(0x90e)

}

function withdrawAll()() public {
    Begin block 0x316
    prev=[], succ=[0x99cB0x316]
    =================================
    0x317: v317(0x1caf) = CONST 
    0x31a: v31a(0x99c) = CONST 
    0x31d: JUMP v31a(0x99c), v317(0x1caf)

    Begin block 0x99cB0x316
    prev=[0x316], succ=[0x206dB0x316]
    =================================
    0x99dS0x316: v99dV316 = CALLER 
    0x99eS0x316: v99eV316(0x0) = CONST 
    0x9a2S0x316: MSTORE v99eV316(0x0), v99dV316
    0x9a3S0x316: v9a3V316(0xa4) = CONST 
    0x9a5S0x316: v9a5V316(0x20) = CONST 
    0x9a7S0x316: MSTORE v9a5V316(0x20), v9a3V316(0xa4)
    0x9a8S0x316: v9a8V316(0x40) = CONST 
    0x9abS0x316: v9abV316 = SHA3 v99eV316(0x0), v9a8V316(0x40)
    0x9acS0x316: v9acV316 = SLOAD v9abV316
    0x9adS0x316: v9adV316(0x206d) = CONST 
    0x9b1S0x316: v9b1V316(0x118f) = CONST 
    0x9b4S0x316: CALLPRIVATE v9b1V316(0x118f), v9acV316, v9adV316(0x206d)

    Begin block 0x206dB0x316
    prev=[0x99cB0x316], succ=[0x1caf]
    =================================
    0x206eS0x316: JUMP v317(0x1caf)

    Begin block 0x1caf
    prev=[0x206dB0x316], succ=[]
    =================================
    0x1cb0: STOP 

}

function recoverERC20(address,uint256)() public {
    Begin block 0x31e
    prev=[], succ=[0x330, 0x334]
    =================================
    0x31f: v31f(0x1cd0) = CONST 
    0x322: v322(0x4) = CONST 
    0x325: v325 = CALLDATASIZE 
    0x326: v326 = SUB v325, v322(0x4)
    0x327: v327(0x40) = CONST 
    0x32a: v32a = LT v326, v327(0x40)
    0x32b: v32b = ISZERO v32a
    0x32c: v32c(0x334) = CONST 
    0x32f: JUMPI v32c(0x334), v32b

    Begin block 0x330
    prev=[0x31e], succ=[]
    =================================
    0x330: v330(0x0) = CONST 
    0x333: REVERT v330(0x0), v330(0x0)

    Begin block 0x334
    prev=[0x31e], succ=[0x9b7]
    =================================
    0x336: v336(0x1) = CONST 
    0x338: v338(0x1) = CONST 
    0x33a: v33a(0xa0) = CONST 
    0x33c: v33c(0x10000000000000000000000000000000000000000) = SHL v33a(0xa0), v338(0x1)
    0x33d: v33d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v33c(0x10000000000000000000000000000000000000000), v336(0x1)
    0x33f: v33f = CALLDATALOAD v322(0x4)
    0x340: v340 = AND v33f, v33d(0xffffffffffffffffffffffffffffffffffffffff)
    0x342: v342(0x20) = CONST 
    0x344: v344(0x24) = ADD v342(0x20), v322(0x4)
    0x345: v345 = CALLDATALOAD v344(0x24)
    0x346: v346(0x9b7) = CONST 
    0x349: JUMP v346(0x9b7)

    Begin block 0x9b7
    prev=[0x334], succ=[0xad6B0x9b7]
    =================================
    0x9b8: v9b8(0x9bf) = CONST 
    0x9bb: v9bb(0xad6) = CONST 
    0x9be: JUMP v9bb(0xad6)

    Begin block 0xad6B0x9b7
    prev=[0x9b7], succ=[0x12caB0x9b7]
    =================================
    0xad7S0x9b7: vad7V9b7(0x33) = CONST 
    0xad9S0x9b7: vad9V9b7 = SLOAD vad7V9b7(0x33)
    0xadaS0x9b7: vadaV9b7(0x0) = CONST 
    0xaddS0x9b7: vaddV9b7(0x1) = CONST 
    0xadfS0x9b7: vadfV9b7(0x1) = CONST 
    0xae1S0x9b7: vae1V9b7(0xa0) = CONST 
    0xae3S0x9b7: vae3V9b7(0x10000000000000000000000000000000000000000) = SHL vae1V9b7(0xa0), vadfV9b7(0x1)
    0xae4S0x9b7: vae4V9b7(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V9b7(0x10000000000000000000000000000000000000000), vaddV9b7(0x1)
    0xae5S0x9b7: vae5V9b7 = AND vae4V9b7(0xffffffffffffffffffffffffffffffffffffffff), vad9V9b7
    0xae6S0x9b7: vae6V9b7(0xaed) = CONST 
    0xae9S0x9b7: vae9V9b7(0x12ca) = CONST 
    0xaecS0x9b7: JUMP vae9V9b7(0x12ca)

    Begin block 0x12caB0x9b7
    prev=[0xad6B0x9b7], succ=[0xaedB0x9b7]
    =================================
    0x12cbS0x9b7: v12cbV9b7 = CALLER 
    0x12cdS0x9b7: JUMP vae6V9b7(0xaed)

    Begin block 0xaedB0x9b7
    prev=[0x12caB0x9b7], succ=[0x9bf]
    =================================
    0xaeeS0x9b7: vaeeV9b7(0x1) = CONST 
    0xaf0S0x9b7: vaf0V9b7(0x1) = CONST 
    0xaf2S0x9b7: vaf2V9b7(0xa0) = CONST 
    0xaf4S0x9b7: vaf4V9b7(0x10000000000000000000000000000000000000000) = SHL vaf2V9b7(0xa0), vaf0V9b7(0x1)
    0xaf5S0x9b7: vaf5V9b7(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf4V9b7(0x10000000000000000000000000000000000000000), vaeeV9b7(0x1)
    0xaf6S0x9b7: vaf6V9b7 = AND vaf5V9b7(0xffffffffffffffffffffffffffffffffffffffff), v12cbV9b7
    0xaf7S0x9b7: vaf7V9b7 = EQ vaf6V9b7, vae5V9b7
    0xafbS0x9b7: JUMP v9b8(0x9bf)

    Begin block 0x9bf
    prev=[0xaedB0x9b7], succ=[0x9c4, 0x9fe]
    =================================
    0x9c0: v9c0(0x9fe) = CONST 
    0x9c3: JUMPI v9c0(0x9fe), vaf7V9b7

    Begin block 0x9c4
    prev=[0x9bf], succ=[]
    =================================
    0x9c4: v9c4(0x40) = CONST 
    0x9c7: v9c7 = MLOAD v9c4(0x40)
    0x9c8: v9c8(0x461bcd) = CONST 
    0x9cc: v9cc(0xe5) = CONST 
    0x9ce: v9ce(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v9cc(0xe5), v9c8(0x461bcd)
    0x9d0: MSTORE v9c7, v9ce(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x9d1: v9d1(0x20) = CONST 
    0x9d3: v9d3(0x4) = CONST 
    0x9d6: v9d6 = ADD v9c7, v9d3(0x4)
    0x9d9: MSTORE v9d6, v9d1(0x20)
    0x9da: v9da(0x24) = CONST 
    0x9dd: v9dd = ADD v9c7, v9da(0x24)
    0x9de: MSTORE v9dd, v9d1(0x20)
    0x9df: v9df(0x0) = CONST 
    0x9e2: v9e2 = MLOAD v9df(0x0)
    0x9e3: v9e3(0x20) = CONST 
    0x9e5: v9e5(0x180d) = CONST 
    0x9ed: MSTORE v9df(0x0), v9e2
    0x9ee: v9ee(0x44) = CONST 
    0x9f1: v9f1 = ADD v9c7, v9ee(0x44)
    0x9f2: MSTORE v9f1, v23b6(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x9f4: v9f4 = MLOAD v9c4(0x40)
    0x9f8: v9f8(0x0) = SUB v9c7, v9f4
    0x9f9: v9f9(0x64) = CONST 
    0x9fb: v9fb(0x64) = ADD v9f9(0x64), v9f8(0x0)
    0x9fd: REVERT v9f4, v9fb(0x64)
    0x23b6: v23b6(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x9fe
    prev=[0x9bf], succ=[0xa15, 0xa4b]
    =================================
    0x9ff: v9ff(0x9b) = CONST 
    0xa01: va01 = SLOAD v9ff(0x9b)
    0xa02: va02(0x1) = CONST 
    0xa04: va04(0x1) = CONST 
    0xa06: va06(0xa0) = CONST 
    0xa08: va08(0x10000000000000000000000000000000000000000) = SHL va06(0xa0), va04(0x1)
    0xa09: va09(0xffffffffffffffffffffffffffffffffffffffff) = SUB va08(0x10000000000000000000000000000000000000000), va02(0x1)
    0xa0c: va0c = AND va09(0xffffffffffffffffffffffffffffffffffffffff), v340
    0xa0e: va0e = AND va01, va09(0xffffffffffffffffffffffffffffffffffffffff)
    0xa0f: va0f = EQ va0e, va0c
    0xa10: va10 = ISZERO va0f
    0xa11: va11(0xa4b) = CONST 
    0xa14: JUMPI va11(0xa4b), va10

    Begin block 0xa15
    prev=[0x9fe], succ=[]
    =================================
    0xa15: va15(0x40) = CONST 
    0xa17: va17 = MLOAD va15(0x40)
    0xa18: va18(0x461bcd) = CONST 
    0xa1c: va1c(0xe5) = CONST 
    0xa1e: va1e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL va1c(0xe5), va18(0x461bcd)
    0xa20: MSTORE va17, va1e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xa21: va21(0x4) = CONST 
    0xa23: va23 = ADD va21(0x4), va17
    0xa26: va26(0x20) = CONST 
    0xa28: va28 = ADD va26(0x20), va23
    0xa2b: va2b(0x20) = SUB va28, va23
    0xa2d: MSTORE va23, va2b(0x20)
    0xa2e: va2e(0x21) = CONST 
    0xa31: MSTORE va28, va2e(0x21)
    0xa32: va32(0x20) = CONST 
    0xa34: va34 = ADD va32(0x20), va28
    0xa36: va36(0x18af) = CONST 
    0xa39: va39(0x21) = CONST 
    0xa3c: CODECOPY va34, va36(0x18af), va39(0x21)
    0xa3d: va3d(0x40) = CONST 
    0xa3f: va3f = ADD va3d(0x40), va34
    0xa43: va43(0x40) = CONST 
    0xa45: va45 = MLOAD va43(0x40)
    0xa48: va48(0x84) = SUB va3f, va45
    0xa4a: REVERT va45, va48(0x84)

    Begin block 0xa4b
    prev=[0x9fe], succ=[0xac7B0xa4b]
    =================================
    0xa4c: va4c(0xa6d) = CONST 
    0xa4f: va4f(0xa56) = CONST 
    0xa52: va52(0xac7) = CONST 
    0xa55: JUMP va52(0xac7)

    Begin block 0xac7B0xa4b
    prev=[0xa4b], succ=[0xa56]
    =================================
    0xac8S0xa4b: vac8Va4b(0x33) = CONST 
    0xacaS0xa4b: vacaVa4b = SLOAD vac8Va4b(0x33)
    0xacbS0xa4b: vacbVa4b(0x1) = CONST 
    0xacdS0xa4b: vacdVa4b(0x1) = CONST 
    0xacfS0xa4b: vacfVa4b(0xa0) = CONST 
    0xad1S0xa4b: vad1Va4b(0x10000000000000000000000000000000000000000) = SHL vacfVa4b(0xa0), vacdVa4b(0x1)
    0xad2S0xa4b: vad2Va4b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vad1Va4b(0x10000000000000000000000000000000000000000), vacbVa4b(0x1)
    0xad3S0xa4b: vad3Va4b = AND vad2Va4b(0xffffffffffffffffffffffffffffffffffffffff), vacaVa4b
    0xad5S0xa4b: JUMP va4f(0xa56)

    Begin block 0xa56
    prev=[0xac7B0xa4b], succ=[0xa6d]
    =================================
    0xa57: va57(0x1) = CONST 
    0xa59: va59(0x1) = CONST 
    0xa5b: va5b(0xa0) = CONST 
    0xa5d: va5d(0x10000000000000000000000000000000000000000) = SHL va5b(0xa0), va59(0x1)
    0xa5e: va5e(0xffffffffffffffffffffffffffffffffffffffff) = SUB va5d(0x10000000000000000000000000000000000000000), va57(0x1)
    0xa60: va60 = AND v340, va5e(0xffffffffffffffffffffffffffffffffffffffff)
    0xa63: va63(0xffffffff) = CONST 
    0xa68: va68(0x1273) = CONST 
    0xa6b: va6b(0x1273) = AND va68(0x1273), va63(0xffffffff)
    0xa6c: CALLPRIVATE va6b(0x1273), v345, vad3Va4b, va60, va4c(0xa6d)

    Begin block 0xa6d
    prev=[0xa56], succ=[0x1cd0]
    =================================
    0xa6e: va6e(0x40) = CONST 
    0xa71: va71 = MLOAD va6e(0x40)
    0xa72: va72(0x1) = CONST 
    0xa74: va74(0x1) = CONST 
    0xa76: va76(0xa0) = CONST 
    0xa78: va78(0x10000000000000000000000000000000000000000) = SHL va76(0xa0), va74(0x1)
    0xa79: va79(0xffffffffffffffffffffffffffffffffffffffff) = SUB va78(0x10000000000000000000000000000000000000000), va72(0x1)
    0xa7b: va7b = AND v340, va79(0xffffffffffffffffffffffffffffffffffffffff)
    0xa7d: MSTORE va71, va7b
    0xa7e: va7e(0x20) = CONST 
    0xa81: va81 = ADD va71, va7e(0x20)
    0xa84: MSTORE va81, v345
    0xa86: va86 = MLOAD va6e(0x40)
    0xa87: va87(0x8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28) = CONST 
    0xaac: vaac(0x0) = SUB va71, va86
    0xaaf: vaaf(0x40) = ADD va6e(0x40), vaac(0x0)
    0xab1: LOG1 va86, vaaf(0x40), va87(0x8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28)
    0xab4: JUMP v31f(0x1cd0)

    Begin block 0x1cd0
    prev=[0xa6d], succ=[]
    =================================
    0x1cd1: STOP 

}

function userRewardPerTokenPaid(address)() public {
    Begin block 0x34a
    prev=[], succ=[0x35c, 0x360]
    =================================
    0x34b: v34b(0x1cf1) = CONST 
    0x34e: v34e(0x4) = CONST 
    0x351: v351 = CALLDATASIZE 
    0x352: v352 = SUB v351, v34e(0x4)
    0x353: v353(0x20) = CONST 
    0x356: v356 = LT v352, v353(0x20)
    0x357: v357 = ISZERO v356
    0x358: v358(0x360) = CONST 
    0x35b: JUMPI v358(0x360), v357

    Begin block 0x35c
    prev=[0x34a], succ=[]
    =================================
    0x35c: v35c(0x0) = CONST 
    0x35f: REVERT v35c(0x0), v35c(0x0)

    Begin block 0x360
    prev=[0x34a], succ=[0xab5]
    =================================
    0x362: v362 = CALLDATALOAD v34e(0x4)
    0x363: v363(0x1) = CONST 
    0x365: v365(0x1) = CONST 
    0x367: v367(0xa0) = CONST 
    0x369: v369(0x10000000000000000000000000000000000000000) = SHL v367(0xa0), v365(0x1)
    0x36a: v36a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v369(0x10000000000000000000000000000000000000000), v363(0x1)
    0x36b: v36b = AND v36a(0xffffffffffffffffffffffffffffffffffffffff), v362
    0x36c: v36c(0xab5) = CONST 
    0x36f: JUMP v36c(0xab5)

    Begin block 0xab5
    prev=[0x360], succ=[0x1cf1]
    =================================
    0xab6: vab6(0xa1) = CONST 
    0xab8: vab8(0x20) = CONST 
    0xaba: MSTORE vab8(0x20), vab6(0xa1)
    0xabb: vabb(0x0) = CONST 
    0xabf: MSTORE vabb(0x0), v36b
    0xac0: vac0(0x40) = CONST 
    0xac3: vac3 = SHA3 vabb(0x0), vac0(0x40)
    0xac4: vac4 = SLOAD vac3
    0xac6: JUMP v34b(0x1cf1)

    Begin block 0x1cf1
    prev=[0xab5], succ=[]
    =================================
    0x1cf2: v1cf2(0x40) = CONST 
    0x1cf5: v1cf5 = MLOAD v1cf2(0x40)
    0x1cf8: MSTORE v1cf5, vac4
    0x1cf9: v1cf9 = MLOAD v1cf2(0x40)
    0x1cfd: v1cfd(0x0) = SUB v1cf5, v1cf9
    0x1cfe: v1cfe(0x20) = CONST 
    0x1d00: v1d00(0x20) = ADD v1cfe(0x20), v1cfd(0x0)
    0x1d02: RETURN v1cf9, v1d00(0x20)

}

function owner()() public {
    Begin block 0x370
    prev=[], succ=[0xac7B0x370]
    =================================
    0x371: v371(0x1d22) = CONST 
    0x374: v374(0xac7) = CONST 
    0x377: JUMP v374(0xac7)

    Begin block 0xac7B0x370
    prev=[0x370], succ=[0x1d22]
    =================================
    0xac8S0x370: vac8V370(0x33) = CONST 
    0xacaS0x370: vacaV370 = SLOAD vac8V370(0x33)
    0xacbS0x370: vacbV370(0x1) = CONST 
    0xacdS0x370: vacdV370(0x1) = CONST 
    0xacfS0x370: vacfV370(0xa0) = CONST 
    0xad1S0x370: vad1V370(0x10000000000000000000000000000000000000000) = SHL vacfV370(0xa0), vacdV370(0x1)
    0xad2S0x370: vad2V370(0xffffffffffffffffffffffffffffffffffffffff) = SUB vad1V370(0x10000000000000000000000000000000000000000), vacbV370(0x1)
    0xad3S0x370: vad3V370 = AND vad2V370(0xffffffffffffffffffffffffffffffffffffffff), vacaV370
    0xad5S0x370: JUMP v371(0x1d22)

    Begin block 0x1d22
    prev=[0xac7B0x370], succ=[]
    =================================
    0x1d23: v1d23(0x40) = CONST 
    0x1d26: v1d26 = MLOAD v1d23(0x40)
    0x1d27: v1d27(0x1) = CONST 
    0x1d29: v1d29(0x1) = CONST 
    0x1d2b: v1d2b(0xa0) = CONST 
    0x1d2d: v1d2d(0x10000000000000000000000000000000000000000) = SHL v1d2b(0xa0), v1d29(0x1)
    0x1d2e: v1d2e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1d2d(0x10000000000000000000000000000000000000000), v1d27(0x1)
    0x1d31: v1d31 = AND vad3V370, v1d2e(0xffffffffffffffffffffffffffffffffffffffff)
    0x1d33: MSTORE v1d26, v1d31
    0x1d34: v1d34 = MLOAD v1d23(0x40)
    0x1d38: v1d38(0x0) = SUB v1d26, v1d34
    0x1d39: v1d39(0x20) = CONST 
    0x1d3b: v1d3b(0x20) = ADD v1d39(0x20), v1d38(0x0)
    0x1d3d: RETURN v1d34, v1d3b(0x20)

}

function isOwner()() public {
    Begin block 0x378
    prev=[], succ=[0xad6B0x378]
    =================================
    0x379: v379(0x380) = CONST 
    0x37c: v37c(0xad6) = CONST 
    0x37f: JUMP v37c(0xad6)

    Begin block 0xad6B0x378
    prev=[0x378], succ=[0x12caB0x378]
    =================================
    0xad7S0x378: vad7V378(0x33) = CONST 
    0xad9S0x378: vad9V378 = SLOAD vad7V378(0x33)
    0xadaS0x378: vadaV378(0x0) = CONST 
    0xaddS0x378: vaddV378(0x1) = CONST 
    0xadfS0x378: vadfV378(0x1) = CONST 
    0xae1S0x378: vae1V378(0xa0) = CONST 
    0xae3S0x378: vae3V378(0x10000000000000000000000000000000000000000) = SHL vae1V378(0xa0), vadfV378(0x1)
    0xae4S0x378: vae4V378(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3V378(0x10000000000000000000000000000000000000000), vaddV378(0x1)
    0xae5S0x378: vae5V378 = AND vae4V378(0xffffffffffffffffffffffffffffffffffffffff), vad9V378
    0xae6S0x378: vae6V378(0xaed) = CONST 
    0xae9S0x378: vae9V378(0x12ca) = CONST 
    0xaecS0x378: JUMP vae9V378(0x12ca)

    Begin block 0x12caB0x378
    prev=[0xad6B0x378], succ=[0xaedB0x378]
    =================================
    0x12cbS0x378: v12cbV378 = CALLER 
    0x12cdS0x378: JUMP vae6V378(0xaed)

    Begin block 0xaedB0x378
    prev=[0x12caB0x378], succ=[0x380]
    =================================
    0xaeeS0x378: vaeeV378(0x1) = CONST 
    0xaf0S0x378: vaf0V378(0x1) = CONST 
    0xaf2S0x378: vaf2V378(0xa0) = CONST 
    0xaf4S0x378: vaf4V378(0x10000000000000000000000000000000000000000) = SHL vaf2V378(0xa0), vaf0V378(0x1)
    0xaf5S0x378: vaf5V378(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf4V378(0x10000000000000000000000000000000000000000), vaeeV378(0x1)
    0xaf6S0x378: vaf6V378 = AND vaf5V378(0xffffffffffffffffffffffffffffffffffffffff), v12cbV378
    0xaf7S0x378: vaf7V378 = EQ vaf6V378, vae5V378
    0xafbS0x378: JUMP v379(0x380)

    Begin block 0x380
    prev=[0xaedB0x378], succ=[]
    =================================
    0x381: v381(0x40) = CONST 
    0x384: v384 = MLOAD v381(0x40)
    0x386: v386 = ISZERO vaf7V378
    0x387: v387 = ISZERO v386
    0x389: MSTORE v384, v387
    0x38a: v38a = MLOAD v381(0x40)
    0x38e: v38e(0x0) = SUB v384, v38a
    0x38f: v38f(0x20) = CONST 
    0x391: v391(0x20) = ADD v38f(0x20), v38e(0x0)
    0x393: RETURN v38a, v391(0x20)

}

function rewardEscrow()() public {
    Begin block 0x394
    prev=[], succ=[0xafc]
    =================================
    0x395: v395(0x1d5d) = CONST 
    0x398: v398(0xafc) = CONST 
    0x39b: JUMP v398(0xafc)

    Begin block 0xafc
    prev=[0x394], succ=[0x1d5d]
    =================================
    0xafd: vafd(0xa5) = CONST 
    0xaff: vaff = SLOAD vafd(0xa5)
    0xb00: vb00(0x1) = CONST 
    0xb02: vb02(0x1) = CONST 
    0xb04: vb04(0xa0) = CONST 
    0xb06: vb06(0x10000000000000000000000000000000000000000) = SHL vb04(0xa0), vb02(0x1)
    0xb07: vb07(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb06(0x10000000000000000000000000000000000000000), vb00(0x1)
    0xb08: vb08 = AND vb07(0xffffffffffffffffffffffffffffffffffffffff), vaff
    0xb0a: JUMP v395(0x1d5d)

    Begin block 0x1d5d
    prev=[0xafc], succ=[]
    =================================
    0x1d5e: v1d5e(0x40) = CONST 
    0x1d61: v1d61 = MLOAD v1d5e(0x40)
    0x1d62: v1d62(0x1) = CONST 
    0x1d64: v1d64(0x1) = CONST 
    0x1d66: v1d66(0xa0) = CONST 
    0x1d68: v1d68(0x10000000000000000000000000000000000000000) = SHL v1d66(0xa0), v1d64(0x1)
    0x1d69: v1d69(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1d68(0x10000000000000000000000000000000000000000), v1d62(0x1)
    0x1d6c: v1d6c = AND vb08, v1d69(0xffffffffffffffffffffffffffffffffffffffff)
    0x1d6e: MSTORE v1d61, v1d6c
    0x1d6f: v1d6f = MLOAD v1d5e(0x40)
    0x1d73: v1d73(0x0) = SUB v1d61, v1d6f
    0x1d74: v1d74(0x20) = CONST 
    0x1d76: v1d76(0x20) = ADD v1d74(0x20), v1d73(0x0)
    0x1d78: RETURN v1d6f, v1d76(0x20)

}

function stake(uint256)() public {
    Begin block 0x39c
    prev=[], succ=[0x3ae, 0x3b2]
    =================================
    0x39d: v39d(0x1d98) = CONST 
    0x3a0: v3a0(0x4) = CONST 
    0x3a3: v3a3 = CALLDATASIZE 
    0x3a4: v3a4 = SUB v3a3, v3a0(0x4)
    0x3a5: v3a5(0x20) = CONST 
    0x3a8: v3a8 = LT v3a4, v3a5(0x20)
    0x3a9: v3a9 = ISZERO v3a8
    0x3aa: v3aa(0x3b2) = CONST 
    0x3ad: JUMPI v3aa(0x3b2), v3a9

    Begin block 0x3ae
    prev=[0x39c], succ=[]
    =================================
    0x3ae: v3ae(0x0) = CONST 
    0x3b1: REVERT v3ae(0x0), v3ae(0x0)

    Begin block 0x3b2
    prev=[0x39c], succ=[0xb0b]
    =================================
    0x3b4: v3b4 = CALLDATALOAD v3a0(0x4)
    0x3b5: v3b5(0xb0b) = CONST 
    0x3b8: JUMP v3b5(0xb0b)

    Begin block 0xb0b
    prev=[0x3b2], succ=[0xb1f]
    =================================
    0xb0c: vb0c(0x67) = CONST 
    0xb0f: vb0f = SLOAD vb0c(0x67)
    0xb10: vb10(0x1) = CONST 
    0xb12: vb12 = ADD vb10(0x1), vb0f
    0xb16: SSTORE vb0c(0x67), vb12
    0xb17: vb17 = CALLER 
    0xb18: vb18(0xb1f) = CONST 
    0xb1b: vb1b(0xf4f) = CONST 
    0xb1e: vb1e_0, vb1e_1 = CALLPRIVATE vb1b(0xf4f), vb18(0xb1f)

    Begin block 0xb1f
    prev=[0xb0b], succ=[0x8e7B0xb1f]
    =================================
    0xb20: vb20(0xa0) = CONST 
    0xb22: SSTORE vb20(0xa0), vb1e_0
    0xb23: vb23(0xb2a) = CONST 
    0xb26: vb26(0x8e7) = CONST 
    0xb29: JUMP vb26(0x8e7)

    Begin block 0x8e7B0xb1f
    prev=[0xb1f], succ=[0x2027B0xb1f]
    =================================
    0x8e8S0xb1f: v8e8Vb1f(0x0) = CONST 
    0x8eaS0xb1f: v8eaVb1f(0x2027) = CONST 
    0x8edS0xb1f: v8edVb1f = TIMESTAMP 
    0x8eeS0xb1f: v8eeVb1f(0x9c) = CONST 
    0x8f0S0xb1f: v8f0Vb1f = SLOAD v8eeVb1f(0x9c)
    0x8f1S0xb1f: v8f1Vb1f(0x1173) = CONST 
    0x8f4S0xb1f: v8f4_0Vb1f = CALLPRIVATE v8f1Vb1f(0x1173), v8f0Vb1f, v8edVb1f, v8eaVb1f(0x2027)

    Begin block 0x2027B0xb1f
    prev=[0x8e7B0xb1f], succ=[0xb2a]
    =================================
    0x202bS0xb1f: JUMP vb23(0xb2a)

    Begin block 0xb2a
    prev=[0x2027B0xb1f], succ=[0xb3d, 0xb71]
    =================================
    0xb2b: vb2b(0x9f) = CONST 
    0xb2d: SSTORE vb2b(0x9f), v8f4_0Vb1f
    0xb2e: vb2e(0x1) = CONST 
    0xb30: vb30(0x1) = CONST 
    0xb32: vb32(0xa0) = CONST 
    0xb34: vb34(0x10000000000000000000000000000000000000000) = SHL vb32(0xa0), vb30(0x1)
    0xb35: vb35(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb34(0x10000000000000000000000000000000000000000), vb2e(0x1)
    0xb37: vb37 = AND vb1e_1, vb35(0xffffffffffffffffffffffffffffffffffffffff)
    0xb38: vb38 = ISZERO vb37
    0xb39: vb39(0xb71) = CONST 
    0xb3c: JUMPI vb39(0xb71), vb38

    Begin block 0xb3d
    prev=[0xb2a], succ=[0xb45]
    =================================
    0xb3d: vb3d(0xb45) = CONST 
    0xb41: vb41(0x48a) = CONST 
    0xb44: vb44_0 = CALLPRIVATE vb41(0x48a), vb1e_1

    Begin block 0xb45
    prev=[0xb3d], succ=[0xb71]
    =================================
    0xb46: vb46(0x1) = CONST 
    0xb48: vb48(0x1) = CONST 
    0xb4a: vb4a(0xa0) = CONST 
    0xb4c: vb4c(0x10000000000000000000000000000000000000000) = SHL vb4a(0xa0), vb48(0x1)
    0xb4d: vb4d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb4c(0x10000000000000000000000000000000000000000), vb46(0x1)
    0xb4f: vb4f(0xb45) = AND vb3d(0xb45), vb4d(0xffffffffffffffffffffffffffffffffffffffff)
    0xb50: vb50(0x0) = CONST 
    0xb54: MSTORE vb50(0x0), vb4f(0xb45)
    0xb55: vb55(0xa2) = CONST 
    0xb57: vb57(0x20) = CONST 
    0xb5b: MSTORE vb57(0x20), vb55(0xa2)
    0xb5c: vb5c(0x40) = CONST 
    0xb60: vb60 = SHA3 vb50(0x0), vb5c(0x40)
    0xb64: SSTORE vb60, vb44_0
    0xb65: vb65(0xa0) = CONST 
    0xb67: vb67 = SLOAD vb65(0xa0)
    0xb68: vb68(0xa1) = CONST 
    0xb6c: MSTORE vb57(0x20), vb68(0xa1)
    0xb6f: vb6f = SHA3 vb50(0x0), vb5c(0x40)
    0xb70: SSTORE vb6f, vb67

    Begin block 0xb71
    prev=[0xb2a, 0xb45], succ=[0xb7a, 0xbb7]
    =================================
    0xb71_0x2: vb71_2 = PHI vb12, vb17
    0xb72: vb72(0x0) = CONST 
    0xb75: vb75 = GT vb71_2, vb72(0x0)
    0xb76: vb76(0xbb7) = CONST 
    0xb79: JUMPI vb76(0xbb7), vb75

    Begin block 0xb7a
    prev=[0xb71], succ=[]
    =================================
    0xb7a: vb7a(0x40) = CONST 
    0xb7d: vb7d = MLOAD vb7a(0x40)
    0xb7e: vb7e(0x461bcd) = CONST 
    0xb82: vb82(0xe5) = CONST 
    0xb84: vb84(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vb82(0xe5), vb7e(0x461bcd)
    0xb86: MSTORE vb7d, vb84(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xb87: vb87(0x20) = CONST 
    0xb89: vb89(0x4) = CONST 
    0xb8c: vb8c = ADD vb7d, vb89(0x4)
    0xb8d: MSTORE vb8c, vb87(0x20)
    0xb8e: vb8e(0xe) = CONST 
    0xb90: vb90(0x24) = CONST 
    0xb93: vb93 = ADD vb7d, vb90(0x24)
    0xb94: MSTORE vb93, vb8e(0xe)
    0xb95: vb95(0x43616e6e6f74207374616b65203) = CONST 
    0xba4: vba4(0x94) = CONST 
    0xba6: vba6(0x43616e6e6f74207374616b652030000000000000000000000000000000000000) = SHL vba4(0x94), vb95(0x43616e6e6f74207374616b65203)
    0xba7: vba7(0x44) = CONST 
    0xbaa: vbaa = ADD vb7d, vba7(0x44)
    0xbab: MSTORE vbaa, vba6(0x43616e6e6f74207374616b652030000000000000000000000000000000000000)
    0xbad: vbad = MLOAD vb7a(0x40)
    0xbb1: vbb1(0x0) = SUB vb7d, vbad
    0xbb2: vbb2(0x64) = CONST 
    0xbb4: vbb4(0x64) = ADD vbb2(0x64), vbb1(0x0)
    0xbb6: REVERT vbad, vbb4(0x64)

    Begin block 0xbb7
    prev=[0xb71], succ=[0x1119B0xbb7]
    =================================
    0xbb7_0x2: vbb7_2 = PHI vb12, vb17
    0xbb8: vbb8(0xa3) = CONST 
    0xbba: vbba = SLOAD vbb8(0xa3)
    0xbbb: vbbb(0xbca) = CONST 
    0xbc0: vbc0(0xffffffff) = CONST 
    0xbc5: vbc5(0x1119) = CONST 
    0xbc8: vbc8(0x1119) = AND vbc5(0x1119), vbc0(0xffffffff)
    0xbc9: JUMP vbc8(0x1119)

    Begin block 0x1119B0xbb7
    prev=[0xbb7], succ=[0x1127B0xbb7, 0x224dB0xbb7]
    =================================
    0x111aS0xbb7: v111aVbb7(0x0) = CONST 
    0x111eS0xbb7: v111eVbb7 = ADD vbb7_2, vbba
    0x1121S0xbb7: v1121Vbb7 = LT v111eVbb7, vbba
    0x1122S0xbb7: v1122Vbb7 = ISZERO v1121Vbb7
    0x1123S0xbb7: v1123Vbb7(0x224d) = CONST 
    0x1126S0xbb7: JUMPI v1123Vbb7(0x224d), v1122Vbb7

    Begin block 0x1127B0xbb7
    prev=[0x1119B0xbb7], succ=[]
    =================================
    0x1127S0xbb7: v1127Vbb7(0x40) = CONST 
    0x112aS0xbb7: v112aVbb7 = MLOAD v1127Vbb7(0x40)
    0x112bS0xbb7: v112bVbb7(0x461bcd) = CONST 
    0x112fS0xbb7: v112fVbb7(0xe5) = CONST 
    0x1131S0xbb7: v1131Vbb7(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fVbb7(0xe5), v112bVbb7(0x461bcd)
    0x1133S0xbb7: MSTORE v112aVbb7, v1131Vbb7(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0xbb7: v1134Vbb7(0x20) = CONST 
    0x1136S0xbb7: v1136Vbb7(0x4) = CONST 
    0x1139S0xbb7: v1139Vbb7 = ADD v112aVbb7, v1136Vbb7(0x4)
    0x113aS0xbb7: MSTORE v1139Vbb7, v1134Vbb7(0x20)
    0x113bS0xbb7: v113bVbb7(0x1b) = CONST 
    0x113dS0xbb7: v113dVbb7(0x24) = CONST 
    0x1140S0xbb7: v1140Vbb7 = ADD v112aVbb7, v113dVbb7(0x24)
    0x1141S0xbb7: MSTORE v1140Vbb7, v113bVbb7(0x1b)
    0x1142S0xbb7: v1142Vbb7(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0xbb7: v1163Vbb7(0x44) = CONST 
    0x1166S0xbb7: v1166Vbb7 = ADD v112aVbb7, v1163Vbb7(0x44)
    0x1167S0xbb7: MSTORE v1166Vbb7, v1142Vbb7(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0xbb7: v1169Vbb7 = MLOAD v1127Vbb7(0x40)
    0x116dS0xbb7: v116dVbb7(0x0) = SUB v112aVbb7, v1169Vbb7
    0x116eS0xbb7: v116eVbb7(0x64) = CONST 
    0x1170S0xbb7: v1170Vbb7(0x64) = ADD v116eVbb7(0x64), v116dVbb7(0x0)
    0x1172S0xbb7: REVERT v1169Vbb7, v1170Vbb7(0x64)

    Begin block 0x224dB0xbb7
    prev=[0x1119B0xbb7], succ=[0xbca]
    =================================
    0x2253S0xbb7: JUMP vbbb(0xbca)

    Begin block 0xbca
    prev=[0x224dB0xbb7], succ=[0x1119B0xbca]
    =================================
    0xbca_0x3: vbca_3 = PHI vb12, vb17
    0xbcb: vbcb(0xa3) = CONST 
    0xbcd: SSTORE vbcb(0xa3), v111eVbb7
    0xbce: vbce = CALLER 
    0xbcf: vbcf(0x0) = CONST 
    0xbd3: MSTORE vbcf(0x0), vbce
    0xbd4: vbd4(0xa4) = CONST 
    0xbd6: vbd6(0x20) = CONST 
    0xbd8: MSTORE vbd6(0x20), vbd4(0xa4)
    0xbd9: vbd9(0x40) = CONST 
    0xbdc: vbdc = SHA3 vbcf(0x0), vbd9(0x40)
    0xbdd: vbdd = SLOAD vbdc
    0xbde: vbde(0xbed) = CONST 
    0xbe3: vbe3(0xffffffff) = CONST 
    0xbe8: vbe8(0x1119) = CONST 
    0xbeb: vbeb(0x1119) = AND vbe8(0x1119), vbe3(0xffffffff)
    0xbec: JUMP vbeb(0x1119)

    Begin block 0x1119B0xbca
    prev=[0xbca], succ=[0x1127B0xbca, 0x224dB0xbca]
    =================================
    0x111aS0xbca: v111aVbca(0x0) = CONST 
    0x111eS0xbca: v111eVbca = ADD vbca_3, vbdd
    0x1121S0xbca: v1121Vbca = LT v111eVbca, vbdd
    0x1122S0xbca: v1122Vbca = ISZERO v1121Vbca
    0x1123S0xbca: v1123Vbca(0x224d) = CONST 
    0x1126S0xbca: JUMPI v1123Vbca(0x224d), v1122Vbca

    Begin block 0x1127B0xbca
    prev=[0x1119B0xbca], succ=[]
    =================================
    0x1127S0xbca: v1127Vbca(0x40) = CONST 
    0x112aS0xbca: v112aVbca = MLOAD v1127Vbca(0x40)
    0x112bS0xbca: v112bVbca(0x461bcd) = CONST 
    0x112fS0xbca: v112fVbca(0xe5) = CONST 
    0x1131S0xbca: v1131Vbca(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fVbca(0xe5), v112bVbca(0x461bcd)
    0x1133S0xbca: MSTORE v112aVbca, v1131Vbca(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0xbca: v1134Vbca(0x20) = CONST 
    0x1136S0xbca: v1136Vbca(0x4) = CONST 
    0x1139S0xbca: v1139Vbca = ADD v112aVbca, v1136Vbca(0x4)
    0x113aS0xbca: MSTORE v1139Vbca, v1134Vbca(0x20)
    0x113bS0xbca: v113bVbca(0x1b) = CONST 
    0x113dS0xbca: v113dVbca(0x24) = CONST 
    0x1140S0xbca: v1140Vbca = ADD v112aVbca, v113dVbca(0x24)
    0x1141S0xbca: MSTORE v1140Vbca, v113bVbca(0x1b)
    0x1142S0xbca: v1142Vbca(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0xbca: v1163Vbca(0x44) = CONST 
    0x1166S0xbca: v1166Vbca = ADD v112aVbca, v1163Vbca(0x44)
    0x1167S0xbca: MSTORE v1166Vbca, v1142Vbca(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0xbca: v1169Vbca = MLOAD v1127Vbca(0x40)
    0x116dS0xbca: v116dVbca(0x0) = SUB v112aVbca, v1169Vbca
    0x116eS0xbca: v116eVbca(0x64) = CONST 
    0x1170S0xbca: v1170Vbca(0x64) = ADD v116eVbca(0x64), v116dVbca(0x0)
    0x1172S0xbca: REVERT v1169Vbca, v1170Vbca(0x64)

    Begin block 0x224dB0xbca
    prev=[0x1119B0xbca], succ=[0xbed]
    =================================
    0x2253S0xbca: JUMP vbde(0xbed)

    Begin block 0xbed
    prev=[0x224dB0xbca], succ=[0x12ceB0xbed]
    =================================
    0xbed_0x3: vbed_3 = PHI vb12, vb17
    0xbee: vbee = CALLER 
    0xbef: vbef(0x0) = CONST 
    0xbf3: MSTORE vbef(0x0), vbee
    0xbf4: vbf4(0xa4) = CONST 
    0xbf6: vbf6(0x20) = CONST 
    0xbf8: MSTORE vbf6(0x20), vbf4(0xa4)
    0xbf9: vbf9(0x40) = CONST 
    0xbfc: vbfc = SHA3 vbef(0x0), vbf9(0x40)
    0xc00: SSTORE vbfc, v111eVbca
    0xc01: vc01(0x9b) = CONST 
    0xc03: vc03 = SLOAD vc01(0x9b)
    0xc04: vc04(0xc1a) = CONST 
    0xc08: vc08(0x1) = CONST 
    0xc0a: vc0a(0x1) = CONST 
    0xc0c: vc0c(0xa0) = CONST 
    0xc0e: vc0e(0x10000000000000000000000000000000000000000) = SHL vc0c(0xa0), vc0a(0x1)
    0xc0f: vc0f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc0e(0x10000000000000000000000000000000000000000), vc08(0x1)
    0xc12: vc12 = AND vc03, vc0f(0xffffffffffffffffffffffffffffffffffffffff)
    0xc14: vc14 = ADDRESS 
    0xc16: vc16(0x12ce) = CONST 
    0xc19: JUMP vc16(0x12ce), vbed_3, vc14, vbee, vc12, vc04(0xc1a)

    Begin block 0x12ceB0xbed
    prev=[0xbed], succ=[0x1579B0x12ceB0xbed]
    =================================
    0x12cfS0xbed: v12cfVbed(0x40) = CONST 
    0x12d2S0xbed: v12d2Vbed = MLOAD v12cfVbed(0x40)
    0x12d3S0xbed: v12d3Vbed(0x1) = CONST 
    0x12d5S0xbed: v12d5Vbed(0x1) = CONST 
    0x12d7S0xbed: v12d7Vbed(0xa0) = CONST 
    0x12d9S0xbed: v12d9Vbed(0x10000000000000000000000000000000000000000) = SHL v12d7Vbed(0xa0), v12d5Vbed(0x1)
    0x12daS0xbed: v12daVbed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v12d9Vbed(0x10000000000000000000000000000000000000000), v12d3Vbed(0x1)
    0x12ddS0xbed: v12ddVbed = AND v12daVbed(0xffffffffffffffffffffffffffffffffffffffff), vbee
    0x12deS0xbed: v12deVbed(0x24) = CONST 
    0x12e1S0xbed: v12e1Vbed = ADD v12d2Vbed, v12deVbed(0x24)
    0x12e2S0xbed: MSTORE v12e1Vbed, v12ddVbed
    0x12e4S0xbed: v12e4Vbed = AND vc14, v12daVbed(0xffffffffffffffffffffffffffffffffffffffff)
    0x12e5S0xbed: v12e5Vbed(0x44) = CONST 
    0x12e8S0xbed: v12e8Vbed = ADD v12d2Vbed, v12e5Vbed(0x44)
    0x12e9S0xbed: MSTORE v12e8Vbed, v12e4Vbed
    0x12eaS0xbed: v12eaVbed(0x64) = CONST 
    0x12eeS0xbed: v12eeVbed = ADD v12d2Vbed, v12eaVbed(0x64)
    0x12f1S0xbed: MSTORE v12eeVbed, vbed_3
    0x12f3S0xbed: v12f3Vbed = MLOAD v12cfVbed(0x40)
    0x12f6S0xbed: v12f6Vbed(0x0) = SUB v12d2Vbed, v12f3Vbed
    0x12f9S0xbed: v12f9Vbed(0x64) = ADD v12eaVbed(0x64), v12f6Vbed(0x0)
    0x12fbS0xbed: MSTORE v12f3Vbed, v12f9Vbed(0x64)
    0x12fcS0xbed: v12fcVbed(0x84) = CONST 
    0x1300S0xbed: v1300Vbed = ADD v12d2Vbed, v12fcVbed(0x84)
    0x1303S0xbed: MSTORE v12cfVbed(0x40), v1300Vbed
    0x1304S0xbed: v1304Vbed(0x20) = CONST 
    0x1307S0xbed: v1307Vbed = ADD v12f3Vbed, v1304Vbed(0x20)
    0x1309S0xbed: v1309Vbed = MLOAD v1307Vbed
    0x130aS0xbed: v130aVbed(0x1) = CONST 
    0x130cS0xbed: v130cVbed(0x1) = CONST 
    0x130eS0xbed: v130eVbed(0xe0) = CONST 
    0x1310S0xbed: v1310Vbed(0x100000000000000000000000000000000000000000000000000000000) = SHL v130eVbed(0xe0), v130cVbed(0x1)
    0x1311S0xbed: v1311Vbed(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v1310Vbed(0x100000000000000000000000000000000000000000000000000000000), v130aVbed(0x1)
    0x1312S0xbed: v1312Vbed = AND v1311Vbed(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v1309Vbed
    0x1313S0xbed: v1313Vbed(0x23b872dd) = CONST 
    0x1318S0xbed: v1318Vbed(0xe0) = CONST 
    0x131aS0xbed: v131aVbed(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v1318Vbed(0xe0), v1313Vbed(0x23b872dd)
    0x131bS0xbed: v131bVbed = OR v131aVbed(0x23b872dd00000000000000000000000000000000000000000000000000000000), v1312Vbed
    0x131dS0xbed: MSTORE v1307Vbed, v131bVbed
    0x131eS0xbed: v131eVbed(0x2299) = CONST 
    0x1324S0xbed: v1324Vbed(0x1579) = CONST 
    0x1327S0xbed: JUMP v1324Vbed(0x1579), v12f3Vbed, vc12, v131eVbed(0x2299)

    Begin block 0x1579B0x12ceB0xbed
    prev=[0x12ceB0xbed], succ=[0x1731B0x1579B0x12ceB0xbed]
    =================================
    0x157aS0x12ceS0xbed: v157aV12ceVbed(0x158b) = CONST 
    0x157eS0x12ceS0xbed: v157eV12ceVbed(0x1) = CONST 
    0x1580S0x12ceS0xbed: v1580V12ceVbed(0x1) = CONST 
    0x1582S0x12ceS0xbed: v1582V12ceVbed(0xa0) = CONST 
    0x1584S0x12ceS0xbed: v1584V12ceVbed(0x10000000000000000000000000000000000000000) = SHL v1582V12ceVbed(0xa0), v1580V12ceVbed(0x1)
    0x1585S0x12ceS0xbed: v1585V12ceVbed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1584V12ceVbed(0x10000000000000000000000000000000000000000), v157eV12ceVbed(0x1)
    0x1586S0x12ceS0xbed: v1586V12ceVbed = AND v1585V12ceVbed(0xffffffffffffffffffffffffffffffffffffffff), vc12
    0x1587S0x12ceS0xbed: v1587V12ceVbed(0x1731) = CONST 
    0x158aS0x12ceS0xbed: JUMP v1587V12ceVbed(0x1731)

    Begin block 0x1731B0x1579B0x12ceB0xbed
    prev=[0x1579B0x12ceB0xbed], succ=[0x1765B0x1579B0x12ceB0xbed, 0x1761B0x1579B0x12ceB0xbed]
    =================================
    0x1732S0x1579S0x12ceS0xbed: v1732V1579V12ceVbed(0x0) = CONST 
    0x1735S0x1579S0x12ceS0xbed: v1735V1579V12ceVbed = EXTCODEHASH v1586V12ceVbed
    0x1736S0x1579S0x12ceS0xbed: v1736V1579V12ceVbed(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) = CONST 
    0x1759S0x1579S0x12ceS0xbed: v1759V1579V12ceVbed = EQ v1736V1579V12ceVbed(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470), v1735V1579V12ceVbed
    0x175bS0x1579S0x12ceS0xbed: v175bV1579V12ceVbed = ISZERO v1759V1579V12ceVbed
    0x175dS0x1579S0x12ceS0xbed: v175dV1579V12ceVbed(0x1765) = CONST 
    0x1760S0x1579S0x12ceS0xbed: JUMPI v175dV1579V12ceVbed(0x1765), v1759V1579V12ceVbed

    Begin block 0x1765B0x1579B0x12ceB0xbed
    prev=[0x1731B0x1579B0x12ceB0xbed, 0x1761B0x1579B0x12ceB0xbed], succ=[0x158bB0x12ceB0xbed]
    =================================
    0x1765_0x0S0x1579S0x12ceS0xbed: v1765_0V1579V12ceVbed = PHI v175bV1579V12ceVbed, v1764V1579V12ceVbed
    0x176cS0x1579S0x12ceS0xbed: JUMP v157aV12ceVbed(0x158b)

    Begin block 0x158bB0x12ceB0xbed
    prev=[0x1765B0x1579B0x12ceB0xbed], succ=[0x1590B0x12ceB0xbed, 0x15dcB0x12ceB0xbed]
    =================================
    0x158cS0x12ceS0xbed: v158cV12ceVbed(0x15dc) = CONST 
    0x158fS0x12ceS0xbed: JUMPI v158cV12ceVbed(0x15dc), v1765_0V1579V12ceVbed

    Begin block 0x1590B0x12ceB0xbed
    prev=[0x158bB0x12ceB0xbed], succ=[]
    =================================
    0x1590S0x12ceS0xbed: v1590V12ceVbed(0x40) = CONST 
    0x1593S0x12ceS0xbed: v1593V12ceVbed = MLOAD v1590V12ceVbed(0x40)
    0x1594S0x12ceS0xbed: v1594V12ceVbed(0x461bcd) = CONST 
    0x1598S0x12ceS0xbed: v1598V12ceVbed(0xe5) = CONST 
    0x159aS0x12ceS0xbed: v159aV12ceVbed(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1598V12ceVbed(0xe5), v1594V12ceVbed(0x461bcd)
    0x159cS0x12ceS0xbed: MSTORE v1593V12ceVbed, v159aV12ceVbed(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x159dS0x12ceS0xbed: v159dV12ceVbed(0x20) = CONST 
    0x159fS0x12ceS0xbed: v159fV12ceVbed(0x4) = CONST 
    0x15a2S0x12ceS0xbed: v15a2V12ceVbed = ADD v1593V12ceVbed, v159fV12ceVbed(0x4)
    0x15a3S0x12ceS0xbed: MSTORE v15a2V12ceVbed, v159dV12ceVbed(0x20)
    0x15a4S0x12ceS0xbed: v15a4V12ceVbed(0x1f) = CONST 
    0x15a6S0x12ceS0xbed: v15a6V12ceVbed(0x24) = CONST 
    0x15a9S0x12ceS0xbed: v15a9V12ceVbed = ADD v1593V12ceVbed, v15a6V12ceVbed(0x24)
    0x15aaS0x12ceS0xbed: MSTORE v15a9V12ceVbed, v15a4V12ceVbed(0x1f)
    0x15abS0x12ceS0xbed: v15abV12ceVbed(0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400) = CONST 
    0x15ccS0x12ceS0xbed: v15ccV12ceVbed(0x44) = CONST 
    0x15cfS0x12ceS0xbed: v15cfV12ceVbed = ADD v1593V12ceVbed, v15ccV12ceVbed(0x44)
    0x15d0S0x12ceS0xbed: MSTORE v15cfV12ceVbed, v15abV12ceVbed(0x5361666545524332303a2063616c6c20746f206e6f6e2d636f6e747261637400)
    0x15d2S0x12ceS0xbed: v15d2V12ceVbed = MLOAD v1590V12ceVbed(0x40)
    0x15d6S0x12ceS0xbed: v15d6V12ceVbed(0x0) = SUB v1593V12ceVbed, v15d2V12ceVbed
    0x15d7S0x12ceS0xbed: v15d7V12ceVbed(0x64) = CONST 
    0x15d9S0x12ceS0xbed: v15d9V12ceVbed(0x64) = ADD v15d7V12ceVbed(0x64), v15d6V12ceVbed(0x0)
    0x15dbS0x12ceS0xbed: REVERT v15d2V12ceVbed, v15d9V12ceVbed(0x64)

    Begin block 0x15dcB0x12ceB0xbed
    prev=[0x158bB0x12ceB0xbed], succ=[0x15fbB0x12ceB0xbed]
    =================================
    0x15ddS0x12ceS0xbed: v15ddV12ceVbed(0x0) = CONST 
    0x15dfS0x12ceS0xbed: v15dfV12ceVbed(0x60) = CONST 
    0x15e2S0x12ceS0xbed: v15e2V12ceVbed(0x1) = CONST 
    0x15e4S0x12ceS0xbed: v15e4V12ceVbed(0x1) = CONST 
    0x15e6S0x12ceS0xbed: v15e6V12ceVbed(0xa0) = CONST 
    0x15e8S0x12ceS0xbed: v15e8V12ceVbed(0x10000000000000000000000000000000000000000) = SHL v15e6V12ceVbed(0xa0), v15e4V12ceVbed(0x1)
    0x15e9S0x12ceS0xbed: v15e9V12ceVbed(0xffffffffffffffffffffffffffffffffffffffff) = SUB v15e8V12ceVbed(0x10000000000000000000000000000000000000000), v15e2V12ceVbed(0x1)
    0x15eaS0x12ceS0xbed: v15eaV12ceVbed = AND v15e9V12ceVbed(0xffffffffffffffffffffffffffffffffffffffff), vc12
    0x15ecS0x12ceS0xbed: v15ecV12ceVbed(0x40) = CONST 
    0x15eeS0x12ceS0xbed: v15eeV12ceVbed = MLOAD v15ecV12ceVbed(0x40)
    0x15f2S0x12ceS0xbed: v15f2V12ceVbed(0x64) = MLOAD v12f3Vbed
    0x15f4S0x12ceS0xbed: v15f4V12ceVbed(0x20) = CONST 
    0x15f6S0x12ceS0xbed: v15f6V12ceVbed = ADD v15f4V12ceVbed(0x20), v12f3Vbed

    Begin block 0x15fbB0x12ceB0xbed
    prev=[0x15dcB0x12ceB0xbed, 0x1604B0x12ceB0xbed], succ=[0x161aB0x12ceB0xbed, 0x1604B0x12ceB0xbed]
    =================================
    0x15fb_0x2S0x12ceS0xbed: v15fb_2V12ceVbed = PHI v15f2V12ceVbed(0x64), v160dV12ceVbed
    0x15fcS0x12ceS0xbed: v15fcV12ceVbed(0x20) = CONST 
    0x15ffS0x12ceS0xbed: v15ffV12ceVbed = LT v15fb_2V12ceVbed, v15fcV12ceVbed(0x20)
    0x1600S0x12ceS0xbed: v1600V12ceVbed(0x161a) = CONST 
    0x1603S0x12ceS0xbed: JUMPI v1600V12ceVbed(0x161a), v15ffV12ceVbed

    Begin block 0x161aB0x12ceB0xbed
    prev=[0x15fbB0x12ceB0xbed], succ=[0x165bB0x12ceB0xbed, 0x167cB0x12ceB0xbed]
    =================================
    0x161a_0x0S0x12ceS0xbed: v161a_0V12ceVbed = PHI v15f6V12ceVbed, v1615V12ceVbed
    0x161a_0x1S0x12ceS0xbed: v161a_1V12ceVbed = PHI v15eeV12ceVbed, v1613V12ceVbed
    0x161a_0x2S0x12ceS0xbed: v161a_2V12ceVbed = PHI v15f2V12ceVbed(0x64), v160dV12ceVbed
    0x161bS0x12ceS0xbed: v161bV12ceVbed(0x1) = CONST 
    0x161eS0x12ceS0xbed: v161eV12ceVbed(0x20) = CONST 
    0x1620S0x12ceS0xbed: v1620V12ceVbed = SUB v161eV12ceVbed(0x20), v161a_2V12ceVbed
    0x1621S0x12ceS0xbed: v1621V12ceVbed(0x100) = CONST 
    0x1624S0x12ceS0xbed: v1624V12ceVbed = EXP v1621V12ceVbed(0x100), v1620V12ceVbed
    0x1625S0x12ceS0xbed: v1625V12ceVbed = SUB v1624V12ceVbed, v161bV12ceVbed(0x1)
    0x1627S0x12ceS0xbed: v1627V12ceVbed = NOT v1625V12ceVbed
    0x1629S0x12ceS0xbed: v1629V12ceVbed = MLOAD v161a_0V12ceVbed
    0x162aS0x12ceS0xbed: v162aV12ceVbed = AND v1629V12ceVbed, v1627V12ceVbed
    0x162dS0x12ceS0xbed: v162dV12ceVbed = MLOAD v161a_1V12ceVbed
    0x162eS0x12ceS0xbed: v162eV12ceVbed = AND v162dV12ceVbed, v1625V12ceVbed
    0x1631S0x12ceS0xbed: v1631V12ceVbed = OR v162aV12ceVbed, v162eV12ceVbed
    0x1633S0x12ceS0xbed: MSTORE v161a_1V12ceVbed, v1631V12ceVbed
    0x163cS0x12ceS0xbed: v163cV12ceVbed = ADD v15f2V12ceVbed(0x64), v15eeV12ceVbed
    0x1640S0x12ceS0xbed: v1640V12ceVbed(0x0) = CONST 
    0x1642S0x12ceS0xbed: v1642V12ceVbed(0x40) = CONST 
    0x1644S0x12ceS0xbed: v1644V12ceVbed = MLOAD v1642V12ceVbed(0x40)
    0x1647S0x12ceS0xbed: v1647V12ceVbed(0x64) = SUB v163cV12ceVbed, v1644V12ceVbed
    0x1649S0x12ceS0xbed: v1649V12ceVbed(0x0) = CONST 
    0x164cS0x12ceS0xbed: v164cV12ceVbed = GAS 
    0x164dS0x12ceS0xbed: v164dV12ceVbed = CALL v164cV12ceVbed, v15eaV12ceVbed, v1649V12ceVbed(0x0), v1644V12ceVbed, v1647V12ceVbed(0x64), v1644V12ceVbed, v1640V12ceVbed(0x0)
    0x1651S0x12ceS0xbed: v1651V12ceVbed = RETURNDATASIZE 
    0x1653S0x12ceS0xbed: v1653V12ceVbed(0x0) = CONST 
    0x1656S0x12ceS0xbed: v1656V12ceVbed = EQ v1651V12ceVbed, v1653V12ceVbed(0x0)
    0x1657S0x12ceS0xbed: v1657V12ceVbed(0x167c) = CONST 
    0x165aS0x12ceS0xbed: JUMPI v1657V12ceVbed(0x167c), v1656V12ceVbed

    Begin block 0x165bB0x12ceB0xbed
    prev=[0x161aB0x12ceB0xbed], succ=[0x1681B0x12ceB0xbed]
    =================================
    0x165bS0x12ceS0xbed: v165bV12ceVbed(0x40) = CONST 
    0x165dS0x12ceS0xbed: v165dV12ceVbed = MLOAD v165bV12ceVbed(0x40)
    0x1660S0x12ceS0xbed: v1660V12ceVbed(0x1f) = CONST 
    0x1662S0x12ceS0xbed: v1662V12ceVbed(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1660V12ceVbed(0x1f)
    0x1663S0x12ceS0xbed: v1663V12ceVbed(0x3f) = CONST 
    0x1665S0x12ceS0xbed: v1665V12ceVbed = RETURNDATASIZE 
    0x1666S0x12ceS0xbed: v1666V12ceVbed = ADD v1665V12ceVbed, v1663V12ceVbed(0x3f)
    0x1667S0x12ceS0xbed: v1667V12ceVbed = AND v1666V12ceVbed, v1662V12ceVbed(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x1669S0x12ceS0xbed: v1669V12ceVbed = ADD v165dV12ceVbed, v1667V12ceVbed
    0x166aS0x12ceS0xbed: v166aV12ceVbed(0x40) = CONST 
    0x166cS0x12ceS0xbed: MSTORE v166aV12ceVbed(0x40), v1669V12ceVbed
    0x166dS0x12ceS0xbed: v166dV12ceVbed = RETURNDATASIZE 
    0x166fS0x12ceS0xbed: MSTORE v165dV12ceVbed, v166dV12ceVbed
    0x1670S0x12ceS0xbed: v1670V12ceVbed = RETURNDATASIZE 
    0x1671S0x12ceS0xbed: v1671V12ceVbed(0x0) = CONST 
    0x1673S0x12ceS0xbed: v1673V12ceVbed(0x20) = CONST 
    0x1676S0x12ceS0xbed: v1676V12ceVbed = ADD v165dV12ceVbed, v1673V12ceVbed(0x20)
    0x1677S0x12ceS0xbed: RETURNDATACOPY v1676V12ceVbed, v1671V12ceVbed(0x0), v1670V12ceVbed
    0x1678S0x12ceS0xbed: v1678V12ceVbed(0x1681) = CONST 
    0x167bS0x12ceS0xbed: JUMP v1678V12ceVbed(0x1681)

    Begin block 0x1681B0x12ceB0xbed
    prev=[0x165bB0x12ceB0xbed, 0x167cB0x12ceB0xbed], succ=[0x168cB0x12ceB0xbed, 0x16d8B0x12ceB0xbed]
    =================================
    0x1688S0x12ceS0xbed: v1688V12ceVbed(0x16d8) = CONST 
    0x168bS0x12ceS0xbed: JUMPI v1688V12ceVbed(0x16d8), v164dV12ceVbed

    Begin block 0x168cB0x12ceB0xbed
    prev=[0x1681B0x12ceB0xbed], succ=[]
    =================================
    0x168cS0x12ceS0xbed: v168cV12ceVbed(0x40) = CONST 
    0x168fS0x12ceS0xbed: v168fV12ceVbed = MLOAD v168cV12ceVbed(0x40)
    0x1690S0x12ceS0xbed: v1690V12ceVbed(0x461bcd) = CONST 
    0x1694S0x12ceS0xbed: v1694V12ceVbed(0xe5) = CONST 
    0x1696S0x12ceS0xbed: v1696V12ceVbed(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1694V12ceVbed(0xe5), v1690V12ceVbed(0x461bcd)
    0x1698S0x12ceS0xbed: MSTORE v168fV12ceVbed, v1696V12ceVbed(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1699S0x12ceS0xbed: v1699V12ceVbed(0x20) = CONST 
    0x169bS0x12ceS0xbed: v169bV12ceVbed(0x4) = CONST 
    0x169eS0x12ceS0xbed: v169eV12ceVbed = ADD v168fV12ceVbed, v169bV12ceVbed(0x4)
    0x16a1S0x12ceS0xbed: MSTORE v169eV12ceVbed, v1699V12ceVbed(0x20)
    0x16a2S0x12ceS0xbed: v16a2V12ceVbed(0x24) = CONST 
    0x16a5S0x12ceS0xbed: v16a5V12ceVbed = ADD v168fV12ceVbed, v16a2V12ceVbed(0x24)
    0x16a6S0x12ceS0xbed: MSTORE v16a5V12ceVbed, v1699V12ceVbed(0x20)
    0x16a7S0x12ceS0xbed: v16a7V12ceVbed(0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564) = CONST 
    0x16c8S0x12ceS0xbed: v16c8V12ceVbed(0x44) = CONST 
    0x16cbS0x12ceS0xbed: v16cbV12ceVbed = ADD v168fV12ceVbed, v16c8V12ceVbed(0x44)
    0x16ccS0x12ceS0xbed: MSTORE v16cbV12ceVbed, v16a7V12ceVbed(0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564)
    0x16ceS0x12ceS0xbed: v16ceV12ceVbed = MLOAD v168cV12ceVbed(0x40)
    0x16d2S0x12ceS0xbed: v16d2V12ceVbed(0x0) = SUB v168fV12ceVbed, v16ceV12ceVbed
    0x16d3S0x12ceS0xbed: v16d3V12ceVbed(0x64) = CONST 
    0x16d5S0x12ceS0xbed: v16d5V12ceVbed(0x64) = ADD v16d3V12ceVbed(0x64), v16d2V12ceVbed(0x0)
    0x16d7S0x12ceS0xbed: REVERT v16ceV12ceVbed, v16d5V12ceVbed(0x64)

    Begin block 0x16d8B0x12ceB0xbed
    prev=[0x1681B0x12ceB0xbed], succ=[0x16e0B0x12ceB0xbed, 0x22e0B0x12ceB0xbed]
    =================================
    0x16d8_0x0S0x12ceS0xbed: v16d8_0V12ceVbed = PHI v165dV12ceVbed, v167dV12ceVbed(0x60)
    0x16daS0x12ceS0xbed: v16daV12ceVbed = MLOAD v16d8_0V12ceVbed
    0x16dbS0x12ceS0xbed: v16dbV12ceVbed = ISZERO v16daV12ceVbed
    0x16dcS0x12ceS0xbed: v16dcV12ceVbed(0x22e0) = CONST 
    0x16dfS0x12ceS0xbed: JUMPI v16dcV12ceVbed(0x22e0), v16dbV12ceVbed

    Begin block 0x16e0B0x12ceB0xbed
    prev=[0x16d8B0x12ceB0xbed], succ=[0x16f0B0x12ceB0xbed, 0x16f4B0x12ceB0xbed]
    =================================
    0x16e0_0x0S0x12ceS0xbed: v16e0_0V12ceVbed = PHI v165dV12ceVbed, v167dV12ceVbed(0x60)
    0x16e2S0x12ceS0xbed: v16e2V12ceVbed(0x20) = CONST 
    0x16e4S0x12ceS0xbed: v16e4V12ceVbed = ADD v16e2V12ceVbed(0x20), v16e0_0V12ceVbed
    0x16e6S0x12ceS0xbed: v16e6V12ceVbed = MLOAD v16e0_0V12ceVbed
    0x16e7S0x12ceS0xbed: v16e7V12ceVbed(0x20) = CONST 
    0x16eaS0x12ceS0xbed: v16eaV12ceVbed = LT v16e6V12ceVbed, v16e7V12ceVbed(0x20)
    0x16ebS0x12ceS0xbed: v16ebV12ceVbed = ISZERO v16eaV12ceVbed
    0x16ecS0x12ceS0xbed: v16ecV12ceVbed(0x16f4) = CONST 
    0x16efS0x12ceS0xbed: JUMPI v16ecV12ceVbed(0x16f4), v16ebV12ceVbed

    Begin block 0x16f0B0x12ceB0xbed
    prev=[0x16e0B0x12ceB0xbed], succ=[]
    =================================
    0x16f0S0x12ceS0xbed: v16f0V12ceVbed(0x0) = CONST 
    0x16f3S0x12ceS0xbed: REVERT v16f0V12ceVbed(0x0), v16f0V12ceVbed(0x0)

    Begin block 0x16f4B0x12ceB0xbed
    prev=[0x16e0B0x12ceB0xbed], succ=[0x16fbB0x12ceB0xbed, 0x2305B0x12ceB0xbed]
    =================================
    0x16f6S0x12ceS0xbed: v16f6V12ceVbed = MLOAD v16e4V12ceVbed
    0x16f7S0x12ceS0xbed: v16f7V12ceVbed(0x2305) = CONST 
    0x16faS0x12ceS0xbed: JUMPI v16f7V12ceVbed(0x2305), v16f6V12ceVbed

    Begin block 0x16fbB0x12ceB0xbed
    prev=[0x16f4B0x12ceB0xbed], succ=[]
    =================================
    0x16fbS0x12ceS0xbed: v16fbV12ceVbed(0x40) = CONST 
    0x16fdS0x12ceS0xbed: v16fdV12ceVbed = MLOAD v16fbV12ceVbed(0x40)
    0x16feS0x12ceS0xbed: v16feV12ceVbed(0x461bcd) = CONST 
    0x1702S0x12ceS0xbed: v1702V12ceVbed(0xe5) = CONST 
    0x1704S0x12ceS0xbed: v1704V12ceVbed(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1702V12ceVbed(0xe5), v16feV12ceVbed(0x461bcd)
    0x1706S0x12ceS0xbed: MSTORE v16fdV12ceVbed, v1704V12ceVbed(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1707S0x12ceS0xbed: v1707V12ceVbed(0x4) = CONST 
    0x1709S0x12ceS0xbed: v1709V12ceVbed = ADD v1707V12ceVbed(0x4), v16fdV12ceVbed
    0x170cS0x12ceS0xbed: v170cV12ceVbed(0x20) = CONST 
    0x170eS0x12ceS0xbed: v170eV12ceVbed = ADD v170cV12ceVbed(0x20), v1709V12ceVbed
    0x1711S0x12ceS0xbed: v1711V12ceVbed(0x20) = SUB v170eV12ceVbed, v1709V12ceVbed
    0x1713S0x12ceS0xbed: MSTORE v1709V12ceVbed, v1711V12ceVbed(0x20)
    0x1714S0x12ceS0xbed: v1714V12ceVbed(0x2a) = CONST 
    0x1717S0x12ceS0xbed: MSTORE v170eV12ceVbed, v1714V12ceVbed(0x2a)
    0x1718S0x12ceS0xbed: v1718V12ceVbed(0x20) = CONST 
    0x171aS0x12ceS0xbed: v171aV12ceVbed = ADD v1718V12ceVbed(0x20), v170eV12ceVbed
    0x171cS0x12ceS0xbed: v171cV12ceVbed(0x1885) = CONST 
    0x171fS0x12ceS0xbed: v171fV12ceVbed(0x2a) = CONST 
    0x1722S0x12ceS0xbed: CODECOPY v171aV12ceVbed, v171cV12ceVbed(0x1885), v171fV12ceVbed(0x2a)
    0x1723S0x12ceS0xbed: v1723V12ceVbed(0x40) = CONST 
    0x1725S0x12ceS0xbed: v1725V12ceVbed = ADD v1723V12ceVbed(0x40), v171aV12ceVbed
    0x1729S0x12ceS0xbed: v1729V12ceVbed(0x40) = CONST 
    0x172bS0x12ceS0xbed: v172bV12ceVbed = MLOAD v1729V12ceVbed(0x40)
    0x172eS0x12ceS0xbed: v172eV12ceVbed(0x84) = SUB v1725V12ceVbed, v172bV12ceVbed
    0x1730S0x12ceS0xbed: REVERT v172bV12ceVbed, v172eV12ceVbed(0x84)

    Begin block 0x2305B0x12ceB0xbed
    prev=[0x16f4B0x12ceB0xbed], succ=[0x2299B0xbed]
    =================================
    0x230aS0x12ceS0xbed: JUMP v131eVbed(0x2299)

    Begin block 0x2299B0xbed
    prev=[0x22e0B0x12ceB0xbed, 0x2305B0x12ceB0xbed], succ=[0xc1a]
    =================================
    0x229eS0xbed: JUMP vc04(0xc1a)

    Begin block 0xc1a
    prev=[0x2299B0xbed], succ=[0xc5b, 0x208e]
    =================================
    0xc1a_0x1: vc1a_1 = PHI vb17, vb1e_1
    0xc1a_0x2: vc1a_2 = PHI vb12, vb17
    0xc1b: vc1b(0x40) = CONST 
    0xc1e: vc1e = MLOAD vc1b(0x40)
    0xc21: MSTORE vc1e, vc1a_2
    0xc23: vc23 = MLOAD vc1b(0x40)
    0xc24: vc24 = CALLER 
    0xc26: vc26(0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d) = CONST 
    0xc4b: vc4b(0x0) = SUB vc1e, vc23
    0xc4c: vc4c(0x20) = CONST 
    0xc4e: vc4e(0x20) = ADD vc4c(0x20), vc4b(0x0)
    0xc50: LOG2 vc23, vc4e(0x20), vc26(0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d), vc24
    0xc52: vc52(0x67) = CONST 
    0xc54: vc54 = SLOAD vc52(0x67)
    0xc56: vc56 = EQ vc1a_1, vc54
    0xc57: vc57(0x208e) = CONST 
    0xc5a: JUMPI vc57(0x208e), vc56

    Begin block 0xc5b
    prev=[0xc1a], succ=[]
    =================================
    0xc5b: vc5b(0x40) = CONST 
    0xc5e: vc5e = MLOAD vc5b(0x40)
    0xc5f: vc5f(0x461bcd) = CONST 
    0xc63: vc63(0xe5) = CONST 
    0xc65: vc65(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vc63(0xe5), vc5f(0x461bcd)
    0xc67: MSTORE vc5e, vc65(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xc68: vc68(0x20) = CONST 
    0xc6a: vc6a(0x4) = CONST 
    0xc6d: vc6d = ADD vc5e, vc6a(0x4)
    0xc6e: MSTORE vc6d, vc68(0x20)
    0xc6f: vc6f(0x1f) = CONST 
    0xc71: vc71(0x24) = CONST 
    0xc74: vc74 = ADD vc5e, vc71(0x24)
    0xc75: MSTORE vc74, vc6f(0x1f)
    0xc76: vc76(0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00) = CONST 
    0xc97: vc97(0x44) = CONST 
    0xc9a: vc9a = ADD vc5e, vc97(0x44)
    0xc9b: MSTORE vc9a, vc76(0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00)
    0xc9d: vc9d = MLOAD vc5b(0x40)
    0xca1: vca1(0x0) = SUB vc5e, vc9d
    0xca2: vca2(0x64) = CONST 
    0xca4: vca4(0x64) = ADD vca2(0x64), vca1(0x0)
    0xca6: REVERT vc9d, vca4(0x64)

    Begin block 0x208e
    prev=[0xc1a], succ=[0x1d98]
    =================================
    0x208e_0x2: v208e_2 = PHI v3b4, vb12
    0x2091: JUMP v208e_2

    Begin block 0x1d98
    prev=[0x208e], succ=[]
    =================================
    0x1d99: STOP 

    Begin block 0x22e0B0x12ceB0xbed
    prev=[0x16d8B0x12ceB0xbed], succ=[0x2299B0xbed]
    =================================
    0x22e5S0x12ceS0xbed: JUMP v131eVbed(0x2299)

    Begin block 0x167cB0x12ceB0xbed
    prev=[0x161aB0x12ceB0xbed], succ=[0x1681B0x12ceB0xbed]
    =================================
    0x167dS0x12ceS0xbed: v167dV12ceVbed(0x60) = CONST 

    Begin block 0x1604B0x12ceB0xbed
    prev=[0x15fbB0x12ceB0xbed], succ=[0x15fbB0x12ceB0xbed]
    =================================
    0x1604_0x0S0x12ceS0xbed: v1604_0V12ceVbed = PHI v15f6V12ceVbed, v1615V12ceVbed
    0x1604_0x1S0x12ceS0xbed: v1604_1V12ceVbed = PHI v15eeV12ceVbed, v1613V12ceVbed
    0x1604_0x2S0x12ceS0xbed: v1604_2V12ceVbed = PHI v15f2V12ceVbed(0x64), v160dV12ceVbed
    0x1605S0x12ceS0xbed: v1605V12ceVbed = MLOAD v1604_0V12ceVbed
    0x1607S0x12ceS0xbed: MSTORE v1604_1V12ceVbed, v1605V12ceVbed
    0x1608S0x12ceS0xbed: v1608V12ceVbed(0x1f) = CONST 
    0x160aS0x12ceS0xbed: v160aV12ceVbed(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1608V12ceVbed(0x1f)
    0x160dS0x12ceS0xbed: v160dV12ceVbed = ADD v1604_2V12ceVbed, v160aV12ceVbed(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x160fS0x12ceS0xbed: v160fV12ceVbed(0x20) = CONST 
    0x1613S0x12ceS0xbed: v1613V12ceVbed = ADD v160fV12ceVbed(0x20), v1604_1V12ceVbed
    0x1615S0x12ceS0xbed: v1615V12ceVbed = ADD v160fV12ceVbed(0x20), v1604_0V12ceVbed
    0x1616S0x12ceS0xbed: v1616V12ceVbed(0x15fb) = CONST 
    0x1619S0x12ceS0xbed: JUMP v1616V12ceVbed(0x15fb)

    Begin block 0x1761B0x1579B0x12ceB0xbed
    prev=[0x1731B0x1579B0x12ceB0xbed], succ=[0x1765B0x1579B0x12ceB0xbed]
    =================================
    0x1763S0x1579S0x12ceS0xbed: v1763V1579V12ceVbed = ISZERO v1735V1579V12ceVbed
    0x1764S0x1579S0x12ceS0xbed: v1764V1579V12ceVbed = ISZERO v1763V1579V12ceVbed

}

function initialize(address,address,address)() public {
    Begin block 0x3b9
    prev=[], succ=[0x3cb, 0x3cf]
    =================================
    0x3ba: v3ba(0x1db9) = CONST 
    0x3bd: v3bd(0x4) = CONST 
    0x3c0: v3c0 = CALLDATASIZE 
    0x3c1: v3c1 = SUB v3c0, v3bd(0x4)
    0x3c2: v3c2(0x60) = CONST 
    0x3c5: v3c5 = LT v3c1, v3c2(0x60)
    0x3c6: v3c6 = ISZERO v3c5
    0x3c7: v3c7(0x3cf) = CONST 
    0x3ca: JUMPI v3c7(0x3cf), v3c6

    Begin block 0x3cb
    prev=[0x3b9], succ=[]
    =================================
    0x3cb: v3cb(0x0) = CONST 
    0x3ce: REVERT v3cb(0x0), v3cb(0x0)

    Begin block 0x3cf
    prev=[0x3b9], succ=[0xcab]
    =================================
    0x3d1: v3d1(0x1) = CONST 
    0x3d3: v3d3(0x1) = CONST 
    0x3d5: v3d5(0xa0) = CONST 
    0x3d7: v3d7(0x10000000000000000000000000000000000000000) = SHL v3d5(0xa0), v3d3(0x1)
    0x3d8: v3d8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3d7(0x10000000000000000000000000000000000000000), v3d1(0x1)
    0x3da: v3da = CALLDATALOAD v3bd(0x4)
    0x3dc: v3dc = AND v3d8(0xffffffffffffffffffffffffffffffffffffffff), v3da
    0x3de: v3de(0x20) = CONST 
    0x3e1: v3e1(0x24) = ADD v3bd(0x4), v3de(0x20)
    0x3e2: v3e2 = CALLDATALOAD v3e1(0x24)
    0x3e4: v3e4 = AND v3d8(0xffffffffffffffffffffffffffffffffffffffff), v3e2
    0x3e6: v3e6(0x40) = CONST 
    0x3ea: v3ea(0x44) = ADD v3bd(0x4), v3e6(0x40)
    0x3eb: v3eb = CALLDATALOAD v3ea(0x44)
    0x3ec: v3ec = AND v3eb, v3d8(0xffffffffffffffffffffffffffffffffffffffff)
    0x3ed: v3ed(0xcab) = CONST 
    0x3f0: JUMP v3ed(0xcab)

    Begin block 0xcab
    prev=[0x3cf], succ=[0xcc4, 0xcbc]
    =================================
    0xcac: vcac(0x0) = CONST 
    0xcae: vcae = SLOAD vcac(0x0)
    0xcaf: vcaf(0x100) = CONST 
    0xcb3: vcb3 = DIV vcae, vcaf(0x100)
    0xcb4: vcb4(0xff) = CONST 
    0xcb6: vcb6 = AND vcb4(0xff), vcb3
    0xcb8: vcb8(0xcc4) = CONST 
    0xcbb: JUMPI vcb8(0xcc4), vcb6

    Begin block 0xcc4
    prev=[0xcab, 0x1189B0xcbc], succ=[0xcd2, 0xcca]
    =================================
    0xcc4_0x0: vcc4_0 = PHI vcb6, v118cVcbc
    0xcc6: vcc6(0xcd2) = CONST 
    0xcc9: JUMPI vcc6(0xcd2), vcc4_0

    Begin block 0xcd2
    prev=[0xcc4, 0xcca], succ=[0xcd7, 0xd0d]
    =================================
    0xcd2_0x0: vcd2_0 = PHI vcb6, vcd1, v118cVcbc
    0xcd3: vcd3(0xd0d) = CONST 
    0xcd6: JUMPI vcd3(0xd0d), vcd2_0

    Begin block 0xcd7
    prev=[0xcd2], succ=[]
    =================================
    0xcd7: vcd7(0x40) = CONST 
    0xcd9: vcd9 = MLOAD vcd7(0x40)
    0xcda: vcda(0x461bcd) = CONST 
    0xcde: vcde(0xe5) = CONST 
    0xce0: vce0(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vcde(0xe5), vcda(0x461bcd)
    0xce2: MSTORE vcd9, vce0(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xce3: vce3(0x4) = CONST 
    0xce5: vce5 = ADD vce3(0x4), vcd9
    0xce8: vce8(0x20) = CONST 
    0xcea: vcea = ADD vce8(0x20), vce5
    0xced: vced(0x20) = SUB vcea, vce5
    0xcef: MSTORE vce5, vced(0x20)
    0xcf0: vcf0(0x2e) = CONST 
    0xcf3: MSTORE vcea, vcf0(0x2e)
    0xcf4: vcf4(0x20) = CONST 
    0xcf6: vcf6 = ADD vcf4(0x20), vcea
    0xcf8: vcf8(0x182d) = CONST 
    0xcfb: vcfb(0x2e) = CONST 
    0xcfe: CODECOPY vcf6, vcf8(0x182d), vcfb(0x2e)
    0xcff: vcff(0x40) = CONST 
    0xd01: vd01 = ADD vcff(0x40), vcf6
    0xd05: vd05(0x40) = CONST 
    0xd07: vd07 = MLOAD vd05(0x40)
    0xd0a: vd0a(0x84) = SUB vd01, vd07
    0xd0c: REVERT vd07, vd0a(0x84)

    Begin block 0xd0d
    prev=[0xcd2], succ=[0xd20, 0xd38]
    =================================
    0xd0e: vd0e(0x0) = CONST 
    0xd10: vd10 = SLOAD vd0e(0x0)
    0xd11: vd11(0x100) = CONST 
    0xd15: vd15 = DIV vd10, vd11(0x100)
    0xd16: vd16(0xff) = CONST 
    0xd18: vd18 = AND vd16(0xff), vd15
    0xd19: vd19 = ISZERO vd18
    0xd1b: vd1b = ISZERO vd19
    0xd1c: vd1c(0xd38) = CONST 
    0xd1f: JUMPI vd1c(0xd38), vd1b

    Begin block 0xd20
    prev=[0xd0d], succ=[0xd38]
    =================================
    0xd20: vd20(0x0) = CONST 
    0xd23: vd23 = SLOAD vd20(0x0)
    0xd24: vd24(0xff) = CONST 
    0xd26: vd26(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vd24(0xff)
    0xd27: vd27(0xff00) = CONST 
    0xd2a: vd2a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vd27(0xff00)
    0xd2d: vd2d = AND vd23, vd2a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xd2e: vd2e(0x100) = CONST 
    0xd31: vd31 = OR vd2e(0x100), vd2d
    0xd32: vd32 = AND vd31, vd26(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xd33: vd33(0x1) = CONST 
    0xd35: vd35 = OR vd33(0x1), vd32
    0xd37: SSTORE vd20(0x0), vd35

    Begin block 0xd38
    prev=[0xd20, 0xd0d], succ=[0xd96B0xd38]
    =================================
    0xd39: vd39(0xd41) = CONST 
    0xd3c: vd3c = CALLER 
    0xd3d: vd3d(0xd96) = CONST 
    0xd40: JUMP vd3d(0xd96), vd3c, vd39(0xd41)

    Begin block 0xd96B0xd38
    prev=[0xd38], succ=[0xda70xd96B0xd38, 0xdaf0xd96B0xd38]
    =================================
    0xd97S0xd38: vd97Vd38(0x0) = CONST 
    0xd99S0xd38: vd99Vd38 = SLOAD vd97Vd38(0x0)
    0xd9aS0xd38: vd9aVd38(0x100) = CONST 
    0xd9eS0xd38: vd9eVd38 = DIV vd99Vd38, vd9aVd38(0x100)
    0xd9fS0xd38: vd9fVd38(0xff) = CONST 
    0xda1S0xd38: vda1Vd38 = AND vd9fVd38(0xff), vd9eVd38
    0xda3S0xd38: vda3Vd38(0xdaf) = CONST 
    0xda6S0xd38: JUMPI vda3Vd38(0xdaf), vda1Vd38

    Begin block 0xda70xd96B0xd38
    prev=[0xd96B0xd38], succ=[0x1189B0xda70xd96B0xd38]
    =================================
    0xda80xd96S0xd38: vd96da8Vd38(0xdaf) = CONST 
    0xdab0xd96S0xd38: vd96dabVd38(0x1189) = CONST 
    0xdae0xd96S0xd38: JUMP vd96dabVd38(0x1189)

    Begin block 0x1189B0xda70xd96B0xd38
    prev=[0xda70xd96B0xd38], succ=[0xdaf0xd96B0xd38]
    =================================
    0x118aS0xda70xd96S0xd38: v118aVda7d96Vd38 = ADDRESS 
    0x118bS0xda70xd96S0xd38: v118bVda7d96Vd38 = EXTCODESIZE v118aVda7d96Vd38
    0x118cS0xda70xd96S0xd38: v118cVda7d96Vd38 = ISZERO v118bVda7d96Vd38
    0x118eS0xda70xd96S0xd38: JUMP vd96da8Vd38(0xdaf)

    Begin block 0xdaf0xd96B0xd38
    prev=[0xd96B0xd38, 0x1189B0xda70xd96B0xd38], succ=[0xdbd0xd96B0xd38, 0xdb50xd96B0xd38]
    =================================
    0xdaf0xd96_0x0S0xd38: vdafd96_0Vd38 = PHI vda1Vd38, v118cVda7d96Vd38
    0xdb10xd96S0xd38: vd96db1Vd38(0xdbd) = CONST 
    0xdb40xd96S0xd38: JUMPI vd96db1Vd38(0xdbd), vdafd96_0Vd38

    Begin block 0xdbd0xd96B0xd38
    prev=[0xdaf0xd96B0xd38, 0xdb50xd96B0xd38], succ=[0xdc20xd96B0xd38, 0xdf80xd96B0xd38]
    =================================
    0xdbd0xd96_0x0S0xd38: vdbdd96_0Vd38 = PHI vda1Vd38, vd96dbcVd38, v118cVda7d96Vd38
    0xdbe0xd96S0xd38: vd96dbeVd38(0xdf8) = CONST 
    0xdc10xd96S0xd38: JUMPI vd96dbeVd38(0xdf8), vdbdd96_0Vd38

    Begin block 0xdc20xd96B0xd38
    prev=[0xdbd0xd96B0xd38], succ=[]
    =================================
    0xdc20xd96S0xd38: vd96dc2Vd38(0x40) = CONST 
    0xdc40xd96S0xd38: vd96dc4Vd38 = MLOAD vd96dc2Vd38(0x40)
    0xdc50xd96S0xd38: vd96dc5Vd38(0x461bcd) = CONST 
    0xdc90xd96S0xd38: vd96dc9Vd38(0xe5) = CONST 
    0xdcb0xd96S0xd38: vd96dcbVd38(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vd96dc9Vd38(0xe5), vd96dc5Vd38(0x461bcd)
    0xdcd0xd96S0xd38: MSTORE vd96dc4Vd38, vd96dcbVd38(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xdce0xd96S0xd38: vd96dceVd38(0x4) = CONST 
    0xdd00xd96S0xd38: vd96dd0Vd38 = ADD vd96dceVd38(0x4), vd96dc4Vd38
    0xdd30xd96S0xd38: vd96dd3Vd38(0x20) = CONST 
    0xdd50xd96S0xd38: vd96dd5Vd38 = ADD vd96dd3Vd38(0x20), vd96dd0Vd38
    0xdd80xd96S0xd38: vd96dd8Vd38(0x20) = SUB vd96dd5Vd38, vd96dd0Vd38
    0xdda0xd96S0xd38: MSTORE vd96dd0Vd38, vd96dd8Vd38(0x20)
    0xddb0xd96S0xd38: vd96ddbVd38(0x2e) = CONST 
    0xdde0xd96S0xd38: MSTORE vd96dd5Vd38, vd96ddbVd38(0x2e)
    0xddf0xd96S0xd38: vd96ddfVd38(0x20) = CONST 
    0xde10xd96S0xd38: vd96de1Vd38 = ADD vd96ddfVd38(0x20), vd96dd5Vd38
    0xde30xd96S0xd38: vd96de3Vd38(0x182d) = CONST 
    0xde60xd96S0xd38: vd96de6Vd38(0x2e) = CONST 
    0xde90xd96S0xd38: CODECOPY vd96de1Vd38, vd96de3Vd38(0x182d), vd96de6Vd38(0x2e)
    0xdea0xd96S0xd38: vd96deaVd38(0x40) = CONST 
    0xdec0xd96S0xd38: vd96decVd38 = ADD vd96deaVd38(0x40), vd96de1Vd38
    0xdf00xd96S0xd38: vd96df0Vd38(0x40) = CONST 
    0xdf20xd96S0xd38: vd96df2Vd38 = MLOAD vd96df0Vd38(0x40)
    0xdf50xd96S0xd38: vd96df5Vd38(0x84) = SUB vd96decVd38, vd96df2Vd38
    0xdf70xd96S0xd38: REVERT vd96df2Vd38, vd96df5Vd38(0x84)

    Begin block 0xdf80xd96B0xd38
    prev=[0xdbd0xd96B0xd38], succ=[0xe0b0xd96B0xd38, 0xe230xd96B0xd38]
    =================================
    0xdf90xd96S0xd38: vd96df9Vd38(0x0) = CONST 
    0xdfb0xd96S0xd38: vd96dfbVd38 = SLOAD vd96df9Vd38(0x0)
    0xdfc0xd96S0xd38: vd96dfcVd38(0x100) = CONST 
    0xe000xd96S0xd38: vd96e00Vd38 = DIV vd96dfbVd38, vd96dfcVd38(0x100)
    0xe010xd96S0xd38: vd96e01Vd38(0xff) = CONST 
    0xe030xd96S0xd38: vd96e03Vd38 = AND vd96e01Vd38(0xff), vd96e00Vd38
    0xe040xd96S0xd38: vd96e04Vd38 = ISZERO vd96e03Vd38
    0xe060xd96S0xd38: vd96e06Vd38 = ISZERO vd96e04Vd38
    0xe070xd96S0xd38: vd96e07Vd38(0xe23) = CONST 
    0xe0a0xd96S0xd38: JUMPI vd96e07Vd38(0xe23), vd96e06Vd38

    Begin block 0xe0b0xd96B0xd38
    prev=[0xdf80xd96B0xd38], succ=[0xe230xd96B0xd38]
    =================================
    0xe0b0xd96S0xd38: vd96e0bVd38(0x0) = CONST 
    0xe0e0xd96S0xd38: vd96e0eVd38 = SLOAD vd96e0bVd38(0x0)
    0xe0f0xd96S0xd38: vd96e0fVd38(0xff) = CONST 
    0xe110xd96S0xd38: vd96e11Vd38(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vd96e0fVd38(0xff)
    0xe120xd96S0xd38: vd96e12Vd38(0xff00) = CONST 
    0xe150xd96S0xd38: vd96e15Vd38(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vd96e12Vd38(0xff00)
    0xe180xd96S0xd38: vd96e18Vd38 = AND vd96e0eVd38, vd96e15Vd38(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xe190xd96S0xd38: vd96e19Vd38(0x100) = CONST 
    0xe1c0xd96S0xd38: vd96e1cVd38 = OR vd96e19Vd38(0x100), vd96e18Vd38
    0xe1d0xd96S0xd38: vd96e1dVd38 = AND vd96e1cVd38, vd96e11Vd38(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xe1e0xd96S0xd38: vd96e1eVd38(0x1) = CONST 
    0xe200xd96S0xd38: vd96e20Vd38 = OR vd96e1eVd38(0x1), vd96e1dVd38
    0xe220xd96S0xd38: SSTORE vd96e0bVd38(0x0), vd96e20Vd38

    Begin block 0xe230xd96B0xd38
    prev=[0xe0b0xd96B0xd38, 0xdf80xd96B0xd38], succ=[0xe790xd96B0xd38, 0x20d60xd96B0xd38]
    =================================
    0xe240xd96S0xd38: vd96e24Vd38(0x33) = CONST 
    0xe270xd96S0xd38: vd96e27Vd38 = SLOAD vd96e24Vd38(0x33)
    0xe280xd96S0xd38: vd96e28Vd38(0x1) = CONST 
    0xe2a0xd96S0xd38: vd96e2aVd38(0x1) = CONST 
    0xe2c0xd96S0xd38: vd96e2cVd38(0xa0) = CONST 
    0xe2e0xd96S0xd38: vd96e2eVd38(0x10000000000000000000000000000000000000000) = SHL vd96e2cVd38(0xa0), vd96e2aVd38(0x1)
    0xe2f0xd96S0xd38: vd96e2fVd38(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd96e2eVd38(0x10000000000000000000000000000000000000000), vd96e28Vd38(0x1)
    0xe300xd96S0xd38: vd96e30Vd38(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vd96e2fVd38(0xffffffffffffffffffffffffffffffffffffffff)
    0xe310xd96S0xd38: vd96e31Vd38 = AND vd96e30Vd38(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vd96e27Vd38
    0xe320xd96S0xd38: vd96e32Vd38(0x1) = CONST 
    0xe340xd96S0xd38: vd96e34Vd38(0x1) = CONST 
    0xe360xd96S0xd38: vd96e36Vd38(0xa0) = CONST 
    0xe380xd96S0xd38: vd96e38Vd38(0x10000000000000000000000000000000000000000) = SHL vd96e36Vd38(0xa0), vd96e34Vd38(0x1)
    0xe390xd96S0xd38: vd96e39Vd38(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd96e38Vd38(0x10000000000000000000000000000000000000000), vd96e32Vd38(0x1)
    0xe3c0xd96S0xd38: vd96e3cVd38 = AND vd96e39Vd38(0xffffffffffffffffffffffffffffffffffffffff), vd3c
    0xe400xd96S0xd38: vd96e40Vd38 = OR vd96e3cVd38, vd96e31Vd38
    0xe440xd96S0xd38: SSTORE vd96e24Vd38(0x33), vd96e40Vd38
    0xe450xd96S0xd38: vd96e45Vd38(0x40) = CONST 
    0xe470xd96S0xd38: vd96e47Vd38 = MLOAD vd96e45Vd38(0x40)
    0xe490xd96S0xd38: vd96e49Vd38 = AND vd96e40Vd38, vd96e39Vd38(0xffffffffffffffffffffffffffffffffffffffff)
    0xe4b0xd96S0xd38: vd96e4bVd38(0x0) = CONST 
    0xe4e0xd96S0xd38: vd96e4eVd38(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0xe720xd96S0xd38: LOG3 vd96e47Vd38, vd96e4bVd38(0x0), vd96e4eVd38(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), vd96e4bVd38(0x0), vd96e49Vd38
    0xe740xd96S0xd38: vd96e74Vd38 = ISZERO vd96e04Vd38
    0xe750xd96S0xd38: vd96e75Vd38(0x20d6) = CONST 
    0xe780xd96S0xd38: JUMPI vd96e75Vd38(0x20d6), vd96e74Vd38

    Begin block 0xe790xd96B0xd38
    prev=[0xe230xd96B0xd38], succ=[0xd41]
    =================================
    0xe790xd96S0xd38: vd96e79Vd38(0x0) = CONST 
    0xe7c0xd96S0xd38: vd96e7cVd38 = SLOAD vd96e79Vd38(0x0)
    0xe7d0xd96S0xd38: vd96e7dVd38(0xff00) = CONST 
    0xe800xd96S0xd38: vd96e80Vd38(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vd96e7dVd38(0xff00)
    0xe810xd96S0xd38: vd96e81Vd38 = AND vd96e80Vd38(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vd96e7cVd38
    0xe830xd96S0xd38: SSTORE vd96e79Vd38(0x0), vd96e81Vd38
    0xe860xd96S0xd38: JUMP vd39(0xd41)

    Begin block 0xd41
    prev=[0xe790xd96B0xd38, 0x20d60xd96B0xd38], succ=[0xd85, 0x20b1]
    =================================
    0xd42: vd42(0x9a) = CONST 
    0xd45: vd45 = SLOAD vd42(0x9a)
    0xd46: vd46(0x1) = CONST 
    0xd48: vd48(0x1) = CONST 
    0xd4a: vd4a(0xa0) = CONST 
    0xd4c: vd4c(0x10000000000000000000000000000000000000000) = SHL vd4a(0xa0), vd48(0x1)
    0xd4d: vd4d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd4c(0x10000000000000000000000000000000000000000), vd46(0x1)
    0xd50: vd50 = AND v3dc, vd4d(0xffffffffffffffffffffffffffffffffffffffff)
    0xd51: vd51(0x1) = CONST 
    0xd53: vd53(0x1) = CONST 
    0xd55: vd55(0xa0) = CONST 
    0xd57: vd57(0x10000000000000000000000000000000000000000) = SHL vd55(0xa0), vd53(0x1)
    0xd58: vd58(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd57(0x10000000000000000000000000000000000000000), vd51(0x1)
    0xd59: vd59(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vd58(0xffffffffffffffffffffffffffffffffffffffff)
    0xd5c: vd5c = AND vd59(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vd45
    0xd5d: vd5d = OR vd5c, vd50
    0xd60: SSTORE vd42(0x9a), vd5d
    0xd61: vd61(0x9b) = CONST 
    0xd64: vd64 = SLOAD vd61(0x9b)
    0xd67: vd67 = AND vd4d(0xffffffffffffffffffffffffffffffffffffffff), v3e4
    0xd6a: vd6a = AND vd59(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vd64
    0xd6b: vd6b = OR vd6a, vd67
    0xd6d: SSTORE vd61(0x9b), vd6b
    0xd6e: vd6e(0xa5) = CONST 
    0xd71: vd71 = SLOAD vd6e(0xa5)
    0xd74: vd74 = AND v3ec, vd4d(0xffffffffffffffffffffffffffffffffffffffff)
    0xd78: vd78 = AND vd59(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vd71
    0xd7c: vd7c = OR vd78, vd74
    0xd7e: SSTORE vd6e(0xa5), vd7c
    0xd80: vd80 = ISZERO vd19
    0xd81: vd81(0x20b1) = CONST 
    0xd84: JUMPI vd81(0x20b1), vd80

    Begin block 0xd85
    prev=[0xd41], succ=[0xd90]
    =================================
    0xd85: vd85(0x0) = CONST 
    0xd88: vd88 = SLOAD vd85(0x0)
    0xd89: vd89(0xff00) = CONST 
    0xd8c: vd8c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vd89(0xff00)
    0xd8d: vd8d = AND vd8c(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vd88
    0xd8f: SSTORE vd85(0x0), vd8d

    Begin block 0xd90
    prev=[0xd85], succ=[0x1db9]
    =================================
    0xd95: JUMP v3ba(0x1db9)

    Begin block 0x1db9
    prev=[0x20b1, 0xd90], succ=[]
    =================================
    0x1dba: STOP 

    Begin block 0x20b1
    prev=[0xd41], succ=[0x1db9]
    =================================
    0x20b6: JUMP v3ba(0x1db9)

    Begin block 0x20d60xd96B0xd38
    prev=[0xe230xd96B0xd38], succ=[0xd41]
    =================================
    0x20d90xd96S0xd38: JUMP vd39(0xd41)

    Begin block 0xdb50xd96B0xd38
    prev=[0xdaf0xd96B0xd38], succ=[0xdbd0xd96B0xd38]
    =================================
    0xdb60xd96S0xd38: vd96db6Vd38(0x0) = CONST 
    0xdb80xd96S0xd38: vd96db8Vd38 = SLOAD vd96db6Vd38(0x0)
    0xdb90xd96S0xd38: vd96db9Vd38(0xff) = CONST 
    0xdbb0xd96S0xd38: vd96dbbVd38 = AND vd96db9Vd38(0xff), vd96db8Vd38
    0xdbc0xd96S0xd38: vd96dbcVd38 = ISZERO vd96dbbVd38

    Begin block 0xcca
    prev=[0xcc4], succ=[0xcd2]
    =================================
    0xccb: vccb(0x0) = CONST 
    0xccd: vccd = SLOAD vccb(0x0)
    0xcce: vcce(0xff) = CONST 
    0xcd0: vcd0 = AND vcce(0xff), vccd
    0xcd1: vcd1 = ISZERO vcd0

    Begin block 0xcbc
    prev=[0xcab], succ=[0x1189B0xcbc]
    =================================
    0xcbd: vcbd(0xcc4) = CONST 
    0xcc0: vcc0(0x1189) = CONST 
    0xcc3: JUMP vcc0(0x1189)

    Begin block 0x1189B0xcbc
    prev=[0xcbc], succ=[0xcc4]
    =================================
    0x118aS0xcbc: v118aVcbc = ADDRESS 
    0x118bS0xcbc: v118bVcbc = EXTCODESIZE v118aVcbc
    0x118cS0xcbc: v118cVcbc = ISZERO v118bVcbc
    0x118eS0xcbc: JUMP vcbd(0xcc4)

}

function initialize(address)() public {
    Begin block 0x3f1
    prev=[], succ=[0x403, 0x407]
    =================================
    0x3f2: v3f2(0x1dda) = CONST 
    0x3f5: v3f5(0x4) = CONST 
    0x3f8: v3f8 = CALLDATASIZE 
    0x3f9: v3f9 = SUB v3f8, v3f5(0x4)
    0x3fa: v3fa(0x20) = CONST 
    0x3fd: v3fd = LT v3f9, v3fa(0x20)
    0x3fe: v3fe = ISZERO v3fd
    0x3ff: v3ff(0x407) = CONST 
    0x402: JUMPI v3ff(0x407), v3fe

    Begin block 0x403
    prev=[0x3f1], succ=[]
    =================================
    0x403: v403(0x0) = CONST 
    0x406: REVERT v403(0x0), v403(0x0)

    Begin block 0x407
    prev=[0x3f1], succ=[0xd960x3f1]
    =================================
    0x409: v409 = CALLDATALOAD v3f5(0x4)
    0x40a: v40a(0x1) = CONST 
    0x40c: v40c(0x1) = CONST 
    0x40e: v40e(0xa0) = CONST 
    0x410: v410(0x10000000000000000000000000000000000000000) = SHL v40e(0xa0), v40c(0x1)
    0x411: v411(0xffffffffffffffffffffffffffffffffffffffff) = SUB v410(0x10000000000000000000000000000000000000000), v40a(0x1)
    0x412: v412 = AND v411(0xffffffffffffffffffffffffffffffffffffffff), v409
    0x413: v413(0xd96) = CONST 
    0x416: JUMP v413(0xd96)

    Begin block 0xd960x3f1
    prev=[0x407], succ=[0xdaf0x3f1, 0xda70x3f1]
    =================================
    0xd970x3f1: v3f1d97(0x0) = CONST 
    0xd990x3f1: v3f1d99 = SLOAD v3f1d97(0x0)
    0xd9a0x3f1: v3f1d9a(0x100) = CONST 
    0xd9e0x3f1: v3f1d9e = DIV v3f1d99, v3f1d9a(0x100)
    0xd9f0x3f1: v3f1d9f(0xff) = CONST 
    0xda10x3f1: v3f1da1 = AND v3f1d9f(0xff), v3f1d9e
    0xda30x3f1: v3f1da3(0xdaf) = CONST 
    0xda60x3f1: JUMPI v3f1da3(0xdaf), v3f1da1

    Begin block 0xdaf0x3f1
    prev=[0xd960x3f1, 0x1189B0xda70x3f1], succ=[0xdbd0x3f1, 0xdb50x3f1]
    =================================
    0xdaf0x3f1_0x0: vdaf3f1_0 = PHI v3f1da1, v118cVda73f1
    0xdb10x3f1: v3f1db1(0xdbd) = CONST 
    0xdb40x3f1: JUMPI v3f1db1(0xdbd), vdaf3f1_0

    Begin block 0xdbd0x3f1
    prev=[0xdaf0x3f1, 0xdb50x3f1], succ=[0xdc20x3f1, 0xdf80x3f1]
    =================================
    0xdbd0x3f1_0x0: vdbd3f1_0 = PHI v3f1dbc, v3f1da1, v118cVda73f1
    0xdbe0x3f1: v3f1dbe(0xdf8) = CONST 
    0xdc10x3f1: JUMPI v3f1dbe(0xdf8), vdbd3f1_0

    Begin block 0xdc20x3f1
    prev=[0xdbd0x3f1], succ=[]
    =================================
    0xdc20x3f1: v3f1dc2(0x40) = CONST 
    0xdc40x3f1: v3f1dc4 = MLOAD v3f1dc2(0x40)
    0xdc50x3f1: v3f1dc5(0x461bcd) = CONST 
    0xdc90x3f1: v3f1dc9(0xe5) = CONST 
    0xdcb0x3f1: v3f1dcb(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v3f1dc9(0xe5), v3f1dc5(0x461bcd)
    0xdcd0x3f1: MSTORE v3f1dc4, v3f1dcb(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xdce0x3f1: v3f1dce(0x4) = CONST 
    0xdd00x3f1: v3f1dd0 = ADD v3f1dce(0x4), v3f1dc4
    0xdd30x3f1: v3f1dd3(0x20) = CONST 
    0xdd50x3f1: v3f1dd5 = ADD v3f1dd3(0x20), v3f1dd0
    0xdd80x3f1: v3f1dd8(0x20) = SUB v3f1dd5, v3f1dd0
    0xdda0x3f1: MSTORE v3f1dd0, v3f1dd8(0x20)
    0xddb0x3f1: v3f1ddb(0x2e) = CONST 
    0xdde0x3f1: MSTORE v3f1dd5, v3f1ddb(0x2e)
    0xddf0x3f1: v3f1ddf(0x20) = CONST 
    0xde10x3f1: v3f1de1 = ADD v3f1ddf(0x20), v3f1dd5
    0xde30x3f1: v3f1de3(0x182d) = CONST 
    0xde60x3f1: v3f1de6(0x2e) = CONST 
    0xde90x3f1: CODECOPY v3f1de1, v3f1de3(0x182d), v3f1de6(0x2e)
    0xdea0x3f1: v3f1dea(0x40) = CONST 
    0xdec0x3f1: v3f1dec = ADD v3f1dea(0x40), v3f1de1
    0xdf00x3f1: v3f1df0(0x40) = CONST 
    0xdf20x3f1: v3f1df2 = MLOAD v3f1df0(0x40)
    0xdf50x3f1: v3f1df5(0x84) = SUB v3f1dec, v3f1df2
    0xdf70x3f1: REVERT v3f1df2, v3f1df5(0x84)

    Begin block 0xdf80x3f1
    prev=[0xdbd0x3f1], succ=[0xe0b0x3f1, 0xe230x3f1]
    =================================
    0xdf90x3f1: v3f1df9(0x0) = CONST 
    0xdfb0x3f1: v3f1dfb = SLOAD v3f1df9(0x0)
    0xdfc0x3f1: v3f1dfc(0x100) = CONST 
    0xe000x3f1: v3f1e00 = DIV v3f1dfb, v3f1dfc(0x100)
    0xe010x3f1: v3f1e01(0xff) = CONST 
    0xe030x3f1: v3f1e03 = AND v3f1e01(0xff), v3f1e00
    0xe040x3f1: v3f1e04 = ISZERO v3f1e03
    0xe060x3f1: v3f1e06 = ISZERO v3f1e04
    0xe070x3f1: v3f1e07(0xe23) = CONST 
    0xe0a0x3f1: JUMPI v3f1e07(0xe23), v3f1e06

    Begin block 0xe0b0x3f1
    prev=[0xdf80x3f1], succ=[0xe230x3f1]
    =================================
    0xe0b0x3f1: v3f1e0b(0x0) = CONST 
    0xe0e0x3f1: v3f1e0e = SLOAD v3f1e0b(0x0)
    0xe0f0x3f1: v3f1e0f(0xff) = CONST 
    0xe110x3f1: v3f1e11(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v3f1e0f(0xff)
    0xe120x3f1: v3f1e12(0xff00) = CONST 
    0xe150x3f1: v3f1e15(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v3f1e12(0xff00)
    0xe180x3f1: v3f1e18 = AND v3f1e0e, v3f1e15(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xe190x3f1: v3f1e19(0x100) = CONST 
    0xe1c0x3f1: v3f1e1c = OR v3f1e19(0x100), v3f1e18
    0xe1d0x3f1: v3f1e1d = AND v3f1e1c, v3f1e11(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xe1e0x3f1: v3f1e1e(0x1) = CONST 
    0xe200x3f1: v3f1e20 = OR v3f1e1e(0x1), v3f1e1d
    0xe220x3f1: SSTORE v3f1e0b(0x0), v3f1e20

    Begin block 0xe230x3f1
    prev=[0xe0b0x3f1, 0xdf80x3f1], succ=[0xe790x3f1, 0x20d60x3f1]
    =================================
    0xe240x3f1: v3f1e24(0x33) = CONST 
    0xe270x3f1: v3f1e27 = SLOAD v3f1e24(0x33)
    0xe280x3f1: v3f1e28(0x1) = CONST 
    0xe2a0x3f1: v3f1e2a(0x1) = CONST 
    0xe2c0x3f1: v3f1e2c(0xa0) = CONST 
    0xe2e0x3f1: v3f1e2e(0x10000000000000000000000000000000000000000) = SHL v3f1e2c(0xa0), v3f1e2a(0x1)
    0xe2f0x3f1: v3f1e2f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3f1e2e(0x10000000000000000000000000000000000000000), v3f1e28(0x1)
    0xe300x3f1: v3f1e30(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v3f1e2f(0xffffffffffffffffffffffffffffffffffffffff)
    0xe310x3f1: v3f1e31 = AND v3f1e30(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v3f1e27
    0xe320x3f1: v3f1e32(0x1) = CONST 
    0xe340x3f1: v3f1e34(0x1) = CONST 
    0xe360x3f1: v3f1e36(0xa0) = CONST 
    0xe380x3f1: v3f1e38(0x10000000000000000000000000000000000000000) = SHL v3f1e36(0xa0), v3f1e34(0x1)
    0xe390x3f1: v3f1e39(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3f1e38(0x10000000000000000000000000000000000000000), v3f1e32(0x1)
    0xe3c0x3f1: v3f1e3c = AND v3f1e39(0xffffffffffffffffffffffffffffffffffffffff), v412
    0xe400x3f1: v3f1e40 = OR v3f1e3c, v3f1e31
    0xe440x3f1: SSTORE v3f1e24(0x33), v3f1e40
    0xe450x3f1: v3f1e45(0x40) = CONST 
    0xe470x3f1: v3f1e47 = MLOAD v3f1e45(0x40)
    0xe490x3f1: v3f1e49 = AND v3f1e40, v3f1e39(0xffffffffffffffffffffffffffffffffffffffff)
    0xe4b0x3f1: v3f1e4b(0x0) = CONST 
    0xe4e0x3f1: v3f1e4e(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0xe720x3f1: LOG3 v3f1e47, v3f1e4b(0x0), v3f1e4e(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v3f1e4b(0x0), v3f1e49
    0xe740x3f1: v3f1e74 = ISZERO v3f1e04
    0xe750x3f1: v3f1e75(0x20d6) = CONST 
    0xe780x3f1: JUMPI v3f1e75(0x20d6), v3f1e74

    Begin block 0xe790x3f1
    prev=[0xe230x3f1], succ=[0x1dda]
    =================================
    0xe790x3f1: v3f1e79(0x0) = CONST 
    0xe7c0x3f1: v3f1e7c = SLOAD v3f1e79(0x0)
    0xe7d0x3f1: v3f1e7d(0xff00) = CONST 
    0xe800x3f1: v3f1e80(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v3f1e7d(0xff00)
    0xe810x3f1: v3f1e81 = AND v3f1e80(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v3f1e7c
    0xe830x3f1: SSTORE v3f1e79(0x0), v3f1e81
    0xe860x3f1: JUMP v3f2(0x1dda)

    Begin block 0x1dda
    prev=[0xe790x3f1, 0x20d60x3f1], succ=[]
    =================================
    0x1ddb: STOP 

    Begin block 0x20d60x3f1
    prev=[0xe230x3f1], succ=[0x1dda]
    =================================
    0x20d90x3f1: JUMP v3f2(0x1dda)

    Begin block 0xdb50x3f1
    prev=[0xdaf0x3f1], succ=[0xdbd0x3f1]
    =================================
    0xdb60x3f1: v3f1db6(0x0) = CONST 
    0xdb80x3f1: v3f1db8 = SLOAD v3f1db6(0x0)
    0xdb90x3f1: v3f1db9(0xff) = CONST 
    0xdbb0x3f1: v3f1dbb = AND v3f1db9(0xff), v3f1db8
    0xdbc0x3f1: v3f1dbc = ISZERO v3f1dbb

    Begin block 0xda70x3f1
    prev=[0xd960x3f1], succ=[0x1189B0xda70x3f1]
    =================================
    0xda80x3f1: v3f1da8(0xdaf) = CONST 
    0xdab0x3f1: v3f1dab(0x1189) = CONST 
    0xdae0x3f1: JUMP v3f1dab(0x1189)

    Begin block 0x1189B0xda70x3f1
    prev=[0xda70x3f1], succ=[0xdaf0x3f1]
    =================================
    0x118aS0xda70x3f1: v118aVda73f1 = ADDRESS 
    0x118bS0xda70x3f1: v118bVda73f1 = EXTCODESIZE v118aVda73f1
    0x118cS0xda70x3f1: v118cVda73f1 = ISZERO v118bVda73f1
    0x118eS0xda70x3f1: JUMP v3f1da8(0xdaf)

}

function lastUpdateTime()() public {
    Begin block 0x417
    prev=[], succ=[0xe87]
    =================================
    0x418: v418(0x1dfb) = CONST 
    0x41b: v41b(0xe87) = CONST 
    0x41e: JUMP v41b(0xe87)

    Begin block 0xe87
    prev=[0x417], succ=[0x1dfb]
    =================================
    0xe88: ve88(0x9f) = CONST 
    0xe8a: ve8a = SLOAD ve88(0x9f)
    0xe8c: JUMP v418(0x1dfb)

    Begin block 0x1dfb
    prev=[0xe87], succ=[]
    =================================
    0x1dfc: v1dfc(0x40) = CONST 
    0x1dff: v1dff = MLOAD v1dfc(0x40)
    0x1e02: MSTORE v1dff, ve8a
    0x1e03: v1e03 = MLOAD v1dfc(0x40)
    0x1e07: v1e07(0x0) = SUB v1dff, v1e03
    0x1e08: v1e08(0x20) = CONST 
    0x1e0a: v1e0a(0x20) = ADD v1e08(0x20), v1e07(0x0)
    0x1e0c: RETURN v1e03, v1e0a(0x20)

}

function setRewardsDuration(uint256)() public {
    Begin block 0x41f
    prev=[], succ=[0x431, 0x435]
    =================================
    0x420: v420(0x1e2c) = CONST 
    0x423: v423(0x4) = CONST 
    0x426: v426 = CALLDATASIZE 
    0x427: v427 = SUB v426, v423(0x4)
    0x428: v428(0x20) = CONST 
    0x42b: v42b = LT v427, v428(0x20)
    0x42c: v42c = ISZERO v42b
    0x42d: v42d(0x435) = CONST 
    0x430: JUMPI v42d(0x435), v42c

    Begin block 0x431
    prev=[0x41f], succ=[]
    =================================
    0x431: v431(0x0) = CONST 
    0x434: REVERT v431(0x0), v431(0x0)

    Begin block 0x435
    prev=[0x41f], succ=[0xe8d]
    =================================
    0x437: v437 = CALLDATALOAD v423(0x4)
    0x438: v438(0xe8d) = CONST 
    0x43b: JUMP v438(0xe8d)

    Begin block 0xe8d
    prev=[0x435], succ=[0xad6B0xe8d]
    =================================
    0xe8e: ve8e(0xe95) = CONST 
    0xe91: ve91(0xad6) = CONST 
    0xe94: JUMP ve91(0xad6)

    Begin block 0xad6B0xe8d
    prev=[0xe8d], succ=[0x12caB0xe8d]
    =================================
    0xad7S0xe8d: vad7Ve8d(0x33) = CONST 
    0xad9S0xe8d: vad9Ve8d = SLOAD vad7Ve8d(0x33)
    0xadaS0xe8d: vadaVe8d(0x0) = CONST 
    0xaddS0xe8d: vaddVe8d(0x1) = CONST 
    0xadfS0xe8d: vadfVe8d(0x1) = CONST 
    0xae1S0xe8d: vae1Ve8d(0xa0) = CONST 
    0xae3S0xe8d: vae3Ve8d(0x10000000000000000000000000000000000000000) = SHL vae1Ve8d(0xa0), vadfVe8d(0x1)
    0xae4S0xe8d: vae4Ve8d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3Ve8d(0x10000000000000000000000000000000000000000), vaddVe8d(0x1)
    0xae5S0xe8d: vae5Ve8d = AND vae4Ve8d(0xffffffffffffffffffffffffffffffffffffffff), vad9Ve8d
    0xae6S0xe8d: vae6Ve8d(0xaed) = CONST 
    0xae9S0xe8d: vae9Ve8d(0x12ca) = CONST 
    0xaecS0xe8d: JUMP vae9Ve8d(0x12ca)

    Begin block 0x12caB0xe8d
    prev=[0xad6B0xe8d], succ=[0xaedB0xe8d]
    =================================
    0x12cbS0xe8d: v12cbVe8d = CALLER 
    0x12cdS0xe8d: JUMP vae6Ve8d(0xaed)

    Begin block 0xaedB0xe8d
    prev=[0x12caB0xe8d], succ=[0xe95]
    =================================
    0xaeeS0xe8d: vaeeVe8d(0x1) = CONST 
    0xaf0S0xe8d: vaf0Ve8d(0x1) = CONST 
    0xaf2S0xe8d: vaf2Ve8d(0xa0) = CONST 
    0xaf4S0xe8d: vaf4Ve8d(0x10000000000000000000000000000000000000000) = SHL vaf2Ve8d(0xa0), vaf0Ve8d(0x1)
    0xaf5S0xe8d: vaf5Ve8d(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf4Ve8d(0x10000000000000000000000000000000000000000), vaeeVe8d(0x1)
    0xaf6S0xe8d: vaf6Ve8d = AND vaf5Ve8d(0xffffffffffffffffffffffffffffffffffffffff), v12cbVe8d
    0xaf7S0xe8d: vaf7Ve8d = EQ vaf6Ve8d, vae5Ve8d
    0xafbS0xe8d: JUMP ve8e(0xe95)

    Begin block 0xe95
    prev=[0xaedB0xe8d], succ=[0xe9a, 0xed4]
    =================================
    0xe96: ve96(0xed4) = CONST 
    0xe99: JUMPI ve96(0xed4), vaf7Ve8d

    Begin block 0xe9a
    prev=[0xe95], succ=[]
    =================================
    0xe9a: ve9a(0x40) = CONST 
    0xe9d: ve9d = MLOAD ve9a(0x40)
    0xe9e: ve9e(0x461bcd) = CONST 
    0xea2: vea2(0xe5) = CONST 
    0xea4: vea4(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vea2(0xe5), ve9e(0x461bcd)
    0xea6: MSTORE ve9d, vea4(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xea7: vea7(0x20) = CONST 
    0xea9: vea9(0x4) = CONST 
    0xeac: veac = ADD ve9d, vea9(0x4)
    0xeaf: MSTORE veac, vea7(0x20)
    0xeb0: veb0(0x24) = CONST 
    0xeb3: veb3 = ADD ve9d, veb0(0x24)
    0xeb4: MSTORE veb3, vea7(0x20)
    0xeb5: veb5(0x0) = CONST 
    0xeb8: veb8 = MLOAD veb5(0x0)
    0xeb9: veb9(0x20) = CONST 
    0xebb: vebb(0x180d) = CONST 
    0xec3: MSTORE veb5(0x0), veb8
    0xec4: vec4(0x44) = CONST 
    0xec7: vec7 = ADD ve9d, vec4(0x44)
    0xec8: MSTORE vec7, v23bb(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0xeca: veca = MLOAD ve9a(0x40)
    0xece: vece(0x0) = SUB ve9d, veca
    0xecf: vecf(0x64) = CONST 
    0xed1: ved1(0x64) = ADD vecf(0x64), vece(0x0)
    0xed3: REVERT veca, ved1(0x64)
    0x23bb: v23bb(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0xed4
    prev=[0xe95], succ=[0xede, 0xf14]
    =================================
    0xed5: ved5(0x9c) = CONST 
    0xed7: ved7 = SLOAD ved5(0x9c)
    0xed8: ved8 = TIMESTAMP 
    0xed9: ved9 = GT ved8, ved7
    0xeda: veda(0xf14) = CONST 
    0xedd: JUMPI veda(0xf14), ved9

    Begin block 0xede
    prev=[0xed4], succ=[]
    =================================
    0xede: vede(0x40) = CONST 
    0xee0: vee0 = MLOAD vede(0x40)
    0xee1: vee1(0x461bcd) = CONST 
    0xee5: vee5(0xe5) = CONST 
    0xee7: vee7(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vee5(0xe5), vee1(0x461bcd)
    0xee9: MSTORE vee0, vee7(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xeea: veea(0x4) = CONST 
    0xeec: veec = ADD veea(0x4), vee0
    0xeef: veef(0x20) = CONST 
    0xef1: vef1 = ADD veef(0x20), veec
    0xef4: vef4(0x20) = SUB vef1, veec
    0xef6: MSTORE veec, vef4(0x20)
    0xef7: vef7(0x58) = CONST 
    0xefa: MSTORE vef1, vef7(0x58)
    0xefb: vefb(0x20) = CONST 
    0xefd: vefd = ADD vefb(0x20), vef1
    0xeff: veff(0x176e) = CONST 
    0xf02: vf02(0x58) = CONST 
    0xf05: CODECOPY vefd, veff(0x176e), vf02(0x58)
    0xf06: vf06(0x60) = CONST 
    0xf08: vf08 = ADD vf06(0x60), vefd
    0xf0c: vf0c(0x40) = CONST 
    0xf0e: vf0e = MLOAD vf0c(0x40)
    0xf11: vf11(0xa4) = SUB vf08, vf0e
    0xf13: REVERT vf0e, vf11(0xa4)

    Begin block 0xf14
    prev=[0xed4], succ=[0x1e2c]
    =================================
    0xf15: vf15(0x9e) = CONST 
    0xf19: SSTORE vf15(0x9e), v437
    0xf1a: vf1a(0x40) = CONST 
    0xf1d: vf1d = MLOAD vf1a(0x40)
    0xf20: MSTORE vf1d, v437
    0xf22: vf22 = MLOAD vf1a(0x40)
    0xf23: vf23(0xfb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3) = CONST 
    0xf47: vf47(0x0) = SUB vf1d, vf22
    0xf48: vf48(0x20) = CONST 
    0xf4a: vf4a(0x20) = ADD vf48(0x20), vf47(0x0)
    0xf4c: LOG1 vf22, vf4a(0x20), vf23(0xfb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d3)
    0xf4e: JUMP v420(0x1e2c)

    Begin block 0x1e2c
    prev=[0xf14], succ=[]
    =================================
    0x1e2d: STOP 

}

function rewardPerToken()() public {
    Begin block 0x43c
    prev=[], succ=[0x1e4d]
    =================================
    0x43d: v43d(0x1e4d) = CONST 
    0x440: v440(0xf4f) = CONST 
    0x443: v443_0, v443_1 = CALLPRIVATE v440(0xf4f), v43d(0x1e4d)

    Begin block 0x1e4d
    prev=[0x43c], succ=[]
    =================================
    0x1e4e: v1e4e(0x40) = CONST 
    0x1e51: v1e51 = MLOAD v1e4e(0x40)
    0x1e54: MSTORE v1e51, v443_0
    0x1e55: v1e55 = MLOAD v1e4e(0x40)
    0x1e59: v1e59(0x0) = SUB v1e51, v1e55
    0x1e5a: v1e5a(0x20) = CONST 
    0x1e5c: v1e5c(0x20) = ADD v1e5a(0x20), v1e59(0x0)
    0x1e5e: RETURN v1e55, v1e5c(0x20)

}

function rewardsToken()() public {
    Begin block 0x444
    prev=[], succ=[0xfa9]
    =================================
    0x445: v445(0x1e7e) = CONST 
    0x448: v448(0xfa9) = CONST 
    0x44b: JUMP v448(0xfa9)

    Begin block 0xfa9
    prev=[0x444], succ=[0x1e7e]
    =================================
    0xfaa: vfaa(0x9a) = CONST 
    0xfac: vfac = SLOAD vfaa(0x9a)
    0xfad: vfad(0x1) = CONST 
    0xfaf: vfaf(0x1) = CONST 
    0xfb1: vfb1(0xa0) = CONST 
    0xfb3: vfb3(0x10000000000000000000000000000000000000000) = SHL vfb1(0xa0), vfaf(0x1)
    0xfb4: vfb4(0xffffffffffffffffffffffffffffffffffffffff) = SUB vfb3(0x10000000000000000000000000000000000000000), vfad(0x1)
    0xfb5: vfb5 = AND vfb4(0xffffffffffffffffffffffffffffffffffffffff), vfac
    0xfb7: JUMP v445(0x1e7e)

    Begin block 0x1e7e
    prev=[0xfa9], succ=[]
    =================================
    0x1e7f: v1e7f(0x40) = CONST 
    0x1e82: v1e82 = MLOAD v1e7f(0x40)
    0x1e83: v1e83(0x1) = CONST 
    0x1e85: v1e85(0x1) = CONST 
    0x1e87: v1e87(0xa0) = CONST 
    0x1e89: v1e89(0x10000000000000000000000000000000000000000) = SHL v1e87(0xa0), v1e85(0x1)
    0x1e8a: v1e8a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1e89(0x10000000000000000000000000000000000000000), v1e83(0x1)
    0x1e8d: v1e8d = AND vfb5, v1e8a(0xffffffffffffffffffffffffffffffffffffffff)
    0x1e8f: MSTORE v1e82, v1e8d
    0x1e90: v1e90 = MLOAD v1e7f(0x40)
    0x1e94: v1e94(0x0) = SUB v1e82, v1e90
    0x1e95: v1e95(0x20) = CONST 
    0x1e97: v1e97(0x20) = ADD v1e95(0x20), v1e94(0x0)
    0x1e99: RETURN v1e90, v1e97(0x20)

}

function rewardPerTokenStored()() public {
    Begin block 0x44c
    prev=[], succ=[0xfb8]
    =================================
    0x44d: v44d(0x1eb9) = CONST 
    0x450: v450(0xfb8) = CONST 
    0x453: JUMP v450(0xfb8)

    Begin block 0xfb8
    prev=[0x44c], succ=[0x1eb9]
    =================================
    0xfb9: vfb9(0xa0) = CONST 
    0xfbb: vfbb = SLOAD vfb9(0xa0)
    0xfbd: JUMP v44d(0x1eb9)

    Begin block 0x1eb9
    prev=[0xfb8], succ=[]
    =================================
    0x1eba: v1eba(0x40) = CONST 
    0x1ebd: v1ebd = MLOAD v1eba(0x40)
    0x1ec0: MSTORE v1ebd, vfbb
    0x1ec1: v1ec1 = MLOAD v1eba(0x40)
    0x1ec5: v1ec5(0x0) = SUB v1ebd, v1ec1
    0x1ec6: v1ec6(0x20) = CONST 
    0x1ec8: v1ec8(0x20) = ADD v1ec6(0x20), v1ec5(0x0)
    0x1eca: RETURN v1ec1, v1ec8(0x20)

}

function exit()() public {
    Begin block 0x454
    prev=[], succ=[0xfbeB0x454]
    =================================
    0x455: v455(0x1eea) = CONST 
    0x458: v458(0xfbe) = CONST 
    0x45b: JUMP v458(0xfbe)

    Begin block 0xfbeB0x454
    prev=[0x454], succ=[0xfd7B0x454]
    =================================
    0xfbfS0x454: vfbfV454 = CALLER 
    0xfc0S0x454: vfc0V454(0x0) = CONST 
    0xfc4S0x454: MSTORE vfc0V454(0x0), vfbfV454
    0xfc5S0x454: vfc5V454(0xa4) = CONST 
    0xfc7S0x454: vfc7V454(0x20) = CONST 
    0xfc9S0x454: MSTORE vfc7V454(0x20), vfc5V454(0xa4)
    0xfcaS0x454: vfcaV454(0x40) = CONST 
    0xfcdS0x454: vfcdV454 = SHA3 vfc0V454(0x0), vfcaV454(0x40)
    0xfceS0x454: vfceV454 = SLOAD vfcdV454
    0xfcfS0x454: vfcfV454(0xfd7) = CONST 
    0xfd3S0x454: vfd3V454(0x118f) = CONST 
    0xfd6S0x454: CALLPRIVATE vfd3V454(0x118f), vfceV454, vfcfV454(0xfd7)

    Begin block 0xfd7B0x454
    prev=[0xfbeB0x454], succ=[0x1328B0xfd7B0x454]
    =================================
    0xfd8S0x454: vfd8V454(0x2173) = CONST 
    0xfdbS0x454: vfdbV454(0x1328) = CONST 
    0xfdeS0x454: JUMP vfdbV454(0x1328)

    Begin block 0x1328B0xfd7B0x454
    prev=[0xfd7B0x454], succ=[0x1333B0xfd7B0x454]
    =================================
    0x1329S0xfd7S0x454: v1329Vfd7V454(0x0) = CONST 
    0x132bS0xfd7S0x454: v132bVfd7V454(0x1333) = CONST 
    0x132eS0xfd7S0x454: v132eVfd7V454 = CALLER 
    0x132fS0xfd7S0x454: v132fVfd7V454(0x48a) = CONST 
    0x1332S0xfd7S0x454: v1332_0Vfd7V454 = CALLPRIVATE v132fVfd7V454(0x48a), v132eVfd7V454

    Begin block 0x1333B0xfd7B0x454
    prev=[0x1328B0xfd7B0x454], succ=[0x133cB0xfd7B0x454, 0x22beB0xfd7B0x454]
    =================================
    0x1337S0xfd7S0x454: v1337Vfd7V454 = ISZERO v1332_0Vfd7V454
    0x1338S0xfd7S0x454: v1338Vfd7V454(0x22be) = CONST 
    0x133bS0xfd7S0x454: JUMPI v1338Vfd7V454(0x22be), v1337Vfd7V454

    Begin block 0x133cB0xfd7B0x454
    prev=[0x1333B0xfd7B0x454], succ=[0x136eB0xfd7B0x454]
    =================================
    0x133cS0xfd7S0x454: v133cVfd7V454 = CALLER 
    0x133dS0xfd7S0x454: v133dVfd7V454(0x0) = CONST 
    0x1341S0xfd7S0x454: MSTORE v133dVfd7V454(0x0), v133cVfd7V454
    0x1342S0xfd7S0x454: v1342Vfd7V454(0xa2) = CONST 
    0x1344S0xfd7S0x454: v1344Vfd7V454(0x20) = CONST 
    0x1346S0xfd7S0x454: MSTORE v1344Vfd7V454(0x20), v1342Vfd7V454(0xa2)
    0x1347S0xfd7S0x454: v1347Vfd7V454(0x40) = CONST 
    0x134aS0xfd7S0x454: v134aVfd7V454 = SHA3 v133dVfd7V454(0x0), v1347Vfd7V454(0x40)
    0x134bS0xfd7S0x454: SSTORE v134aVfd7V454, v133dVfd7V454(0x0)
    0x134cS0xfd7S0x454: v134cVfd7V454(0xa5) = CONST 
    0x134eS0xfd7S0x454: v134eVfd7V454 = SLOAD v134cVfd7V454(0xa5)
    0x134fS0xfd7S0x454: v134fVfd7V454(0x9a) = CONST 
    0x1351S0xfd7S0x454: v1351Vfd7V454 = SLOAD v134fVfd7V454(0x9a)
    0x1352S0xfd7S0x454: v1352Vfd7V454(0x136e) = CONST 
    0x1356S0xfd7S0x454: v1356Vfd7V454(0x1) = CONST 
    0x1358S0xfd7S0x454: v1358Vfd7V454(0x1) = CONST 
    0x135aS0xfd7S0x454: v135aVfd7V454(0xa0) = CONST 
    0x135cS0xfd7S0x454: v135cVfd7V454(0x10000000000000000000000000000000000000000) = SHL v135aVfd7V454(0xa0), v1358Vfd7V454(0x1)
    0x135dS0xfd7S0x454: v135dVfd7V454(0xffffffffffffffffffffffffffffffffffffffff) = SUB v135cVfd7V454(0x10000000000000000000000000000000000000000), v1356Vfd7V454(0x1)
    0x1360S0xfd7S0x454: v1360Vfd7V454 = AND v135dVfd7V454(0xffffffffffffffffffffffffffffffffffffffff), v1351Vfd7V454
    0x1362S0xfd7S0x454: v1362Vfd7V454 = AND v135dVfd7V454(0xffffffffffffffffffffffffffffffffffffffff), v134eVfd7V454
    0x1364S0xfd7S0x454: v1364Vfd7V454(0xffffffff) = CONST 
    0x1369S0xfd7S0x454: v1369Vfd7V454(0x1273) = CONST 
    0x136cS0xfd7S0x454: v136cVfd7V454(0x1273) = AND v1369Vfd7V454(0x1273), v1364Vfd7V454(0xffffffff)
    0x136dS0xfd7S0x454: CALLPRIVATE v136cVfd7V454(0x1273), v1332_0Vfd7V454, v1362Vfd7V454, v1360Vfd7V454, v1352Vfd7V454(0x136e)

    Begin block 0x136eB0xfd7B0x454
    prev=[0x133cB0xfd7B0x454], succ=[0x13bdB0xfd7B0x454, 0x13c1B0xfd7B0x454]
    =================================
    0x136fS0xfd7S0x454: v136fVfd7V454(0xa5) = CONST 
    0x1371S0xfd7S0x454: v1371Vfd7V454 = SLOAD v136fVfd7V454(0xa5)
    0x1372S0xfd7S0x454: v1372Vfd7V454(0x40) = CONST 
    0x1375S0xfd7S0x454: v1375Vfd7V454 = MLOAD v1372Vfd7V454(0x40)
    0x1376S0xfd7S0x454: v1376Vfd7V454(0xb5ddb9c7) = CONST 
    0x137bS0xfd7S0x454: v137bVfd7V454(0xe0) = CONST 
    0x137dS0xfd7S0x454: v137dVfd7V454(0xb5ddb9c700000000000000000000000000000000000000000000000000000000) = SHL v137bVfd7V454(0xe0), v1376Vfd7V454(0xb5ddb9c7)
    0x137fS0xfd7S0x454: MSTORE v1375Vfd7V454, v137dVfd7V454(0xb5ddb9c700000000000000000000000000000000000000000000000000000000)
    0x1380S0xfd7S0x454: v1380Vfd7V454 = CALLER 
    0x1381S0xfd7S0x454: v1381Vfd7V454(0x4) = CONST 
    0x1384S0xfd7S0x454: v1384Vfd7V454 = ADD v1375Vfd7V454, v1381Vfd7V454(0x4)
    0x1385S0xfd7S0x454: MSTORE v1384Vfd7V454, v1380Vfd7V454
    0x1386S0xfd7S0x454: v1386Vfd7V454(0x24) = CONST 
    0x1389S0xfd7S0x454: v1389Vfd7V454 = ADD v1375Vfd7V454, v1386Vfd7V454(0x24)
    0x138cS0xfd7S0x454: MSTORE v1389Vfd7V454, v1332_0Vfd7V454
    0x138eS0xfd7S0x454: v138eVfd7V454 = MLOAD v1372Vfd7V454(0x40)
    0x138fS0xfd7S0x454: v138fVfd7V454(0x1) = CONST 
    0x1391S0xfd7S0x454: v1391Vfd7V454(0x1) = CONST 
    0x1393S0xfd7S0x454: v1393Vfd7V454(0xa0) = CONST 
    0x1395S0xfd7S0x454: v1395Vfd7V454(0x10000000000000000000000000000000000000000) = SHL v1393Vfd7V454(0xa0), v1391Vfd7V454(0x1)
    0x1396S0xfd7S0x454: v1396Vfd7V454(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1395Vfd7V454(0x10000000000000000000000000000000000000000), v138fVfd7V454(0x1)
    0x1399S0xfd7S0x454: v1399Vfd7V454 = AND v1371Vfd7V454, v1396Vfd7V454(0xffffffffffffffffffffffffffffffffffffffff)
    0x139bS0xfd7S0x454: v139bVfd7V454(0xb5ddb9c7) = CONST 
    0x13a1S0xfd7S0x454: v13a1Vfd7V454(0x44) = CONST 
    0x13a5S0xfd7S0x454: v13a5Vfd7V454 = ADD v1375Vfd7V454, v13a1Vfd7V454(0x44)
    0x13a7S0xfd7S0x454: v13a7Vfd7V454(0x0) = CONST 
    0x13afS0xfd7S0x454: v13afVfd7V454(0x0) = SUB v1375Vfd7V454, v138eVfd7V454
    0x13b0S0xfd7S0x454: v13b0Vfd7V454(0x44) = ADD v13afVfd7V454(0x0), v13a1Vfd7V454(0x44)
    0x13b5S0xfd7S0x454: v13b5Vfd7V454 = EXTCODESIZE v1399Vfd7V454
    0x13b6S0xfd7S0x454: v13b6Vfd7V454 = ISZERO v13b5Vfd7V454
    0x13b8S0xfd7S0x454: v13b8Vfd7V454 = ISZERO v13b6Vfd7V454
    0x13b9S0xfd7S0x454: v13b9Vfd7V454(0x13c1) = CONST 
    0x13bcS0xfd7S0x454: JUMPI v13b9Vfd7V454(0x13c1), v13b8Vfd7V454

    Begin block 0x13bdB0xfd7B0x454
    prev=[0x136eB0xfd7B0x454], succ=[]
    =================================
    0x13bdS0xfd7S0x454: v13bdVfd7V454(0x0) = CONST 
    0x13c0S0xfd7S0x454: REVERT v13bdVfd7V454(0x0), v13bdVfd7V454(0x0)

    Begin block 0x13c1B0xfd7B0x454
    prev=[0x136eB0xfd7B0x454], succ=[0x13ccB0xfd7B0x454, 0x13d5B0xfd7B0x454]
    =================================
    0x13c3S0xfd7S0x454: v13c3Vfd7V454 = GAS 
    0x13c4S0xfd7S0x454: v13c4Vfd7V454 = CALL v13c3Vfd7V454, v1399Vfd7V454, v13a7Vfd7V454(0x0), v138eVfd7V454, v13b0Vfd7V454(0x44), v138eVfd7V454, v13a7Vfd7V454(0x0)
    0x13c5S0xfd7S0x454: v13c5Vfd7V454 = ISZERO v13c4Vfd7V454
    0x13c7S0xfd7S0x454: v13c7Vfd7V454 = ISZERO v13c5Vfd7V454
    0x13c8S0xfd7S0x454: v13c8Vfd7V454(0x13d5) = CONST 
    0x13cbS0xfd7S0x454: JUMPI v13c8Vfd7V454(0x13d5), v13c7Vfd7V454

    Begin block 0x13ccB0xfd7B0x454
    prev=[0x13c1B0xfd7B0x454], succ=[]
    =================================
    0x13ccS0xfd7S0x454: v13ccVfd7V454 = RETURNDATASIZE 
    0x13cdS0xfd7S0x454: v13cdVfd7V454(0x0) = CONST 
    0x13d0S0xfd7S0x454: RETURNDATACOPY v13cdVfd7V454(0x0), v13cdVfd7V454(0x0), v13ccVfd7V454
    0x13d1S0xfd7S0x454: v13d1Vfd7V454 = RETURNDATASIZE 
    0x13d2S0xfd7S0x454: v13d2Vfd7V454(0x0) = CONST 
    0x13d4S0xfd7S0x454: REVERT v13d2Vfd7V454(0x0), v13d1Vfd7V454

    Begin block 0x13d5B0xfd7B0x454
    prev=[0x13c1B0xfd7B0x454], succ=[0x2173B0x454]
    =================================
    0x13dbS0xfd7S0x454: JUMP v1329Vfd7V454(0x0)

    Begin block 0x2173B0x454
    prev=[0x22beB0xfd7B0x454, 0x13d5B0xfd7B0x454], succ=[0x1eea]
    =================================
    0x2174S0x454: JUMP vfd8V454(0x2173)

    Begin block 0x1eea
    prev=[0x2173B0x454], succ=[]
    =================================
    0x1eeb: STOP 

    Begin block 0x22beB0xfd7B0x454
    prev=[0x1333B0xfd7B0x454], succ=[0x2173B0x454]
    =================================
    0x22c0S0xfd7S0x454: JUMP v1329Vfd7V454(0x0)

}

function periodFinish()() public {
    Begin block 0x45c
    prev=[], succ=[0xfdf]
    =================================
    0x45d: v45d(0x1f0b) = CONST 
    0x460: v460(0xfdf) = CONST 
    0x463: JUMP v460(0xfdf)

    Begin block 0xfdf
    prev=[0x45c], succ=[0x1f0b]
    =================================
    0xfe0: vfe0(0x9c) = CONST 
    0xfe2: vfe2 = SLOAD vfe0(0x9c)
    0xfe4: JUMP v45d(0x1f0b)

    Begin block 0x1f0b
    prev=[0xfdf], succ=[]
    =================================
    0x1f0c: v1f0c(0x40) = CONST 
    0x1f0f: v1f0f = MLOAD v1f0c(0x40)
    0x1f12: MSTORE v1f0f, vfe2
    0x1f13: v1f13 = MLOAD v1f0c(0x40)
    0x1f17: v1f17(0x0) = SUB v1f0f, v1f13
    0x1f18: v1f18(0x20) = CONST 
    0x1f1a: v1f1a(0x20) = ADD v1f18(0x20), v1f17(0x0)
    0x1f1c: RETURN v1f13, v1f1a(0x20)

}

function transferOwnership(address)() public {
    Begin block 0x464
    prev=[], succ=[0x476, 0x47a]
    =================================
    0x465: v465(0x1f3c) = CONST 
    0x468: v468(0x4) = CONST 
    0x46b: v46b = CALLDATASIZE 
    0x46c: v46c = SUB v46b, v468(0x4)
    0x46d: v46d(0x20) = CONST 
    0x470: v470 = LT v46c, v46d(0x20)
    0x471: v471 = ISZERO v470
    0x472: v472(0x47a) = CONST 
    0x475: JUMPI v472(0x47a), v471

    Begin block 0x476
    prev=[0x464], succ=[]
    =================================
    0x476: v476(0x0) = CONST 
    0x479: REVERT v476(0x0), v476(0x0)

    Begin block 0x47a
    prev=[0x464], succ=[0xfe5]
    =================================
    0x47c: v47c = CALLDATALOAD v468(0x4)
    0x47d: v47d(0x1) = CONST 
    0x47f: v47f(0x1) = CONST 
    0x481: v481(0xa0) = CONST 
    0x483: v483(0x10000000000000000000000000000000000000000) = SHL v481(0xa0), v47f(0x1)
    0x484: v484(0xffffffffffffffffffffffffffffffffffffffff) = SUB v483(0x10000000000000000000000000000000000000000), v47d(0x1)
    0x485: v485 = AND v484(0xffffffffffffffffffffffffffffffffffffffff), v47c
    0x486: v486(0xfe5) = CONST 
    0x489: JUMP v486(0xfe5)

    Begin block 0xfe5
    prev=[0x47a], succ=[0xad6B0xfe5]
    =================================
    0xfe6: vfe6(0xfed) = CONST 
    0xfe9: vfe9(0xad6) = CONST 
    0xfec: JUMP vfe9(0xad6)

    Begin block 0xad6B0xfe5
    prev=[0xfe5], succ=[0x12caB0xfe5]
    =================================
    0xad7S0xfe5: vad7Vfe5(0x33) = CONST 
    0xad9S0xfe5: vad9Vfe5 = SLOAD vad7Vfe5(0x33)
    0xadaS0xfe5: vadaVfe5(0x0) = CONST 
    0xaddS0xfe5: vaddVfe5(0x1) = CONST 
    0xadfS0xfe5: vadfVfe5(0x1) = CONST 
    0xae1S0xfe5: vae1Vfe5(0xa0) = CONST 
    0xae3S0xfe5: vae3Vfe5(0x10000000000000000000000000000000000000000) = SHL vae1Vfe5(0xa0), vadfVfe5(0x1)
    0xae4S0xfe5: vae4Vfe5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vae3Vfe5(0x10000000000000000000000000000000000000000), vaddVfe5(0x1)
    0xae5S0xfe5: vae5Vfe5 = AND vae4Vfe5(0xffffffffffffffffffffffffffffffffffffffff), vad9Vfe5
    0xae6S0xfe5: vae6Vfe5(0xaed) = CONST 
    0xae9S0xfe5: vae9Vfe5(0x12ca) = CONST 
    0xaecS0xfe5: JUMP vae9Vfe5(0x12ca)

    Begin block 0x12caB0xfe5
    prev=[0xad6B0xfe5], succ=[0xaedB0xfe5]
    =================================
    0x12cbS0xfe5: v12cbVfe5 = CALLER 
    0x12cdS0xfe5: JUMP vae6Vfe5(0xaed)

    Begin block 0xaedB0xfe5
    prev=[0x12caB0xfe5], succ=[0xfed]
    =================================
    0xaeeS0xfe5: vaeeVfe5(0x1) = CONST 
    0xaf0S0xfe5: vaf0Vfe5(0x1) = CONST 
    0xaf2S0xfe5: vaf2Vfe5(0xa0) = CONST 
    0xaf4S0xfe5: vaf4Vfe5(0x10000000000000000000000000000000000000000) = SHL vaf2Vfe5(0xa0), vaf0Vfe5(0x1)
    0xaf5S0xfe5: vaf5Vfe5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaf4Vfe5(0x10000000000000000000000000000000000000000), vaeeVfe5(0x1)
    0xaf6S0xfe5: vaf6Vfe5 = AND vaf5Vfe5(0xffffffffffffffffffffffffffffffffffffffff), v12cbVfe5
    0xaf7S0xfe5: vaf7Vfe5 = EQ vaf6Vfe5, vae5Vfe5
    0xafbS0xfe5: JUMP vfe6(0xfed)

    Begin block 0xfed
    prev=[0xaedB0xfe5], succ=[0xff2, 0x102c]
    =================================
    0xfee: vfee(0x102c) = CONST 
    0xff1: JUMPI vfee(0x102c), vaf7Vfe5

    Begin block 0xff2
    prev=[0xfed], succ=[]
    =================================
    0xff2: vff2(0x40) = CONST 
    0xff5: vff5 = MLOAD vff2(0x40)
    0xff6: vff6(0x461bcd) = CONST 
    0xffa: vffa(0xe5) = CONST 
    0xffc: vffc(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vffa(0xe5), vff6(0x461bcd)
    0xffe: MSTORE vff5, vffc(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xfff: vfff(0x20) = CONST 
    0x1001: v1001(0x4) = CONST 
    0x1004: v1004 = ADD vff5, v1001(0x4)
    0x1007: MSTORE v1004, vfff(0x20)
    0x1008: v1008(0x24) = CONST 
    0x100b: v100b = ADD vff5, v1008(0x24)
    0x100c: MSTORE v100b, vfff(0x20)
    0x100d: v100d(0x0) = CONST 
    0x1010: v1010 = MLOAD v100d(0x0)
    0x1011: v1011(0x20) = CONST 
    0x1013: v1013(0x180d) = CONST 
    0x101b: MSTORE v100d(0x0), v1010
    0x101c: v101c(0x44) = CONST 
    0x101f: v101f = ADD vff5, v101c(0x44)
    0x1020: MSTORE v101f, v23c0(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572)
    0x1022: v1022 = MLOAD vff2(0x40)
    0x1026: v1026(0x0) = SUB vff5, v1022
    0x1027: v1027(0x64) = CONST 
    0x1029: v1029(0x64) = ADD v1027(0x64), v1026(0x0)
    0x102b: REVERT v1022, v1029(0x64)
    0x23c0: v23c0(0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572) = CONST 

    Begin block 0x102c
    prev=[0xfed], succ=[0x13dc]
    =================================
    0x102d: v102d(0x2194) = CONST 
    0x1031: v1031(0x13dc) = CONST 
    0x1034: JUMP v1031(0x13dc)

    Begin block 0x13dc
    prev=[0x102c], succ=[0x13eb, 0x1421]
    =================================
    0x13dd: v13dd(0x1) = CONST 
    0x13df: v13df(0x1) = CONST 
    0x13e1: v13e1(0xa0) = CONST 
    0x13e3: v13e3(0x10000000000000000000000000000000000000000) = SHL v13e1(0xa0), v13df(0x1)
    0x13e4: v13e4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v13e3(0x10000000000000000000000000000000000000000), v13dd(0x1)
    0x13e6: v13e6 = AND v485, v13e4(0xffffffffffffffffffffffffffffffffffffffff)
    0x13e7: v13e7(0x1421) = CONST 
    0x13ea: JUMPI v13e7(0x1421), v13e6

    Begin block 0x13eb
    prev=[0x13dc], succ=[]
    =================================
    0x13eb: v13eb(0x40) = CONST 
    0x13ed: v13ed = MLOAD v13eb(0x40)
    0x13ee: v13ee(0x461bcd) = CONST 
    0x13f2: v13f2(0xe5) = CONST 
    0x13f4: v13f4(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v13f2(0xe5), v13ee(0x461bcd)
    0x13f6: MSTORE v13ed, v13f4(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x13f7: v13f7(0x4) = CONST 
    0x13f9: v13f9 = ADD v13f7(0x4), v13ed
    0x13fc: v13fc(0x20) = CONST 
    0x13fe: v13fe = ADD v13fc(0x20), v13f9
    0x1401: v1401(0x20) = SUB v13fe, v13f9
    0x1403: MSTORE v13f9, v1401(0x20)
    0x1404: v1404(0x26) = CONST 
    0x1407: MSTORE v13fe, v1404(0x26)
    0x1408: v1408(0x20) = CONST 
    0x140a: v140a = ADD v1408(0x20), v13fe
    0x140c: v140c(0x17c6) = CONST 
    0x140f: v140f(0x26) = CONST 
    0x1412: CODECOPY v140a, v140c(0x17c6), v140f(0x26)
    0x1413: v1413(0x40) = CONST 
    0x1415: v1415 = ADD v1413(0x40), v140a
    0x1419: v1419(0x40) = CONST 
    0x141b: v141b = MLOAD v1419(0x40)
    0x141e: v141e(0x84) = SUB v1415, v141b
    0x1420: REVERT v141b, v141e(0x84)

    Begin block 0x1421
    prev=[0x13dc], succ=[0x2194]
    =================================
    0x1422: v1422(0x33) = CONST 
    0x1424: v1424 = SLOAD v1422(0x33)
    0x1425: v1425(0x40) = CONST 
    0x1427: v1427 = MLOAD v1425(0x40)
    0x1428: v1428(0x1) = CONST 
    0x142a: v142a(0x1) = CONST 
    0x142c: v142c(0xa0) = CONST 
    0x142e: v142e(0x10000000000000000000000000000000000000000) = SHL v142c(0xa0), v142a(0x1)
    0x142f: v142f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v142e(0x10000000000000000000000000000000000000000), v1428(0x1)
    0x1432: v1432 = AND v485, v142f(0xffffffffffffffffffffffffffffffffffffffff)
    0x1434: v1434 = AND v1424, v142f(0xffffffffffffffffffffffffffffffffffffffff)
    0x1436: v1436(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x1458: v1458(0x0) = CONST 
    0x145b: LOG3 v1427, v1458(0x0), v1436(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v1434, v1432
    0x145c: v145c(0x33) = CONST 
    0x145f: v145f = SLOAD v145c(0x33)
    0x1460: v1460(0x1) = CONST 
    0x1462: v1462(0x1) = CONST 
    0x1464: v1464(0xa0) = CONST 
    0x1466: v1466(0x10000000000000000000000000000000000000000) = SHL v1464(0xa0), v1462(0x1)
    0x1467: v1467(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1466(0x10000000000000000000000000000000000000000), v1460(0x1)
    0x1468: v1468(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1467(0xffffffffffffffffffffffffffffffffffffffff)
    0x1469: v1469 = AND v1468(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v145f
    0x146a: v146a(0x1) = CONST 
    0x146c: v146c(0x1) = CONST 
    0x146e: v146e(0xa0) = CONST 
    0x1470: v1470(0x10000000000000000000000000000000000000000) = SHL v146e(0xa0), v146c(0x1)
    0x1471: v1471(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1470(0x10000000000000000000000000000000000000000), v146a(0x1)
    0x1475: v1475 = AND v1471(0xffffffffffffffffffffffffffffffffffffffff), v485
    0x1479: v1479 = OR v1475, v1469
    0x147b: SSTORE v145c(0x33), v1479
    0x147c: JUMP v102d(0x2194)

    Begin block 0x2194
    prev=[0x1421], succ=[0x1f3c]
    =================================
    0x2196: JUMP v465(0x1f3c)

    Begin block 0x1f3c
    prev=[0x2194], succ=[]
    =================================
    0x1f3d: STOP 

}

function 0x48a(0x48aarg0x0) private {
    Begin block 0x48a
    prev=[], succ=[0x1fad0x48a]
    =================================
    0x48b: v48b(0x1) = CONST 
    0x48d: v48d(0x1) = CONST 
    0x48f: v48f(0xa0) = CONST 
    0x491: v491(0x10000000000000000000000000000000000000000) = SHL v48f(0xa0), v48d(0x1)
    0x492: v492(0xffffffffffffffffffffffffffffffffffffffff) = SUB v491(0x10000000000000000000000000000000000000000), v48b(0x1)
    0x494: v494 = AND v48aarg0, v492(0xffffffffffffffffffffffffffffffffffffffff)
    0x495: v495(0x0) = CONST 
    0x499: MSTORE v495(0x0), v494
    0x49a: v49a(0xa2) = CONST 
    0x49c: v49c(0x20) = CONST 
    0x4a0: MSTORE v49c(0x20), v49a(0xa2)
    0x4a1: v4a1(0x40) = CONST 
    0x4a5: v4a5 = SHA3 v495(0x0), v4a1(0x40)
    0x4a6: v4a6 = SLOAD v4a5
    0x4a7: v4a7(0xa1) = CONST 
    0x4ab: MSTORE v49c(0x20), v4a7(0xa1)
    0x4ad: v4ad = SHA3 v495(0x0), v4a1(0x40)
    0x4ae: v4ae = SLOAD v4ad
    0x4af: v4af(0x1f5d) = CONST 
    0x4b4: v4b4(0x50e) = CONST 
    0x4b8: v4b8(0xde0b6b3a7640000) = CONST 
    0x4c2: v4c2(0x1f82) = CONST 
    0x4c6: v4c6(0x4dd) = CONST 
    0x4ca: v4ca(0x1fad) = CONST 
    0x4cd: v4cd(0xf4f) = CONST 
    0x4d0: v4d0_0, v4d0_1 = CALLPRIVATE v4cd(0xf4f), v4ca(0x1fad)

    Begin block 0x1fad0x48a
    prev=[0x48a], succ=[0x4dd0x48a]
    =================================
    0x1faf0x48a: v48a1faf(0xffffffff) = CONST 
    0x1fb40x48a: v48a1fb4(0x1035) = CONST 
    0x1fb70x48a: v48a1fb7(0x1035) = AND v48a1fb4(0x1035), v48a1faf(0xffffffff)
    0x1fb80x48a: v48a1fb8_0 = CALLPRIVATE v48a1fb7(0x1035), v4d0_1, v4d0_0, v4ae

    Begin block 0x4dd0x48a
    prev=[0x1fad0x48a], succ=[0x1f820x48a]
    =================================
    0x4de0x48a: v48a4de(0x1) = CONST 
    0x4e00x48a: v48a4e0(0x1) = CONST 
    0x4e20x48a: v48a4e2(0xa0) = CONST 
    0x4e40x48a: v48a4e4(0x10000000000000000000000000000000000000000) = SHL v48a4e2(0xa0), v48a4e0(0x1)
    0x4e50x48a: v48a4e5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v48a4e4(0x10000000000000000000000000000000000000000), v48a4de(0x1)
    0x4e70x48a: v48a4e7(0x0) = AND v495(0x0), v48a4e5(0xffffffffffffffffffffffffffffffffffffffff)
    0x4e80x48a: v48a4e8(0x0) = CONST 
    0x4ec0x48a: MSTORE v48a4e8(0x0), v48a4e7(0x0)
    0x4ed0x48a: v48a4ed(0xa4) = CONST 
    0x4ef0x48a: v48a4ef(0x20) = CONST 
    0x4f10x48a: MSTORE v48a4ef(0x20), v48a4ed(0xa4)
    0x4f20x48a: v48a4f2(0x40) = CONST 
    0x4f50x48a: v48a4f5 = SHA3 v48a4e8(0x0), v48a4f2(0x40)
    0x4f60x48a: v48a4f6 = SLOAD v48a4f5
    0x4f80x48a: v48a4f8(0xffffffff) = CONST 
    0x4fd0x48a: v48a4fd(0x107e) = CONST 
    0x5000x48a: v48a500(0x107e) = AND v48a4fd(0x107e), v48a4f8(0xffffffff)
    0x5010x48a: v48a501_0 = CALLPRIVATE v48a500(0x107e), v48a1fb8_0, v48a4f6, v4c6(0x4dd)

    Begin block 0x1f820x48a
    prev=[0x4dd0x48a], succ=[0x50e0x48a]
    =================================
    0x1f840x48a: v48a1f84(0xffffffff) = CONST 
    0x1f890x48a: v48a1f89(0x10d7) = CONST 
    0x1f8c0x48a: v48a1f8c(0x10d7) = AND v48a1f89(0x10d7), v48a1f84(0xffffffff)
    0x1f8d0x48a: v48a1f8d_0 = CALLPRIVATE v48a1f8c(0x10d7), v4c2(0x1f82), v48a501_0, v4b8(0xde0b6b3a7640000)

    Begin block 0x50e0x48a
    prev=[0x1f820x48a], succ=[0x1119B0x50e0x48a]
    =================================
    0x5100x48a: v48a510(0xffffffff) = CONST 
    0x5150x48a: v48a515(0x1119) = CONST 
    0x5180x48a: v48a518(0x1119) = AND v48a515(0x1119), v48a510(0xffffffff)
    0x5190x48a: JUMP v48a518(0x1119)

    Begin block 0x1119B0x50e0x48a
    prev=[0x50e0x48a], succ=[0x1127B0x50e0x48a, 0x224dB0x50e0x48a]
    =================================
    0x111aS0x50e0x48a: v111aV50e48a(0x0) = CONST 
    0x111eS0x50e0x48a: v111eV50e48a = ADD v4b4(0x50e), v48a1f8d_0
    0x1121S0x50e0x48a: v1121V50e48a = LT v111eV50e48a, v48a1f8d_0
    0x1122S0x50e0x48a: v1122V50e48a = ISZERO v1121V50e48a
    0x1123S0x50e0x48a: v1123V50e48a(0x224d) = CONST 
    0x1126S0x50e0x48a: JUMPI v1123V50e48a(0x224d), v1122V50e48a

    Begin block 0x1127B0x50e0x48a
    prev=[0x1119B0x50e0x48a], succ=[]
    =================================
    0x1127S0x50e0x48a: v1127V50e48a(0x40) = CONST 
    0x112aS0x50e0x48a: v112aV50e48a = MLOAD v1127V50e48a(0x40)
    0x112bS0x50e0x48a: v112bV50e48a(0x461bcd) = CONST 
    0x112fS0x50e0x48a: v112fV50e48a(0xe5) = CONST 
    0x1131S0x50e0x48a: v1131V50e48a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fV50e48a(0xe5), v112bV50e48a(0x461bcd)
    0x1133S0x50e0x48a: MSTORE v112aV50e48a, v1131V50e48a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0x50e0x48a: v1134V50e48a(0x20) = CONST 
    0x1136S0x50e0x48a: v1136V50e48a(0x4) = CONST 
    0x1139S0x50e0x48a: v1139V50e48a = ADD v112aV50e48a, v1136V50e48a(0x4)
    0x113aS0x50e0x48a: MSTORE v1139V50e48a, v1134V50e48a(0x20)
    0x113bS0x50e0x48a: v113bV50e48a(0x1b) = CONST 
    0x113dS0x50e0x48a: v113dV50e48a(0x24) = CONST 
    0x1140S0x50e0x48a: v1140V50e48a = ADD v112aV50e48a, v113dV50e48a(0x24)
    0x1141S0x50e0x48a: MSTORE v1140V50e48a, v113bV50e48a(0x1b)
    0x1142S0x50e0x48a: v1142V50e48a(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0x50e0x48a: v1163V50e48a(0x44) = CONST 
    0x1166S0x50e0x48a: v1166V50e48a = ADD v112aV50e48a, v1163V50e48a(0x44)
    0x1167S0x50e0x48a: MSTORE v1166V50e48a, v1142V50e48a(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0x50e0x48a: v1169V50e48a = MLOAD v1127V50e48a(0x40)
    0x116dS0x50e0x48a: v116dV50e48a(0x0) = SUB v112aV50e48a, v1169V50e48a
    0x116eS0x50e0x48a: v116eV50e48a(0x64) = CONST 
    0x1170S0x50e0x48a: v1170V50e48a(0x64) = ADD v116eV50e48a(0x64), v116dV50e48a(0x0)
    0x1172S0x50e0x48a: REVERT v1169V50e48a, v1170V50e48a(0x64)

    Begin block 0x224dB0x50e0x48a
    prev=[0x1119B0x50e0x48a], succ=[0x1f5d0x48a]
    =================================
    0x2253S0x50e0x48a: JUMP v4a6

    Begin block 0x1f5d0x48a
    prev=[0x224dB0x50e0x48a], succ=[]
    =================================
    0x1f620x48a: RETURNPRIVATE v48aarg0, v111eV50e48a

}

function 0xf4f(0xf4farg0x0) private {
    Begin block 0xf4f
    prev=[], succ=[0xf65, 0xf5d]
    =================================
    0xf50: vf50(0x0) = CONST 
    0xf52: vf52(0xa3) = CONST 
    0xf54: vf54 = SLOAD vf52(0xa3)
    0xf55: vf55(0x0) = CONST 
    0xf57: vf57 = EQ vf55(0x0), vf54
    0xf58: vf58 = ISZERO vf57
    0xf59: vf59(0xf65) = CONST 
    0xf5c: JUMPI vf59(0xf65), vf58

    Begin block 0xf65
    prev=[0xf4f], succ=[0x8e7B0xf65]
    =================================
    0xf66: vf66(0x20f9) = CONST 
    0xf69: vf69(0xf9a) = CONST 
    0xf6c: vf6c(0xa3) = CONST 
    0xf6e: vf6e = SLOAD vf6c(0xa3)
    0xf6f: vf6f(0x211d) = CONST 
    0xf72: vf72(0xde0b6b3a7640000) = CONST 
    0xf7b: vf7b(0xf8e) = CONST 
    0xf7e: vf7e(0x9d) = CONST 
    0xf80: vf80 = SLOAD vf7e(0x9d)
    0xf81: vf81(0xf8e) = CONST 
    0xf84: vf84(0x9f) = CONST 
    0xf86: vf86 = SLOAD vf84(0x9f)
    0xf87: vf87(0x2148) = CONST 
    0xf8a: vf8a(0x8e7) = CONST 
    0xf8d: JUMP vf8a(0x8e7)

    Begin block 0x8e7B0xf65
    prev=[0xf65], succ=[0x2027B0xf65]
    =================================
    0x8e8S0xf65: v8e8Vf65(0x0) = CONST 
    0x8eaS0xf65: v8eaVf65(0x2027) = CONST 
    0x8edS0xf65: v8edVf65 = TIMESTAMP 
    0x8eeS0xf65: v8eeVf65(0x9c) = CONST 
    0x8f0S0xf65: v8f0Vf65 = SLOAD v8eeVf65(0x9c)
    0x8f1S0xf65: v8f1Vf65(0x1173) = CONST 
    0x8f4S0xf65: v8f4_0Vf65 = CALLPRIVATE v8f1Vf65(0x1173), v8f0Vf65, v8edVf65, v8eaVf65(0x2027)

    Begin block 0x2027B0xf65
    prev=[0x8e7B0xf65], succ=[0x2148]
    =================================
    0x202bS0xf65: JUMP vf87(0x2148)

    Begin block 0x2148
    prev=[0x2027B0xf65], succ=[0xf8e]
    =================================
    0x214a: v214a(0xffffffff) = CONST 
    0x214f: v214f(0x1035) = CONST 
    0x2152: v2152(0x1035) = AND v214f(0x1035), v214a(0xffffffff)
    0x2153: v2153_0 = CALLPRIVATE v2152(0x1035), vf86, v8f4_0Vf65, vf81(0xf8e)

    Begin block 0xf8e
    prev=[0xf8e, 0x2148], succ=[0x211d, 0xf8e]
    =================================
    0xf8e_0x0: vf8e_0 = PHI v2153_0, vf99_0
    0xf8e_0x1: vf8e_1 = PHI vf66(0x20f9), vf6e, vf72(0xde0b6b3a7640000), vf80, vf4farg0
    0xf8e_0x2: vf8e_2 = PHI vf50(0x0), vf69(0xf9a), vf6f(0x211d), vf7b(0xf8e)
    0xf90: vf90(0xffffffff) = CONST 
    0xf95: vf95(0x107e) = CONST 
    0xf98: vf98(0x107e) = AND vf95(0x107e), vf90(0xffffffff)
    0xf99: vf99_0 = CALLPRIVATE vf98(0x107e), vf8e_1, vf8e_0, vf8e_2

    Begin block 0x211d
    prev=[0xf8e], succ=[0xf9a]
    =================================
    0x211d_0x1: v211d_1 = PHI vf66(0x20f9), vf6e, vf72(0xde0b6b3a7640000), vf4farg0
    0x211d_0x2: v211d_2 = PHI vf50(0x0), vf69(0xf9a), vf6f(0x211d)
    0x211f: v211f(0xffffffff) = CONST 
    0x2124: v2124(0x10d7) = CONST 
    0x2127: v2127(0x10d7) = AND v2124(0x10d7), v211f(0xffffffff)
    0x2128: v2128_0 = CALLPRIVATE v2127(0x10d7), v211d_1, vf99_0, v211d_2

    Begin block 0xf9a
    prev=[0x211d], succ=[0x1119B0xf9a]
    =================================
    0xf9a_0x1: vf9a_1 = PHI vf66(0x20f9), vf6e, vf4farg0
    0xf9b: vf9b(0xa0) = CONST 
    0xf9d: vf9d = SLOAD vf9b(0xa0)
    0xf9f: vf9f(0xffffffff) = CONST 
    0xfa4: vfa4(0x1119) = CONST 
    0xfa7: vfa7(0x1119) = AND vfa4(0x1119), vf9f(0xffffffff)
    0xfa8: JUMP vfa7(0x1119)

    Begin block 0x1119B0xf9a
    prev=[0xf9a], succ=[0x1127B0xf9a, 0x224dB0xf9a]
    =================================
    0x111aS0xf9a: v111aVf9a(0x0) = CONST 
    0x111eS0xf9a: v111eVf9a = ADD v2128_0, vf9d
    0x1121S0xf9a: v1121Vf9a = LT v111eVf9a, vf9d
    0x1122S0xf9a: v1122Vf9a = ISZERO v1121Vf9a
    0x1123S0xf9a: v1123Vf9a(0x224d) = CONST 
    0x1126S0xf9a: JUMPI v1123Vf9a(0x224d), v1122Vf9a

    Begin block 0x1127B0xf9a
    prev=[0x1119B0xf9a], succ=[]
    =================================
    0x1127S0xf9a: v1127Vf9a(0x40) = CONST 
    0x112aS0xf9a: v112aVf9a = MLOAD v1127Vf9a(0x40)
    0x112bS0xf9a: v112bVf9a(0x461bcd) = CONST 
    0x112fS0xf9a: v112fVf9a(0xe5) = CONST 
    0x1131S0xf9a: v1131Vf9a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112fVf9a(0xe5), v112bVf9a(0x461bcd)
    0x1133S0xf9a: MSTORE v112aVf9a, v1131Vf9a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x1134S0xf9a: v1134Vf9a(0x20) = CONST 
    0x1136S0xf9a: v1136Vf9a(0x4) = CONST 
    0x1139S0xf9a: v1139Vf9a = ADD v112aVf9a, v1136Vf9a(0x4)
    0x113aS0xf9a: MSTORE v1139Vf9a, v1134Vf9a(0x20)
    0x113bS0xf9a: v113bVf9a(0x1b) = CONST 
    0x113dS0xf9a: v113dVf9a(0x24) = CONST 
    0x1140S0xf9a: v1140Vf9a = ADD v112aVf9a, v113dVf9a(0x24)
    0x1141S0xf9a: MSTORE v1140Vf9a, v113bVf9a(0x1b)
    0x1142S0xf9a: v1142Vf9a(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x1163S0xf9a: v1163Vf9a(0x44) = CONST 
    0x1166S0xf9a: v1166Vf9a = ADD v112aVf9a, v1163Vf9a(0x44)
    0x1167S0xf9a: MSTORE v1166Vf9a, v1142Vf9a(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1169S0xf9a: v1169Vf9a = MLOAD v1127Vf9a(0x40)
    0x116dS0xf9a: v116dVf9a(0x0) = SUB v112aVf9a, v1169Vf9a
    0x116eS0xf9a: v116eVf9a(0x64) = CONST 
    0x1170S0xf9a: v1170Vf9a(0x64) = ADD v116eVf9a(0x64), v116dVf9a(0x0)
    0x1172S0xf9a: REVERT v1169Vf9a, v1170Vf9a(0x64)

    Begin block 0x224dB0xf9a
    prev=[0x1119B0xf9a], succ=[0x20f9]
    =================================
    0x2253S0xf9a: JUMP vf9a_1

    Begin block 0x20f9
    prev=[0x224dB0xf9a], succ=[]
    =================================
    0x20f9_0x2: v20f9_2 = PHI vf66(0x20f9), vf4farg0
    0x20fd: RETURNPRIVATE v20f9_2, v111eVf9a, vf50(0x0)

    Begin block 0xf5d
    prev=[0xf4f], succ=[0x5360xf4f]
    =================================
    0xf5e: vf5e(0xa0) = CONST 
    0xf60: vf60 = SLOAD vf5e(0xa0)
    0xf61: vf61(0x536) = CONST 
    0xf64: JUMP vf61(0x536)

    Begin block 0x5360xf4f
    prev=[0xf5d], succ=[]
    =================================
    0x5380xf4f: RETURNPRIVATE vf4farg0, vf60

}

