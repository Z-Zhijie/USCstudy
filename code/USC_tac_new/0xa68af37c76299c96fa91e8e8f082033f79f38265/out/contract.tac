function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x232e]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x228b: v228b(0x232e) = CONST 
    0x228c: JUMPI v228b(0x232e), v15

    Begin block 0x1a
    prev=[0x10], succ=[0x11a, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x80faa57d) = CONST 
    0x26: v26 = GT v21(0x80faa57d), v1f
    0x27: v27(0x11a) = CONST 
    0x2a: JUMPI v27(0x11a), v26

    Begin block 0x11a
    prev=[0x1a], succ=[0x19d, 0x126]
    =================================
    0x11c: v11c(0x2e1a7d4d) = CONST 
    0x121: v121 = GT v11c(0x2e1a7d4d), v1f
    0x122: v122(0x19d) = CONST 
    0x125: JUMPI v122(0x19d), v121

    Begin block 0x19d
    prev=[0x11a], succ=[0x1d9, 0x1a9]
    =================================
    0x19f: v19f(0x15fe96dc) = CONST 
    0x1a4: v1a4 = GT v19f(0x15fe96dc), v1f
    0x1a5: v1a5(0x1d9) = CONST 
    0x1a8: JUMPI v1a5(0x1d9), v1a4

    Begin block 0x1d9
    prev=[0x19d], succ=[0x22d1, 0x1e4]
    =================================
    0x1db: v1db(0x8cc262) = CONST 
    0x1df: v1df = EQ v1db(0x8cc262), v1f
    0x22c9: v22c9(0x22d1) = CONST 
    0x22ca: JUMPI v22c9(0x22d1), v1df

    Begin block 0x22d1
    prev=[0x1d9, 0x1e4], succ=[]
    =================================
    0x22d2: v22d2(0x20a) = CONST 
    0x22d3: CALLPRIVATE v22d2(0x20a)

    Begin block 0x1e4
    prev=[0x1d9], succ=[0x22d1, 0x1ef]
    =================================
    0x1e5: v1e5(0x700037d) = CONST 
    0x1ea: v1ea = EQ v1e5(0x700037d), v1f
    0x22cb: v22cb(0x22d1) = CONST 
    0x22cc: JUMPI v22cb(0x22d1), v1ea

    Begin block 0x1ef
    prev=[0x1e4], succ=[0x22d4, 0x1fa]
    =================================
    0x1f0: v1f0(0x7546172) = CONST 
    0x1f5: v1f5 = EQ v1f0(0x7546172), v1f
    0x22cd: v22cd(0x22d4) = CONST 
    0x22ce: JUMPI v22cd(0x22d4), v1f5

    Begin block 0x22d4
    prev=[0x1ef], succ=[]
    =================================
    0x22d5: v22d5(0x242) = CONST 
    0x22d6: CALLPRIVATE v22d5(0x242)

    Begin block 0x1fa
    prev=[0x1ef], succ=[0x22d7, 0x205]
    =================================
    0x1fb: v1fb(0xc340a24) = CONST 
    0x200: v200 = EQ v1fb(0xc340a24), v1f
    0x22cf: v22cf(0x22d7) = CONST 
    0x22d0: JUMPI v22cf(0x22d7), v200

    Begin block 0x22d7
    prev=[0x1fa], succ=[]
    =================================
    0x22d8: v22d8(0x266) = CONST 
    0x22d9: CALLPRIVATE v22d8(0x266)

    Begin block 0x205
    prev=[0x1fa], succ=[]
    =================================
    0x206: v206(0x0) = CONST 
    0x209: REVERT v206(0x0), v206(0x0)

    Begin block 0x1a9
    prev=[0x19d], succ=[0x22da, 0x1b4]
    =================================
    0x1aa: v1aa(0x15fe96dc) = CONST 
    0x1af: v1af = EQ v1aa(0x15fe96dc), v1f
    0x22c1: v22c1(0x22da) = CONST 
    0x22c2: JUMPI v22c1(0x22da), v1af

    Begin block 0x22da
    prev=[0x1a9], succ=[]
    =================================
    0x22db: v22db(0x26e) = CONST 
    0x22dc: CALLPRIVATE v22db(0x26e)

    Begin block 0x1b4
    prev=[0x1a9], succ=[0x22dd, 0x1bf]
    =================================
    0x1b5: v1b5(0x18160ddd) = CONST 
    0x1ba: v1ba = EQ v1b5(0x18160ddd), v1f
    0x22c3: v22c3(0x22dd) = CONST 
    0x22c4: JUMPI v22c3(0x22dd), v1ba

    Begin block 0x22dd
    prev=[0x1b4], succ=[]
    =================================
    0x22de: v22de(0x293) = CONST 
    0x22df: CALLPRIVATE v22de(0x293)

    Begin block 0x1bf
    prev=[0x1b4], succ=[0x22e0, 0x1ca]
    =================================
    0x1c0: v1c0(0x1c1f78eb) = CONST 
    0x1c5: v1c5 = EQ v1c0(0x1c1f78eb), v1f
    0x22c5: v22c5(0x22e0) = CONST 
    0x22c6: JUMPI v22c5(0x22e0), v1c5

    Begin block 0x22e0
    prev=[0xe9, 0x93, 0x1bf], succ=[]
    =================================
    0x22e1: v22e1(0x29b) = CONST 
    0x22e2: CALLPRIVATE v22e1(0x29b)

    Begin block 0x1ca
    prev=[0x1bf], succ=[0x1d5, 0x22e3]
    =================================
    0x1cb: v1cb(0x1dc717fd) = CONST 
    0x1d0: v1d0 = EQ v1cb(0x1dc717fd), v1f
    0x22c7: v22c7(0x22e3) = CONST 
    0x22c8: JUMPI v22c7(0x22e3), v1d0

    Begin block 0x1d5
    prev=[0x1ca], succ=[0x1807]
    =================================
    0x1d5: v1d5(0x1807) = CONST 
    0x1d8: JUMP v1d5(0x1807)

    Begin block 0x1807
    prev=[0x1d5], succ=[]
    =================================
    0x1808: v1808(0x0) = CONST 
    0x180b: REVERT v1808(0x0), v1808(0x0)

    Begin block 0x22e3
    prev=[0x1ca], succ=[]
    =================================
    0x22e4: v22e4(0x2a3) = CONST 
    0x22e5: CALLPRIVATE v22e4(0x2a3)

    Begin block 0x126
    prev=[0x11a], succ=[0x16c, 0x131]
    =================================
    0x127: v127(0x52665f47) = CONST 
    0x12c: v12c = GT v127(0x52665f47), v1f
    0x12d: v12d(0x16c) = CONST 
    0x130: JUMPI v12d(0x16c), v12c

    Begin block 0x16c
    prev=[0x126], succ=[0x22e6, 0x178]
    =================================
    0x16e: v16e(0x2e1a7d4d) = CONST 
    0x173: v173 = EQ v16e(0x2e1a7d4d), v1f
    0x22b9: v22b9(0x22e6) = CONST 
    0x22ba: JUMPI v22b9(0x22e6), v173

    Begin block 0x22e6
    prev=[0x16c], succ=[]
    =================================
    0x22e7: v22e7(0x2c9) = CONST 
    0x22e8: CALLPRIVATE v22e7(0x2c9)

    Begin block 0x178
    prev=[0x16c], succ=[0x22e9, 0x183]
    =================================
    0x179: v179(0x37b7efef) = CONST 
    0x17e: v17e = EQ v179(0x37b7efef), v1f
    0x22bb: v22bb(0x22e9) = CONST 
    0x22bc: JUMPI v22bb(0x22e9), v17e

    Begin block 0x22e9
    prev=[0x178], succ=[]
    =================================
    0x22ea: v22ea(0x2e6) = CONST 
    0x22eb: CALLPRIVATE v22ea(0x2e6)

    Begin block 0x183
    prev=[0x178], succ=[0x22ec, 0x18e]
    =================================
    0x184: v184(0x3d18b912) = CONST 
    0x189: v189 = EQ v184(0x3d18b912), v1f
    0x22bd: v22bd(0x22ec) = CONST 
    0x22be: JUMPI v22bd(0x22ec), v189

    Begin block 0x22ec
    prev=[0x183], succ=[]
    =================================
    0x22ed: v22ed(0x30c) = CONST 
    0x22ee: CALLPRIVATE v22ed(0x30c)

    Begin block 0x18e
    prev=[0x183], succ=[0x199, 0x22ef]
    =================================
    0x18f: v18f(0x485cc955) = CONST 
    0x194: v194 = EQ v18f(0x485cc955), v1f
    0x22bf: v22bf(0x22ef) = CONST 
    0x22c0: JUMPI v22bf(0x22ef), v194

    Begin block 0x199
    prev=[0x18e], succ=[0x17e3]
    =================================
    0x199: v199(0x17e3) = CONST 
    0x19c: JUMP v199(0x17e3)

    Begin block 0x17e3
    prev=[0x199], succ=[]
    =================================
    0x17e4: v17e4(0x0) = CONST 
    0x17e7: REVERT v17e4(0x0), v17e4(0x0)

    Begin block 0x22ef
    prev=[0x18e], succ=[]
    =================================
    0x22f0: v22f0(0x314) = CONST 
    0x22f1: CALLPRIVATE v22f0(0x314)

    Begin block 0x131
    prev=[0x126], succ=[0x22f2, 0x13c]
    =================================
    0x132: v132(0x52665f47) = CONST 
    0x137: v137 = EQ v132(0x52665f47), v1f
    0x22af: v22af(0x22f2) = CONST 
    0x22b0: JUMPI v22af(0x22f2), v137

    Begin block 0x22f2
    prev=[0x131], succ=[]
    =================================
    0x22f3: v22f3(0x342) = CONST 
    0x22f4: CALLPRIVATE v22f3(0x342)

    Begin block 0x13c
    prev=[0x131], succ=[0x22f5, 0x147]
    =================================
    0x13d: v13d(0x61aac4da) = CONST 
    0x142: v142 = EQ v13d(0x61aac4da), v1f
    0x22b1: v22b1(0x22f5) = CONST 
    0x22b2: JUMPI v22b1(0x22f5), v142

    Begin block 0x22f5
    prev=[0x13c], succ=[]
    =================================
    0x22f6: v22f6(0x36e) = CONST 
    0x22f7: CALLPRIVATE v22f6(0x36e)

    Begin block 0x147
    prev=[0x13c], succ=[0x22f8, 0x152]
    =================================
    0x148: v148(0x63da5bb0) = CONST 
    0x14d: v14d = EQ v148(0x63da5bb0), v1f
    0x22b3: v22b3(0x22f8) = CONST 
    0x22b4: JUMPI v22b3(0x22f8), v14d

    Begin block 0x22f8
    prev=[0x147], succ=[]
    =================================
    0x22f9: v22f9(0x394) = CONST 
    0x22fa: CALLPRIVATE v22f9(0x394)

    Begin block 0x152
    prev=[0x147], succ=[0x22fb, 0x15d]
    =================================
    0x153: v153(0x6dd5b69d) = CONST 
    0x158: v158 = EQ v153(0x6dd5b69d), v1f
    0x22b5: v22b5(0x22fb) = CONST 
    0x22b6: JUMPI v22b5(0x22fb), v158

    Begin block 0x22fb
    prev=[0x152], succ=[]
    =================================
    0x22fc: v22fc(0x3ba) = CONST 
    0x22fd: CALLPRIVATE v22fc(0x3ba)

    Begin block 0x15d
    prev=[0x152], succ=[0x168, 0x22fe]
    =================================
    0x15e: v15e(0x70a08231) = CONST 
    0x163: v163 = EQ v15e(0x70a08231), v1f
    0x22b7: v22b7(0x22fe) = CONST 
    0x22b8: JUMPI v22b7(0x22fe), v163

    Begin block 0x168
    prev=[0x15d], succ=[0x17bf]
    =================================
    0x168: v168(0x17bf) = CONST 
    0x16b: JUMP v168(0x17bf)

    Begin block 0x17bf
    prev=[0x168], succ=[]
    =================================
    0x17c0: v17c0(0x0) = CONST 
    0x17c3: REVERT v17c0(0x0), v17c0(0x0)

    Begin block 0x22fe
    prev=[0x15d], succ=[]
    =================================
    0x22ff: v22ff(0x3d7) = CONST 
    0x2300: CALLPRIVATE v22ff(0x3d7)

    Begin block 0x2b
    prev=[0x1a], succ=[0xad, 0x36]
    =================================
    0x2c: v2c(0xc4d66de8) = CONST 
    0x31: v31 = GT v2c(0xc4d66de8), v1f
    0x32: v32(0xad) = CONST 
    0x35: JUMPI v32(0xad), v31

    Begin block 0xad
    prev=[0x2b], succ=[0xe9, 0xb9]
    =================================
    0xaf: vaf(0xa694fc3a) = CONST 
    0xb4: vb4 = GT vaf(0xa694fc3a), v1f
    0xb5: vb5(0xe9) = CONST 
    0xb8: JUMPI vb5(0xe9), vb4

    Begin block 0xe9
    prev=[0xad], succ=[0x22e0, 0xf5]
    =================================
    0xeb: veb(0x80faa57d) = CONST 
    0xf0: vf0 = EQ veb(0x80faa57d), v1f
    0x22a7: v22a7(0x22e0) = CONST 
    0x22a8: JUMPI v22a7(0x22e0), vf0

    Begin block 0xf5
    prev=[0xe9], succ=[0x100, 0x2301]
    =================================
    0xf6: vf6(0x81c0c263) = CONST 
    0xfb: vfb = EQ vf6(0x81c0c263), v1f
    0x22a9: v22a9(0x2301) = CONST 
    0x22aa: JUMPI v22a9(0x2301), vfb

    Begin block 0x100
    prev=[0xf5], succ=[0x2304, 0x10b]
    =================================
    0x101: v101(0x8ec872e3) = CONST 
    0x106: v106 = EQ v101(0x8ec872e3), v1f
    0x22ab: v22ab(0x2304) = CONST 
    0x22ac: JUMPI v22ab(0x2304), v106

    Begin block 0x2304
    prev=[0x100], succ=[]
    =================================
    0x2305: v2305(0x405) = CONST 
    0x2306: CALLPRIVATE v2305(0x405)

    Begin block 0x10b
    prev=[0x100], succ=[0x116, 0x2307]
    =================================
    0x10c: v10c(0xa2309ff8) = CONST 
    0x111: v111 = EQ v10c(0xa2309ff8), v1f
    0x22ad: v22ad(0x2307) = CONST 
    0x22ae: JUMPI v22ad(0x2307), v111

    Begin block 0x116
    prev=[0x10b], succ=[0x179b]
    =================================
    0x116: v116(0x179b) = CONST 
    0x119: JUMP v116(0x179b)

    Begin block 0x179b
    prev=[0x116], succ=[]
    =================================
    0x179c: v179c(0x0) = CONST 
    0x179f: REVERT v179c(0x0), v179c(0x0)

    Begin block 0x2307
    prev=[0x10b], succ=[]
    =================================
    0x2308: v2308(0x428) = CONST 
    0x2309: CALLPRIVATE v2308(0x428)

    Begin block 0x2301
    prev=[0xf5], succ=[]
    =================================
    0x2302: v2302(0x3fd) = CONST 
    0x2303: CALLPRIVATE v2302(0x3fd)

    Begin block 0xb9
    prev=[0xad], succ=[0x230a, 0xc4]
    =================================
    0xba: vba(0xa694fc3a) = CONST 
    0xbf: vbf = EQ vba(0xa694fc3a), v1f
    0x229f: v229f(0x230a) = CONST 
    0x22a0: JUMPI v229f(0x230a), vbf

    Begin block 0x230a
    prev=[0xb9], succ=[]
    =================================
    0x230b: v230b(0x430) = CONST 
    0x230c: CALLPRIVATE v230b(0x430)

    Begin block 0xc4
    prev=[0xb9], succ=[0x230d, 0xcf]
    =================================
    0xc5: vc5(0xb21544f3) = CONST 
    0xca: vca = EQ vc5(0xb21544f3), v1f
    0x22a1: v22a1(0x230d) = CONST 
    0x22a2: JUMPI v22a1(0x230d), vca

    Begin block 0x230d
    prev=[0xc4], succ=[]
    =================================
    0x230e: v230e(0x44d) = CONST 
    0x230f: CALLPRIVATE v230e(0x44d)

    Begin block 0xcf
    prev=[0xc4], succ=[0x2310, 0xda]
    =================================
    0xd0: vd0(0xb6aa515b) = CONST 
    0xd5: vd5 = EQ vd0(0xb6aa515b), v1f
    0x22a3: v22a3(0x2310) = CONST 
    0x22a4: JUMPI v22a3(0x2310), vd5

    Begin block 0x2310
    prev=[0xcf], succ=[]
    =================================
    0x2311: v2311(0x47f) = CONST 
    0x2312: CALLPRIVATE v2311(0x47f)

    Begin block 0xda
    prev=[0xcf], succ=[0xe5, 0x2313]
    =================================
    0xdb: vdb(0xbd6f51fa) = CONST 
    0xe0: ve0 = EQ vdb(0xbd6f51fa), v1f
    0x22a5: v22a5(0x2313) = CONST 
    0x22a6: JUMPI v22a5(0x2313), ve0

    Begin block 0xe5
    prev=[0xda], succ=[0x1777]
    =================================
    0xe5: ve5(0x1777) = CONST 
    0xe8: JUMP ve5(0x1777)

    Begin block 0x1777
    prev=[0xe5], succ=[]
    =================================
    0x1778: v1778(0x0) = CONST 
    0x177b: REVERT v1778(0x0), v1778(0x0)

    Begin block 0x2313
    prev=[0xda], succ=[]
    =================================
    0x2314: v2314(0x4a5) = CONST 
    0x2315: CALLPRIVATE v2314(0x4a5)

    Begin block 0x36
    prev=[0x2b], succ=[0x7c, 0x41]
    =================================
    0x37: v37(0xddf2be3f) = CONST 
    0x3c: v3c = GT v37(0xddf2be3f), v1f
    0x3d: v3d(0x7c) = CONST 
    0x40: JUMPI v3d(0x7c), v3c

    Begin block 0x7c
    prev=[0x36], succ=[0x2316, 0x88]
    =================================
    0x7e: v7e(0xc4d66de8) = CONST 
    0x83: v83 = EQ v7e(0xc4d66de8), v1f
    0x2297: v2297(0x2316) = CONST 
    0x2298: JUMPI v2297(0x2316), v83

    Begin block 0x2316
    prev=[0x7c], succ=[]
    =================================
    0x2317: v2317(0x4cb) = CONST 
    0x2318: CALLPRIVATE v2317(0x4cb)

    Begin block 0x88
    prev=[0x7c], succ=[0x2319, 0x93]
    =================================
    0x89: v89(0xca21d8bd) = CONST 
    0x8e: v8e = EQ v89(0xca21d8bd), v1f
    0x2299: v2299(0x2319) = CONST 
    0x229a: JUMPI v2299(0x2319), v8e

    Begin block 0x2319
    prev=[0x88], succ=[]
    =================================
    0x231a: v231a(0x4f1) = CONST 
    0x231b: CALLPRIVATE v231a(0x4f1)

    Begin block 0x93
    prev=[0x88], succ=[0x22e0, 0x9e]
    =================================
    0x94: v94(0xcd3daf9d) = CONST 
    0x99: v99 = EQ v94(0xcd3daf9d), v1f
    0x229b: v229b(0x22e0) = CONST 
    0x229c: JUMPI v229b(0x22e0), v99

    Begin block 0x9e
    prev=[0x93], succ=[0xa9, 0x231c]
    =================================
    0x9f: v9f(0xcf760092) = CONST 
    0xa4: va4 = EQ v9f(0xcf760092), v1f
    0x229d: v229d(0x231c) = CONST 
    0x229e: JUMPI v229d(0x231c), va4

    Begin block 0xa9
    prev=[0x9e], succ=[0x1753]
    =================================
    0xa9: va9(0x1753) = CONST 
    0xac: JUMP va9(0x1753)

    Begin block 0x1753
    prev=[0xa9], succ=[]
    =================================
    0x1754: v1754(0x0) = CONST 
    0x1757: REVERT v1754(0x0), v1754(0x0)

    Begin block 0x231c
    prev=[0x9e], succ=[]
    =================================
    0x231d: v231d(0x517) = CONST 
    0x231e: CALLPRIVATE v231d(0x517)

    Begin block 0x41
    prev=[0x36], succ=[0x231f, 0x4c]
    =================================
    0x42: v42(0xddf2be3f) = CONST 
    0x47: v47 = EQ v42(0xddf2be3f), v1f
    0x228d: v228d(0x231f) = CONST 
    0x228e: JUMPI v228d(0x231f), v47

    Begin block 0x231f
    prev=[0x41], succ=[]
    =================================
    0x2320: v2320(0x53d) = CONST 
    0x2321: CALLPRIVATE v2320(0x53d)

    Begin block 0x4c
    prev=[0x41], succ=[0x2322, 0x57]
    =================================
    0x4d: v4d(0xdf5f2a1e) = CONST 
    0x52: v52 = EQ v4d(0xdf5f2a1e), v1f
    0x228f: v228f(0x2322) = CONST 
    0x2290: JUMPI v228f(0x2322), v52

    Begin block 0x2322
    prev=[0x4c], succ=[]
    =================================
    0x2323: v2323(0x566) = CONST 
    0x2324: CALLPRIVATE v2323(0x566)

    Begin block 0x57
    prev=[0x4c], succ=[0x2325, 0x62]
    =================================
    0x58: v58(0xe4a3a0f3) = CONST 
    0x5d: v5d = EQ v58(0xe4a3a0f3), v1f
    0x2291: v2291(0x2325) = CONST 
    0x2292: JUMPI v2291(0x2325), v5d

    Begin block 0x2325
    prev=[0x57], succ=[]
    =================================
    0x2326: v2326(0x592) = CONST 
    0x2327: CALLPRIVATE v2326(0x592)

    Begin block 0x62
    prev=[0x57], succ=[0x2328, 0x6d]
    =================================
    0x63: v63(0xe9fad8ee) = CONST 
    0x68: v68 = EQ v63(0xe9fad8ee), v1f
    0x2293: v2293(0x2328) = CONST 
    0x2294: JUMPI v2293(0x2328), v68

    Begin block 0x2328
    prev=[0x62], succ=[]
    =================================
    0x2329: v2329(0x5b8) = CONST 
    0x232a: CALLPRIVATE v2329(0x5b8)

    Begin block 0x6d
    prev=[0x62], succ=[0x78, 0x232b]
    =================================
    0x6e: v6e(0xfc0c546a) = CONST 
    0x73: v73 = EQ v6e(0xfc0c546a), v1f
    0x2295: v2295(0x232b) = CONST 
    0x2296: JUMPI v2295(0x232b), v73

    Begin block 0x78
    prev=[0x6d], succ=[0x172f]
    =================================
    0x78: v78(0x172f) = CONST 
    0x7b: JUMP v78(0x172f)

    Begin block 0x172f
    prev=[0x78], succ=[]
    =================================
    0x1730: v1730(0x0) = CONST 
    0x1733: REVERT v1730(0x0), v1730(0x0)

    Begin block 0x232b
    prev=[0x6d], succ=[]
    =================================
    0x232c: v232c(0x5c0) = CONST 
    0x232d: CALLPRIVATE v232c(0x5c0)

    Begin block 0x232e
    prev=[0x10], succ=[]
    =================================
    0x232f: v232f(0x170b) = CONST 
    0x2330: CALLPRIVATE v232f(0x170b)

}

function 0x104d(0x104darg0x0, 0x104darg0x1) private {
    Begin block 0x104d
    prev=[], succ=[0x106d0x104d, 0x21890x104d]
    =================================
    0x104e: v104e(0x1) = CONST 
    0x1050: v1050(0x1) = CONST 
    0x1052: v1052(0xa0) = CONST 
    0x1054: v1054(0x10000000000000000000000000000000000000000) = SHL v1052(0xa0), v1050(0x1)
    0x1055: v1055(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1054(0x10000000000000000000000000000000000000000), v104e(0x1)
    0x1057: v1057 = AND v104darg0, v1055(0xffffffffffffffffffffffffffffffffffffffff)
    0x1058: v1058(0x0) = CONST 
    0x105c: MSTORE v1058(0x0), v1057
    0x105d: v105d(0x3a) = CONST 
    0x105f: v105f(0x20) = CONST 
    0x1061: MSTORE v105f(0x20), v105d(0x3a)
    0x1062: v1062(0x40) = CONST 
    0x1065: v1065 = SHA3 v1058(0x0), v1062(0x40)
    0x1066: v1066 = SLOAD v1065
    0x1068: v1068 = ISZERO v1066
    0x1069: v1069(0x2189) = CONST 
    0x106c: JUMPI v1069(0x2189), v1068

    Begin block 0x106d0x104d
    prev=[0x104d], succ=[0x72c0x104d]
    =================================
    0x106d0x104d: v104d106d(0x72c) = CONST 
    0x10700x104d: v104d1070 = TIMESTAMP 
    0x10720x104d: v104d1072(0x116f) = CONST 
    0x10750x104d: v104d1075_0 = CALLPRIVATE v104d1072(0x116f), v1066, v104d1070, v104d106d(0x72c)

    Begin block 0x72c0x104d
    prev=[0x106d0x104d], succ=[0x72f0x104d]
    =================================

    Begin block 0x72f0x104d
    prev=[0x72c0x104d], succ=[]
    =================================
    0x7330x104d: RETURNPRIVATE v104darg1, v104d1075_0

    Begin block 0x21890x104d
    prev=[0x104d], succ=[]
    =================================
    0x218d0x104d: RETURNPRIVATE v104darg1, v1066

}

function 0x10cd(0x10cdarg0x0, 0x10cdarg0x1, 0x10cdarg0x2) private {
    Begin block 0x10cd
    prev=[], succ=[0x10dc0x10cd, 0x10d50x10cd]
    =================================
    0x10ce: v10ce(0x0) = CONST 
    0x10d1: v10d1(0x10dc) = CONST 
    0x10d4: JUMPI v10d1(0x10dc), v10cdarg1

    Begin block 0x10dc0x10cd
    prev=[0x10cd], succ=[0x10e80x10cd, 0x10e90x10cd]
    =================================
    0x10df0x10cd: v10cd10df = MUL v10cdarg0, v10cdarg1
    0x10e40x10cd: v10cd10e4(0x10e9) = CONST 
    0x10e70x10cd: JUMPI v10cd10e4(0x10e9), v10cdarg1

    Begin block 0x10e80x10cd
    prev=[0x10dc0x10cd], succ=[]
    =================================
    0x10e80x10cd: THROW 

    Begin block 0x10e90x10cd
    prev=[0x10dc0x10cd], succ=[0x10f00x10cd, 0x22120x10cd]
    =================================
    0x10ea0x10cd: v10cd10ea = DIV v10cd10df, v10cdarg1
    0x10eb0x10cd: v10cd10eb = EQ v10cd10ea, v10cdarg0
    0x10ec0x10cd: v10cd10ec(0x2212) = CONST 
    0x10ef0x10cd: JUMPI v10cd10ec(0x2212), v10cd10eb

    Begin block 0x10f00x10cd
    prev=[0x10e90x10cd], succ=[]
    =================================
    0x10f00x10cd: v10cd10f0(0x40) = CONST 
    0x10f20x10cd: v10cd10f2 = MLOAD v10cd10f0(0x40)
    0x10f30x10cd: v10cd10f3(0x461bcd) = CONST 
    0x10f70x10cd: v10cd10f7(0xe5) = CONST 
    0x10f90x10cd: v10cd10f9(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v10cd10f7(0xe5), v10cd10f3(0x461bcd)
    0x10fb0x10cd: MSTORE v10cd10f2, v10cd10f9(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x10fc0x10cd: v10cd10fc(0x4) = CONST 
    0x10fe0x10cd: v10cd10fe = ADD v10cd10fc(0x4), v10cd10f2
    0x11010x10cd: v10cd1101(0x20) = CONST 
    0x11030x10cd: v10cd1103 = ADD v10cd1101(0x20), v10cd10fe
    0x11060x10cd: v10cd1106(0x20) = SUB v10cd1103, v10cd10fe
    0x11080x10cd: MSTORE v10cd10fe, v10cd1106(0x20)
    0x11090x10cd: v10cd1109(0x21) = CONST 
    0x110c0x10cd: MSTORE v10cd1103, v10cd1109(0x21)
    0x110d0x10cd: v10cd110d(0x20) = CONST 
    0x110f0x10cd: v10cd110f = ADD v10cd110d(0x20), v10cd1103
    0x11110x10cd: v10cd1111(0x1644) = CONST 
    0x11140x10cd: v10cd1114(0x21) = CONST 
    0x11170x10cd: CODECOPY v10cd110f, v10cd1111(0x1644), v10cd1114(0x21)
    0x11180x10cd: v10cd1118(0x40) = CONST 
    0x111a0x10cd: v10cd111a = ADD v10cd1118(0x40), v10cd110f
    0x111e0x10cd: v10cd111e(0x40) = CONST 
    0x11200x10cd: v10cd1120 = MLOAD v10cd111e(0x40)
    0x11230x10cd: v10cd1123(0x84) = SUB v10cd111a, v10cd1120
    0x11250x10cd: REVERT v10cd1120, v10cd1123(0x84)

    Begin block 0x22120x10cd
    prev=[0x10e90x10cd], succ=[]
    =================================
    0x22180x10cd: RETURNPRIVATE v10cdarg2, v10cd10df

    Begin block 0x10d50x10cd
    prev=[0x10cd], succ=[0x93f0x10cd]
    =================================
    0x10d60x10cd: v10cd10d6(0x0) = CONST 
    0x10d80x10cd: v10cd10d8(0x93f) = CONST 
    0x10db0x10cd: JUMP v10cd10d8(0x93f)

    Begin block 0x93f0x10cd
    prev=[0x10d50x10cd], succ=[]
    =================================
    0x9440x10cd: RETURNPRIVATE v10cdarg2, v10cd10d6(0x0)

}

function 0x112d(0x112darg0x0, 0x112darg0x1, 0x112darg0x2) private {
    Begin block 0x112d
    prev=[], succ=[0x15470x112d]
    =================================
    0x112e: v112e(0x0) = CONST 
    0x1130: v1130(0x2238) = CONST 
    0x1135: v1135(0x40) = CONST 
    0x1137: v1137 = MLOAD v1135(0x40)
    0x1139: v1139(0x40) = CONST 
    0x113b: v113b = ADD v1139(0x40), v1137
    0x113c: v113c(0x40) = CONST 
    0x113e: MSTORE v113c(0x40), v113b
    0x1140: v1140(0x1a) = CONST 
    0x1143: MSTORE v1137, v1140(0x1a)
    0x1144: v1144(0x20) = CONST 
    0x1146: v1146 = ADD v1144(0x20), v1137
    0x1147: v1147(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000) = CONST 
    0x1169: MSTORE v1146, v1147(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000)
    0x116b: v116b(0x1547) = CONST 
    0x116e: JUMP v116b(0x1547)

    Begin block 0x15470x112d
    prev=[0x112d], succ=[0x15500x112d, 0x15d30x112d]
    =================================
    0x15480x112d: v112d1548(0x0) = CONST 
    0x154c0x112d: v112d154c(0x15d3) = CONST 
    0x154f0x112d: JUMPI v112d154c(0x15d3), v112darg0

    Begin block 0x15500x112d
    prev=[0x15470x112d], succ=[0x15800x112d]
    =================================
    0x15500x112d: v112d1550(0x40) = CONST 
    0x15520x112d: v112d1552 = MLOAD v112d1550(0x40)
    0x15530x112d: v112d1553(0x461bcd) = CONST 
    0x15570x112d: v112d1557(0xe5) = CONST 
    0x15590x112d: v112d1559(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v112d1557(0xe5), v112d1553(0x461bcd)
    0x155b0x112d: MSTORE v112d1552, v112d1559(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x155c0x112d: v112d155c(0x4) = CONST 
    0x155e0x112d: v112d155e = ADD v112d155c(0x4), v112d1552
    0x15610x112d: v112d1561(0x20) = CONST 
    0x15630x112d: v112d1563 = ADD v112d1561(0x20), v112d155e
    0x15660x112d: v112d1566(0x20) = SUB v112d1563, v112d155e
    0x15680x112d: MSTORE v112d155e, v112d1566(0x20)
    0x156c0x112d: v112d156c(0x1a) = MLOAD v1137
    0x156e0x112d: MSTORE v112d1563, v112d156c(0x1a)
    0x156f0x112d: v112d156f(0x20) = CONST 
    0x15710x112d: v112d1571 = ADD v112d156f(0x20), v112d1563
    0x15750x112d: v112d1575(0x1a) = MLOAD v1137
    0x15770x112d: v112d1577(0x20) = CONST 
    0x15790x112d: v112d1579 = ADD v112d1577(0x20), v1137
    0x157e0x112d: v112d157e(0x0) = CONST 

    Begin block 0x15800x112d
    prev=[0x15500x112d, 0x15890x112d], succ=[0x15980x112d, 0x15890x112d]
    =================================
    0x15800x112d_0x0: v1580112d_0 = PHI v112d1593, v112d157e(0x0)
    0x15830x112d: v112d1583 = LT v1580112d_0, v112d1575(0x1a)
    0x15840x112d: v112d1584 = ISZERO v112d1583
    0x15850x112d: v112d1585(0x1598) = CONST 
    0x15880x112d: JUMPI v112d1585(0x1598), v112d1584

    Begin block 0x15980x112d
    prev=[0x15800x112d], succ=[0x15c50x112d, 0x15ac0x112d]
    =================================
    0x15a10x112d: v112d15a1 = ADD v112d1575(0x1a), v112d1571
    0x15a30x112d: v112d15a3(0x1f) = CONST 
    0x15a50x112d: v112d15a5(0x1a) = AND v112d15a3(0x1f), v112d1575(0x1a)
    0x15a70x112d: v112d15a7 = ISZERO v112d15a5(0x1a)
    0x15a80x112d: v112d15a8(0x15c5) = CONST 
    0x15ab0x112d: JUMPI v112d15a8(0x15c5), v112d15a7

    Begin block 0x15c50x112d
    prev=[0x15980x112d, 0x15ac0x112d], succ=[]
    =================================
    0x15c50x112d_0x1: v15c5112d_1 = PHI v112d15c2, v112d15a1
    0x15cb0x112d: v112d15cb(0x40) = CONST 
    0x15cd0x112d: v112d15cd = MLOAD v112d15cb(0x40)
    0x15d00x112d: v112d15d0 = SUB v15c5112d_1, v112d15cd
    0x15d20x112d: REVERT v112d15cd, v112d15d0

    Begin block 0x15ac0x112d
    prev=[0x15980x112d], succ=[0x15c50x112d]
    =================================
    0x15ae0x112d: v112d15ae = SUB v112d15a1, v112d15a5(0x1a)
    0x15b00x112d: v112d15b0 = MLOAD v112d15ae
    0x15b10x112d: v112d15b1(0x1) = CONST 
    0x15b40x112d: v112d15b4(0x20) = CONST 
    0x15b60x112d: v112d15b6(0x6) = SUB v112d15b4(0x20), v112d15a5(0x1a)
    0x15b70x112d: v112d15b7(0x100) = CONST 
    0x15ba0x112d: v112d15ba(0x1000000000000) = EXP v112d15b7(0x100), v112d15b6(0x6)
    0x15bb0x112d: v112d15bb(0xffffffffffff) = SUB v112d15ba(0x1000000000000), v112d15b1(0x1)
    0x15bc0x112d: v112d15bc = NOT v112d15bb(0xffffffffffff)
    0x15bd0x112d: v112d15bd = AND v112d15bc, v112d15b0
    0x15bf0x112d: MSTORE v112d15ae, v112d15bd
    0x15c00x112d: v112d15c0(0x20) = CONST 
    0x15c20x112d: v112d15c2 = ADD v112d15c0(0x20), v112d15ae

    Begin block 0x15890x112d
    prev=[0x15800x112d], succ=[0x15800x112d]
    =================================
    0x15890x112d_0x0: v1589112d_0 = PHI v112d1593, v112d157e(0x0)
    0x158b0x112d: v112d158b = ADD v1589112d_0, v112d1579
    0x158c0x112d: v112d158c = MLOAD v112d158b
    0x158f0x112d: v112d158f = ADD v1589112d_0, v112d1571
    0x15900x112d: MSTORE v112d158f, v112d158c
    0x15910x112d: v112d1591(0x20) = CONST 
    0x15930x112d: v112d1593 = ADD v112d1591(0x20), v1589112d_0
    0x15940x112d: v112d1594(0x1580) = CONST 
    0x15970x112d: JUMP v112d1594(0x1580)

    Begin block 0x15d30x112d
    prev=[0x15470x112d], succ=[0x15de0x112d, 0x15df0x112d]
    =================================
    0x15d50x112d: v112d15d5(0x0) = CONST 
    0x15da0x112d: v112d15da(0x15df) = CONST 
    0x15dd0x112d: JUMPI v112d15da(0x15df), v112darg0

    Begin block 0x15de0x112d
    prev=[0x15d30x112d], succ=[]
    =================================
    0x15de0x112d: THROW 

    Begin block 0x15df0x112d
    prev=[0x15d30x112d], succ=[0x22380x112d]
    =================================
    0x15e00x112d: v112d15e0 = DIV v112darg1, v112darg0
    0x15e80x112d: JUMP v1130(0x2238)

    Begin block 0x22380x112d
    prev=[0x15df0x112d], succ=[]
    =================================
    0x223e0x112d: RETURNPRIVATE v112darg2, v112d15e0

}

function 0x116f(0x116farg0x0, 0x116farg0x1, 0x116farg0x2) private {
    Begin block 0x116f
    prev=[], succ=[0x15e90x116f]
    =================================
    0x1170: v1170(0x0) = CONST 
    0x1172: v1172(0x225e) = CONST 
    0x1177: v1177(0x40) = CONST 
    0x1179: v1179 = MLOAD v1177(0x40)
    0x117b: v117b(0x40) = CONST 
    0x117d: v117d = ADD v117b(0x40), v1179
    0x117e: v117e(0x40) = CONST 
    0x1180: MSTORE v117e(0x40), v117d
    0x1182: v1182(0x1e) = CONST 
    0x1185: MSTORE v1179, v1182(0x1e)
    0x1186: v1186(0x20) = CONST 
    0x1188: v1188 = ADD v1186(0x20), v1179
    0x1189: v1189(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
    0x11ab: MSTORE v1188, v1189(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
    0x11ad: v11ad(0x15e9) = CONST 
    0x11b0: JUMP v11ad(0x15e9)

    Begin block 0x15e90x116f
    prev=[0x116f], succ=[0x15f50x116f, 0x163b0x116f]
    =================================
    0x15ea0x116f: v116f15ea(0x0) = CONST 
    0x15ef0x116f: v116f15ef = GT v116farg0, v116farg1
    0x15f00x116f: v116f15f0 = ISZERO v116f15ef
    0x15f10x116f: v116f15f1(0x163b) = CONST 
    0x15f40x116f: JUMPI v116f15f1(0x163b), v116f15f0

    Begin block 0x15f50x116f
    prev=[0x15e90x116f], succ=[0x162c0x116f, 0x15980x116f]
    =================================
    0x15f50x116f: v116f15f5(0x40) = CONST 
    0x15f70x116f: v116f15f7 = MLOAD v116f15f5(0x40)
    0x15f80x116f: v116f15f8(0x461bcd) = CONST 
    0x15fc0x116f: v116f15fc(0xe5) = CONST 
    0x15fe0x116f: v116f15fe(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v116f15fc(0xe5), v116f15f8(0x461bcd)
    0x16000x116f: MSTORE v116f15f7, v116f15fe(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x16010x116f: v116f1601(0x20) = CONST 
    0x16030x116f: v116f1603(0x4) = CONST 
    0x16060x116f: v116f1606 = ADD v116f15f7, v116f1603(0x4)
    0x16090x116f: MSTORE v116f1606, v116f1601(0x20)
    0x160b0x116f: v116f160b(0x1e) = MLOAD v1179
    0x160c0x116f: v116f160c(0x24) = CONST 
    0x160f0x116f: v116f160f = ADD v116f15f7, v116f160c(0x24)
    0x16100x116f: MSTORE v116f160f, v116f160b(0x1e)
    0x16120x116f: v116f1612(0x1e) = MLOAD v1179
    0x16170x116f: v116f1617(0x44) = CONST 
    0x161b0x116f: v116f161b = ADD v116f15f7, v116f1617(0x44)
    0x161f0x116f: v116f161f = ADD v1179, v116f1601(0x20)
    0x16240x116f: v116f1624(0x0) = CONST 
    0x16270x116f: v116f1627 = ISZERO v116f1612(0x1e)
    0x16280x116f: v116f1628(0x1598) = CONST 
    0x162b0x116f: JUMPI v116f1628(0x1598), v116f1627

    Begin block 0x162c0x116f
    prev=[0x15f50x116f], succ=[0x15800x116f]
    =================================
    0x162e0x116f: v116f162e = ADD v116f1624(0x0), v116f161f
    0x162f0x116f: v116f162f = MLOAD v116f162e
    0x16320x116f: v116f1632 = ADD v116f1624(0x0), v116f161b
    0x16330x116f: MSTORE v116f1632, v116f162f
    0x16340x116f: v116f1634(0x20) = CONST 
    0x16360x116f: v116f1636(0x20) = ADD v116f1634(0x20), v116f1624(0x0)
    0x16370x116f: v116f1637(0x1580) = CONST 
    0x163a0x116f: JUMP v116f1637(0x1580)

    Begin block 0x15800x116f
    prev=[0x162c0x116f, 0x15890x116f], succ=[0x15980x116f, 0x15890x116f]
    =================================
    0x15800x116f_0x0: v1580116f_0 = PHI v116f1636(0x20), v116f1593
    0x15830x116f: v116f1583 = LT v1580116f_0, v116f1612(0x1e)
    0x15840x116f: v116f1584 = ISZERO v116f1583
    0x15850x116f: v116f1585(0x1598) = CONST 
    0x15880x116f: JUMPI v116f1585(0x1598), v116f1584

    Begin block 0x15980x116f
    prev=[0x15f50x116f, 0x15800x116f], succ=[0x15c50x116f, 0x15ac0x116f]
    =================================
    0x15a10x116f: v116f15a1 = ADD v116f1612(0x1e), v116f161b
    0x15a30x116f: v116f15a3(0x1f) = CONST 
    0x15a50x116f: v116f15a5(0x1e) = AND v116f15a3(0x1f), v116f1612(0x1e)
    0x15a70x116f: v116f15a7 = ISZERO v116f15a5(0x1e)
    0x15a80x116f: v116f15a8(0x15c5) = CONST 
    0x15ab0x116f: JUMPI v116f15a8(0x15c5), v116f15a7

    Begin block 0x15c50x116f
    prev=[0x15980x116f, 0x15ac0x116f], succ=[]
    =================================
    0x15c50x116f_0x1: v15c5116f_1 = PHI v116f15c2, v116f15a1
    0x15cb0x116f: v116f15cb(0x40) = CONST 
    0x15cd0x116f: v116f15cd = MLOAD v116f15cb(0x40)
    0x15d00x116f: v116f15d0 = SUB v15c5116f_1, v116f15cd
    0x15d20x116f: REVERT v116f15cd, v116f15d0

    Begin block 0x15ac0x116f
    prev=[0x15980x116f], succ=[0x15c50x116f]
    =================================
    0x15ae0x116f: v116f15ae = SUB v116f15a1, v116f15a5(0x1e)
    0x15b00x116f: v116f15b0 = MLOAD v116f15ae
    0x15b10x116f: v116f15b1(0x1) = CONST 
    0x15b40x116f: v116f15b4(0x20) = CONST 
    0x15b60x116f: v116f15b6(0x2) = SUB v116f15b4(0x20), v116f15a5(0x1e)
    0x15b70x116f: v116f15b7(0x100) = CONST 
    0x15ba0x116f: v116f15ba(0x10000) = EXP v116f15b7(0x100), v116f15b6(0x2)
    0x15bb0x116f: v116f15bb(0xffff) = SUB v116f15ba(0x10000), v116f15b1(0x1)
    0x15bc0x116f: v116f15bc = NOT v116f15bb(0xffff)
    0x15bd0x116f: v116f15bd = AND v116f15bc, v116f15b0
    0x15bf0x116f: MSTORE v116f15ae, v116f15bd
    0x15c00x116f: v116f15c0(0x20) = CONST 
    0x15c20x116f: v116f15c2 = ADD v116f15c0(0x20), v116f15ae

    Begin block 0x15890x116f
    prev=[0x15800x116f], succ=[0x15800x116f]
    =================================
    0x15890x116f_0x0: v1589116f_0 = PHI v116f1636(0x20), v116f1593
    0x158b0x116f: v116f158b = ADD v1589116f_0, v116f161f
    0x158c0x116f: v116f158c = MLOAD v116f158b
    0x158f0x116f: v116f158f = ADD v1589116f_0, v116f161b
    0x15900x116f: MSTORE v116f158f, v116f158c
    0x15910x116f: v116f1591(0x20) = CONST 
    0x15930x116f: v116f1593 = ADD v116f1591(0x20), v1589116f_0
    0x15940x116f: v116f1594(0x1580) = CONST 
    0x15970x116f: JUMP v116f1594(0x1580)

    Begin block 0x163b0x116f
    prev=[0x15e90x116f], succ=[0x225e0x116f]
    =================================
    0x16400x116f: v116f1640 = SUB v116farg1, v116farg0
    0x16420x116f: JUMP v1172(0x225e)

    Begin block 0x225e0x116f
    prev=[0x163b0x116f], succ=[]
    =================================
    0x22640x116f: RETURNPRIVATE v116farg2, v116f1640

}

function 0x11b1(0x11b1arg0x0, 0x11b1arg0x1, 0x11b1arg0x2, 0x11b1arg0x3) private {
    Begin block 0x11b1
    prev=[], succ=[0x120f]
    =================================
    0x11b2: v11b2(0x40) = CONST 
    0x11b5: v11b5 = MLOAD v11b2(0x40)
    0x11b6: v11b6(0x1) = CONST 
    0x11b8: v11b8(0x1) = CONST 
    0x11ba: v11ba(0xa0) = CONST 
    0x11bc: v11bc(0x10000000000000000000000000000000000000000) = SHL v11ba(0xa0), v11b8(0x1)
    0x11bd: v11bd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v11bc(0x10000000000000000000000000000000000000000), v11b6(0x1)
    0x11c0: v11c0 = AND v11bd(0xffffffffffffffffffffffffffffffffffffffff), v11b1arg1
    0x11c1: v11c1(0x24) = CONST 
    0x11c4: v11c4 = ADD v11b5, v11c1(0x24)
    0x11c5: MSTORE v11c4, v11c0
    0x11c6: v11c6(0x44) = CONST 
    0x11ca: v11ca = ADD v11b5, v11c6(0x44)
    0x11cd: MSTORE v11ca, v11b1arg0
    0x11cf: v11cf = MLOAD v11b2(0x40)
    0x11d2: v11d2(0x0) = SUB v11b5, v11cf
    0x11d5: v11d5(0x44) = ADD v11c6(0x44), v11d2(0x0)
    0x11d7: MSTORE v11cf, v11d5(0x44)
    0x11d8: v11d8(0x64) = CONST 
    0x11dc: v11dc = ADD v11b5, v11d8(0x64)
    0x11de: MSTORE v11b2(0x40), v11dc
    0x11df: v11df(0x20) = CONST 
    0x11e2: v11e2 = ADD v11cf, v11df(0x20)
    0x11e4: v11e4 = MLOAD v11e2
    0x11e5: v11e5(0x1) = CONST 
    0x11e7: v11e7(0x1) = CONST 
    0x11e9: v11e9(0xe0) = CONST 
    0x11eb: v11eb(0x100000000000000000000000000000000000000000000000000000000) = SHL v11e9(0xe0), v11e7(0x1)
    0x11ec: v11ec(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v11eb(0x100000000000000000000000000000000000000000000000000000000), v11e5(0x1)
    0x11ed: v11ed = AND v11ec(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v11e4
    0x11ee: v11ee(0xa9059cbb) = CONST 
    0x11f3: v11f3(0xe0) = CONST 
    0x11f5: v11f5(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL v11f3(0xe0), v11ee(0xa9059cbb)
    0x11f6: v11f6 = OR v11f5(0xa9059cbb00000000000000000000000000000000000000000000000000000000), v11ed
    0x11f8: MSTORE v11e2, v11f6
    0x11fa: v11fa = MLOAD v11b2(0x40)
    0x11fc: v11fc(0x44) = MLOAD v11cf
    0x11fd: v11fd(0x0) = CONST 
    0x1200: v1200(0x60) = CONST 
    0x1205: v1205 = AND v11b1arg2, v11bd(0xffffffffffffffffffffffffffffffffffffffff)

    Begin block 0x120f
    prev=[0x11b1, 0x1218], succ=[0x122e, 0x1218]
    =================================
    0x120f_0x2: v120f_2 = PHI v11fc(0x44), v1221
    0x1210: v1210(0x20) = CONST 
    0x1213: v1213 = LT v120f_2, v1210(0x20)
    0x1214: v1214(0x122e) = CONST 
    0x1217: JUMPI v1214(0x122e), v1213

    Begin block 0x122e
    prev=[0x120f], succ=[0x126f, 0x1290]
    =================================
    0x122e_0x0: v122e_0 = PHI v11e2, v1229
    0x122e_0x1: v122e_1 = PHI v11fa, v1227
    0x122e_0x2: v122e_2 = PHI v11fc(0x44), v1221
    0x122f: v122f(0x1) = CONST 
    0x1232: v1232(0x20) = CONST 
    0x1234: v1234 = SUB v1232(0x20), v122e_2
    0x1235: v1235(0x100) = CONST 
    0x1238: v1238 = EXP v1235(0x100), v1234
    0x1239: v1239 = SUB v1238, v122f(0x1)
    0x123b: v123b = NOT v1239
    0x123d: v123d = MLOAD v122e_0
    0x123e: v123e = AND v123d, v123b
    0x1241: v1241 = MLOAD v122e_1
    0x1242: v1242 = AND v1241, v1239
    0x1245: v1245 = OR v123e, v1242
    0x1247: MSTORE v122e_1, v1245
    0x1250: v1250 = ADD v11fc(0x44), v11fa
    0x1254: v1254(0x0) = CONST 
    0x1256: v1256(0x40) = CONST 
    0x1258: v1258 = MLOAD v1256(0x40)
    0x125b: v125b(0x44) = SUB v1250, v1258
    0x125d: v125d(0x0) = CONST 
    0x1260: v1260 = GAS 
    0x1261: v1261 = CALL v1260, v1205, v125d(0x0), v1258, v125b(0x44), v1258, v1254(0x0)
    0x1265: v1265 = RETURNDATASIZE 
    0x1267: v1267(0x0) = CONST 
    0x126a: v126a = EQ v1265, v1267(0x0)
    0x126b: v126b(0x1290) = CONST 
    0x126e: JUMPI v126b(0x1290), v126a

    Begin block 0x126f
    prev=[0x122e], succ=[0x1295]
    =================================
    0x126f: v126f(0x40) = CONST 
    0x1271: v1271 = MLOAD v126f(0x40)
    0x1274: v1274(0x1f) = CONST 
    0x1276: v1276(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1274(0x1f)
    0x1277: v1277(0x3f) = CONST 
    0x1279: v1279 = RETURNDATASIZE 
    0x127a: v127a = ADD v1279, v1277(0x3f)
    0x127b: v127b = AND v127a, v1276(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x127d: v127d = ADD v1271, v127b
    0x127e: v127e(0x40) = CONST 
    0x1280: MSTORE v127e(0x40), v127d
    0x1281: v1281 = RETURNDATASIZE 
    0x1283: MSTORE v1271, v1281
    0x1284: v1284 = RETURNDATASIZE 
    0x1285: v1285(0x0) = CONST 
    0x1287: v1287(0x20) = CONST 
    0x128a: v128a = ADD v1271, v1287(0x20)
    0x128b: RETURNDATACOPY v128a, v1285(0x0), v1284
    0x128c: v128c(0x1295) = CONST 
    0x128f: JUMP v128c(0x1295)

    Begin block 0x1295
    prev=[0x126f, 0x1290], succ=[0x12c3, 0x12a2]
    =================================
    0x129d: v129d = ISZERO v1261
    0x129e: v129e(0x12c3) = CONST 
    0x12a1: JUMPI v129e(0x12c3), v129d

    Begin block 0x12c3
    prev=[0x1295, 0x12c0, 0x12a2], succ=[0x12c8, 0x1314]
    =================================
    0x12c3_0x0: v12c3_0 = PHI v1261, v12a5, v12c2
    0x12c4: v12c4(0x1314) = CONST 
    0x12c7: JUMPI v12c4(0x1314), v12c3_0

    Begin block 0x12c8
    prev=[0x12c3], succ=[]
    =================================
    0x12c8: v12c8(0x40) = CONST 
    0x12cb: v12cb = MLOAD v12c8(0x40)
    0x12cc: v12cc(0x461bcd) = CONST 
    0x12d0: v12d0(0xe5) = CONST 
    0x12d2: v12d2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v12d0(0xe5), v12cc(0x461bcd)
    0x12d4: MSTORE v12cb, v12d2(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x12d5: v12d5(0x20) = CONST 
    0x12d7: v12d7(0x4) = CONST 
    0x12da: v12da = ADD v12cb, v12d7(0x4)
    0x12db: MSTORE v12da, v12d5(0x20)
    0x12dc: v12dc(0x1f) = CONST 
    0x12de: v12de(0x24) = CONST 
    0x12e1: v12e1 = ADD v12cb, v12de(0x24)
    0x12e2: MSTORE v12e1, v12dc(0x1f)
    0x12e3: v12e3(0x5472616e7366657248656c7065723a205452414e534645525f4641494c454400) = CONST 
    0x1304: v1304(0x44) = CONST 
    0x1307: v1307 = ADD v12cb, v1304(0x44)
    0x1308: MSTORE v1307, v12e3(0x5472616e7366657248656c7065723a205452414e534645525f4641494c454400)
    0x130a: v130a = MLOAD v12c8(0x40)
    0x130e: v130e(0x0) = SUB v12cb, v130a
    0x130f: v130f(0x64) = CONST 
    0x1311: v1311(0x64) = ADD v130f(0x64), v130e(0x0)
    0x1313: REVERT v130a, v1311(0x64)

    Begin block 0x1314
    prev=[0x12c3], succ=[]
    =================================
    0x131a: RETURNPRIVATE v11b1arg3

    Begin block 0x12a2
    prev=[0x1295], succ=[0x12c3, 0x12ab]
    =================================
    0x12a2_0x1: v12a2_1 = PHI v1271, v1291(0x60)
    0x12a4: v12a4 = MLOAD v12a2_1
    0x12a5: v12a5 = ISZERO v12a4
    0x12a7: v12a7(0x12c3) = CONST 
    0x12aa: JUMPI v12a7(0x12c3), v12a5

    Begin block 0x12ab
    prev=[0x12a2], succ=[0x12bc, 0x12c0]
    =================================
    0x12ab_0x1: v12ab_1 = PHI v1271, v1291(0x60)
    0x12ae: v12ae(0x20) = CONST 
    0x12b0: v12b0 = ADD v12ae(0x20), v12ab_1
    0x12b2: v12b2 = MLOAD v12ab_1
    0x12b3: v12b3(0x20) = CONST 
    0x12b6: v12b6 = LT v12b2, v12b3(0x20)
    0x12b7: v12b7 = ISZERO v12b6
    0x12b8: v12b8(0x12c0) = CONST 
    0x12bb: JUMPI v12b8(0x12c0), v12b7

    Begin block 0x12bc
    prev=[0x12ab], succ=[]
    =================================
    0x12bc: v12bc(0x0) = CONST 
    0x12bf: REVERT v12bc(0x0), v12bc(0x0)

    Begin block 0x12c0
    prev=[0x12ab], succ=[0x12c3]
    =================================
    0x12c2: v12c2 = MLOAD v12b0

    Begin block 0x1290
    prev=[0x122e], succ=[0x1295]
    =================================
    0x1291: v1291(0x60) = CONST 

    Begin block 0x1218
    prev=[0x120f], succ=[0x120f]
    =================================
    0x1218_0x0: v1218_0 = PHI v11e2, v1229
    0x1218_0x1: v1218_1 = PHI v11fa, v1227
    0x1218_0x2: v1218_2 = PHI v11fc(0x44), v1221
    0x1219: v1219 = MLOAD v1218_0
    0x121b: MSTORE v1218_1, v1219
    0x121c: v121c(0x1f) = CONST 
    0x121e: v121e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v121c(0x1f)
    0x1221: v1221 = ADD v1218_2, v121e(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x1223: v1223(0x20) = CONST 
    0x1227: v1227 = ADD v1223(0x20), v1218_1
    0x1229: v1229 = ADD v1223(0x20), v1218_0
    0x122a: v122a(0x120f) = CONST 
    0x122d: JUMP v122a(0x120f)

}

function fallback()() public {
    Begin block 0x170b
    prev=[], succ=[]
    =================================
    0x170c: v170c(0x0) = CONST 
    0x170f: REVERT v170c(0x0), v170c(0x0)

}

function rewards(address)() public {
    Begin block 0x20a
    prev=[], succ=[0x21c, 0x220]
    =================================
    0x20b: v20b(0x182b) = CONST 
    0x20e: v20e(0x4) = CONST 
    0x211: v211 = CALLDATASIZE 
    0x212: v212 = SUB v211, v20e(0x4)
    0x213: v213(0x20) = CONST 
    0x216: v216 = LT v212, v213(0x20)
    0x217: v217 = ISZERO v216
    0x218: v218(0x220) = CONST 
    0x21b: JUMPI v218(0x220), v217

    Begin block 0x21c
    prev=[0x20a], succ=[]
    =================================
    0x21c: v21c(0x0) = CONST 
    0x21f: REVERT v21c(0x0), v21c(0x0)

    Begin block 0x220
    prev=[0x20a], succ=[0x5c8]
    =================================
    0x222: v222 = CALLDATALOAD v20e(0x4)
    0x223: v223(0x1) = CONST 
    0x225: v225(0x1) = CONST 
    0x227: v227(0xa0) = CONST 
    0x229: v229(0x10000000000000000000000000000000000000000) = SHL v227(0xa0), v225(0x1)
    0x22a: v22a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v229(0x10000000000000000000000000000000000000000), v223(0x1)
    0x22b: v22b = AND v22a(0xffffffffffffffffffffffffffffffffffffffff), v222
    0x22c: v22c(0x5c8) = CONST 
    0x22f: JUMP v22c(0x5c8)

    Begin block 0x5c8
    prev=[0x220], succ=[0x182b]
    =================================
    0x5ca: v5ca(0x0) = CONST 
    0x5cd: JUMP v20b(0x182b)

    Begin block 0x182b
    prev=[0x5c8], succ=[]
    =================================
    0x182c: v182c(0x40) = CONST 
    0x182f: v182f = MLOAD v182c(0x40)
    0x1832: MSTORE v182f, v5ca(0x0)
    0x1833: v1833 = MLOAD v182c(0x40)
    0x1837: v1837(0x0) = SUB v182f, v1833
    0x1838: v1838(0x20) = CONST 
    0x183a: v183a(0x20) = ADD v1838(0x20), v1837(0x0)
    0x183c: RETURN v1833, v183a(0x20)

}

function minter()() public {
    Begin block 0x242
    prev=[], succ=[0x5ce]
    =================================
    0x243: v243(0x185c) = CONST 
    0x246: v246(0x5ce) = CONST 
    0x249: JUMP v246(0x5ce)

    Begin block 0x5ce
    prev=[0x242], succ=[0x185c]
    =================================
    0x5cf: v5cf(0x35) = CONST 
    0x5d1: v5d1 = SLOAD v5cf(0x35)
    0x5d2: v5d2(0x1) = CONST 
    0x5d4: v5d4(0x1) = CONST 
    0x5d6: v5d6(0xa0) = CONST 
    0x5d8: v5d8(0x10000000000000000000000000000000000000000) = SHL v5d6(0xa0), v5d4(0x1)
    0x5d9: v5d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d8(0x10000000000000000000000000000000000000000), v5d2(0x1)
    0x5da: v5da = AND v5d9(0xffffffffffffffffffffffffffffffffffffffff), v5d1
    0x5dc: JUMP v243(0x185c)

    Begin block 0x185c
    prev=[0x5ce], succ=[]
    =================================
    0x185d: v185d(0x40) = CONST 
    0x1860: v1860 = MLOAD v185d(0x40)
    0x1861: v1861(0x1) = CONST 
    0x1863: v1863(0x1) = CONST 
    0x1865: v1865(0xa0) = CONST 
    0x1867: v1867(0x10000000000000000000000000000000000000000) = SHL v1865(0xa0), v1863(0x1)
    0x1868: v1868(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1867(0x10000000000000000000000000000000000000000), v1861(0x1)
    0x186b: v186b = AND v5da, v1868(0xffffffffffffffffffffffffffffffffffffffff)
    0x186d: MSTORE v1860, v186b
    0x186e: v186e = MLOAD v185d(0x40)
    0x1872: v1872(0x0) = SUB v1860, v186e
    0x1873: v1873(0x20) = CONST 
    0x1875: v1875(0x20) = ADD v1873(0x20), v1872(0x0)
    0x1877: RETURN v186e, v1875(0x20)

}

function governor()() public {
    Begin block 0x266
    prev=[], succ=[0x5dd]
    =================================
    0x267: v267(0x1897) = CONST 
    0x26a: v26a(0x5dd) = CONST 
    0x26d: JUMP v26a(0x5dd)

    Begin block 0x5dd
    prev=[0x266], succ=[0x1897]
    =================================
    0x5de: v5de(0x33) = CONST 
    0x5e0: v5e0 = SLOAD v5de(0x33)
    0x5e1: v5e1(0x1) = CONST 
    0x5e3: v5e3(0x1) = CONST 
    0x5e5: v5e5(0xa0) = CONST 
    0x5e7: v5e7(0x10000000000000000000000000000000000000000) = SHL v5e5(0xa0), v5e3(0x1)
    0x5e8: v5e8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5e7(0x10000000000000000000000000000000000000000), v5e1(0x1)
    0x5e9: v5e9 = AND v5e8(0xffffffffffffffffffffffffffffffffffffffff), v5e0
    0x5eb: JUMP v267(0x1897)

    Begin block 0x1897
    prev=[0x5dd], succ=[]
    =================================
    0x1898: v1898(0x40) = CONST 
    0x189b: v189b = MLOAD v1898(0x40)
    0x189c: v189c(0x1) = CONST 
    0x189e: v189e(0x1) = CONST 
    0x18a0: v18a0(0xa0) = CONST 
    0x18a2: v18a2(0x10000000000000000000000000000000000000000) = SHL v18a0(0xa0), v189e(0x1)
    0x18a3: v18a3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v18a2(0x10000000000000000000000000000000000000000), v189c(0x1)
    0x18a6: v18a6 = AND v5e9, v18a3(0xffffffffffffffffffffffffffffffffffffffff)
    0x18a8: MSTORE v189b, v18a6
    0x18a9: v18a9 = MLOAD v1898(0x40)
    0x18ad: v18ad(0x0) = SUB v189b, v18a9
    0x18ae: v18ae(0x20) = CONST 
    0x18b0: v18b0(0x20) = ADD v18ae(0x20), v18ad(0x0)
    0x18b2: RETURN v18a9, v18b0(0x20)

}

function setConfig(bytes32,uint256)() public {
    Begin block 0x26e
    prev=[], succ=[0x280, 0x284]
    =================================
    0x26f: v26f(0x18d2) = CONST 
    0x272: v272(0x4) = CONST 
    0x275: v275 = CALLDATASIZE 
    0x276: v276 = SUB v275, v272(0x4)
    0x277: v277(0x40) = CONST 
    0x27a: v27a = LT v276, v277(0x40)
    0x27b: v27b = ISZERO v27a
    0x27c: v27c(0x284) = CONST 
    0x27f: JUMPI v27c(0x284), v27b

    Begin block 0x280
    prev=[0x26e], succ=[]
    =================================
    0x280: v280(0x0) = CONST 
    0x283: REVERT v280(0x0), v280(0x0)

    Begin block 0x284
    prev=[0x26e], succ=[0x5ec]
    =================================
    0x287: v287 = CALLDATALOAD v272(0x4)
    0x289: v289(0x20) = CONST 
    0x28b: v28b(0x24) = ADD v289(0x20), v272(0x4)
    0x28c: v28c = CALLDATALOAD v28b(0x24)
    0x28d: v28d(0x5ec) = CONST 
    0x290: JUMP v28d(0x5ec)

    Begin block 0x5ec
    prev=[0x284], succ=[0x5ff, 0x603]
    =================================
    0x5ed: v5ed(0x33) = CONST 
    0x5ef: v5ef = SLOAD v5ed(0x33)
    0x5f0: v5f0(0x1) = CONST 
    0x5f2: v5f2(0x1) = CONST 
    0x5f4: v5f4(0xa0) = CONST 
    0x5f6: v5f6(0x10000000000000000000000000000000000000000) = SHL v5f4(0xa0), v5f2(0x1)
    0x5f7: v5f7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5f6(0x10000000000000000000000000000000000000000), v5f0(0x1)
    0x5f8: v5f8 = AND v5f7(0xffffffffffffffffffffffffffffffffffffffff), v5ef
    0x5f9: v5f9 = CALLER 
    0x5fa: v5fa = EQ v5f9, v5f8
    0x5fb: v5fb(0x603) = CONST 
    0x5fe: JUMPI v5fb(0x603), v5fa

    Begin block 0x5ff
    prev=[0x5ec], succ=[]
    =================================
    0x5ff: v5ff(0x0) = CONST 
    0x602: REVERT v5ff(0x0), v5ff(0x0)

    Begin block 0x603
    prev=[0x5ec], succ=[0x10a6B0x603]
    =================================
    0x604: v604(0x1da9) = CONST 
    0x609: v609(0x10a6) = CONST 
    0x60c: JUMP v609(0x10a6), v28c, v287, v604(0x1da9)

    Begin block 0x10a6B0x603
    prev=[0x603], succ=[0x10bcB0x603, 0x21efB0x603]
    =================================
    0x10a7S0x603: v10a7V603(0x0) = CONST 
    0x10abS0x603: MSTORE v10a7V603(0x0), v287
    0x10acS0x603: v10acV603(0x34) = CONST 
    0x10aeS0x603: v10aeV603(0x20) = CONST 
    0x10b0S0x603: MSTORE v10aeV603(0x20), v10acV603(0x34)
    0x10b1S0x603: v10b1V603(0x40) = CONST 
    0x10b4S0x603: v10b4V603 = SHA3 v10a7V603(0x0), v10b1V603(0x40)
    0x10b5S0x603: v10b5V603 = SLOAD v10b4V603
    0x10b7S0x603: v10b7V603 = EQ v28c, v10b5V603
    0x10b8S0x603: v10b8V603(0x21ef) = CONST 
    0x10bbS0x603: JUMPI v10b8V603(0x21ef), v10b7V603

    Begin block 0x10bcB0x603
    prev=[0x10a6B0x603], succ=[0x1da9]
    =================================
    0x10bcS0x603: v10bcV603(0x0) = CONST 
    0x10c0S0x603: MSTORE v10bcV603(0x0), v287
    0x10c1S0x603: v10c1V603(0x34) = CONST 
    0x10c3S0x603: v10c3V603(0x20) = CONST 
    0x10c5S0x603: MSTORE v10c3V603(0x20), v10c1V603(0x34)
    0x10c6S0x603: v10c6V603(0x40) = CONST 
    0x10caS0x603: v10caV603 = SHA3 v10bcV603(0x0), v10c6V603(0x40)
    0x10cbS0x603: SSTORE v10caV603, v28c
    0x10ccS0x603: JUMP v604(0x1da9)

    Begin block 0x1da9
    prev=[0x10bcB0x603, 0x21efB0x603], succ=[0x18d2]
    =================================
    0x1dac: JUMP v26f(0x18d2)

    Begin block 0x18d2
    prev=[0x1da9], succ=[]
    =================================
    0x18d3: STOP 

    Begin block 0x21efB0x603
    prev=[0x10a6B0x603], succ=[0x1da9]
    =================================
    0x21f2S0x603: JUMP v604(0x1da9)

}

function totalSupply()() public {
    Begin block 0x293
    prev=[], succ=[0x611]
    =================================
    0x294: v294(0x18f3) = CONST 
    0x297: v297(0x611) = CONST 
    0x29a: JUMP v297(0x611)

    Begin block 0x611
    prev=[0x293], succ=[0x18f3]
    =================================
    0x612: v612(0x37) = CONST 
    0x614: v614 = SLOAD v612(0x37)
    0x616: JUMP v294(0x18f3)

    Begin block 0x18f3
    prev=[0x611], succ=[]
    =================================
    0x18f4: v18f4(0x40) = CONST 
    0x18f7: v18f7 = MLOAD v18f4(0x40)
    0x18fa: MSTORE v18f7, v614
    0x18fb: v18fb = MLOAD v18f4(0x40)
    0x18ff: v18ff(0x0) = SUB v18f7, v18fb
    0x1900: v1900(0x20) = CONST 
    0x1902: v1902(0x20) = ADD v1900(0x20), v18ff(0x0)
    0x1904: RETURN v18fb, v1902(0x20)

}

function rewardPerToken()() public {
    Begin block 0x29b
    prev=[], succ=[0x617]
    =================================
    0x29c: v29c(0x1924) = CONST 
    0x29f: v29f(0x617) = CONST 
    0x2a2: JUMP v29f(0x617)

    Begin block 0x617
    prev=[0x29b], succ=[0x1924]
    =================================
    0x618: v618(0x0) = CONST 
    0x61b: JUMP v29c(0x1924)

    Begin block 0x1924
    prev=[0x617], succ=[]
    =================================
    0x1925: v1925(0x40) = CONST 
    0x1928: v1928 = MLOAD v1925(0x40)
    0x192b: MSTORE v1928, v618(0x0)
    0x192c: v192c = MLOAD v1925(0x40)
    0x1930: v1930(0x0) = SUB v1928, v192c
    0x1931: v1931(0x20) = CONST 
    0x1933: v1933(0x20) = ADD v1931(0x20), v1930(0x0)
    0x1935: RETURN v192c, v1933(0x20)

}

function weightOfGauge(address)() public {
    Begin block 0x2a3
    prev=[], succ=[0x2b5, 0x2b9]
    =================================
    0x2a4: v2a4(0x1955) = CONST 
    0x2a7: v2a7(0x4) = CONST 
    0x2aa: v2aa = CALLDATASIZE 
    0x2ab: v2ab = SUB v2aa, v2a7(0x4)
    0x2ac: v2ac(0x20) = CONST 
    0x2af: v2af = LT v2ab, v2ac(0x20)
    0x2b0: v2b0 = ISZERO v2af
    0x2b1: v2b1(0x2b9) = CONST 
    0x2b4: JUMPI v2b1(0x2b9), v2b0

    Begin block 0x2b5
    prev=[0x2a3], succ=[]
    =================================
    0x2b5: v2b5(0x0) = CONST 
    0x2b8: REVERT v2b5(0x0), v2b5(0x0)

    Begin block 0x2b9
    prev=[0x2a3], succ=[0x61c0x2a3]
    =================================
    0x2bb: v2bb = CALLDATALOAD v2a7(0x4)
    0x2bc: v2bc(0x1) = CONST 
    0x2be: v2be(0x1) = CONST 
    0x2c0: v2c0(0xa0) = CONST 
    0x2c2: v2c2(0x10000000000000000000000000000000000000000) = SHL v2c0(0xa0), v2be(0x1)
    0x2c3: v2c3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c2(0x10000000000000000000000000000000000000000), v2bc(0x1)
    0x2c4: v2c4 = AND v2c3(0xffffffffffffffffffffffffffffffffffffffff), v2bb
    0x2c5: v2c5(0x61c) = CONST 
    0x2c8: JUMP v2c5(0x61c)

    Begin block 0x61c0x2a3
    prev=[0x2b9], succ=[0x66c0x2a3, 0x6700x2a3]
    =================================
    0x61d0x2a3: v2a361d(0x36) = CONST 
    0x61f0x2a3: v2a361f = SLOAD v2a361d(0x36)
    0x6200x2a3: v2a3620(0x35) = CONST 
    0x6220x2a3: v2a3622 = SLOAD v2a3620(0x35)
    0x6230x2a3: v2a3623(0x40) = CONST 
    0x6260x2a3: v2a3626 = MLOAD v2a3623(0x40)
    0x6270x2a3: v2a3627(0x70a08231) = CONST 
    0x62c0x2a3: v2a362c(0xe0) = CONST 
    0x62e0x2a3: v2a362e(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL v2a362c(0xe0), v2a3627(0x70a08231)
    0x6300x2a3: MSTORE v2a3626, v2a362e(0x70a0823100000000000000000000000000000000000000000000000000000000)
    0x6310x2a3: v2a3631(0x1) = CONST 
    0x6330x2a3: v2a3633(0x1) = CONST 
    0x6350x2a3: v2a3635(0xa0) = CONST 
    0x6370x2a3: v2a3637(0x10000000000000000000000000000000000000000) = SHL v2a3635(0xa0), v2a3633(0x1)
    0x6380x2a3: v2a3638(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a3637(0x10000000000000000000000000000000000000000), v2a3631(0x1)
    0x63b0x2a3: v2a363b = AND v2a3638(0xffffffffffffffffffffffffffffffffffffffff), v2a3622
    0x63c0x2a3: v2a363c(0x4) = CONST 
    0x63f0x2a3: v2a363f = ADD v2a3626, v2a363c(0x4)
    0x6400x2a3: MSTORE v2a363f, v2a363b
    0x6420x2a3: v2a3642 = MLOAD v2a3623(0x40)
    0x6430x2a3: v2a3643(0x0) = CONST 
    0x6460x2a3: v2a3646(0x72c) = CONST 
    0x64a0x2a3: v2a364a = AND v2a3638(0xffffffffffffffffffffffffffffffffffffffff), v2a361f
    0x64c0x2a3: v2a364c(0x70a08231) = CONST 
    0x6520x2a3: v2a3652(0x24) = CONST 
    0x6560x2a3: v2a3656 = ADD v2a3626, v2a3652(0x24)
    0x6580x2a3: v2a3658(0x20) = CONST 
    0x65f0x2a3: v2a365f(0x0) = SUB v2a3626, v2a3642
    0x6600x2a3: v2a3660(0x24) = ADD v2a365f(0x0), v2a3652(0x24)
    0x6640x2a3: v2a3664 = EXTCODESIZE v2a364a
    0x6650x2a3: v2a3665 = ISZERO v2a3664
    0x6670x2a3: v2a3667 = ISZERO v2a3665
    0x6680x2a3: v2a3668(0x670) = CONST 
    0x66b0x2a3: JUMPI v2a3668(0x670), v2a3667

    Begin block 0x66c0x2a3
    prev=[0x61c0x2a3], succ=[]
    =================================
    0x66c0x2a3: v2a366c(0x0) = CONST 
    0x66f0x2a3: REVERT v2a366c(0x0), v2a366c(0x0)

    Begin block 0x6700x2a3
    prev=[0x61c0x2a3], succ=[0x67b0x2a3, 0x6840x2a3]
    =================================
    0x6720x2a3: v2a3672 = GAS 
    0x6730x2a3: v2a3673 = STATICCALL v2a3672, v2a364a, v2a3642, v2a3660(0x24), v2a3642, v2a3658(0x20)
    0x6740x2a3: v2a3674 = ISZERO v2a3673
    0x6760x2a3: v2a3676 = ISZERO v2a3674
    0x6770x2a3: v2a3677(0x684) = CONST 
    0x67a0x2a3: JUMPI v2a3677(0x684), v2a3676

    Begin block 0x67b0x2a3
    prev=[0x6700x2a3], succ=[]
    =================================
    0x67b0x2a3: v2a367b = RETURNDATASIZE 
    0x67c0x2a3: v2a367c(0x0) = CONST 
    0x67f0x2a3: RETURNDATACOPY v2a367c(0x0), v2a367c(0x0), v2a367b
    0x6800x2a3: v2a3680 = RETURNDATASIZE 
    0x6810x2a3: v2a3681(0x0) = CONST 
    0x6830x2a3: REVERT v2a3681(0x0), v2a3680

    Begin block 0x6840x2a3
    prev=[0x6700x2a3], succ=[0x6960x2a3, 0x69a0x2a3]
    =================================
    0x6890x2a3: v2a3689(0x40) = CONST 
    0x68b0x2a3: v2a368b = MLOAD v2a3689(0x40)
    0x68c0x2a3: v2a368c = RETURNDATASIZE 
    0x68d0x2a3: v2a368d(0x20) = CONST 
    0x6900x2a3: v2a3690 = LT v2a368c, v2a368d(0x20)
    0x6910x2a3: v2a3691 = ISZERO v2a3690
    0x6920x2a3: v2a3692(0x69a) = CONST 
    0x6950x2a3: JUMPI v2a3692(0x69a), v2a3691

    Begin block 0x6960x2a3
    prev=[0x6840x2a3], succ=[]
    =================================
    0x6960x2a3: v2a3696(0x0) = CONST 
    0x6990x2a3: REVERT v2a3696(0x0), v2a3696(0x0)

    Begin block 0x69a0x2a3
    prev=[0x6840x2a3], succ=[0x6f00x2a3, 0x6f40x2a3]
    =================================
    0x69c0x2a3: v2a369c = MLOAD v2a368b
    0x69d0x2a3: v2a369d(0x35) = CONST 
    0x69f0x2a3: v2a369f = SLOAD v2a369d(0x35)
    0x6a00x2a3: v2a36a0(0x40) = CONST 
    0x6a30x2a3: v2a36a3 = MLOAD v2a36a0(0x40)
    0x6a40x2a3: v2a36a4(0xc33342e9) = CONST 
    0x6a90x2a3: v2a36a9(0xe0) = CONST 
    0x6ab0x2a3: v2a36ab(0xc33342e900000000000000000000000000000000000000000000000000000000) = SHL v2a36a9(0xe0), v2a36a4(0xc33342e9)
    0x6ad0x2a3: MSTORE v2a36a3, v2a36ab(0xc33342e900000000000000000000000000000000000000000000000000000000)
    0x6ae0x2a3: v2a36ae(0x1) = CONST 
    0x6b00x2a3: v2a36b0(0x1) = CONST 
    0x6b20x2a3: v2a36b2(0xa0) = CONST 
    0x6b40x2a3: v2a36b4(0x10000000000000000000000000000000000000000) = SHL v2a36b2(0xa0), v2a36b0(0x1)
    0x6b50x2a3: v2a36b5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2a36b4(0x10000000000000000000000000000000000000000), v2a36ae(0x1)
    0x6b80x2a3: v2a36b8 = AND v2a36b5(0xffffffffffffffffffffffffffffffffffffffff), v2c4
    0x6b90x2a3: v2a36b9(0x4) = CONST 
    0x6bc0x2a3: v2a36bc = ADD v2a36a3, v2a36b9(0x4)
    0x6bd0x2a3: MSTORE v2a36bc, v2a36b8
    0x6bf0x2a3: v2a36bf = MLOAD v2a36a0(0x40)
    0x6c00x2a3: v2a36c0(0x1dcc) = CONST 
    0x6c40x2a3: v2a36c4(0xde0b6b3a7640000) = CONST 
    0x6ce0x2a3: v2a36ce = AND v2a36b5(0xffffffffffffffffffffffffffffffffffffffff), v2a369f
    0x6d00x2a3: v2a36d0(0xc33342e9) = CONST 
    0x6d60x2a3: v2a36d6(0x24) = CONST 
    0x6da0x2a3: v2a36da = ADD v2a36a3, v2a36d6(0x24)
    0x6dc0x2a3: v2a36dc(0x20) = CONST 
    0x6e30x2a3: v2a36e3(0x0) = SUB v2a36a3, v2a36bf
    0x6e40x2a3: v2a36e4(0x24) = ADD v2a36e3(0x0), v2a36d6(0x24)
    0x6e80x2a3: v2a36e8 = EXTCODESIZE v2a36ce
    0x6e90x2a3: v2a36e9 = ISZERO v2a36e8
    0x6eb0x2a3: v2a36eb = ISZERO v2a36e9
    0x6ec0x2a3: v2a36ec(0x6f4) = CONST 
    0x6ef0x2a3: JUMPI v2a36ec(0x6f4), v2a36eb

    Begin block 0x6f00x2a3
    prev=[0x69a0x2a3], succ=[]
    =================================
    0x6f00x2a3: v2a36f0(0x0) = CONST 
    0x6f30x2a3: REVERT v2a36f0(0x0), v2a36f0(0x0)

    Begin block 0x6f40x2a3
    prev=[0x69a0x2a3], succ=[0x6ff0x2a3, 0x7080x2a3]
    =================================
    0x6f60x2a3: v2a36f6 = GAS 
    0x6f70x2a3: v2a36f7 = STATICCALL v2a36f6, v2a36ce, v2a36bf, v2a36e4(0x24), v2a36bf, v2a36dc(0x20)
    0x6f80x2a3: v2a36f8 = ISZERO v2a36f7
    0x6fa0x2a3: v2a36fa = ISZERO v2a36f8
    0x6fb0x2a3: v2a36fb(0x708) = CONST 
    0x6fe0x2a3: JUMPI v2a36fb(0x708), v2a36fa

    Begin block 0x6ff0x2a3
    prev=[0x6f40x2a3], succ=[]
    =================================
    0x6ff0x2a3: v2a36ff = RETURNDATASIZE 
    0x7000x2a3: v2a3700(0x0) = CONST 
    0x7030x2a3: RETURNDATACOPY v2a3700(0x0), v2a3700(0x0), v2a36ff
    0x7040x2a3: v2a3704 = RETURNDATASIZE 
    0x7050x2a3: v2a3705(0x0) = CONST 
    0x7070x2a3: REVERT v2a3705(0x0), v2a3704

    Begin block 0x7080x2a3
    prev=[0x6f40x2a3], succ=[0x71a0x2a3, 0x71e0x2a3]
    =================================
    0x70d0x2a3: v2a370d(0x40) = CONST 
    0x70f0x2a3: v2a370f = MLOAD v2a370d(0x40)
    0x7100x2a3: v2a3710 = RETURNDATASIZE 
    0x7110x2a3: v2a3711(0x20) = CONST 
    0x7140x2a3: v2a3714 = LT v2a3710, v2a3711(0x20)
    0x7150x2a3: v2a3715 = ISZERO v2a3714
    0x7160x2a3: v2a3716(0x71e) = CONST 
    0x7190x2a3: JUMPI v2a3716(0x71e), v2a3715

    Begin block 0x71a0x2a3
    prev=[0x7080x2a3], succ=[]
    =================================
    0x71a0x2a3: v2a371a(0x0) = CONST 
    0x71d0x2a3: REVERT v2a371a(0x0), v2a371a(0x0)

    Begin block 0x71e0x2a3
    prev=[0x7080x2a3], succ=[0x10cd0x2a3]
    =================================
    0x7200x2a3: v2a3720 = MLOAD v2a370f
    0x7220x2a3: v2a3722(0x10cd) = CONST 
    0x7250x2a3: JUMP v2a3722(0x10cd)

    Begin block 0x10cd0x2a3
    prev=[0x71e0x2a3], succ=[0x10dc0x2a3, 0x10d50x2a3]
    =================================
    0x10ce0x2a3: v2a310ce(0x0) = CONST 
    0x10d10x2a3: v2a310d1(0x10dc) = CONST 
    0x10d40x2a3: JUMPI v2a310d1(0x10dc), v2a3720

    Begin block 0x10dc0x2a3
    prev=[0x10cd0x2a3], succ=[0x10e80x2a3, 0x10e90x2a3]
    =================================
    0x10df0x2a3: v2a310df = MUL v2a36c4(0xde0b6b3a7640000), v2a3720
    0x10e40x2a3: v2a310e4(0x10e9) = CONST 
    0x10e70x2a3: JUMPI v2a310e4(0x10e9), v2a3720

    Begin block 0x10e80x2a3
    prev=[0x10dc0x2a3], succ=[]
    =================================
    0x10e80x2a3: THROW 

    Begin block 0x10e90x2a3
    prev=[0x10dc0x2a3], succ=[0x10f00x2a3, 0x22120x2a3]
    =================================
    0x10ea0x2a3: v2a310ea = DIV v2a310df, v2a3720
    0x10eb0x2a3: v2a310eb = EQ v2a310ea, v2a36c4(0xde0b6b3a7640000)
    0x10ec0x2a3: v2a310ec(0x2212) = CONST 
    0x10ef0x2a3: JUMPI v2a310ec(0x2212), v2a310eb

    Begin block 0x10f00x2a3
    prev=[0x10e90x2a3], succ=[]
    =================================
    0x10f00x2a3: v2a310f0(0x40) = CONST 
    0x10f20x2a3: v2a310f2 = MLOAD v2a310f0(0x40)
    0x10f30x2a3: v2a310f3(0x461bcd) = CONST 
    0x10f70x2a3: v2a310f7(0xe5) = CONST 
    0x10f90x2a3: v2a310f9(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2a310f7(0xe5), v2a310f3(0x461bcd)
    0x10fb0x2a3: MSTORE v2a310f2, v2a310f9(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x10fc0x2a3: v2a310fc(0x4) = CONST 
    0x10fe0x2a3: v2a310fe = ADD v2a310fc(0x4), v2a310f2
    0x11010x2a3: v2a31101(0x20) = CONST 
    0x11030x2a3: v2a31103 = ADD v2a31101(0x20), v2a310fe
    0x11060x2a3: v2a31106(0x20) = SUB v2a31103, v2a310fe
    0x11080x2a3: MSTORE v2a310fe, v2a31106(0x20)
    0x11090x2a3: v2a31109(0x21) = CONST 
    0x110c0x2a3: MSTORE v2a31103, v2a31109(0x21)
    0x110d0x2a3: v2a3110d(0x20) = CONST 
    0x110f0x2a3: v2a3110f = ADD v2a3110d(0x20), v2a31103
    0x11110x2a3: v2a31111(0x1644) = CONST 
    0x11140x2a3: v2a31114(0x21) = CONST 
    0x11170x2a3: CODECOPY v2a3110f, v2a31111(0x1644), v2a31114(0x21)
    0x11180x2a3: v2a31118(0x40) = CONST 
    0x111a0x2a3: v2a3111a = ADD v2a31118(0x40), v2a3110f
    0x111e0x2a3: v2a3111e(0x40) = CONST 
    0x11200x2a3: v2a31120 = MLOAD v2a3111e(0x40)
    0x11230x2a3: v2a31123(0x84) = SUB v2a3111a, v2a31120
    0x11250x2a3: REVERT v2a31120, v2a31123(0x84)

    Begin block 0x22120x2a3
    prev=[0x10e90x2a3], succ=[0x1dcc0x2a3]
    =================================
    0x22180x2a3: JUMP v2a36c0(0x1dcc)

    Begin block 0x1dcc0x2a3
    prev=[0x93f0x2a3, 0x22120x2a3], succ=[0x112d0x2a3]
    =================================
    0x1dce0x2a3: v2a31dce(0x112d) = CONST 
    0x1dd10x2a3: JUMP v2a31dce(0x112d)

    Begin block 0x112d0x2a3
    prev=[0x1dcc0x2a3], succ=[0x15470x2a3]
    =================================
    0x112e0x2a3: v2a3112e(0x0) = CONST 
    0x11300x2a3: v2a31130(0x2238) = CONST 
    0x11350x2a3: v2a31135(0x40) = CONST 
    0x11370x2a3: v2a31137 = MLOAD v2a31135(0x40)
    0x11390x2a3: v2a31139(0x40) = CONST 
    0x113b0x2a3: v2a3113b = ADD v2a31139(0x40), v2a31137
    0x113c0x2a3: v2a3113c(0x40) = CONST 
    0x113e0x2a3: MSTORE v2a3113c(0x40), v2a3113b
    0x11400x2a3: v2a31140(0x1a) = CONST 
    0x11430x2a3: MSTORE v2a31137, v2a31140(0x1a)
    0x11440x2a3: v2a31144(0x20) = CONST 
    0x11460x2a3: v2a31146 = ADD v2a31144(0x20), v2a31137
    0x11470x2a3: v2a31147(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000) = CONST 
    0x11690x2a3: MSTORE v2a31146, v2a31147(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000)
    0x116b0x2a3: v2a3116b(0x1547) = CONST 
    0x116e0x2a3: JUMP v2a3116b(0x1547)

    Begin block 0x15470x2a3
    prev=[0x112d0x2a3], succ=[0x15500x2a3, 0x15d30x2a3]
    =================================
    0x15480x2a3: v2a31548(0x0) = CONST 
    0x154c0x2a3: v2a3154c(0x15d3) = CONST 
    0x154f0x2a3: JUMPI v2a3154c(0x15d3), v2a369c

    Begin block 0x15500x2a3
    prev=[0x15470x2a3], succ=[0x15800x2a3]
    =================================
    0x15500x2a3: v2a31550(0x40) = CONST 
    0x15520x2a3: v2a31552 = MLOAD v2a31550(0x40)
    0x15530x2a3: v2a31553(0x461bcd) = CONST 
    0x15570x2a3: v2a31557(0xe5) = CONST 
    0x15590x2a3: v2a31559(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v2a31557(0xe5), v2a31553(0x461bcd)
    0x155b0x2a3: MSTORE v2a31552, v2a31559(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x155c0x2a3: v2a3155c(0x4) = CONST 
    0x155e0x2a3: v2a3155e = ADD v2a3155c(0x4), v2a31552
    0x15610x2a3: v2a31561(0x20) = CONST 
    0x15630x2a3: v2a31563 = ADD v2a31561(0x20), v2a3155e
    0x15660x2a3: v2a31566(0x20) = SUB v2a31563, v2a3155e
    0x15680x2a3: MSTORE v2a3155e, v2a31566(0x20)
    0x156c0x2a3: v2a3156c(0x1a) = MLOAD v2a31137
    0x156e0x2a3: MSTORE v2a31563, v2a3156c(0x1a)
    0x156f0x2a3: v2a3156f(0x20) = CONST 
    0x15710x2a3: v2a31571 = ADD v2a3156f(0x20), v2a31563
    0x15750x2a3: v2a31575(0x1a) = MLOAD v2a31137
    0x15770x2a3: v2a31577(0x20) = CONST 
    0x15790x2a3: v2a31579 = ADD v2a31577(0x20), v2a31137
    0x157e0x2a3: v2a3157e(0x0) = CONST 

    Begin block 0x15800x2a3
    prev=[0x15500x2a3, 0x15890x2a3], succ=[0x15980x2a3, 0x15890x2a3]
    =================================
    0x15800x2a3_0x0: v15802a3_0 = PHI v2a31593, v2a3157e(0x0)
    0x15830x2a3: v2a31583 = LT v15802a3_0, v2a31575(0x1a)
    0x15840x2a3: v2a31584 = ISZERO v2a31583
    0x15850x2a3: v2a31585(0x1598) = CONST 
    0x15880x2a3: JUMPI v2a31585(0x1598), v2a31584

    Begin block 0x15980x2a3
    prev=[0x15800x2a3], succ=[0x15c50x2a3, 0x15ac0x2a3]
    =================================
    0x15a10x2a3: v2a315a1 = ADD v2a31575(0x1a), v2a31571
    0x15a30x2a3: v2a315a3(0x1f) = CONST 
    0x15a50x2a3: v2a315a5(0x1a) = AND v2a315a3(0x1f), v2a31575(0x1a)
    0x15a70x2a3: v2a315a7 = ISZERO v2a315a5(0x1a)
    0x15a80x2a3: v2a315a8(0x15c5) = CONST 
    0x15ab0x2a3: JUMPI v2a315a8(0x15c5), v2a315a7

    Begin block 0x15c50x2a3
    prev=[0x15980x2a3, 0x15ac0x2a3], succ=[]
    =================================
    0x15c50x2a3_0x1: v15c52a3_1 = PHI v2a315c2, v2a315a1
    0x15cb0x2a3: v2a315cb(0x40) = CONST 
    0x15cd0x2a3: v2a315cd = MLOAD v2a315cb(0x40)
    0x15d00x2a3: v2a315d0 = SUB v15c52a3_1, v2a315cd
    0x15d20x2a3: REVERT v2a315cd, v2a315d0

    Begin block 0x15ac0x2a3
    prev=[0x15980x2a3], succ=[0x15c50x2a3]
    =================================
    0x15ae0x2a3: v2a315ae = SUB v2a315a1, v2a315a5(0x1a)
    0x15b00x2a3: v2a315b0 = MLOAD v2a315ae
    0x15b10x2a3: v2a315b1(0x1) = CONST 
    0x15b40x2a3: v2a315b4(0x20) = CONST 
    0x15b60x2a3: v2a315b6(0x6) = SUB v2a315b4(0x20), v2a315a5(0x1a)
    0x15b70x2a3: v2a315b7(0x100) = CONST 
    0x15ba0x2a3: v2a315ba(0x1000000000000) = EXP v2a315b7(0x100), v2a315b6(0x6)
    0x15bb0x2a3: v2a315bb(0xffffffffffff) = SUB v2a315ba(0x1000000000000), v2a315b1(0x1)
    0x15bc0x2a3: v2a315bc = NOT v2a315bb(0xffffffffffff)
    0x15bd0x2a3: v2a315bd = AND v2a315bc, v2a315b0
    0x15bf0x2a3: MSTORE v2a315ae, v2a315bd
    0x15c00x2a3: v2a315c0(0x20) = CONST 
    0x15c20x2a3: v2a315c2 = ADD v2a315c0(0x20), v2a315ae

    Begin block 0x15890x2a3
    prev=[0x15800x2a3], succ=[0x15800x2a3]
    =================================
    0x15890x2a3_0x0: v15892a3_0 = PHI v2a31593, v2a3157e(0x0)
    0x158b0x2a3: v2a3158b = ADD v15892a3_0, v2a31579
    0x158c0x2a3: v2a3158c = MLOAD v2a3158b
    0x158f0x2a3: v2a3158f = ADD v15892a3_0, v2a31571
    0x15900x2a3: MSTORE v2a3158f, v2a3158c
    0x15910x2a3: v2a31591(0x20) = CONST 
    0x15930x2a3: v2a31593 = ADD v2a31591(0x20), v15892a3_0
    0x15940x2a3: v2a31594(0x1580) = CONST 
    0x15970x2a3: JUMP v2a31594(0x1580)

    Begin block 0x15d30x2a3
    prev=[0x15470x2a3], succ=[0x15de0x2a3, 0x15df0x2a3]
    =================================
    0x15d50x2a3: v2a315d5(0x0) = CONST 
    0x15da0x2a3: v2a315da(0x15df) = CONST 
    0x15dd0x2a3: JUMPI v2a315da(0x15df), v2a369c

    Begin block 0x15de0x2a3
    prev=[0x15d30x2a3], succ=[]
    =================================
    0x15de0x2a3: THROW 

    Begin block 0x15df0x2a3
    prev=[0x15d30x2a3], succ=[0x22380x2a3]
    =================================
    0x15df0x2a3_0x0: v15df2a3_0 = PHI v2a310df, v2a310d6(0x0)
    0x15e00x2a3: v2a315e0 = DIV v15df2a3_0, v2a369c
    0x15e80x2a3: JUMP v2a31130(0x2238)

    Begin block 0x22380x2a3
    prev=[0x15df0x2a3], succ=[0x72c0x2a3]
    =================================
    0x223e0x2a3: JUMP v2a3646(0x72c)

    Begin block 0x72c0x2a3
    prev=[0x22380x2a3], succ=[0x72f0x2a3]
    =================================

    Begin block 0x72f0x2a3
    prev=[0x72c0x2a3], succ=[0x1955]
    =================================
    0x7330x2a3: JUMP v2a4(0x1955)

    Begin block 0x1955
    prev=[0x72f0x2a3], succ=[]
    =================================
    0x1956: v1956(0x40) = CONST 
    0x1959: v1959 = MLOAD v1956(0x40)
    0x195c: MSTORE v1959, v2a315e0
    0x195d: v195d = MLOAD v1956(0x40)
    0x1961: v1961(0x0) = SUB v1959, v195d
    0x1962: v1962(0x20) = CONST 
    0x1964: v1964(0x20) = ADD v1962(0x20), v1961(0x0)
    0x1966: RETURN v195d, v1964(0x20)

    Begin block 0x10d50x2a3
    prev=[0x10cd0x2a3], succ=[0x93f0x2a3]
    =================================
    0x10d60x2a3: v2a310d6(0x0) = CONST 
    0x10d80x2a3: v2a310d8(0x93f) = CONST 
    0x10db0x2a3: JUMP v2a310d8(0x93f)

    Begin block 0x93f0x2a3
    prev=[0x10d50x2a3], succ=[0x1dcc0x2a3]
    =================================
    0x9440x2a3: JUMP v2a36c0(0x1dcc)

}

function withdraw(uint256)() public {
    Begin block 0x2c9
    prev=[], succ=[0x2db, 0x2df]
    =================================
    0x2ca: v2ca(0x1986) = CONST 
    0x2cd: v2cd(0x4) = CONST 
    0x2d0: v2d0 = CALLDATASIZE 
    0x2d1: v2d1 = SUB v2d0, v2cd(0x4)
    0x2d2: v2d2(0x20) = CONST 
    0x2d5: v2d5 = LT v2d1, v2d2(0x20)
    0x2d6: v2d6 = ISZERO v2d5
    0x2d7: v2d7(0x2df) = CONST 
    0x2da: JUMPI v2d7(0x2df), v2d6

    Begin block 0x2db
    prev=[0x2c9], succ=[]
    =================================
    0x2db: v2db(0x0) = CONST 
    0x2de: REVERT v2db(0x0), v2db(0x0)

    Begin block 0x2df
    prev=[0x2c9], succ=[0x7340x2c9]
    =================================
    0x2e1: v2e1 = CALLDATALOAD v2cd(0x4)
    0x2e2: v2e2(0x734) = CONST 
    0x2e5: JUMP v2e2(0x734)

    Begin block 0x7340x2c9
    prev=[0x2df], succ=[0x7410x2c9]
    =================================
    0x7350x2c9: v2c9735(0x37) = CONST 
    0x7370x2c9: v2c9737 = SLOAD v2c9735(0x37)
    0x7380x2c9: v2c9738(0x741) = CONST 
    0x73d0x2c9: v2c973d(0x116f) = CONST 
    0x7400x2c9: v2c9740_0 = CALLPRIVATE v2c973d(0x116f), v2e1, v2c9737, v2c9738(0x741)

    Begin block 0x7410x2c9
    prev=[0x7340x2c9], succ=[0x75e0x2c9]
    =================================
    0x7420x2c9: v2c9742(0x37) = CONST 
    0x7440x2c9: SSTORE v2c9742(0x37), v2c9740_0
    0x7450x2c9: v2c9745 = CALLER 
    0x7460x2c9: v2c9746(0x0) = CONST 
    0x74a0x2c9: MSTORE v2c9746(0x0), v2c9745
    0x74b0x2c9: v2c974b(0x38) = CONST 
    0x74d0x2c9: v2c974d(0x20) = CONST 
    0x74f0x2c9: MSTORE v2c974d(0x20), v2c974b(0x38)
    0x7500x2c9: v2c9750(0x40) = CONST 
    0x7530x2c9: v2c9753 = SHA3 v2c9746(0x0), v2c9750(0x40)
    0x7540x2c9: v2c9754 = SLOAD v2c9753
    0x7550x2c9: v2c9755(0x75e) = CONST 
    0x75a0x2c9: v2c975a(0x116f) = CONST 
    0x75d0x2c9: v2c975d_0 = CALLPRIVATE v2c975a(0x116f), v2e1, v2c9754, v2c9755(0x75e)

    Begin block 0x75e0x2c9
    prev=[0x7410x2c9], succ=[0x78a0x2c9]
    =================================
    0x75f0x2c9: v2c975f = CALLER 
    0x7600x2c9: v2c9760(0x0) = CONST 
    0x7640x2c9: MSTORE v2c9760(0x0), v2c975f
    0x7650x2c9: v2c9765(0x38) = CONST 
    0x7670x2c9: v2c9767(0x20) = CONST 
    0x7690x2c9: MSTORE v2c9767(0x20), v2c9765(0x38)
    0x76a0x2c9: v2c976a(0x40) = CONST 
    0x76d0x2c9: v2c976d = SHA3 v2c9760(0x0), v2c976a(0x40)
    0x7710x2c9: SSTORE v2c976d, v2c975d_0
    0x7720x2c9: v2c9772(0x36) = CONST 
    0x7740x2c9: v2c9774 = SLOAD v2c9772(0x36)
    0x7750x2c9: v2c9775(0x78a) = CONST 
    0x7790x2c9: v2c9779(0x1) = CONST 
    0x77b0x2c9: v2c977b(0x1) = CONST 
    0x77d0x2c9: v2c977d(0xa0) = CONST 
    0x77f0x2c9: v2c977f(0x10000000000000000000000000000000000000000) = SHL v2c977d(0xa0), v2c977b(0x1)
    0x7800x2c9: v2c9780(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2c977f(0x10000000000000000000000000000000000000000), v2c9779(0x1)
    0x7830x2c9: v2c9783 = AND v2c9774, v2c9780(0xffffffffffffffffffffffffffffffffffffffff)
    0x7860x2c9: v2c9786(0x11b1) = CONST 
    0x7890x2c9: CALLPRIVATE v2c9786(0x11b1), v2e1, v2c975f, v2c9783, v2c9775(0x78a)

    Begin block 0x78a0x2c9
    prev=[0x75e0x2c9], succ=[0x1986]
    =================================
    0x78b0x2c9: v2c978b(0x40) = CONST 
    0x78e0x2c9: v2c978e = MLOAD v2c978b(0x40)
    0x7910x2c9: MSTORE v2c978e, v2e1
    0x7930x2c9: v2c9793 = MLOAD v2c978b(0x40)
    0x7940x2c9: v2c9794 = CALLER 
    0x7960x2c9: v2c9796(0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5) = CONST 
    0x7bb0x2c9: v2c97bb(0x0) = SUB v2c978e, v2c9793
    0x7bc0x2c9: v2c97bc(0x20) = CONST 
    0x7be0x2c9: v2c97be(0x20) = ADD v2c97bc(0x20), v2c97bb(0x0)
    0x7c00x2c9: LOG2 v2c9793, v2c97be(0x20), v2c9796(0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5), v2c9794
    0x7c20x2c9: JUMP v2ca(0x1986)

    Begin block 0x1986
    prev=[0x78a0x2c9], succ=[]
    =================================
    0x1987: STOP 

}

function stakeTimeOf(address)() public {
    Begin block 0x2e6
    prev=[], succ=[0x2f8, 0x2fc]
    =================================
    0x2e7: v2e7(0x19a7) = CONST 
    0x2ea: v2ea(0x4) = CONST 
    0x2ed: v2ed = CALLDATASIZE 
    0x2ee: v2ee = SUB v2ed, v2ea(0x4)
    0x2ef: v2ef(0x20) = CONST 
    0x2f2: v2f2 = LT v2ee, v2ef(0x20)
    0x2f3: v2f3 = ISZERO v2f2
    0x2f4: v2f4(0x2fc) = CONST 
    0x2f7: JUMPI v2f4(0x2fc), v2f3

    Begin block 0x2f8
    prev=[0x2e6], succ=[]
    =================================
    0x2f8: v2f8(0x0) = CONST 
    0x2fb: REVERT v2f8(0x0), v2f8(0x0)

    Begin block 0x2fc
    prev=[0x2e6], succ=[0x7c3]
    =================================
    0x2fe: v2fe = CALLDATALOAD v2ea(0x4)
    0x2ff: v2ff(0x1) = CONST 
    0x301: v301(0x1) = CONST 
    0x303: v303(0xa0) = CONST 
    0x305: v305(0x10000000000000000000000000000000000000000) = SHL v303(0xa0), v301(0x1)
    0x306: v306(0xffffffffffffffffffffffffffffffffffffffff) = SUB v305(0x10000000000000000000000000000000000000000), v2ff(0x1)
    0x307: v307 = AND v306(0xffffffffffffffffffffffffffffffffffffffff), v2fe
    0x308: v308(0x7c3) = CONST 
    0x30b: JUMP v308(0x7c3)

    Begin block 0x7c3
    prev=[0x2fc], succ=[0x19a7]
    =================================
    0x7c4: v7c4(0x39) = CONST 
    0x7c6: v7c6(0x20) = CONST 
    0x7c8: MSTORE v7c6(0x20), v7c4(0x39)
    0x7c9: v7c9(0x0) = CONST 
    0x7cd: MSTORE v7c9(0x0), v307
    0x7ce: v7ce(0x40) = CONST 
    0x7d1: v7d1 = SHA3 v7c9(0x0), v7ce(0x40)
    0x7d2: v7d2 = SLOAD v7d1
    0x7d4: JUMP v2e7(0x19a7)

    Begin block 0x19a7
    prev=[0x7c3], succ=[]
    =================================
    0x19a8: v19a8(0x40) = CONST 
    0x19ab: v19ab = MLOAD v19a8(0x40)
    0x19ae: MSTORE v19ab, v7d2
    0x19af: v19af = MLOAD v19a8(0x40)
    0x19b3: v19b3(0x0) = SUB v19ab, v19af
    0x19b4: v19b4(0x20) = CONST 
    0x19b6: v19b6(0x20) = ADD v19b4(0x20), v19b3(0x0)
    0x19b8: RETURN v19af, v19b6(0x20)

}

function getReward()() public {
    Begin block 0x30c
    prev=[], succ=[0x19f9B0x30c]
    =================================
    0x30d: v30d(0x19d8) = CONST 
    0x310: v310(0x19f9) = CONST 
    0x313: JUMP v310(0x19f9), v30d(0x19d8)

    Begin block 0x19f9B0x30c
    prev=[0x30c], succ=[0x19d8]
    =================================
    0x19faS0x30c: JUMP v30d(0x19d8)

    Begin block 0x19d8
    prev=[0x19f9B0x30c], succ=[]
    =================================
    0x19d9: STOP 

}

function initialize(address,address)() public {
    Begin block 0x314
    prev=[], succ=[0x326, 0x32a]
    =================================
    0x315: v315(0x1a1a) = CONST 
    0x318: v318(0x4) = CONST 
    0x31b: v31b = CALLDATASIZE 
    0x31c: v31c = SUB v31b, v318(0x4)
    0x31d: v31d(0x40) = CONST 
    0x320: v320 = LT v31c, v31d(0x40)
    0x321: v321 = ISZERO v320
    0x322: v322(0x32a) = CONST 
    0x325: JUMPI v322(0x32a), v321

    Begin block 0x326
    prev=[0x314], succ=[]
    =================================
    0x326: v326(0x0) = CONST 
    0x329: REVERT v326(0x0), v326(0x0)

    Begin block 0x32a
    prev=[0x314], succ=[0x7d7]
    =================================
    0x32c: v32c(0x1) = CONST 
    0x32e: v32e(0x1) = CONST 
    0x330: v330(0xa0) = CONST 
    0x332: v332(0x10000000000000000000000000000000000000000) = SHL v330(0xa0), v32e(0x1)
    0x333: v333(0xffffffffffffffffffffffffffffffffffffffff) = SUB v332(0x10000000000000000000000000000000000000000), v32c(0x1)
    0x335: v335 = CALLDATALOAD v318(0x4)
    0x337: v337 = AND v333(0xffffffffffffffffffffffffffffffffffffffff), v335
    0x339: v339(0x20) = CONST 
    0x33b: v33b(0x24) = ADD v339(0x20), v318(0x4)
    0x33c: v33c = CALLDATALOAD v33b(0x24)
    0x33d: v33d = AND v33c, v333(0xffffffffffffffffffffffffffffffffffffffff)
    0x33e: v33e(0x7d7) = CONST 
    0x341: JUMP v33e(0x7d7)

    Begin block 0x7d7
    prev=[0x32a], succ=[0x7f0, 0x7e8]
    =================================
    0x7d8: v7d8(0x0) = CONST 
    0x7da: v7da = SLOAD v7d8(0x0)
    0x7db: v7db(0x100) = CONST 
    0x7df: v7df = DIV v7da, v7db(0x100)
    0x7e0: v7e0(0xff) = CONST 
    0x7e2: v7e2 = AND v7e0(0xff), v7df
    0x7e4: v7e4(0x7f0) = CONST 
    0x7e7: JUMPI v7e4(0x7f0), v7e2

    Begin block 0x7f0
    prev=[0x7d7, 0x131bB0x7e8], succ=[0x7fe, 0x7f6]
    =================================
    0x7f0_0x0: v7f0_0 = PHI v7e2, v131eV7e8
    0x7f2: v7f2(0x7fe) = CONST 
    0x7f5: JUMPI v7f2(0x7fe), v7f0_0

    Begin block 0x7fe
    prev=[0x7f0, 0x7f6], succ=[0x803, 0x839]
    =================================
    0x7fe_0x0: v7fe_0 = PHI v7e2, v7fd, v131eV7e8
    0x7ff: v7ff(0x839) = CONST 
    0x802: JUMPI v7ff(0x839), v7fe_0

    Begin block 0x803
    prev=[0x7fe], succ=[]
    =================================
    0x803: v803(0x40) = CONST 
    0x805: v805 = MLOAD v803(0x40)
    0x806: v806(0x461bcd) = CONST 
    0x80a: v80a(0xe5) = CONST 
    0x80c: v80c(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v80a(0xe5), v806(0x461bcd)
    0x80e: MSTORE v805, v80c(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x80f: v80f(0x4) = CONST 
    0x811: v811 = ADD v80f(0x4), v805
    0x814: v814(0x20) = CONST 
    0x816: v816 = ADD v814(0x20), v811
    0x819: v819(0x20) = SUB v816, v811
    0x81b: MSTORE v811, v819(0x20)
    0x81c: v81c(0x2e) = CONST 
    0x81f: MSTORE v816, v81c(0x2e)
    0x820: v820(0x20) = CONST 
    0x822: v822 = ADD v820(0x20), v816
    0x824: v824(0x1665) = CONST 
    0x827: v827(0x2e) = CONST 
    0x82a: CODECOPY v822, v824(0x1665), v827(0x2e)
    0x82b: v82b(0x40) = CONST 
    0x82d: v82d = ADD v82b(0x40), v822
    0x831: v831(0x40) = CONST 
    0x833: v833 = MLOAD v831(0x40)
    0x836: v836(0x84) = SUB v82d, v833
    0x838: REVERT v833, v836(0x84)

    Begin block 0x839
    prev=[0x7fe], succ=[0x84c, 0x864]
    =================================
    0x83a: v83a(0x0) = CONST 
    0x83c: v83c = SLOAD v83a(0x0)
    0x83d: v83d(0x100) = CONST 
    0x841: v841 = DIV v83c, v83d(0x100)
    0x842: v842(0xff) = CONST 
    0x844: v844 = AND v842(0xff), v841
    0x845: v845 = ISZERO v844
    0x847: v847 = ISZERO v845
    0x848: v848(0x864) = CONST 
    0x84b: JUMPI v848(0x864), v847

    Begin block 0x84c
    prev=[0x839], succ=[0x864]
    =================================
    0x84c: v84c(0x0) = CONST 
    0x84f: v84f = SLOAD v84c(0x0)
    0x850: v850(0xff) = CONST 
    0x852: v852(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v850(0xff)
    0x853: v853(0xff00) = CONST 
    0x856: v856(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v853(0xff00)
    0x859: v859 = AND v84f, v856(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0x85a: v85a(0x100) = CONST 
    0x85d: v85d = OR v85a(0x100), v859
    0x85e: v85e = AND v85d, v852(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0x85f: v85f(0x1) = CONST 
    0x861: v861 = OR v85f(0x1), v85e
    0x863: SSTORE v84c(0x0), v861

    Begin block 0x864
    prev=[0x84c, 0x839], succ=[0xd8bB0x864]
    =================================
    0x865: v865(0x86d) = CONST 
    0x869: v869(0xd8b) = CONST 
    0x86c: JUMP v869(0xd8b), v337, v865(0x86d)

    Begin block 0xd8bB0x864
    prev=[0x864], succ=[0xd9c0xd8bB0x864, 0xda40xd8bB0x864]
    =================================
    0xd8cS0x864: vd8cV864(0x0) = CONST 
    0xd8eS0x864: vd8eV864 = SLOAD vd8cV864(0x0)
    0xd8fS0x864: vd8fV864(0x100) = CONST 
    0xd93S0x864: vd93V864 = DIV vd8eV864, vd8fV864(0x100)
    0xd94S0x864: vd94V864(0xff) = CONST 
    0xd96S0x864: vd96V864 = AND vd94V864(0xff), vd93V864
    0xd98S0x864: vd98V864(0xda4) = CONST 
    0xd9bS0x864: JUMPI vd98V864(0xda4), vd96V864

    Begin block 0xd9c0xd8bB0x864
    prev=[0xd8bB0x864], succ=[0x131bB0xd9c0xd8bB0x864]
    =================================
    0xd9d0xd8bS0x864: vd8bd9dV864(0xda4) = CONST 
    0xda00xd8bS0x864: vd8bda0V864(0x131b) = CONST 
    0xda30xd8bS0x864: JUMP vd8bda0V864(0x131b)

    Begin block 0x131bB0xd9c0xd8bB0x864
    prev=[0xd9c0xd8bB0x864], succ=[0xda40xd8bB0x864]
    =================================
    0x131cS0xd9c0xd8bS0x864: v131cVd9cd8bV864 = ADDRESS 
    0x131dS0xd9c0xd8bS0x864: v131dVd9cd8bV864 = EXTCODESIZE v131cVd9cd8bV864
    0x131eS0xd9c0xd8bS0x864: v131eVd9cd8bV864 = ISZERO v131dVd9cd8bV864
    0x1320S0xd9c0xd8bS0x864: JUMP vd8bd9dV864(0xda4)

    Begin block 0xda40xd8bB0x864
    prev=[0xd8bB0x864, 0x131bB0xd9c0xd8bB0x864], succ=[0xdb20xd8bB0x864, 0xdaa0xd8bB0x864]
    =================================
    0xda40xd8b_0x0S0x864: vda4d8b_0V864 = PHI vd96V864, v131eVd9cd8bV864
    0xda60xd8bS0x864: vd8bda6V864(0xdb2) = CONST 
    0xda90xd8bS0x864: JUMPI vd8bda6V864(0xdb2), vda4d8b_0V864

    Begin block 0xdb20xd8bB0x864
    prev=[0xda40xd8bB0x864, 0xdaa0xd8bB0x864], succ=[0xdb70xd8bB0x864, 0xded0xd8bB0x864]
    =================================
    0xdb20xd8b_0x0S0x864: vdb2d8b_0V864 = PHI vd96V864, vd8bdb1V864, v131eVd9cd8bV864
    0xdb30xd8bS0x864: vd8bdb3V864(0xded) = CONST 
    0xdb60xd8bS0x864: JUMPI vd8bdb3V864(0xded), vdb2d8b_0V864

    Begin block 0xdb70xd8bB0x864
    prev=[0xdb20xd8bB0x864], succ=[]
    =================================
    0xdb70xd8bS0x864: vd8bdb7V864(0x40) = CONST 
    0xdb90xd8bS0x864: vd8bdb9V864 = MLOAD vd8bdb7V864(0x40)
    0xdba0xd8bS0x864: vd8bdbaV864(0x461bcd) = CONST 
    0xdbe0xd8bS0x864: vd8bdbeV864(0xe5) = CONST 
    0xdc00xd8bS0x864: vd8bdc0V864(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vd8bdbeV864(0xe5), vd8bdbaV864(0x461bcd)
    0xdc20xd8bS0x864: MSTORE vd8bdb9V864, vd8bdc0V864(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xdc30xd8bS0x864: vd8bdc3V864(0x4) = CONST 
    0xdc50xd8bS0x864: vd8bdc5V864 = ADD vd8bdc3V864(0x4), vd8bdb9V864
    0xdc80xd8bS0x864: vd8bdc8V864(0x20) = CONST 
    0xdca0xd8bS0x864: vd8bdcaV864 = ADD vd8bdc8V864(0x20), vd8bdc5V864
    0xdcd0xd8bS0x864: vd8bdcdV864(0x20) = SUB vd8bdcaV864, vd8bdc5V864
    0xdcf0xd8bS0x864: MSTORE vd8bdc5V864, vd8bdcdV864(0x20)
    0xdd00xd8bS0x864: vd8bdd0V864(0x2e) = CONST 
    0xdd30xd8bS0x864: MSTORE vd8bdcaV864, vd8bdd0V864(0x2e)
    0xdd40xd8bS0x864: vd8bdd4V864(0x20) = CONST 
    0xdd60xd8bS0x864: vd8bdd6V864 = ADD vd8bdd4V864(0x20), vd8bdcaV864
    0xdd80xd8bS0x864: vd8bdd8V864(0x1665) = CONST 
    0xddb0xd8bS0x864: vd8bddbV864(0x2e) = CONST 
    0xdde0xd8bS0x864: CODECOPY vd8bdd6V864, vd8bdd8V864(0x1665), vd8bddbV864(0x2e)
    0xddf0xd8bS0x864: vd8bddfV864(0x40) = CONST 
    0xde10xd8bS0x864: vd8bde1V864 = ADD vd8bddfV864(0x40), vd8bdd6V864
    0xde50xd8bS0x864: vd8bde5V864(0x40) = CONST 
    0xde70xd8bS0x864: vd8bde7V864 = MLOAD vd8bde5V864(0x40)
    0xdea0xd8bS0x864: vd8bdeaV864(0x84) = SUB vd8bde1V864, vd8bde7V864
    0xdec0xd8bS0x864: REVERT vd8bde7V864, vd8bdeaV864(0x84)

    Begin block 0xded0xd8bB0x864
    prev=[0xdb20xd8bB0x864], succ=[0xe000xd8bB0x864, 0xe180xd8bB0x864]
    =================================
    0xdee0xd8bS0x864: vd8bdeeV864(0x0) = CONST 
    0xdf00xd8bS0x864: vd8bdf0V864 = SLOAD vd8bdeeV864(0x0)
    0xdf10xd8bS0x864: vd8bdf1V864(0x100) = CONST 
    0xdf50xd8bS0x864: vd8bdf5V864 = DIV vd8bdf0V864, vd8bdf1V864(0x100)
    0xdf60xd8bS0x864: vd8bdf6V864(0xff) = CONST 
    0xdf80xd8bS0x864: vd8bdf8V864 = AND vd8bdf6V864(0xff), vd8bdf5V864
    0xdf90xd8bS0x864: vd8bdf9V864 = ISZERO vd8bdf8V864
    0xdfb0xd8bS0x864: vd8bdfbV864 = ISZERO vd8bdf9V864
    0xdfc0xd8bS0x864: vd8bdfcV864(0xe18) = CONST 
    0xdff0xd8bS0x864: JUMPI vd8bdfcV864(0xe18), vd8bdfbV864

    Begin block 0xe000xd8bB0x864
    prev=[0xded0xd8bB0x864], succ=[0xe180xd8bB0x864]
    =================================
    0xe000xd8bS0x864: vd8be00V864(0x0) = CONST 
    0xe030xd8bS0x864: vd8be03V864 = SLOAD vd8be00V864(0x0)
    0xe040xd8bS0x864: vd8be04V864(0xff) = CONST 
    0xe060xd8bS0x864: vd8be06V864(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vd8be04V864(0xff)
    0xe070xd8bS0x864: vd8be07V864(0xff00) = CONST 
    0xe0a0xd8bS0x864: vd8be0aV864(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vd8be07V864(0xff00)
    0xe0d0xd8bS0x864: vd8be0dV864 = AND vd8be03V864, vd8be0aV864(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xe0e0xd8bS0x864: vd8be0eV864(0x100) = CONST 
    0xe110xd8bS0x864: vd8be11V864 = OR vd8be0eV864(0x100), vd8be0dV864
    0xe120xd8bS0x864: vd8be12V864 = AND vd8be11V864, vd8be06V864(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xe130xd8bS0x864: vd8be13V864(0x1) = CONST 
    0xe150xd8bS0x864: vd8be15V864 = OR vd8be13V864(0x1), vd8be12V864
    0xe170xd8bS0x864: SSTORE vd8be00V864(0x0), vd8be15V864

    Begin block 0xe180xd8bB0x864
    prev=[0xe000xd8bB0x864, 0xded0xd8bB0x864], succ=[0xe6e0xd8bB0x864, 0x20f70xd8bB0x864]
    =================================
    0xe190xd8bS0x864: vd8be19V864(0x33) = CONST 
    0xe1c0xd8bS0x864: vd8be1cV864 = SLOAD vd8be19V864(0x33)
    0xe1d0xd8bS0x864: vd8be1dV864(0x1) = CONST 
    0xe1f0xd8bS0x864: vd8be1fV864(0x1) = CONST 
    0xe210xd8bS0x864: vd8be21V864(0xa0) = CONST 
    0xe230xd8bS0x864: vd8be23V864(0x10000000000000000000000000000000000000000) = SHL vd8be21V864(0xa0), vd8be1fV864(0x1)
    0xe240xd8bS0x864: vd8be24V864(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd8be23V864(0x10000000000000000000000000000000000000000), vd8be1dV864(0x1)
    0xe250xd8bS0x864: vd8be25V864(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vd8be24V864(0xffffffffffffffffffffffffffffffffffffffff)
    0xe260xd8bS0x864: vd8be26V864 = AND vd8be25V864(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vd8be1cV864
    0xe270xd8bS0x864: vd8be27V864(0x1) = CONST 
    0xe290xd8bS0x864: vd8be29V864(0x1) = CONST 
    0xe2b0xd8bS0x864: vd8be2bV864(0xa0) = CONST 
    0xe2d0xd8bS0x864: vd8be2dV864(0x10000000000000000000000000000000000000000) = SHL vd8be2bV864(0xa0), vd8be29V864(0x1)
    0xe2e0xd8bS0x864: vd8be2eV864(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd8be2dV864(0x10000000000000000000000000000000000000000), vd8be27V864(0x1)
    0xe310xd8bS0x864: vd8be31V864 = AND vd8be2eV864(0xffffffffffffffffffffffffffffffffffffffff), v337
    0xe350xd8bS0x864: vd8be35V864 = OR vd8be31V864, vd8be26V864
    0xe390xd8bS0x864: SSTORE vd8be19V864(0x33), vd8be35V864
    0xe3a0xd8bS0x864: vd8be3aV864(0x40) = CONST 
    0xe3c0xd8bS0x864: vd8be3cV864 = MLOAD vd8be3aV864(0x40)
    0xe3e0xd8bS0x864: vd8be3eV864 = AND vd8be35V864, vd8be2eV864(0xffffffffffffffffffffffffffffffffffffffff)
    0xe400xd8bS0x864: vd8be40V864(0x0) = CONST 
    0xe430xd8bS0x864: vd8be43V864(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a) = CONST 
    0xe670xd8bS0x864: LOG3 vd8be3cV864, vd8be40V864(0x0), vd8be43V864(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a), vd8be40V864(0x0), vd8be3eV864
    0xe690xd8bS0x864: vd8be69V864 = ISZERO vd8bdf9V864
    0xe6a0xd8bS0x864: vd8be6aV864(0x20f7) = CONST 
    0xe6d0xd8bS0x864: JUMPI vd8be6aV864(0x20f7), vd8be69V864

    Begin block 0xe6e0xd8bB0x864
    prev=[0xe180xd8bB0x864], succ=[0x86d]
    =================================
    0xe6e0xd8bS0x864: vd8be6eV864(0x0) = CONST 
    0xe710xd8bS0x864: vd8be71V864 = SLOAD vd8be6eV864(0x0)
    0xe720xd8bS0x864: vd8be72V864(0xff00) = CONST 
    0xe750xd8bS0x864: vd8be75V864(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT vd8be72V864(0xff00)
    0xe760xd8bS0x864: vd8be76V864 = AND vd8be75V864(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), vd8be71V864
    0xe780xd8bS0x864: SSTORE vd8be6eV864(0x0), vd8be76V864
    0xe7b0xd8bS0x864: JUMP v865(0x86d)

    Begin block 0x86d
    prev=[0xe6e0xd8bB0x864, 0x20f70xd8bB0x864], succ=[0x8bd, 0x8c1]
    =================================
    0x86e: v86e(0x35) = CONST 
    0x871: v871 = SLOAD v86e(0x35)
    0x872: v872(0x1) = CONST 
    0x874: v874(0x1) = CONST 
    0x876: v876(0xa0) = CONST 
    0x878: v878(0x10000000000000000000000000000000000000000) = SHL v876(0xa0), v874(0x1)
    0x879: v879(0xffffffffffffffffffffffffffffffffffffffff) = SUB v878(0x10000000000000000000000000000000000000000), v872(0x1)
    0x87a: v87a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v879(0xffffffffffffffffffffffffffffffffffffffff)
    0x87b: v87b = AND v87a(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v871
    0x87c: v87c(0x1) = CONST 
    0x87e: v87e(0x1) = CONST 
    0x880: v880(0xa0) = CONST 
    0x882: v882(0x10000000000000000000000000000000000000000) = SHL v880(0xa0), v87e(0x1)
    0x883: v883(0xffffffffffffffffffffffffffffffffffffffff) = SUB v882(0x10000000000000000000000000000000000000000), v87c(0x1)
    0x885: v885 = AND v33d, v883(0xffffffffffffffffffffffffffffffffffffffff)
    0x888: v888 = OR v885, v87b
    0x88b: SSTORE v86e(0x35), v888
    0x88c: v88c(0x40) = CONST 
    0x88f: v88f = MLOAD v88c(0x40)
    0x890: v890(0x7e062a35) = CONST 
    0x895: v895(0xe1) = CONST 
    0x897: v897(0xfc0c546a00000000000000000000000000000000000000000000000000000000) = SHL v895(0xe1), v890(0x7e062a35)
    0x899: MSTORE v88f, v897(0xfc0c546a00000000000000000000000000000000000000000000000000000000)
    0x89b: v89b = MLOAD v88c(0x40)
    0x89c: v89c(0xfc0c546a) = CONST 
    0x8a2: v8a2(0x4) = CONST 
    0x8a6: v8a6 = ADD v88f, v8a2(0x4)
    0x8a8: v8a8(0x20) = CONST 
    0x8b0: v8b0(0x0) = SUB v88f, v89b
    0x8b1: v8b1(0x4) = ADD v8b0(0x0), v8a2(0x4)
    0x8b5: v8b5 = EXTCODESIZE v885
    0x8b6: v8b6 = ISZERO v8b5
    0x8b8: v8b8 = ISZERO v8b6
    0x8b9: v8b9(0x8c1) = CONST 
    0x8bc: JUMPI v8b9(0x8c1), v8b8

    Begin block 0x8bd
    prev=[0x86d], succ=[]
    =================================
    0x8bd: v8bd(0x0) = CONST 
    0x8c0: REVERT v8bd(0x0), v8bd(0x0)

    Begin block 0x8c1
    prev=[0x86d], succ=[0x8cc, 0x8d5]
    =================================
    0x8c3: v8c3 = GAS 
    0x8c4: v8c4 = STATICCALL v8c3, v885, v89b, v8b1(0x4), v89b, v8a8(0x20)
    0x8c5: v8c5 = ISZERO v8c4
    0x8c7: v8c7 = ISZERO v8c5
    0x8c8: v8c8(0x8d5) = CONST 
    0x8cb: JUMPI v8c8(0x8d5), v8c7

    Begin block 0x8cc
    prev=[0x8c1], succ=[]
    =================================
    0x8cc: v8cc = RETURNDATASIZE 
    0x8cd: v8cd(0x0) = CONST 
    0x8d0: RETURNDATACOPY v8cd(0x0), v8cd(0x0), v8cc
    0x8d1: v8d1 = RETURNDATASIZE 
    0x8d2: v8d2(0x0) = CONST 
    0x8d4: REVERT v8d2(0x0), v8d1

    Begin block 0x8d5
    prev=[0x8c1], succ=[0x8e7, 0x8eb]
    =================================
    0x8da: v8da(0x40) = CONST 
    0x8dc: v8dc = MLOAD v8da(0x40)
    0x8dd: v8dd = RETURNDATASIZE 
    0x8de: v8de(0x20) = CONST 
    0x8e1: v8e1 = LT v8dd, v8de(0x20)
    0x8e2: v8e2 = ISZERO v8e1
    0x8e3: v8e3(0x8eb) = CONST 
    0x8e6: JUMPI v8e3(0x8eb), v8e2

    Begin block 0x8e7
    prev=[0x8d5], succ=[]
    =================================
    0x8e7: v8e7(0x0) = CONST 
    0x8ea: REVERT v8e7(0x0), v8e7(0x0)

    Begin block 0x8eb
    prev=[0x8d5], succ=[0x913, 0x1df1]
    =================================
    0x8ed: v8ed = MLOAD v8dc
    0x8ee: v8ee(0x36) = CONST 
    0x8f1: v8f1 = SLOAD v8ee(0x36)
    0x8f2: v8f2(0x1) = CONST 
    0x8f4: v8f4(0x1) = CONST 
    0x8f6: v8f6(0xa0) = CONST 
    0x8f8: v8f8(0x10000000000000000000000000000000000000000) = SHL v8f6(0xa0), v8f4(0x1)
    0x8f9: v8f9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v8f8(0x10000000000000000000000000000000000000000), v8f2(0x1)
    0x8fa: v8fa(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v8f9(0xffffffffffffffffffffffffffffffffffffffff)
    0x8fb: v8fb = AND v8fa(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v8f1
    0x8fc: v8fc(0x1) = CONST 
    0x8fe: v8fe(0x1) = CONST 
    0x900: v900(0xa0) = CONST 
    0x902: v902(0x10000000000000000000000000000000000000000) = SHL v900(0xa0), v8fe(0x1)
    0x903: v903(0xffffffffffffffffffffffffffffffffffffffff) = SUB v902(0x10000000000000000000000000000000000000000), v8fc(0x1)
    0x906: v906 = AND v8ed, v903(0xffffffffffffffffffffffffffffffffffffffff)
    0x90a: v90a = OR v906, v8fb
    0x90c: SSTORE v8ee(0x36), v90a
    0x90e: v90e = ISZERO v845
    0x90f: v90f(0x1df1) = CONST 
    0x912: JUMPI v90f(0x1df1), v90e

    Begin block 0x913
    prev=[0x8eb], succ=[0x91e]
    =================================
    0x913: v913(0x0) = CONST 
    0x916: v916 = SLOAD v913(0x0)
    0x917: v917(0xff00) = CONST 
    0x91a: v91a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v917(0xff00)
    0x91b: v91b = AND v91a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v916
    0x91d: SSTORE v913(0x0), v91b

    Begin block 0x91e
    prev=[0x913], succ=[0x1a1a]
    =================================
    0x922: JUMP v315(0x1a1a)

    Begin block 0x1a1a
    prev=[0x1df1, 0x91e], succ=[]
    =================================
    0x1a1b: STOP 

    Begin block 0x1df1
    prev=[0x8eb], succ=[0x1a1a]
    =================================
    0x1df5: JUMP v315(0x1a1a)

    Begin block 0x20f70xd8bB0x864
    prev=[0xe180xd8bB0x864], succ=[0x86d]
    =================================
    0x20fa0xd8bS0x864: JUMP v865(0x86d)

    Begin block 0xdaa0xd8bB0x864
    prev=[0xda40xd8bB0x864], succ=[0xdb20xd8bB0x864]
    =================================
    0xdab0xd8bS0x864: vd8bdabV864(0x0) = CONST 
    0xdad0xd8bS0x864: vd8bdadV864 = SLOAD vd8bdabV864(0x0)
    0xdae0xd8bS0x864: vd8bdaeV864(0xff) = CONST 
    0xdb00xd8bS0x864: vd8bdb0V864 = AND vd8bdaeV864(0xff), vd8bdadV864
    0xdb10xd8bS0x864: vd8bdb1V864 = ISZERO vd8bdb0V864

    Begin block 0x7f6
    prev=[0x7f0], succ=[0x7fe]
    =================================
    0x7f7: v7f7(0x0) = CONST 
    0x7f9: v7f9 = SLOAD v7f7(0x0)
    0x7fa: v7fa(0xff) = CONST 
    0x7fc: v7fc = AND v7fa(0xff), v7f9
    0x7fd: v7fd = ISZERO v7fc

    Begin block 0x7e8
    prev=[0x7d7], succ=[0x131bB0x7e8]
    =================================
    0x7e9: v7e9(0x7f0) = CONST 
    0x7ec: v7ec(0x131b) = CONST 
    0x7ef: JUMP v7ec(0x131b)

    Begin block 0x131bB0x7e8
    prev=[0x7e8], succ=[0x7f0]
    =================================
    0x131cS0x7e8: v131cV7e8 = ADDRESS 
    0x131dS0x7e8: v131dV7e8 = EXTCODESIZE v131cV7e8
    0x131eS0x7e8: v131eV7e8 = ISZERO v131dV7e8
    0x1320S0x7e8: JUMP v7e9(0x7f0)

}

function getConfig(bytes32,address)() public {
    Begin block 0x342
    prev=[], succ=[0x354, 0x358]
    =================================
    0x343: v343(0x1a3b) = CONST 
    0x346: v346(0x4) = CONST 
    0x349: v349 = CALLDATASIZE 
    0x34a: v34a = SUB v349, v346(0x4)
    0x34b: v34b(0x40) = CONST 
    0x34e: v34e = LT v34a, v34b(0x40)
    0x34f: v34f = ISZERO v34e
    0x350: v350(0x358) = CONST 
    0x353: JUMPI v350(0x358), v34f

    Begin block 0x354
    prev=[0x342], succ=[]
    =================================
    0x354: v354(0x0) = CONST 
    0x357: REVERT v354(0x0), v354(0x0)

    Begin block 0x358
    prev=[0x342], succ=[0x923]
    =================================
    0x35b: v35b = CALLDATALOAD v346(0x4)
    0x35d: v35d(0x20) = CONST 
    0x35f: v35f(0x24) = ADD v35d(0x20), v346(0x4)
    0x360: v360 = CALLDATALOAD v35f(0x24)
    0x361: v361(0x1) = CONST 
    0x363: v363(0x1) = CONST 
    0x365: v365(0xa0) = CONST 
    0x367: v367(0x10000000000000000000000000000000000000000) = SHL v365(0xa0), v363(0x1)
    0x368: v368(0xffffffffffffffffffffffffffffffffffffffff) = SUB v367(0x10000000000000000000000000000000000000000), v361(0x1)
    0x369: v369 = AND v368(0xffffffffffffffffffffffffffffffffffffffff), v360
    0x36a: v36a(0x923) = CONST 
    0x36d: JUMP v36a(0x923)

    Begin block 0x923
    prev=[0x358], succ=[0x93f0x342]
    =================================
    0x924: v924(0x1) = CONST 
    0x926: v926(0x1) = CONST 
    0x928: v928(0xa0) = CONST 
    0x92a: v92a(0x10000000000000000000000000000000000000000) = SHL v928(0xa0), v926(0x1)
    0x92b: v92b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v92a(0x10000000000000000000000000000000000000000), v924(0x1)
    0x92d: v92d = AND v369, v92b(0xffffffffffffffffffffffffffffffffffffffff)
    0x92f: v92f = XOR v35b, v92d
    0x930: v930(0x0) = CONST 
    0x934: MSTORE v930(0x0), v92f
    0x935: v935(0x34) = CONST 
    0x937: v937(0x20) = CONST 
    0x939: MSTORE v937(0x20), v935(0x34)
    0x93a: v93a(0x40) = CONST 
    0x93d: v93d = SHA3 v930(0x0), v93a(0x40)
    0x93e: v93e = SLOAD v93d

    Begin block 0x93f0x342
    prev=[0x923], succ=[0x1a3b]
    =================================
    0x9440x342: JUMP v343(0x1a3b)

    Begin block 0x1a3b
    prev=[0x93f0x342], succ=[]
    =================================
    0x1a3c: v1a3c(0x40) = CONST 
    0x1a3f: v1a3f = MLOAD v1a3c(0x40)
    0x1a42: MSTORE v1a3f, v93e
    0x1a43: v1a43 = MLOAD v1a3c(0x40)
    0x1a47: v1a47(0x0) = SUB v1a3f, v1a43
    0x1a48: v1a48(0x20) = CONST 
    0x1a4a: v1a4a(0x20) = ADD v1a48(0x20), v1a47(0x0)
    0x1a4c: RETURN v1a43, v1a4a(0x20)

}

function factorOf(address)() public {
    Begin block 0x36e
    prev=[], succ=[0x380, 0x384]
    =================================
    0x36f: v36f(0x1a6c) = CONST 
    0x372: v372(0x4) = CONST 
    0x375: v375 = CALLDATASIZE 
    0x376: v376 = SUB v375, v372(0x4)
    0x377: v377(0x20) = CONST 
    0x37a: v37a = LT v376, v377(0x20)
    0x37b: v37b = ISZERO v37a
    0x37c: v37c(0x384) = CONST 
    0x37f: JUMPI v37c(0x384), v37b

    Begin block 0x380
    prev=[0x36e], succ=[]
    =================================
    0x380: v380(0x0) = CONST 
    0x383: REVERT v380(0x0), v380(0x0)

    Begin block 0x384
    prev=[0x36e], succ=[0x945]
    =================================
    0x386: v386 = CALLDATALOAD v372(0x4)
    0x387: v387(0x1) = CONST 
    0x389: v389(0x1) = CONST 
    0x38b: v38b(0xa0) = CONST 
    0x38d: v38d(0x10000000000000000000000000000000000000000) = SHL v38b(0xa0), v389(0x1)
    0x38e: v38e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v38d(0x10000000000000000000000000000000000000000), v387(0x1)
    0x38f: v38f = AND v38e(0xffffffffffffffffffffffffffffffffffffffff), v386
    0x390: v390(0x945) = CONST 
    0x393: JUMP v390(0x945)

    Begin block 0x945
    prev=[0x384], succ=[0x951]
    =================================
    0x946: v946(0x0) = CONST 
    0x949: v949(0x951) = CONST 
    0x94d: v94d(0xa13) = CONST 
    0x950: v950_0 = CALLPRIVATE v94d(0xa13), v38f, v949(0x951)

    Begin block 0x951
    prev=[0x945], succ=[0x95e, 0x990]
    =================================
    0x954: v954(0x69780) = CONST 
    0x959: v959 = GT v950_0, v954(0x69780)
    0x95a: v95a(0x990) = CONST 
    0x95d: JUMPI v95a(0x990), v959

    Begin block 0x95e
    prev=[0x951], succ=[0x1e3a]
    =================================
    0x95e: v95e(0x988) = CONST 
    0x961: v961(0xde0b6b3a7640000) = CONST 
    0x96a: v96a(0x1e15) = CONST 
    0x96d: v96d(0x69780) = CONST 
    0x971: v971(0x1e3a) = CONST 
    0x975: v975(0x6f05b59d3b20000) = CONST 
    0x97e: v97e(0x10cd) = CONST 
    0x981: v981_0 = CALLPRIVATE v97e(0x10cd), v975(0x6f05b59d3b20000), v950_0, v971(0x1e3a)

    Begin block 0x1e3a
    prev=[0x95e], succ=[0x1e15]
    =================================
    0x1e3c: v1e3c(0x112d) = CONST 
    0x1e3f: v1e3f_0 = CALLPRIVATE v1e3c(0x112d), v96d(0x69780), v981_0, v96a(0x1e15)

    Begin block 0x1e15
    prev=[0x1e3a], succ=[0x1321B0x1e15]
    =================================
    0x1e17: v1e17(0x1321) = CONST 
    0x1e1a: JUMP v1e17(0x1321)

    Begin block 0x1321B0x1e15
    prev=[0x1e15], succ=[0x132fB0x1e15, 0x2284B0x1e15]
    =================================
    0x1322S0x1e15: v1322V1e15(0x0) = CONST 
    0x1326S0x1e15: v1326V1e15 = ADD v961(0xde0b6b3a7640000), v1e3f_0
    0x1329S0x1e15: v1329V1e15 = LT v1326V1e15, v1e3f_0
    0x132aS0x1e15: v132aV1e15 = ISZERO v1329V1e15
    0x132bS0x1e15: v132bV1e15(0x2284) = CONST 
    0x132eS0x1e15: JUMPI v132bV1e15(0x2284), v132aV1e15

    Begin block 0x132fB0x1e15
    prev=[0x1321B0x1e15], succ=[]
    =================================
    0x132fS0x1e15: v132fV1e15(0x40) = CONST 
    0x1332S0x1e15: v1332V1e15 = MLOAD v132fV1e15(0x40)
    0x1333S0x1e15: v1333V1e15(0x461bcd) = CONST 
    0x1337S0x1e15: v1337V1e15(0xe5) = CONST 
    0x1339S0x1e15: v1339V1e15(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1337V1e15(0xe5), v1333V1e15(0x461bcd)
    0x133bS0x1e15: MSTORE v1332V1e15, v1339V1e15(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x133cS0x1e15: v133cV1e15(0x20) = CONST 
    0x133eS0x1e15: v133eV1e15(0x4) = CONST 
    0x1341S0x1e15: v1341V1e15 = ADD v1332V1e15, v133eV1e15(0x4)
    0x1342S0x1e15: MSTORE v1341V1e15, v133cV1e15(0x20)
    0x1343S0x1e15: v1343V1e15(0x1b) = CONST 
    0x1345S0x1e15: v1345V1e15(0x24) = CONST 
    0x1348S0x1e15: v1348V1e15 = ADD v1332V1e15, v1345V1e15(0x24)
    0x1349S0x1e15: MSTORE v1348V1e15, v1343V1e15(0x1b)
    0x134aS0x1e15: v134aV1e15(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x136bS0x1e15: v136bV1e15(0x44) = CONST 
    0x136eS0x1e15: v136eV1e15 = ADD v1332V1e15, v136bV1e15(0x44)
    0x136fS0x1e15: MSTORE v136eV1e15, v134aV1e15(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1371S0x1e15: v1371V1e15 = MLOAD v132fV1e15(0x40)
    0x1375S0x1e15: v1375V1e15(0x0) = SUB v1332V1e15, v1371V1e15
    0x1376S0x1e15: v1376V1e15(0x64) = CONST 
    0x1378S0x1e15: v1378V1e15(0x64) = ADD v1376V1e15(0x64), v1375V1e15(0x0)
    0x137aS0x1e15: REVERT v1371V1e15, v1378V1e15(0x64)

    Begin block 0x2284B0x1e15
    prev=[0x1321B0x1e15], succ=[0x988]
    =================================
    0x228aS0x1e15: JUMP v95e(0x988)

    Begin block 0x988
    prev=[0x2284B0x1e15, 0x2284B0x1e83, 0x2284B0x1ef2], succ=[0x1e5f]
    =================================
    0x98c: v98c(0x1e5f) = CONST 
    0x98f: JUMP v98c(0x1e5f)

    Begin block 0x1e5f
    prev=[0x988], succ=[0x1a6c]
    =================================
    0x1e63: JUMP v36f(0x1a6c)

    Begin block 0x1a6c
    prev=[0x1e5f, 0x1f61], succ=[]
    =================================
    0x1a6c_0x0: v1a6c_0 = PHI va03(0x22b1c8c1227a0000), v1326V1e15, v1326V1e83, v1326V1ef2
    0x1a6d: v1a6d(0x40) = CONST 
    0x1a70: v1a70 = MLOAD v1a6d(0x40)
    0x1a73: MSTORE v1a70, v1a6c_0
    0x1a74: v1a74 = MLOAD v1a6d(0x40)
    0x1a78: v1a78(0x0) = SUB v1a70, v1a74
    0x1a79: v1a79(0x20) = CONST 
    0x1a7b: v1a7b(0x20) = ADD v1a79(0x20), v1a78(0x0)
    0x1a7d: RETURN v1a74, v1a7b(0x20)

    Begin block 0x990
    prev=[0x951], succ=[0x99b, 0x9cc]
    =================================
    0x991: v991(0x278d00) = CONST 
    0x996: v996 = GT v950_0, v991(0x278d00)
    0x997: v997(0x9cc) = CONST 
    0x99a: JUMPI v997(0x9cc), v996

    Begin block 0x99b
    prev=[0x990], succ=[0x1ecd]
    =================================
    0x99b: v99b(0x988) = CONST 
    0x99e: v99e(0x14d1120d7b160000) = CONST 
    0x9a7: v9a7(0x1e83) = CONST 
    0x9aa: v9aa(0x20f580) = CONST 
    0x9ae: v9ae(0x1ea8) = CONST 
    0x9b1: v9b1(0x6f05b59d3b20000) = CONST 
    0x9ba: v9ba(0x1ecd) = CONST 
    0x9be: v9be(0x69780) = CONST 
    0x9c2: v9c2(0x116f) = CONST 
    0x9c5: v9c5_0 = CALLPRIVATE v9c2(0x116f), v9be(0x69780), v950_0, v9ba(0x1ecd)

    Begin block 0x1ecd
    prev=[0x99b], succ=[0x1ea8]
    =================================
    0x1ecf: v1ecf(0x10cd) = CONST 
    0x1ed2: v1ed2_0 = CALLPRIVATE v1ecf(0x10cd), v9b1(0x6f05b59d3b20000), v9c5_0, v9ae(0x1ea8)

    Begin block 0x1ea8
    prev=[0x1ecd], succ=[0x1e83]
    =================================
    0x1eaa: v1eaa(0x112d) = CONST 
    0x1ead: v1ead_0 = CALLPRIVATE v1eaa(0x112d), v9aa(0x20f580), v1ed2_0, v9a7(0x1e83)

    Begin block 0x1e83
    prev=[0x1ea8], succ=[0x1321B0x1e83]
    =================================
    0x1e85: v1e85(0x1321) = CONST 
    0x1e88: JUMP v1e85(0x1321)

    Begin block 0x1321B0x1e83
    prev=[0x1e83], succ=[0x132fB0x1e83, 0x2284B0x1e83]
    =================================
    0x1322S0x1e83: v1322V1e83(0x0) = CONST 
    0x1326S0x1e83: v1326V1e83 = ADD v99e(0x14d1120d7b160000), v1ead_0
    0x1329S0x1e83: v1329V1e83 = LT v1326V1e83, v1ead_0
    0x132aS0x1e83: v132aV1e83 = ISZERO v1329V1e83
    0x132bS0x1e83: v132bV1e83(0x2284) = CONST 
    0x132eS0x1e83: JUMPI v132bV1e83(0x2284), v132aV1e83

    Begin block 0x132fB0x1e83
    prev=[0x1321B0x1e83], succ=[]
    =================================
    0x132fS0x1e83: v132fV1e83(0x40) = CONST 
    0x1332S0x1e83: v1332V1e83 = MLOAD v132fV1e83(0x40)
    0x1333S0x1e83: v1333V1e83(0x461bcd) = CONST 
    0x1337S0x1e83: v1337V1e83(0xe5) = CONST 
    0x1339S0x1e83: v1339V1e83(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1337V1e83(0xe5), v1333V1e83(0x461bcd)
    0x133bS0x1e83: MSTORE v1332V1e83, v1339V1e83(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x133cS0x1e83: v133cV1e83(0x20) = CONST 
    0x133eS0x1e83: v133eV1e83(0x4) = CONST 
    0x1341S0x1e83: v1341V1e83 = ADD v1332V1e83, v133eV1e83(0x4)
    0x1342S0x1e83: MSTORE v1341V1e83, v133cV1e83(0x20)
    0x1343S0x1e83: v1343V1e83(0x1b) = CONST 
    0x1345S0x1e83: v1345V1e83(0x24) = CONST 
    0x1348S0x1e83: v1348V1e83 = ADD v1332V1e83, v1345V1e83(0x24)
    0x1349S0x1e83: MSTORE v1348V1e83, v1343V1e83(0x1b)
    0x134aS0x1e83: v134aV1e83(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x136bS0x1e83: v136bV1e83(0x44) = CONST 
    0x136eS0x1e83: v136eV1e83 = ADD v1332V1e83, v136bV1e83(0x44)
    0x136fS0x1e83: MSTORE v136eV1e83, v134aV1e83(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1371S0x1e83: v1371V1e83 = MLOAD v132fV1e83(0x40)
    0x1375S0x1e83: v1375V1e83(0x0) = SUB v1332V1e83, v1371V1e83
    0x1376S0x1e83: v1376V1e83(0x64) = CONST 
    0x1378S0x1e83: v1378V1e83(0x64) = ADD v1376V1e83(0x64), v1375V1e83(0x0)
    0x137aS0x1e83: REVERT v1371V1e83, v1378V1e83(0x64)

    Begin block 0x2284B0x1e83
    prev=[0x1321B0x1e83], succ=[0x988]
    =================================
    0x228aS0x1e83: JUMP v99b(0x988)

    Begin block 0x9cc
    prev=[0x990], succ=[0x9d7, 0xa02]
    =================================
    0x9cd: v9cd(0x697800) = CONST 
    0x9d2: v9d2 = GT v950_0, v9cd(0x697800)
    0x9d3: v9d3(0xa02) = CONST 
    0x9d6: JUMPI v9d3(0xa02), v9d2

    Begin block 0x9d7
    prev=[0x9cc], succ=[0x1f3c]
    =================================
    0x9d7: v9d7(0x988) = CONST 
    0x9da: v9da(0x1bc16d674ec80000) = CONST 
    0x9e3: v9e3(0x1ef2) = CONST 
    0x9e6: v9e6(0x41eb00) = CONST 
    0x9ea: v9ea(0x1f17) = CONST 
    0x9ed: v9ed(0x6f05b59d3b20000) = CONST 
    0x9f6: v9f6(0x1f3c) = CONST 
    0x9fa: v9fa(0x278d00) = CONST 
    0x9fe: v9fe(0x116f) = CONST 
    0xa01: va01_0 = CALLPRIVATE v9fe(0x116f), v9fa(0x278d00), v950_0, v9f6(0x1f3c)

    Begin block 0x1f3c
    prev=[0x9d7], succ=[0x1f17]
    =================================
    0x1f3e: v1f3e(0x10cd) = CONST 
    0x1f41: v1f41_0 = CALLPRIVATE v1f3e(0x10cd), v9ed(0x6f05b59d3b20000), va01_0, v9ea(0x1f17)

    Begin block 0x1f17
    prev=[0x1f3c], succ=[0x1ef2]
    =================================
    0x1f19: v1f19(0x112d) = CONST 
    0x1f1c: v1f1c_0 = CALLPRIVATE v1f19(0x112d), v9e6(0x41eb00), v1f41_0, v9e3(0x1ef2)

    Begin block 0x1ef2
    prev=[0x1f17], succ=[0x1321B0x1ef2]
    =================================
    0x1ef4: v1ef4(0x1321) = CONST 
    0x1ef7: JUMP v1ef4(0x1321)

    Begin block 0x1321B0x1ef2
    prev=[0x1ef2], succ=[0x132fB0x1ef2, 0x2284B0x1ef2]
    =================================
    0x1322S0x1ef2: v1322V1ef2(0x0) = CONST 
    0x1326S0x1ef2: v1326V1ef2 = ADD v9da(0x1bc16d674ec80000), v1f1c_0
    0x1329S0x1ef2: v1329V1ef2 = LT v1326V1ef2, v1f1c_0
    0x132aS0x1ef2: v132aV1ef2 = ISZERO v1329V1ef2
    0x132bS0x1ef2: v132bV1ef2(0x2284) = CONST 
    0x132eS0x1ef2: JUMPI v132bV1ef2(0x2284), v132aV1ef2

    Begin block 0x132fB0x1ef2
    prev=[0x1321B0x1ef2], succ=[]
    =================================
    0x132fS0x1ef2: v132fV1ef2(0x40) = CONST 
    0x1332S0x1ef2: v1332V1ef2 = MLOAD v132fV1ef2(0x40)
    0x1333S0x1ef2: v1333V1ef2(0x461bcd) = CONST 
    0x1337S0x1ef2: v1337V1ef2(0xe5) = CONST 
    0x1339S0x1ef2: v1339V1ef2(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1337V1ef2(0xe5), v1333V1ef2(0x461bcd)
    0x133bS0x1ef2: MSTORE v1332V1ef2, v1339V1ef2(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x133cS0x1ef2: v133cV1ef2(0x20) = CONST 
    0x133eS0x1ef2: v133eV1ef2(0x4) = CONST 
    0x1341S0x1ef2: v1341V1ef2 = ADD v1332V1ef2, v133eV1ef2(0x4)
    0x1342S0x1ef2: MSTORE v1341V1ef2, v133cV1ef2(0x20)
    0x1343S0x1ef2: v1343V1ef2(0x1b) = CONST 
    0x1345S0x1ef2: v1345V1ef2(0x24) = CONST 
    0x1348S0x1ef2: v1348V1ef2 = ADD v1332V1ef2, v1345V1ef2(0x24)
    0x1349S0x1ef2: MSTORE v1348V1ef2, v1343V1ef2(0x1b)
    0x134aS0x1ef2: v134aV1ef2(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x136bS0x1ef2: v136bV1ef2(0x44) = CONST 
    0x136eS0x1ef2: v136eV1ef2 = ADD v1332V1ef2, v136bV1ef2(0x44)
    0x136fS0x1ef2: MSTORE v136eV1ef2, v134aV1ef2(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1371S0x1ef2: v1371V1ef2 = MLOAD v132fV1ef2(0x40)
    0x1375S0x1ef2: v1375V1ef2(0x0) = SUB v1332V1ef2, v1371V1ef2
    0x1376S0x1ef2: v1376V1ef2(0x64) = CONST 
    0x1378S0x1ef2: v1378V1ef2(0x64) = ADD v1376V1ef2(0x64), v1375V1ef2(0x0)
    0x137aS0x1ef2: REVERT v1371V1ef2, v1378V1ef2(0x64)

    Begin block 0x2284B0x1ef2
    prev=[0x1321B0x1ef2], succ=[0x988]
    =================================
    0x228aS0x1ef2: JUMP v9d7(0x988)

    Begin block 0xa02
    prev=[0x9cc], succ=[0x1f61]
    =================================
    0xa03: va03(0x22b1c8c1227a0000) = CONST 
    0xa0f: va0f(0x1f61) = CONST 
    0xa12: JUMP va0f(0x1f61)

    Begin block 0x1f61
    prev=[0xa02], succ=[0x1a6c]
    =================================
    0x1f65: JUMP v36f(0x1a6c)

}

function stakeAgeOf(address)() public {
    Begin block 0x394
    prev=[], succ=[0x3a6, 0x3aa]
    =================================
    0x395: v395(0x1a9d) = CONST 
    0x398: v398(0x4) = CONST 
    0x39b: v39b = CALLDATASIZE 
    0x39c: v39c = SUB v39b, v398(0x4)
    0x39d: v39d(0x20) = CONST 
    0x3a0: v3a0 = LT v39c, v39d(0x20)
    0x3a1: v3a1 = ISZERO v3a0
    0x3a2: v3a2(0x3aa) = CONST 
    0x3a5: JUMPI v3a2(0x3aa), v3a1

    Begin block 0x3a6
    prev=[0x394], succ=[]
    =================================
    0x3a6: v3a6(0x0) = CONST 
    0x3a9: REVERT v3a6(0x0), v3a6(0x0)

    Begin block 0x3aa
    prev=[0x394], succ=[0xa130x394]
    =================================
    0x3ac: v3ac = CALLDATALOAD v398(0x4)
    0x3ad: v3ad(0x1) = CONST 
    0x3af: v3af(0x1) = CONST 
    0x3b1: v3b1(0xa0) = CONST 
    0x3b3: v3b3(0x10000000000000000000000000000000000000000) = SHL v3b1(0xa0), v3af(0x1)
    0x3b4: v3b4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3b3(0x10000000000000000000000000000000000000000), v3ad(0x1)
    0x3b5: v3b5 = AND v3b4(0xffffffffffffffffffffffffffffffffffffffff), v3ac
    0x3b6: v3b6(0xa13) = CONST 
    0x3b9: JUMP v3b6(0xa13)

    Begin block 0xa130x394
    prev=[0x3aa], succ=[0xa330x394, 0x1f850x394]
    =================================
    0xa140x394: v394a14(0x1) = CONST 
    0xa160x394: v394a16(0x1) = CONST 
    0xa180x394: v394a18(0xa0) = CONST 
    0xa1a0x394: v394a1a(0x10000000000000000000000000000000000000000) = SHL v394a18(0xa0), v394a16(0x1)
    0xa1b0x394: v394a1b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v394a1a(0x10000000000000000000000000000000000000000), v394a14(0x1)
    0xa1d0x394: v394a1d = AND v3b5, v394a1b(0xffffffffffffffffffffffffffffffffffffffff)
    0xa1e0x394: v394a1e(0x0) = CONST 
    0xa220x394: MSTORE v394a1e(0x0), v394a1d
    0xa230x394: v394a23(0x39) = CONST 
    0xa250x394: v394a25(0x20) = CONST 
    0xa270x394: MSTORE v394a25(0x20), v394a23(0x39)
    0xa280x394: v394a28(0x40) = CONST 
    0xa2b0x394: v394a2b = SHA3 v394a1e(0x0), v394a28(0x40)
    0xa2c0x394: v394a2c = SLOAD v394a2b
    0xa2e0x394: v394a2e = ISZERO v394a2c
    0xa2f0x394: v394a2f(0x1f85) = CONST 
    0xa320x394: JUMPI v394a2f(0x1f85), v394a2e

    Begin block 0xa330x394
    prev=[0xa130x394], succ=[0x72c0x394]
    =================================
    0xa330x394: v394a33(0x72c) = CONST 
    0xa360x394: v394a36 = TIMESTAMP 
    0xa380x394: v394a38(0x116f) = CONST 
    0xa3b0x394: v394a3b_0 = CALLPRIVATE v394a38(0x116f), v394a2c, v394a36, v394a33(0x72c)

    Begin block 0x72c0x394
    prev=[0xa330x394], succ=[0x72f0x394]
    =================================

    Begin block 0x72f0x394
    prev=[0x72c0x394], succ=[0x1a9d]
    =================================
    0x7330x394: JUMP v395(0x1a9d)

    Begin block 0x1a9d
    prev=[0x72f0x394, 0x1f850x394], succ=[]
    =================================
    0x1a9d_0x0: v1a9d_0 = PHI v394a3b_0, v394a2c
    0x1a9e: v1a9e(0x40) = CONST 
    0x1aa1: v1aa1 = MLOAD v1a9e(0x40)
    0x1aa4: MSTORE v1aa1, v1a9d_0
    0x1aa5: v1aa5 = MLOAD v1a9e(0x40)
    0x1aa9: v1aa9(0x0) = SUB v1aa1, v1aa5
    0x1aaa: v1aaa(0x20) = CONST 
    0x1aac: v1aac(0x20) = ADD v1aaa(0x20), v1aa9(0x0)
    0x1aae: RETURN v1aa5, v1aac(0x20)

    Begin block 0x1f850x394
    prev=[0xa130x394], succ=[0x1a9d]
    =================================
    0x1f890x394: JUMP v395(0x1a9d)

}

function getConfig(bytes32)() public {
    Begin block 0x3ba
    prev=[], succ=[0x3cc, 0x3d0]
    =================================
    0x3bb: v3bb(0x1ace) = CONST 
    0x3be: v3be(0x4) = CONST 
    0x3c1: v3c1 = CALLDATASIZE 
    0x3c2: v3c2 = SUB v3c1, v3be(0x4)
    0x3c3: v3c3(0x20) = CONST 
    0x3c6: v3c6 = LT v3c2, v3c3(0x20)
    0x3c7: v3c7 = ISZERO v3c6
    0x3c8: v3c8(0x3d0) = CONST 
    0x3cb: JUMPI v3c8(0x3d0), v3c7

    Begin block 0x3cc
    prev=[0x3ba], succ=[]
    =================================
    0x3cc: v3cc(0x0) = CONST 
    0x3cf: REVERT v3cc(0x0), v3cc(0x0)

    Begin block 0x3d0
    prev=[0x3ba], succ=[0xa3c]
    =================================
    0x3d2: v3d2 = CALLDATALOAD v3be(0x4)
    0x3d3: v3d3(0xa3c) = CONST 
    0x3d6: JUMP v3d3(0xa3c)

    Begin block 0xa3c
    prev=[0x3d0], succ=[0x1ace]
    =================================
    0xa3d: va3d(0x0) = CONST 
    0xa41: MSTORE va3d(0x0), v3d2
    0xa42: va42(0x34) = CONST 
    0xa44: va44(0x20) = CONST 
    0xa46: MSTORE va44(0x20), va42(0x34)
    0xa47: va47(0x40) = CONST 
    0xa4a: va4a = SHA3 va3d(0x0), va47(0x40)
    0xa4b: va4b = SLOAD va4a
    0xa4d: JUMP v3bb(0x1ace)

    Begin block 0x1ace
    prev=[0xa3c], succ=[]
    =================================
    0x1acf: v1acf(0x40) = CONST 
    0x1ad2: v1ad2 = MLOAD v1acf(0x40)
    0x1ad5: MSTORE v1ad2, va4b
    0x1ad6: v1ad6 = MLOAD v1acf(0x40)
    0x1ada: v1ada(0x0) = SUB v1ad2, v1ad6
    0x1adb: v1adb(0x20) = CONST 
    0x1add: v1add(0x20) = ADD v1adb(0x20), v1ada(0x0)
    0x1adf: RETURN v1ad6, v1add(0x20)

}

function balanceOf(address)() public {
    Begin block 0x3d7
    prev=[], succ=[0x3e9, 0x3ed]
    =================================
    0x3d8: v3d8(0x1aff) = CONST 
    0x3db: v3db(0x4) = CONST 
    0x3de: v3de = CALLDATASIZE 
    0x3df: v3df = SUB v3de, v3db(0x4)
    0x3e0: v3e0(0x20) = CONST 
    0x3e3: v3e3 = LT v3df, v3e0(0x20)
    0x3e4: v3e4 = ISZERO v3e3
    0x3e5: v3e5(0x3ed) = CONST 
    0x3e8: JUMPI v3e5(0x3ed), v3e4

    Begin block 0x3e9
    prev=[0x3d7], succ=[]
    =================================
    0x3e9: v3e9(0x0) = CONST 
    0x3ec: REVERT v3e9(0x0), v3e9(0x0)

    Begin block 0x3ed
    prev=[0x3d7], succ=[0xa4e]
    =================================
    0x3ef: v3ef = CALLDATALOAD v3db(0x4)
    0x3f0: v3f0(0x1) = CONST 
    0x3f2: v3f2(0x1) = CONST 
    0x3f4: v3f4(0xa0) = CONST 
    0x3f6: v3f6(0x10000000000000000000000000000000000000000) = SHL v3f4(0xa0), v3f2(0x1)
    0x3f7: v3f7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3f6(0x10000000000000000000000000000000000000000), v3f0(0x1)
    0x3f8: v3f8 = AND v3f7(0xffffffffffffffffffffffffffffffffffffffff), v3ef
    0x3f9: v3f9(0xa4e) = CONST 
    0x3fc: JUMP v3f9(0xa4e)

    Begin block 0xa4e
    prev=[0x3ed], succ=[0x1aff]
    =================================
    0xa4f: va4f(0x38) = CONST 
    0xa51: va51(0x20) = CONST 
    0xa53: MSTORE va51(0x20), va4f(0x38)
    0xa54: va54(0x0) = CONST 
    0xa58: MSTORE va54(0x0), v3f8
    0xa59: va59(0x40) = CONST 
    0xa5c: va5c = SHA3 va54(0x0), va59(0x40)
    0xa5d: va5d = SLOAD va5c
    0xa5f: JUMP v3d8(0x1aff)

    Begin block 0x1aff
    prev=[0xa4e], succ=[]
    =================================
    0x1b00: v1b00(0x40) = CONST 
    0x1b03: v1b03 = MLOAD v1b00(0x40)
    0x1b06: MSTORE v1b03, va5d
    0x1b07: v1b07 = MLOAD v1b00(0x40)
    0x1b0b: v1b0b(0x0) = SUB v1b03, v1b07
    0x1b0c: v1b0c(0x20) = CONST 
    0x1b0e: v1b0e(0x20) = ADD v1b0c(0x20), v1b0b(0x0)
    0x1b10: RETURN v1b07, v1b0e(0x20)

}

function renounceGovernorship()() public {
    Begin block 0x3fd
    prev=[], succ=[0xa60]
    =================================
    0x3fe: v3fe(0x1b30) = CONST 
    0x401: v401(0xa60) = CONST 
    0x404: JUMP v401(0xa60)

    Begin block 0xa60
    prev=[0x3fd], succ=[0xa73, 0xa77]
    =================================
    0xa61: va61(0x33) = CONST 
    0xa63: va63 = SLOAD va61(0x33)
    0xa64: va64(0x1) = CONST 
    0xa66: va66(0x1) = CONST 
    0xa68: va68(0xa0) = CONST 
    0xa6a: va6a(0x10000000000000000000000000000000000000000) = SHL va68(0xa0), va66(0x1)
    0xa6b: va6b(0xffffffffffffffffffffffffffffffffffffffff) = SUB va6a(0x10000000000000000000000000000000000000000), va64(0x1)
    0xa6c: va6c = AND va6b(0xffffffffffffffffffffffffffffffffffffffff), va63
    0xa6d: va6d = CALLER 
    0xa6e: va6e = EQ va6d, va6c
    0xa6f: va6f(0xa77) = CONST 
    0xa72: JUMPI va6f(0xa77), va6e

    Begin block 0xa73
    prev=[0xa60], succ=[]
    =================================
    0xa73: va73(0x0) = CONST 
    0xa76: REVERT va73(0x0), va73(0x0)

    Begin block 0xa77
    prev=[0xa60], succ=[0x1b30]
    =================================
    0xa78: va78(0x33) = CONST 
    0xa7a: va7a = SLOAD va78(0x33)
    0xa7b: va7b(0x40) = CONST 
    0xa7d: va7d = MLOAD va7b(0x40)
    0xa7e: va7e(0x0) = CONST 
    0xa81: va81(0x1) = CONST 
    0xa83: va83(0x1) = CONST 
    0xa85: va85(0xa0) = CONST 
    0xa87: va87(0x10000000000000000000000000000000000000000) = SHL va85(0xa0), va83(0x1)
    0xa88: va88(0xffffffffffffffffffffffffffffffffffffffff) = SUB va87(0x10000000000000000000000000000000000000000), va81(0x1)
    0xa89: va89 = AND va88(0xffffffffffffffffffffffffffffffffffffffff), va7a
    0xa8b: va8b(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a) = CONST 
    0xaaf: LOG3 va7d, va7e(0x0), va8b(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a), va89, va7e(0x0)
    0xab0: vab0(0x33) = CONST 
    0xab3: vab3 = SLOAD vab0(0x33)
    0xab4: vab4(0x1) = CONST 
    0xab6: vab6(0x1) = CONST 
    0xab8: vab8(0xa0) = CONST 
    0xaba: vaba(0x10000000000000000000000000000000000000000) = SHL vab8(0xa0), vab6(0x1)
    0xabb: vabb(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaba(0x10000000000000000000000000000000000000000), vab4(0x1)
    0xabc: vabc(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vabb(0xffffffffffffffffffffffffffffffffffffffff)
    0xabd: vabd = AND vabc(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vab3
    0xabf: SSTORE vab0(0x33), vabd
    0xac0: JUMP v3fe(0x1b30)

    Begin block 0x1b30
    prev=[0xa77], succ=[]
    =================================
    0x1b31: STOP 

}

function getConfig(bytes32,uint256)() public {
    Begin block 0x405
    prev=[], succ=[0x417, 0x41b]
    =================================
    0x406: v406(0x1b51) = CONST 
    0x409: v409(0x4) = CONST 
    0x40c: v40c = CALLDATASIZE 
    0x40d: v40d = SUB v40c, v409(0x4)
    0x40e: v40e(0x40) = CONST 
    0x411: v411 = LT v40d, v40e(0x40)
    0x412: v412 = ISZERO v411
    0x413: v413(0x41b) = CONST 
    0x416: JUMPI v413(0x41b), v412

    Begin block 0x417
    prev=[0x405], succ=[]
    =================================
    0x417: v417(0x0) = CONST 
    0x41a: REVERT v417(0x0), v417(0x0)

    Begin block 0x41b
    prev=[0x405], succ=[0xac1]
    =================================
    0x41e: v41e = CALLDATALOAD v409(0x4)
    0x420: v420(0x20) = CONST 
    0x422: v422(0x24) = ADD v420(0x20), v409(0x4)
    0x423: v423 = CALLDATALOAD v422(0x24)
    0x424: v424(0xac1) = CONST 
    0x427: JUMP v424(0xac1)

    Begin block 0xac1
    prev=[0x41b], succ=[0x1b51]
    =================================
    0xac2: vac2 = XOR v423, v41e
    0xac3: vac3(0x0) = CONST 
    0xac7: MSTORE vac3(0x0), vac2
    0xac8: vac8(0x34) = CONST 
    0xaca: vaca(0x20) = CONST 
    0xacc: MSTORE vaca(0x20), vac8(0x34)
    0xacd: vacd(0x40) = CONST 
    0xad0: vad0 = SHA3 vac3(0x0), vacd(0x40)
    0xad1: vad1 = SLOAD vad0
    0xad3: JUMP v406(0x1b51)

    Begin block 0x1b51
    prev=[0xac1], succ=[]
    =================================
    0x1b52: v1b52(0x40) = CONST 
    0x1b55: v1b55 = MLOAD v1b52(0x40)
    0x1b58: MSTORE v1b55, vad1
    0x1b59: v1b59 = MLOAD v1b52(0x40)
    0x1b5d: v1b5d(0x0) = SUB v1b55, v1b59
    0x1b5e: v1b5e(0x20) = CONST 
    0x1b60: v1b60(0x20) = ADD v1b5e(0x20), v1b5d(0x0)
    0x1b62: RETURN v1b59, v1b60(0x20)

}

function totalMinted()() public {
    Begin block 0x428
    prev=[], succ=[0x1b82]
    =================================
    0x429: v429(0x1b82) = CONST 
    0x42c: v42c(0xad4) = CONST 
    0x42f: v42f_0 = CALLPRIVATE v42c(0xad4), v429(0x1b82)

    Begin block 0x1b82
    prev=[0x428], succ=[]
    =================================
    0x1b83: v1b83(0x40) = CONST 
    0x1b86: v1b86 = MLOAD v1b83(0x40)
    0x1b89: MSTORE v1b86, v42f_0
    0x1b8a: v1b8a = MLOAD v1b83(0x40)
    0x1b8e: v1b8e(0x0) = SUB v1b86, v1b8a
    0x1b8f: v1b8f(0x20) = CONST 
    0x1b91: v1b91(0x20) = ADD v1b8f(0x20), v1b8e(0x0)
    0x1b93: RETURN v1b8a, v1b91(0x20)

}

function stake(uint256)() public {
    Begin block 0x430
    prev=[], succ=[0x442, 0x446]
    =================================
    0x431: v431(0x1bb3) = CONST 
    0x434: v434(0x4) = CONST 
    0x437: v437 = CALLDATASIZE 
    0x438: v438 = SUB v437, v434(0x4)
    0x439: v439(0x20) = CONST 
    0x43c: v43c = LT v438, v439(0x20)
    0x43d: v43d = ISZERO v43c
    0x43e: v43e(0x446) = CONST 
    0x441: JUMPI v43e(0x446), v43d

    Begin block 0x442
    prev=[0x430], succ=[]
    =================================
    0x442: v442(0x0) = CONST 
    0x445: REVERT v442(0x0), v442(0x0)

    Begin block 0x446
    prev=[0x430], succ=[0xbd0]
    =================================
    0x448: v448 = CALLDATALOAD v434(0x4)
    0x449: v449(0xbd0) = CONST 
    0x44c: JUMP v449(0xbd0)

    Begin block 0xbd0
    prev=[0x446], succ=[0x1321B0xbd0]
    =================================
    0xbd1: vbd1 = CALLER 
    0xbd2: vbd2(0x0) = CONST 
    0xbd6: MSTORE vbd2(0x0), vbd1
    0xbd7: vbd7(0x38) = CONST 
    0xbd9: vbd9(0x20) = CONST 
    0xbdb: MSTORE vbd9(0x20), vbd7(0x38)
    0xbdc: vbdc(0x40) = CONST 
    0xbdf: vbdf = SHA3 vbd2(0x0), vbdc(0x40)
    0xbe0: vbe0 = SLOAD vbdf
    0xbe2: vbe2(0xbeb) = CONST 
    0xbe7: vbe7(0x1321) = CONST 
    0xbea: JUMP vbe7(0x1321)

    Begin block 0x1321B0xbd0
    prev=[0xbd0], succ=[0x132fB0xbd0, 0x2284B0xbd0]
    =================================
    0x1322S0xbd0: v1322Vbd0(0x0) = CONST 
    0x1326S0xbd0: v1326Vbd0 = ADD v448, vbe0
    0x1329S0xbd0: v1329Vbd0 = LT v1326Vbd0, vbe0
    0x132aS0xbd0: v132aVbd0 = ISZERO v1329Vbd0
    0x132bS0xbd0: v132bVbd0(0x2284) = CONST 
    0x132eS0xbd0: JUMPI v132bVbd0(0x2284), v132aVbd0

    Begin block 0x132fB0xbd0
    prev=[0x1321B0xbd0], succ=[]
    =================================
    0x132fS0xbd0: v132fVbd0(0x40) = CONST 
    0x1332S0xbd0: v1332Vbd0 = MLOAD v132fVbd0(0x40)
    0x1333S0xbd0: v1333Vbd0(0x461bcd) = CONST 
    0x1337S0xbd0: v1337Vbd0(0xe5) = CONST 
    0x1339S0xbd0: v1339Vbd0(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1337Vbd0(0xe5), v1333Vbd0(0x461bcd)
    0x133bS0xbd0: MSTORE v1332Vbd0, v1339Vbd0(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x133cS0xbd0: v133cVbd0(0x20) = CONST 
    0x133eS0xbd0: v133eVbd0(0x4) = CONST 
    0x1341S0xbd0: v1341Vbd0 = ADD v1332Vbd0, v133eVbd0(0x4)
    0x1342S0xbd0: MSTORE v1341Vbd0, v133cVbd0(0x20)
    0x1343S0xbd0: v1343Vbd0(0x1b) = CONST 
    0x1345S0xbd0: v1345Vbd0(0x24) = CONST 
    0x1348S0xbd0: v1348Vbd0 = ADD v1332Vbd0, v1345Vbd0(0x24)
    0x1349S0xbd0: MSTORE v1348Vbd0, v1343Vbd0(0x1b)
    0x134aS0xbd0: v134aVbd0(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x136bS0xbd0: v136bVbd0(0x44) = CONST 
    0x136eS0xbd0: v136eVbd0 = ADD v1332Vbd0, v136bVbd0(0x44)
    0x136fS0xbd0: MSTORE v136eVbd0, v134aVbd0(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1371S0xbd0: v1371Vbd0 = MLOAD v132fVbd0(0x40)
    0x1375S0xbd0: v1375Vbd0(0x0) = SUB v1332Vbd0, v1371Vbd0
    0x1376S0xbd0: v1376Vbd0(0x64) = CONST 
    0x1378S0xbd0: v1378Vbd0(0x64) = ADD v1376Vbd0(0x64), v1375Vbd0(0x0)
    0x137aS0xbd0: REVERT v1371Vbd0, v1378Vbd0(0x64)

    Begin block 0x2284B0xbd0
    prev=[0x1321B0xbd0], succ=[0xbeb]
    =================================
    0x228aS0xbd0: JUMP vbe2(0xbeb)

    Begin block 0xbeb
    prev=[0x2284B0xbd0], succ=[0x1ff4]
    =================================
    0xbee: vbee(0xc08) = CONST 
    0xbf1: vbf1(0x1fa9) = CONST 
    0xbf5: vbf5(0x1fcf) = CONST 
    0xbf9: vbf9(0x1ff4) = CONST 
    0xbfc: vbfc = CALLER 
    0xbfd: vbfd(0xa13) = CONST 
    0xc00: vc00_0 = CALLPRIVATE vbfd(0xa13), vbfc, vbf9(0x1ff4)

    Begin block 0x1ff4
    prev=[0xbeb], succ=[0x1fcf]
    =================================
    0x1ff6: v1ff6(0x10cd) = CONST 
    0x1ff9: v1ff9_0 = CALLPRIVATE v1ff6(0x10cd), vbe0, vc00_0, vbf5(0x1fcf)

    Begin block 0x1fcf
    prev=[0x1ff4], succ=[0x1fa9]
    =================================
    0x1fd1: v1fd1(0x112d) = CONST 
    0x1fd4: v1fd4_0 = CALLPRIVATE v1fd1(0x112d), v1326Vbd0, v1ff9_0, vbf1(0x1fa9)

    Begin block 0x1fa9
    prev=[0x1fcf], succ=[0xc08]
    =================================
    0x1faa: v1faa = TIMESTAMP 
    0x1fac: v1fac(0x116f) = CONST 
    0x1faf: v1faf_0 = CALLPRIVATE v1fac(0x116f), v1fd4_0, v1faa, vbee(0xc08)

    Begin block 0xc08
    prev=[0x1fa9], succ=[0x2064]
    =================================
    0xc09: vc09 = CALLER 
    0xc0a: vc0a(0x0) = CONST 
    0xc0e: MSTORE vc0a(0x0), vc09
    0xc0f: vc0f(0x39) = CONST 
    0xc11: vc11(0x20) = CONST 
    0xc13: MSTORE vc11(0x20), vc0f(0x39)
    0xc14: vc14(0x40) = CONST 
    0xc17: vc17 = SHA3 vc0a(0x0), vc14(0x40)
    0xc1b: SSTORE vc17, v1faf_0
    0xc1c: vc1c(0xc34) = CONST 
    0xc20: vc20(0x2019) = CONST 
    0xc26: vc26(0x203f) = CONST 
    0xc2c: vc2c(0x2064) = CONST 
    0xc30: vc30(0x104d) = CONST 
    0xc33: vc33_0 = CALLPRIVATE vc30(0x104d), vc09, vc2c(0x2064)

    Begin block 0x2064
    prev=[0xc08], succ=[0x203f]
    =================================
    0x2066: v2066(0x10cd) = CONST 
    0x2069: v2069_0 = CALLPRIVATE v2066(0x10cd), vbe0, vc33_0, vc26(0x203f)

    Begin block 0x203f
    prev=[0x2064], succ=[0x2019]
    =================================
    0x2041: v2041(0x112d) = CONST 
    0x2044: v2044_0 = CALLPRIVATE v2041(0x112d), v1326Vbd0, v2069_0, vc20(0x2019)

    Begin block 0x2019
    prev=[0x203f], succ=[0xc34]
    =================================
    0x201a: v201a = TIMESTAMP 
    0x201c: v201c(0x116f) = CONST 
    0x201f: v201f_0 = CALLPRIVATE v201c(0x116f), v2044_0, v201a, vc1c(0xc34)

    Begin block 0xc34
    prev=[0x2019], succ=[0x137bB0xc34]
    =================================
    0xc35: vc35 = CALLER 
    0xc36: vc36(0x0) = CONST 
    0xc3a: MSTORE vc36(0x0), vc35
    0xc3b: vc3b(0x3a) = CONST 
    0xc3d: vc3d(0x20) = CONST 
    0xc3f: MSTORE vc3d(0x20), vc3b(0x3a)
    0xc40: vc40(0x40) = CONST 
    0xc43: vc43 = SHA3 vc36(0x0), vc40(0x40)
    0xc47: SSTORE vc43, v201f_0
    0xc48: vc48(0x36) = CONST 
    0xc4a: vc4a = SLOAD vc48(0x36)
    0xc4b: vc4b(0xc61) = CONST 
    0xc4f: vc4f(0x1) = CONST 
    0xc51: vc51(0x1) = CONST 
    0xc53: vc53(0xa0) = CONST 
    0xc55: vc55(0x10000000000000000000000000000000000000000) = SHL vc53(0xa0), vc51(0x1)
    0xc56: vc56(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc55(0x10000000000000000000000000000000000000000), vc4f(0x1)
    0xc59: vc59 = AND vc4a, vc56(0xffffffffffffffffffffffffffffffffffffffff)
    0xc5b: vc5b = ADDRESS 
    0xc5d: vc5d(0x137b) = CONST 
    0xc60: JUMP vc5d(0x137b), v448, vc5b, vc35, vc59, vc4b(0xc61)

    Begin block 0x137bB0xc34
    prev=[0xc34], succ=[0x13e1B0xc34]
    =================================
    0x137cS0xc34: v137cVc34(0x40) = CONST 
    0x137fS0xc34: v137fVc34 = MLOAD v137cVc34(0x40)
    0x1380S0xc34: v1380Vc34(0x1) = CONST 
    0x1382S0xc34: v1382Vc34(0x1) = CONST 
    0x1384S0xc34: v1384Vc34(0xa0) = CONST 
    0x1386S0xc34: v1386Vc34(0x10000000000000000000000000000000000000000) = SHL v1384Vc34(0xa0), v1382Vc34(0x1)
    0x1387S0xc34: v1387Vc34(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1386Vc34(0x10000000000000000000000000000000000000000), v1380Vc34(0x1)
    0x138aS0xc34: v138aVc34 = AND v1387Vc34(0xffffffffffffffffffffffffffffffffffffffff), vc35
    0x138bS0xc34: v138bVc34(0x24) = CONST 
    0x138eS0xc34: v138eVc34 = ADD v137fVc34, v138bVc34(0x24)
    0x138fS0xc34: MSTORE v138eVc34, v138aVc34
    0x1392S0xc34: v1392Vc34 = AND v1387Vc34(0xffffffffffffffffffffffffffffffffffffffff), vc5b
    0x1393S0xc34: v1393Vc34(0x44) = CONST 
    0x1396S0xc34: v1396Vc34 = ADD v137fVc34, v1393Vc34(0x44)
    0x1397S0xc34: MSTORE v1396Vc34, v1392Vc34
    0x1398S0xc34: v1398Vc34(0x64) = CONST 
    0x139cS0xc34: v139cVc34 = ADD v137fVc34, v1398Vc34(0x64)
    0x139fS0xc34: MSTORE v139cVc34, v448
    0x13a1S0xc34: v13a1Vc34 = MLOAD v137cVc34(0x40)
    0x13a4S0xc34: v13a4Vc34(0x0) = SUB v137fVc34, v13a1Vc34
    0x13a7S0xc34: v13a7Vc34(0x64) = ADD v1398Vc34(0x64), v13a4Vc34(0x0)
    0x13a9S0xc34: MSTORE v13a1Vc34, v13a7Vc34(0x64)
    0x13aaS0xc34: v13aaVc34(0x84) = CONST 
    0x13aeS0xc34: v13aeVc34 = ADD v137fVc34, v13aaVc34(0x84)
    0x13b0S0xc34: MSTORE v137cVc34(0x40), v13aeVc34
    0x13b1S0xc34: v13b1Vc34(0x20) = CONST 
    0x13b4S0xc34: v13b4Vc34 = ADD v13a1Vc34, v13b1Vc34(0x20)
    0x13b6S0xc34: v13b6Vc34 = MLOAD v13b4Vc34
    0x13b7S0xc34: v13b7Vc34(0x1) = CONST 
    0x13b9S0xc34: v13b9Vc34(0x1) = CONST 
    0x13bbS0xc34: v13bbVc34(0xe0) = CONST 
    0x13bdS0xc34: v13bdVc34(0x100000000000000000000000000000000000000000000000000000000) = SHL v13bbVc34(0xe0), v13b9Vc34(0x1)
    0x13beS0xc34: v13beVc34(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = SUB v13bdVc34(0x100000000000000000000000000000000000000000000000000000000), v13b7Vc34(0x1)
    0x13bfS0xc34: v13bfVc34 = AND v13beVc34(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v13b6Vc34
    0x13c0S0xc34: v13c0Vc34(0x23b872dd) = CONST 
    0x13c5S0xc34: v13c5Vc34(0xe0) = CONST 
    0x13c7S0xc34: v13c7Vc34(0x23b872dd00000000000000000000000000000000000000000000000000000000) = SHL v13c5Vc34(0xe0), v13c0Vc34(0x23b872dd)
    0x13c8S0xc34: v13c8Vc34 = OR v13c7Vc34(0x23b872dd00000000000000000000000000000000000000000000000000000000), v13bfVc34
    0x13caS0xc34: MSTORE v13b4Vc34, v13c8Vc34
    0x13ccS0xc34: v13ccVc34 = MLOAD v137cVc34(0x40)
    0x13ceS0xc34: v13ceVc34(0x64) = MLOAD v13a1Vc34
    0x13cfS0xc34: v13cfVc34(0x0) = CONST 
    0x13d2S0xc34: v13d2Vc34(0x60) = CONST 
    0x13d7S0xc34: v13d7Vc34 = AND vc59, v1387Vc34(0xffffffffffffffffffffffffffffffffffffffff)

    Begin block 0x13e1B0xc34
    prev=[0x137bB0xc34, 0x13eaB0xc34], succ=[0x1400B0xc34, 0x13eaB0xc34]
    =================================
    0x13e1_0x2S0xc34: v13e1_2Vc34 = PHI v13ceVc34(0x64), v13f3Vc34
    0x13e2S0xc34: v13e2Vc34(0x20) = CONST 
    0x13e5S0xc34: v13e5Vc34 = LT v13e1_2Vc34, v13e2Vc34(0x20)
    0x13e6S0xc34: v13e6Vc34(0x1400) = CONST 
    0x13e9S0xc34: JUMPI v13e6Vc34(0x1400), v13e5Vc34

    Begin block 0x1400B0xc34
    prev=[0x13e1B0xc34], succ=[0x1441B0xc34, 0x1462B0xc34]
    =================================
    0x1400_0x0S0xc34: v1400_0Vc34 = PHI v13b4Vc34, v13fbVc34
    0x1400_0x1S0xc34: v1400_1Vc34 = PHI v13ccVc34, v13f9Vc34
    0x1400_0x2S0xc34: v1400_2Vc34 = PHI v13ceVc34(0x64), v13f3Vc34
    0x1401S0xc34: v1401Vc34(0x1) = CONST 
    0x1404S0xc34: v1404Vc34(0x20) = CONST 
    0x1406S0xc34: v1406Vc34 = SUB v1404Vc34(0x20), v1400_2Vc34
    0x1407S0xc34: v1407Vc34(0x100) = CONST 
    0x140aS0xc34: v140aVc34 = EXP v1407Vc34(0x100), v1406Vc34
    0x140bS0xc34: v140bVc34 = SUB v140aVc34, v1401Vc34(0x1)
    0x140dS0xc34: v140dVc34 = NOT v140bVc34
    0x140fS0xc34: v140fVc34 = MLOAD v1400_0Vc34
    0x1410S0xc34: v1410Vc34 = AND v140fVc34, v140dVc34
    0x1413S0xc34: v1413Vc34 = MLOAD v1400_1Vc34
    0x1414S0xc34: v1414Vc34 = AND v1413Vc34, v140bVc34
    0x1417S0xc34: v1417Vc34 = OR v1410Vc34, v1414Vc34
    0x1419S0xc34: MSTORE v1400_1Vc34, v1417Vc34
    0x1422S0xc34: v1422Vc34 = ADD v13ceVc34(0x64), v13ccVc34
    0x1426S0xc34: v1426Vc34(0x0) = CONST 
    0x1428S0xc34: v1428Vc34(0x40) = CONST 
    0x142aS0xc34: v142aVc34 = MLOAD v1428Vc34(0x40)
    0x142dS0xc34: v142dVc34(0x64) = SUB v1422Vc34, v142aVc34
    0x142fS0xc34: v142fVc34(0x0) = CONST 
    0x1432S0xc34: v1432Vc34 = GAS 
    0x1433S0xc34: v1433Vc34 = CALL v1432Vc34, v13d7Vc34, v142fVc34(0x0), v142aVc34, v142dVc34(0x64), v142aVc34, v1426Vc34(0x0)
    0x1437S0xc34: v1437Vc34 = RETURNDATASIZE 
    0x1439S0xc34: v1439Vc34(0x0) = CONST 
    0x143cS0xc34: v143cVc34 = EQ v1437Vc34, v1439Vc34(0x0)
    0x143dS0xc34: v143dVc34(0x1462) = CONST 
    0x1440S0xc34: JUMPI v143dVc34(0x1462), v143cVc34

    Begin block 0x1441B0xc34
    prev=[0x1400B0xc34], succ=[0x1467B0xc34]
    =================================
    0x1441S0xc34: v1441Vc34(0x40) = CONST 
    0x1443S0xc34: v1443Vc34 = MLOAD v1441Vc34(0x40)
    0x1446S0xc34: v1446Vc34(0x1f) = CONST 
    0x1448S0xc34: v1448Vc34(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v1446Vc34(0x1f)
    0x1449S0xc34: v1449Vc34(0x3f) = CONST 
    0x144bS0xc34: v144bVc34 = RETURNDATASIZE 
    0x144cS0xc34: v144cVc34 = ADD v144bVc34, v1449Vc34(0x3f)
    0x144dS0xc34: v144dVc34 = AND v144cVc34, v1448Vc34(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x144fS0xc34: v144fVc34 = ADD v1443Vc34, v144dVc34
    0x1450S0xc34: v1450Vc34(0x40) = CONST 
    0x1452S0xc34: MSTORE v1450Vc34(0x40), v144fVc34
    0x1453S0xc34: v1453Vc34 = RETURNDATASIZE 
    0x1455S0xc34: MSTORE v1443Vc34, v1453Vc34
    0x1456S0xc34: v1456Vc34 = RETURNDATASIZE 
    0x1457S0xc34: v1457Vc34(0x0) = CONST 
    0x1459S0xc34: v1459Vc34(0x20) = CONST 
    0x145cS0xc34: v145cVc34 = ADD v1443Vc34, v1459Vc34(0x20)
    0x145dS0xc34: RETURNDATACOPY v145cVc34, v1457Vc34(0x0), v1456Vc34
    0x145eS0xc34: v145eVc34(0x1467) = CONST 
    0x1461S0xc34: JUMP v145eVc34(0x1467)

    Begin block 0x1467B0xc34
    prev=[0x1441B0xc34, 0x1462B0xc34], succ=[0x1495B0xc34, 0x1474B0xc34]
    =================================
    0x146fS0xc34: v146fVc34 = ISZERO v1433Vc34
    0x1470S0xc34: v1470Vc34(0x1495) = CONST 
    0x1473S0xc34: JUMPI v1470Vc34(0x1495), v146fVc34

    Begin block 0x1495B0xc34
    prev=[0x1467B0xc34, 0x1492B0xc34, 0x1474B0xc34], succ=[0x149aB0xc34, 0x14d0B0xc34]
    =================================
    0x1495_0x0S0xc34: v1495_0Vc34 = PHI v1433Vc34, v1494Vc34, v1477Vc34
    0x1496S0xc34: v1496Vc34(0x14d0) = CONST 
    0x1499S0xc34: JUMPI v1496Vc34(0x14d0), v1495_0Vc34

    Begin block 0x149aB0xc34
    prev=[0x1495B0xc34], succ=[]
    =================================
    0x149aS0xc34: v149aVc34(0x40) = CONST 
    0x149cS0xc34: v149cVc34 = MLOAD v149aVc34(0x40)
    0x149dS0xc34: v149dVc34(0x461bcd) = CONST 
    0x14a1S0xc34: v14a1Vc34(0xe5) = CONST 
    0x14a3S0xc34: v14a3Vc34(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v14a1Vc34(0xe5), v149dVc34(0x461bcd)
    0x14a5S0xc34: MSTORE v149cVc34, v14a3Vc34(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x14a6S0xc34: v14a6Vc34(0x4) = CONST 
    0x14a8S0xc34: v14a8Vc34 = ADD v14a6Vc34(0x4), v149cVc34
    0x14abS0xc34: v14abVc34(0x20) = CONST 
    0x14adS0xc34: v14adVc34 = ADD v14abVc34(0x20), v14a8Vc34
    0x14b0S0xc34: v14b0Vc34(0x20) = SUB v14adVc34, v14a8Vc34
    0x14b2S0xc34: MSTORE v14a8Vc34, v14b0Vc34(0x20)
    0x14b3S0xc34: v14b3Vc34(0x24) = CONST 
    0x14b6S0xc34: MSTORE v14adVc34, v14b3Vc34(0x24)
    0x14b7S0xc34: v14b7Vc34(0x20) = CONST 
    0x14b9S0xc34: v14b9Vc34 = ADD v14b7Vc34(0x20), v14adVc34
    0x14bbS0xc34: v14bbVc34(0x1693) = CONST 
    0x14beS0xc34: v14beVc34(0x24) = CONST 
    0x14c1S0xc34: CODECOPY v14b9Vc34, v14bbVc34(0x1693), v14beVc34(0x24)
    0x14c2S0xc34: v14c2Vc34(0x40) = CONST 
    0x14c4S0xc34: v14c4Vc34 = ADD v14c2Vc34(0x40), v14b9Vc34
    0x14c8S0xc34: v14c8Vc34(0x40) = CONST 
    0x14caS0xc34: v14caVc34 = MLOAD v14c8Vc34(0x40)
    0x14cdS0xc34: v14cdVc34(0x84) = SUB v14c4Vc34, v14caVc34
    0x14cfS0xc34: REVERT v14caVc34, v14cdVc34(0x84)

    Begin block 0x14d0B0xc34
    prev=[0x1495B0xc34], succ=[0xc61]
    =================================
    0x14d7S0xc34: JUMP vc4b(0xc61)

    Begin block 0xc61
    prev=[0x14d0B0xc34], succ=[0x1321B0xc61]
    =================================
    0xc62: vc62 = CALLER 
    0xc63: vc63(0x0) = CONST 
    0xc67: MSTORE vc63(0x0), vc62
    0xc68: vc68(0x38) = CONST 
    0xc6a: vc6a(0x20) = CONST 
    0xc6c: MSTORE vc6a(0x20), vc68(0x38)
    0xc6d: vc6d(0x40) = CONST 
    0xc70: vc70 = SHA3 vc63(0x0), vc6d(0x40)
    0xc73: SSTORE vc70, v1326Vbd0
    0xc74: vc74(0x37) = CONST 
    0xc76: vc76 = SLOAD vc74(0x37)
    0xc77: vc77(0xc80) = CONST 
    0xc7c: vc7c(0x1321) = CONST 
    0xc7f: JUMP vc7c(0x1321)

    Begin block 0x1321B0xc61
    prev=[0xc61], succ=[0x132fB0xc61, 0x2284B0xc61]
    =================================
    0x1322S0xc61: v1322Vc61(0x0) = CONST 
    0x1326S0xc61: v1326Vc61 = ADD v448, vc76
    0x1329S0xc61: v1329Vc61 = LT v1326Vc61, vc76
    0x132aS0xc61: v132aVc61 = ISZERO v1329Vc61
    0x132bS0xc61: v132bVc61(0x2284) = CONST 
    0x132eS0xc61: JUMPI v132bVc61(0x2284), v132aVc61

    Begin block 0x132fB0xc61
    prev=[0x1321B0xc61], succ=[]
    =================================
    0x132fS0xc61: v132fVc61(0x40) = CONST 
    0x1332S0xc61: v1332Vc61 = MLOAD v132fVc61(0x40)
    0x1333S0xc61: v1333Vc61(0x461bcd) = CONST 
    0x1337S0xc61: v1337Vc61(0xe5) = CONST 
    0x1339S0xc61: v1339Vc61(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v1337Vc61(0xe5), v1333Vc61(0x461bcd)
    0x133bS0xc61: MSTORE v1332Vc61, v1339Vc61(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x133cS0xc61: v133cVc61(0x20) = CONST 
    0x133eS0xc61: v133eVc61(0x4) = CONST 
    0x1341S0xc61: v1341Vc61 = ADD v1332Vc61, v133eVc61(0x4)
    0x1342S0xc61: MSTORE v1341Vc61, v133cVc61(0x20)
    0x1343S0xc61: v1343Vc61(0x1b) = CONST 
    0x1345S0xc61: v1345Vc61(0x24) = CONST 
    0x1348S0xc61: v1348Vc61 = ADD v1332Vc61, v1345Vc61(0x24)
    0x1349S0xc61: MSTORE v1348Vc61, v1343Vc61(0x1b)
    0x134aS0xc61: v134aVc61(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000) = CONST 
    0x136bS0xc61: v136bVc61(0x44) = CONST 
    0x136eS0xc61: v136eVc61 = ADD v1332Vc61, v136bVc61(0x44)
    0x136fS0xc61: MSTORE v136eVc61, v134aVc61(0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000)
    0x1371S0xc61: v1371Vc61 = MLOAD v132fVc61(0x40)
    0x1375S0xc61: v1375Vc61(0x0) = SUB v1332Vc61, v1371Vc61
    0x1376S0xc61: v1376Vc61(0x64) = CONST 
    0x1378S0xc61: v1378Vc61(0x64) = ADD v1376Vc61(0x64), v1375Vc61(0x0)
    0x137aS0xc61: REVERT v1371Vc61, v1378Vc61(0x64)

    Begin block 0x2284B0xc61
    prev=[0x1321B0xc61], succ=[0xc80]
    =================================
    0x228aS0xc61: JUMP vc77(0xc80)

    Begin block 0xc80
    prev=[0x2284B0xc61], succ=[0x1bb3]
    =================================
    0xc81: vc81(0x37) = CONST 
    0xc83: SSTORE vc81(0x37), v1326Vc61
    0xc84: vc84(0x40) = CONST 
    0xc87: vc87 = MLOAD vc84(0x40)
    0xc8a: MSTORE vc87, v448
    0xc8c: vc8c = MLOAD vc84(0x40)
    0xc8d: vc8d = CALLER 
    0xc8f: vc8f(0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d) = CONST 
    0xcb4: vcb4(0x0) = SUB vc87, vc8c
    0xcb5: vcb5(0x20) = CONST 
    0xcb7: vcb7(0x20) = ADD vcb5(0x20), vcb4(0x0)
    0xcb9: LOG2 vc8c, vcb7(0x20), vc8f(0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d), vc8d
    0xcbd: JUMP v431(0x1bb3)

    Begin block 0x1bb3
    prev=[0xc80], succ=[]
    =================================
    0x1bb4: STOP 

    Begin block 0x1474B0xc34
    prev=[0x1467B0xc34], succ=[0x1495B0xc34, 0x147dB0xc34]
    =================================
    0x1474_0x1S0xc34: v1474_1Vc34 = PHI v1443Vc34, v1463Vc34(0x60)
    0x1476S0xc34: v1476Vc34 = MLOAD v1474_1Vc34
    0x1477S0xc34: v1477Vc34 = ISZERO v1476Vc34
    0x1479S0xc34: v1479Vc34(0x1495) = CONST 
    0x147cS0xc34: JUMPI v1479Vc34(0x1495), v1477Vc34

    Begin block 0x147dB0xc34
    prev=[0x1474B0xc34], succ=[0x148eB0xc34, 0x1492B0xc34]
    =================================
    0x147d_0x1S0xc34: v147d_1Vc34 = PHI v1443Vc34, v1463Vc34(0x60)
    0x1480S0xc34: v1480Vc34(0x20) = CONST 
    0x1482S0xc34: v1482Vc34 = ADD v1480Vc34(0x20), v147d_1Vc34
    0x1484S0xc34: v1484Vc34 = MLOAD v147d_1Vc34
    0x1485S0xc34: v1485Vc34(0x20) = CONST 
    0x1488S0xc34: v1488Vc34 = LT v1484Vc34, v1485Vc34(0x20)
    0x1489S0xc34: v1489Vc34 = ISZERO v1488Vc34
    0x148aS0xc34: v148aVc34(0x1492) = CONST 
    0x148dS0xc34: JUMPI v148aVc34(0x1492), v1489Vc34

    Begin block 0x148eB0xc34
    prev=[0x147dB0xc34], succ=[]
    =================================
    0x148eS0xc34: v148eVc34(0x0) = CONST 
    0x1491S0xc34: REVERT v148eVc34(0x0), v148eVc34(0x0)

    Begin block 0x1492B0xc34
    prev=[0x147dB0xc34], succ=[0x1495B0xc34]
    =================================
    0x1494S0xc34: v1494Vc34 = MLOAD v1482Vc34

    Begin block 0x1462B0xc34
    prev=[0x1400B0xc34], succ=[0x1467B0xc34]
    =================================
    0x1463S0xc34: v1463Vc34(0x60) = CONST 

    Begin block 0x13eaB0xc34
    prev=[0x13e1B0xc34], succ=[0x13e1B0xc34]
    =================================
    0x13ea_0x0S0xc34: v13ea_0Vc34 = PHI v13b4Vc34, v13fbVc34
    0x13ea_0x1S0xc34: v13ea_1Vc34 = PHI v13ccVc34, v13f9Vc34
    0x13ea_0x2S0xc34: v13ea_2Vc34 = PHI v13ceVc34(0x64), v13f3Vc34
    0x13ebS0xc34: v13ebVc34 = MLOAD v13ea_0Vc34
    0x13edS0xc34: MSTORE v13ea_1Vc34, v13ebVc34
    0x13eeS0xc34: v13eeVc34(0x1f) = CONST 
    0x13f0S0xc34: v13f0Vc34(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT v13eeVc34(0x1f)
    0x13f3S0xc34: v13f3Vc34 = ADD v13ea_2Vc34, v13f0Vc34(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0x13f5S0xc34: v13f5Vc34(0x20) = CONST 
    0x13f9S0xc34: v13f9Vc34 = ADD v13f5Vc34(0x20), v13ea_1Vc34
    0x13fbS0xc34: v13fbVc34 = ADD v13f5Vc34(0x20), v13ea_0Vc34
    0x13fcS0xc34: v13fcVc34(0x13e1) = CONST 
    0x13ffS0xc34: JUMP v13fcVc34(0x13e1)

}

function setConfig(bytes32,address,uint256)() public {
    Begin block 0x44d
    prev=[], succ=[0x45f, 0x463]
    =================================
    0x44e: v44e(0x1bd4) = CONST 
    0x451: v451(0x4) = CONST 
    0x454: v454 = CALLDATASIZE 
    0x455: v455 = SUB v454, v451(0x4)
    0x456: v456(0x60) = CONST 
    0x459: v459 = LT v455, v456(0x60)
    0x45a: v45a = ISZERO v459
    0x45b: v45b(0x463) = CONST 
    0x45e: JUMPI v45b(0x463), v45a

    Begin block 0x45f
    prev=[0x44d], succ=[]
    =================================
    0x45f: v45f(0x0) = CONST 
    0x462: REVERT v45f(0x0), v45f(0x0)

    Begin block 0x463
    prev=[0x44d], succ=[0xcbe]
    =================================
    0x466: v466 = CALLDATALOAD v451(0x4)
    0x468: v468(0x1) = CONST 
    0x46a: v46a(0x1) = CONST 
    0x46c: v46c(0xa0) = CONST 
    0x46e: v46e(0x10000000000000000000000000000000000000000) = SHL v46c(0xa0), v46a(0x1)
    0x46f: v46f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v46e(0x10000000000000000000000000000000000000000), v468(0x1)
    0x470: v470(0x20) = CONST 
    0x473: v473(0x24) = ADD v451(0x4), v470(0x20)
    0x474: v474 = CALLDATALOAD v473(0x24)
    0x475: v475 = AND v474, v46f(0xffffffffffffffffffffffffffffffffffffffff)
    0x477: v477(0x40) = CONST 
    0x479: v479(0x44) = ADD v477(0x40), v451(0x4)
    0x47a: v47a = CALLDATALOAD v479(0x44)
    0x47b: v47b(0xcbe) = CONST 
    0x47e: JUMP v47b(0xcbe)

    Begin block 0xcbe
    prev=[0x463], succ=[0xcd1, 0xcd5]
    =================================
    0xcbf: vcbf(0x33) = CONST 
    0xcc1: vcc1 = SLOAD vcbf(0x33)
    0xcc2: vcc2(0x1) = CONST 
    0xcc4: vcc4(0x1) = CONST 
    0xcc6: vcc6(0xa0) = CONST 
    0xcc8: vcc8(0x10000000000000000000000000000000000000000) = SHL vcc6(0xa0), vcc4(0x1)
    0xcc9: vcc9(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcc8(0x10000000000000000000000000000000000000000), vcc2(0x1)
    0xcca: vcca = AND vcc9(0xffffffffffffffffffffffffffffffffffffffff), vcc1
    0xccb: vccb = CALLER 
    0xccc: vccc = EQ vccb, vcca
    0xccd: vccd(0xcd5) = CONST 
    0xcd0: JUMPI vccd(0xcd5), vccc

    Begin block 0xcd1
    prev=[0xcbe], succ=[]
    =================================
    0xcd1: vcd1(0x0) = CONST 
    0xcd4: REVERT vcd1(0x0), vcd1(0x0)

    Begin block 0xcd5
    prev=[0xcbe], succ=[0x10a6B0xcd5]
    =================================
    0xcd6: vcd6(0x2089) = CONST 
    0xcd9: vcd9(0x1) = CONST 
    0xcdb: vcdb(0x1) = CONST 
    0xcdd: vcdd(0xa0) = CONST 
    0xcdf: vcdf(0x10000000000000000000000000000000000000000) = SHL vcdd(0xa0), vcdb(0x1)
    0xce0: vce0(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcdf(0x10000000000000000000000000000000000000000), vcd9(0x1)
    0xce2: vce2 = AND v475, vce0(0xffffffffffffffffffffffffffffffffffffffff)
    0xce4: vce4 = XOR v466, vce2
    0xce6: vce6(0x10a6) = CONST 
    0xce9: JUMP vce6(0x10a6), v47a, vce4, vcd6(0x2089)

    Begin block 0x10a6B0xcd5
    prev=[0xcd5], succ=[0x10bcB0xcd5, 0x21efB0xcd5]
    =================================
    0x10a7S0xcd5: v10a7Vcd5(0x0) = CONST 
    0x10abS0xcd5: MSTORE v10a7Vcd5(0x0), vce4
    0x10acS0xcd5: v10acVcd5(0x34) = CONST 
    0x10aeS0xcd5: v10aeVcd5(0x20) = CONST 
    0x10b0S0xcd5: MSTORE v10aeVcd5(0x20), v10acVcd5(0x34)
    0x10b1S0xcd5: v10b1Vcd5(0x40) = CONST 
    0x10b4S0xcd5: v10b4Vcd5 = SHA3 v10a7Vcd5(0x0), v10b1Vcd5(0x40)
    0x10b5S0xcd5: v10b5Vcd5 = SLOAD v10b4Vcd5
    0x10b7S0xcd5: v10b7Vcd5 = EQ v47a, v10b5Vcd5
    0x10b8S0xcd5: v10b8Vcd5(0x21ef) = CONST 
    0x10bbS0xcd5: JUMPI v10b8Vcd5(0x21ef), v10b7Vcd5

    Begin block 0x10bcB0xcd5
    prev=[0x10a6B0xcd5], succ=[0x2089]
    =================================
    0x10bcS0xcd5: v10bcVcd5(0x0) = CONST 
    0x10c0S0xcd5: MSTORE v10bcVcd5(0x0), vce4
    0x10c1S0xcd5: v10c1Vcd5(0x34) = CONST 
    0x10c3S0xcd5: v10c3Vcd5(0x20) = CONST 
    0x10c5S0xcd5: MSTORE v10c3Vcd5(0x20), v10c1Vcd5(0x34)
    0x10c6S0xcd5: v10c6Vcd5(0x40) = CONST 
    0x10caS0xcd5: v10caVcd5 = SHA3 v10bcVcd5(0x0), v10c6Vcd5(0x40)
    0x10cbS0xcd5: SSTORE v10caVcd5, v47a
    0x10ccS0xcd5: JUMP vcd6(0x2089)

    Begin block 0x2089
    prev=[0x10bcB0xcd5, 0x21efB0xcd5], succ=[0x1bd4]
    =================================
    0x208d: JUMP v44e(0x1bd4)

    Begin block 0x1bd4
    prev=[0x2089], succ=[]
    =================================
    0x1bd5: STOP 

    Begin block 0x21efB0xcd5
    prev=[0x10a6B0xcd5], succ=[0x2089]
    =================================
    0x21f2S0xcd5: JUMP vcd6(0x2089)

}

function transferGovernorship(address)() public {
    Begin block 0x47f
    prev=[], succ=[0x491, 0x495]
    =================================
    0x480: v480(0x1bf5) = CONST 
    0x483: v483(0x4) = CONST 
    0x486: v486 = CALLDATASIZE 
    0x487: v487 = SUB v486, v483(0x4)
    0x488: v488(0x20) = CONST 
    0x48b: v48b = LT v487, v488(0x20)
    0x48c: v48c = ISZERO v48b
    0x48d: v48d(0x495) = CONST 
    0x490: JUMPI v48d(0x495), v48c

    Begin block 0x491
    prev=[0x47f], succ=[]
    =================================
    0x491: v491(0x0) = CONST 
    0x494: REVERT v491(0x0), v491(0x0)

    Begin block 0x495
    prev=[0x47f], succ=[0xcea]
    =================================
    0x497: v497 = CALLDATALOAD v483(0x4)
    0x498: v498(0x1) = CONST 
    0x49a: v49a(0x1) = CONST 
    0x49c: v49c(0xa0) = CONST 
    0x49e: v49e(0x10000000000000000000000000000000000000000) = SHL v49c(0xa0), v49a(0x1)
    0x49f: v49f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v49e(0x10000000000000000000000000000000000000000), v498(0x1)
    0x4a0: v4a0 = AND v49f(0xffffffffffffffffffffffffffffffffffffffff), v497
    0x4a1: v4a1(0xcea) = CONST 
    0x4a4: JUMP v4a1(0xcea)

    Begin block 0xcea
    prev=[0x495], succ=[0xcfd, 0xd01]
    =================================
    0xceb: vceb(0x33) = CONST 
    0xced: vced = SLOAD vceb(0x33)
    0xcee: vcee(0x1) = CONST 
    0xcf0: vcf0(0x1) = CONST 
    0xcf2: vcf2(0xa0) = CONST 
    0xcf4: vcf4(0x10000000000000000000000000000000000000000) = SHL vcf2(0xa0), vcf0(0x1)
    0xcf5: vcf5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcf4(0x10000000000000000000000000000000000000000), vcee(0x1)
    0xcf6: vcf6 = AND vcf5(0xffffffffffffffffffffffffffffffffffffffff), vced
    0xcf7: vcf7 = CALLER 
    0xcf8: vcf8 = EQ vcf7, vcf6
    0xcf9: vcf9(0xd01) = CONST 
    0xcfc: JUMPI vcf9(0xd01), vcf8

    Begin block 0xcfd
    prev=[0xcea], succ=[]
    =================================
    0xcfd: vcfd(0x0) = CONST 
    0xd00: REVERT vcfd(0x0), vcfd(0x0)

    Begin block 0xd01
    prev=[0xcea], succ=[0x14d8]
    =================================
    0xd02: vd02(0xd0a) = CONST 
    0xd06: vd06(0x14d8) = CONST 
    0xd09: JUMP vd06(0x14d8)

    Begin block 0x14d8
    prev=[0xd01], succ=[0x14e7, 0x14eb]
    =================================
    0x14d9: v14d9(0x1) = CONST 
    0x14db: v14db(0x1) = CONST 
    0x14dd: v14dd(0xa0) = CONST 
    0x14df: v14df(0x10000000000000000000000000000000000000000) = SHL v14dd(0xa0), v14db(0x1)
    0x14e0: v14e0(0xffffffffffffffffffffffffffffffffffffffff) = SUB v14df(0x10000000000000000000000000000000000000000), v14d9(0x1)
    0x14e2: v14e2 = AND v4a0, v14e0(0xffffffffffffffffffffffffffffffffffffffff)
    0x14e3: v14e3(0x14eb) = CONST 
    0x14e6: JUMPI v14e3(0x14eb), v14e2

    Begin block 0x14e7
    prev=[0x14d8], succ=[]
    =================================
    0x14e7: v14e7(0x0) = CONST 
    0x14ea: REVERT v14e7(0x0), v14e7(0x0)

    Begin block 0x14eb
    prev=[0x14d8], succ=[0xd0a]
    =================================
    0x14ec: v14ec(0x33) = CONST 
    0x14ee: v14ee = SLOAD v14ec(0x33)
    0x14ef: v14ef(0x40) = CONST 
    0x14f1: v14f1 = MLOAD v14ef(0x40)
    0x14f2: v14f2(0x1) = CONST 
    0x14f4: v14f4(0x1) = CONST 
    0x14f6: v14f6(0xa0) = CONST 
    0x14f8: v14f8(0x10000000000000000000000000000000000000000) = SHL v14f6(0xa0), v14f4(0x1)
    0x14f9: v14f9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v14f8(0x10000000000000000000000000000000000000000), v14f2(0x1)
    0x14fc: v14fc = AND v4a0, v14f9(0xffffffffffffffffffffffffffffffffffffffff)
    0x14fe: v14fe = AND v14ee, v14f9(0xffffffffffffffffffffffffffffffffffffffff)
    0x1500: v1500(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a) = CONST 
    0x1522: v1522(0x0) = CONST 
    0x1525: LOG3 v14f1, v1522(0x0), v1500(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a), v14fe, v14fc
    0x1526: v1526(0x33) = CONST 
    0x1529: v1529 = SLOAD v1526(0x33)
    0x152a: v152a(0x1) = CONST 
    0x152c: v152c(0x1) = CONST 
    0x152e: v152e(0xa0) = CONST 
    0x1530: v1530(0x10000000000000000000000000000000000000000) = SHL v152e(0xa0), v152c(0x1)
    0x1531: v1531(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1530(0x10000000000000000000000000000000000000000), v152a(0x1)
    0x1532: v1532(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v1531(0xffffffffffffffffffffffffffffffffffffffff)
    0x1533: v1533 = AND v1532(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v1529
    0x1534: v1534(0x1) = CONST 
    0x1536: v1536(0x1) = CONST 
    0x1538: v1538(0xa0) = CONST 
    0x153a: v153a(0x10000000000000000000000000000000000000000) = SHL v1538(0xa0), v1536(0x1)
    0x153b: v153b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v153a(0x10000000000000000000000000000000000000000), v1534(0x1)
    0x153f: v153f = AND v153b(0xffffffffffffffffffffffffffffffffffffffff), v4a0
    0x1543: v1543 = OR v153f, v1533
    0x1545: SSTORE v1526(0x33), v1543
    0x1546: JUMP vd02(0xd0a)

    Begin block 0xd0a
    prev=[0x14eb], succ=[0x1bf5]
    =================================
    0xd0c: JUMP v480(0x1bf5)

    Begin block 0x1bf5
    prev=[0xd0a], succ=[]
    =================================
    0x1bf6: STOP 

}

function stakingPerLPT(address)() public {
    Begin block 0x4a5
    prev=[], succ=[0x4b7, 0x4bb]
    =================================
    0x4a6: v4a6(0x1c16) = CONST 
    0x4a9: v4a9(0x4) = CONST 
    0x4ac: v4ac = CALLDATASIZE 
    0x4ad: v4ad = SUB v4ac, v4a9(0x4)
    0x4ae: v4ae(0x20) = CONST 
    0x4b1: v4b1 = LT v4ad, v4ae(0x20)
    0x4b2: v4b2 = ISZERO v4b1
    0x4b3: v4b3(0x4bb) = CONST 
    0x4b6: JUMPI v4b3(0x4bb), v4b2

    Begin block 0x4b7
    prev=[0x4a5], succ=[]
    =================================
    0x4b7: v4b7(0x0) = CONST 
    0x4ba: REVERT v4b7(0x0), v4b7(0x0)

    Begin block 0x4bb
    prev=[0x4a5], succ=[0xd0d]
    =================================
    0x4bd: v4bd = CALLDATALOAD v4a9(0x4)
    0x4be: v4be(0x1) = CONST 
    0x4c0: v4c0(0x1) = CONST 
    0x4c2: v4c2(0xa0) = CONST 
    0x4c4: v4c4(0x10000000000000000000000000000000000000000) = SHL v4c2(0xa0), v4c0(0x1)
    0x4c5: v4c5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4c4(0x10000000000000000000000000000000000000000), v4be(0x1)
    0x4c6: v4c6 = AND v4c5(0xffffffffffffffffffffffffffffffffffffffff), v4bd
    0x4c7: v4c7(0xd0d) = CONST 
    0x4ca: JUMP v4c7(0xd0d)

    Begin block 0xd0d
    prev=[0x4bb], succ=[0xd47, 0xd4b]
    =================================
    0xd0e: vd0e(0x0) = CONST 
    0xd10: vd10(0x72c) = CONST 
    0xd14: vd14(0x1) = CONST 
    0xd16: vd16(0x1) = CONST 
    0xd18: vd18(0xa0) = CONST 
    0xd1a: vd1a(0x10000000000000000000000000000000000000000) = SHL vd18(0xa0), vd16(0x1)
    0xd1b: vd1b(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd1a(0x10000000000000000000000000000000000000000), vd14(0x1)
    0xd1c: vd1c = AND vd1b(0xffffffffffffffffffffffffffffffffffffffff), v4c6
    0xd1d: vd1d(0x18160ddd) = CONST 
    0xd22: vd22(0x40) = CONST 
    0xd24: vd24 = MLOAD vd22(0x40)
    0xd26: vd26(0xffffffff) = CONST 
    0xd2b: vd2b(0x18160ddd) = AND vd26(0xffffffff), vd1d(0x18160ddd)
    0xd2c: vd2c(0xe0) = CONST 
    0xd2e: vd2e(0x18160ddd00000000000000000000000000000000000000000000000000000000) = SHL vd2c(0xe0), vd2b(0x18160ddd)
    0xd30: MSTORE vd24, vd2e(0x18160ddd00000000000000000000000000000000000000000000000000000000)
    0xd31: vd31(0x4) = CONST 
    0xd33: vd33 = ADD vd31(0x4), vd24
    0xd34: vd34(0x20) = CONST 
    0xd36: vd36(0x40) = CONST 
    0xd38: vd38 = MLOAD vd36(0x40)
    0xd3b: vd3b(0x4) = SUB vd33, vd38
    0xd3f: vd3f = EXTCODESIZE vd1c
    0xd40: vd40 = ISZERO vd3f
    0xd42: vd42 = ISZERO vd40
    0xd43: vd43(0xd4b) = CONST 
    0xd46: JUMPI vd43(0xd4b), vd42

    Begin block 0xd47
    prev=[0xd0d], succ=[]
    =================================
    0xd47: vd47(0x0) = CONST 
    0xd4a: REVERT vd47(0x0), vd47(0x0)

    Begin block 0xd4b
    prev=[0xd0d], succ=[0xd56, 0xd5f]
    =================================
    0xd4d: vd4d = GAS 
    0xd4e: vd4e = STATICCALL vd4d, vd1c, vd38, vd3b(0x4), vd38, vd34(0x20)
    0xd4f: vd4f = ISZERO vd4e
    0xd51: vd51 = ISZERO vd4f
    0xd52: vd52(0xd5f) = CONST 
    0xd55: JUMPI vd52(0xd5f), vd51

    Begin block 0xd56
    prev=[0xd4b], succ=[]
    =================================
    0xd56: vd56 = RETURNDATASIZE 
    0xd57: vd57(0x0) = CONST 
    0xd5a: RETURNDATACOPY vd57(0x0), vd57(0x0), vd56
    0xd5b: vd5b = RETURNDATASIZE 
    0xd5c: vd5c(0x0) = CONST 
    0xd5e: REVERT vd5c(0x0), vd5b

    Begin block 0xd5f
    prev=[0xd4b], succ=[0xd71, 0xd75]
    =================================
    0xd64: vd64(0x40) = CONST 
    0xd66: vd66 = MLOAD vd64(0x40)
    0xd67: vd67 = RETURNDATASIZE 
    0xd68: vd68(0x20) = CONST 
    0xd6b: vd6b = LT vd67, vd68(0x20)
    0xd6c: vd6c = ISZERO vd6b
    0xd6d: vd6d(0xd75) = CONST 
    0xd70: JUMPI vd6d(0xd75), vd6c

    Begin block 0xd71
    prev=[0xd5f], succ=[]
    =================================
    0xd71: vd71(0x0) = CONST 
    0xd74: REVERT vd71(0x0), vd71(0x0)

    Begin block 0xd75
    prev=[0xd5f], succ=[0x61cB0xd75]
    =================================
    0xd77: vd77 = MLOAD vd66
    0xd78: vd78(0x20ad) = CONST 
    0xd7b: vd7b(0xd83) = CONST 
    0xd7f: vd7f(0x61c) = CONST 
    0xd82: JUMP vd7f(0x61c)

    Begin block 0x61cB0xd75
    prev=[0xd75], succ=[0x66c0x61cB0xd75, 0x6700x61cB0xd75]
    =================================
    0x61dS0xd75: v61dVd75(0x36) = CONST 
    0x61fS0xd75: v61fVd75 = SLOAD v61dVd75(0x36)
    0x620S0xd75: v620Vd75(0x35) = CONST 
    0x622S0xd75: v622Vd75 = SLOAD v620Vd75(0x35)
    0x623S0xd75: v623Vd75(0x40) = CONST 
    0x626S0xd75: v626Vd75 = MLOAD v623Vd75(0x40)
    0x627S0xd75: v627Vd75(0x70a08231) = CONST 
    0x62cS0xd75: v62cVd75(0xe0) = CONST 
    0x62eS0xd75: v62eVd75(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL v62cVd75(0xe0), v627Vd75(0x70a08231)
    0x630S0xd75: MSTORE v626Vd75, v62eVd75(0x70a0823100000000000000000000000000000000000000000000000000000000)
    0x631S0xd75: v631Vd75(0x1) = CONST 
    0x633S0xd75: v633Vd75(0x1) = CONST 
    0x635S0xd75: v635Vd75(0xa0) = CONST 
    0x637S0xd75: v637Vd75(0x10000000000000000000000000000000000000000) = SHL v635Vd75(0xa0), v633Vd75(0x1)
    0x638S0xd75: v638Vd75(0xffffffffffffffffffffffffffffffffffffffff) = SUB v637Vd75(0x10000000000000000000000000000000000000000), v631Vd75(0x1)
    0x63bS0xd75: v63bVd75 = AND v638Vd75(0xffffffffffffffffffffffffffffffffffffffff), v622Vd75
    0x63cS0xd75: v63cVd75(0x4) = CONST 
    0x63fS0xd75: v63fVd75 = ADD v626Vd75, v63cVd75(0x4)
    0x640S0xd75: MSTORE v63fVd75, v63bVd75
    0x642S0xd75: v642Vd75 = MLOAD v623Vd75(0x40)
    0x643S0xd75: v643Vd75(0x0) = CONST 
    0x646S0xd75: v646Vd75(0x72c) = CONST 
    0x64aS0xd75: v64aVd75 = AND v638Vd75(0xffffffffffffffffffffffffffffffffffffffff), v61fVd75
    0x64cS0xd75: v64cVd75(0x70a08231) = CONST 
    0x652S0xd75: v652Vd75(0x24) = CONST 
    0x656S0xd75: v656Vd75 = ADD v626Vd75, v652Vd75(0x24)
    0x658S0xd75: v658Vd75(0x20) = CONST 
    0x65fS0xd75: v65fVd75(0x0) = SUB v626Vd75, v642Vd75
    0x660S0xd75: v660Vd75(0x24) = ADD v65fVd75(0x0), v652Vd75(0x24)
    0x664S0xd75: v664Vd75 = EXTCODESIZE v64aVd75
    0x665S0xd75: v665Vd75 = ISZERO v664Vd75
    0x667S0xd75: v667Vd75 = ISZERO v665Vd75
    0x668S0xd75: v668Vd75(0x670) = CONST 
    0x66bS0xd75: JUMPI v668Vd75(0x670), v667Vd75

    Begin block 0x66c0x61cB0xd75
    prev=[0x61cB0xd75], succ=[]
    =================================
    0x66c0x61cS0xd75: v61c66cVd75(0x0) = CONST 
    0x66f0x61cS0xd75: REVERT v61c66cVd75(0x0), v61c66cVd75(0x0)

    Begin block 0x6700x61cB0xd75
    prev=[0x61cB0xd75], succ=[0x67b0x61cB0xd75, 0x6840x61cB0xd75]
    =================================
    0x6720x61cS0xd75: v61c672Vd75 = GAS 
    0x6730x61cS0xd75: v61c673Vd75 = STATICCALL v61c672Vd75, v64aVd75, v642Vd75, v660Vd75(0x24), v642Vd75, v658Vd75(0x20)
    0x6740x61cS0xd75: v61c674Vd75 = ISZERO v61c673Vd75
    0x6760x61cS0xd75: v61c676Vd75 = ISZERO v61c674Vd75
    0x6770x61cS0xd75: v61c677Vd75(0x684) = CONST 
    0x67a0x61cS0xd75: JUMPI v61c677Vd75(0x684), v61c676Vd75

    Begin block 0x67b0x61cB0xd75
    prev=[0x6700x61cB0xd75], succ=[]
    =================================
    0x67b0x61cS0xd75: v61c67bVd75 = RETURNDATASIZE 
    0x67c0x61cS0xd75: v61c67cVd75(0x0) = CONST 
    0x67f0x61cS0xd75: RETURNDATACOPY v61c67cVd75(0x0), v61c67cVd75(0x0), v61c67bVd75
    0x6800x61cS0xd75: v61c680Vd75 = RETURNDATASIZE 
    0x6810x61cS0xd75: v61c681Vd75(0x0) = CONST 
    0x6830x61cS0xd75: REVERT v61c681Vd75(0x0), v61c680Vd75

    Begin block 0x6840x61cB0xd75
    prev=[0x6700x61cB0xd75], succ=[0x6960x61cB0xd75, 0x69a0x61cB0xd75]
    =================================
    0x6890x61cS0xd75: v61c689Vd75(0x40) = CONST 
    0x68b0x61cS0xd75: v61c68bVd75 = MLOAD v61c689Vd75(0x40)
    0x68c0x61cS0xd75: v61c68cVd75 = RETURNDATASIZE 
    0x68d0x61cS0xd75: v61c68dVd75(0x20) = CONST 
    0x6900x61cS0xd75: v61c690Vd75 = LT v61c68cVd75, v61c68dVd75(0x20)
    0x6910x61cS0xd75: v61c691Vd75 = ISZERO v61c690Vd75
    0x6920x61cS0xd75: v61c692Vd75(0x69a) = CONST 
    0x6950x61cS0xd75: JUMPI v61c692Vd75(0x69a), v61c691Vd75

    Begin block 0x6960x61cB0xd75
    prev=[0x6840x61cB0xd75], succ=[]
    =================================
    0x6960x61cS0xd75: v61c696Vd75(0x0) = CONST 
    0x6990x61cS0xd75: REVERT v61c696Vd75(0x0), v61c696Vd75(0x0)

    Begin block 0x69a0x61cB0xd75
    prev=[0x6840x61cB0xd75], succ=[0x6f00x61cB0xd75, 0x6f40x61cB0xd75]
    =================================
    0x69c0x61cS0xd75: v61c69cVd75 = MLOAD v61c68bVd75
    0x69d0x61cS0xd75: v61c69dVd75(0x35) = CONST 
    0x69f0x61cS0xd75: v61c69fVd75 = SLOAD v61c69dVd75(0x35)
    0x6a00x61cS0xd75: v61c6a0Vd75(0x40) = CONST 
    0x6a30x61cS0xd75: v61c6a3Vd75 = MLOAD v61c6a0Vd75(0x40)
    0x6a40x61cS0xd75: v61c6a4Vd75(0xc33342e9) = CONST 
    0x6a90x61cS0xd75: v61c6a9Vd75(0xe0) = CONST 
    0x6ab0x61cS0xd75: v61c6abVd75(0xc33342e900000000000000000000000000000000000000000000000000000000) = SHL v61c6a9Vd75(0xe0), v61c6a4Vd75(0xc33342e9)
    0x6ad0x61cS0xd75: MSTORE v61c6a3Vd75, v61c6abVd75(0xc33342e900000000000000000000000000000000000000000000000000000000)
    0x6ae0x61cS0xd75: v61c6aeVd75(0x1) = CONST 
    0x6b00x61cS0xd75: v61c6b0Vd75(0x1) = CONST 
    0x6b20x61cS0xd75: v61c6b2Vd75(0xa0) = CONST 
    0x6b40x61cS0xd75: v61c6b4Vd75(0x10000000000000000000000000000000000000000) = SHL v61c6b2Vd75(0xa0), v61c6b0Vd75(0x1)
    0x6b50x61cS0xd75: v61c6b5Vd75(0xffffffffffffffffffffffffffffffffffffffff) = SUB v61c6b4Vd75(0x10000000000000000000000000000000000000000), v61c6aeVd75(0x1)
    0x6b80x61cS0xd75: v61c6b8Vd75 = AND v61c6b5Vd75(0xffffffffffffffffffffffffffffffffffffffff), v4c6
    0x6b90x61cS0xd75: v61c6b9Vd75(0x4) = CONST 
    0x6bc0x61cS0xd75: v61c6bcVd75 = ADD v61c6a3Vd75, v61c6b9Vd75(0x4)
    0x6bd0x61cS0xd75: MSTORE v61c6bcVd75, v61c6b8Vd75
    0x6bf0x61cS0xd75: v61c6bfVd75 = MLOAD v61c6a0Vd75(0x40)
    0x6c00x61cS0xd75: v61c6c0Vd75(0x1dcc) = CONST 
    0x6c40x61cS0xd75: v61c6c4Vd75(0xde0b6b3a7640000) = CONST 
    0x6ce0x61cS0xd75: v61c6ceVd75 = AND v61c6b5Vd75(0xffffffffffffffffffffffffffffffffffffffff), v61c69fVd75
    0x6d00x61cS0xd75: v61c6d0Vd75(0xc33342e9) = CONST 
    0x6d60x61cS0xd75: v61c6d6Vd75(0x24) = CONST 
    0x6da0x61cS0xd75: v61c6daVd75 = ADD v61c6a3Vd75, v61c6d6Vd75(0x24)
    0x6dc0x61cS0xd75: v61c6dcVd75(0x20) = CONST 
    0x6e30x61cS0xd75: v61c6e3Vd75(0x0) = SUB v61c6a3Vd75, v61c6bfVd75
    0x6e40x61cS0xd75: v61c6e4Vd75(0x24) = ADD v61c6e3Vd75(0x0), v61c6d6Vd75(0x24)
    0x6e80x61cS0xd75: v61c6e8Vd75 = EXTCODESIZE v61c6ceVd75
    0x6e90x61cS0xd75: v61c6e9Vd75 = ISZERO v61c6e8Vd75
    0x6eb0x61cS0xd75: v61c6ebVd75 = ISZERO v61c6e9Vd75
    0x6ec0x61cS0xd75: v61c6ecVd75(0x6f4) = CONST 
    0x6ef0x61cS0xd75: JUMPI v61c6ecVd75(0x6f4), v61c6ebVd75

    Begin block 0x6f00x61cB0xd75
    prev=[0x69a0x61cB0xd75], succ=[]
    =================================
    0x6f00x61cS0xd75: v61c6f0Vd75(0x0) = CONST 
    0x6f30x61cS0xd75: REVERT v61c6f0Vd75(0x0), v61c6f0Vd75(0x0)

    Begin block 0x6f40x61cB0xd75
    prev=[0x69a0x61cB0xd75], succ=[0x6ff0x61cB0xd75, 0x7080x61cB0xd75]
    =================================
    0x6f60x61cS0xd75: v61c6f6Vd75 = GAS 
    0x6f70x61cS0xd75: v61c6f7Vd75 = STATICCALL v61c6f6Vd75, v61c6ceVd75, v61c6bfVd75, v61c6e4Vd75(0x24), v61c6bfVd75, v61c6dcVd75(0x20)
    0x6f80x61cS0xd75: v61c6f8Vd75 = ISZERO v61c6f7Vd75
    0x6fa0x61cS0xd75: v61c6faVd75 = ISZERO v61c6f8Vd75
    0x6fb0x61cS0xd75: v61c6fbVd75(0x708) = CONST 
    0x6fe0x61cS0xd75: JUMPI v61c6fbVd75(0x708), v61c6faVd75

    Begin block 0x6ff0x61cB0xd75
    prev=[0x6f40x61cB0xd75], succ=[]
    =================================
    0x6ff0x61cS0xd75: v61c6ffVd75 = RETURNDATASIZE 
    0x7000x61cS0xd75: v61c700Vd75(0x0) = CONST 
    0x7030x61cS0xd75: RETURNDATACOPY v61c700Vd75(0x0), v61c700Vd75(0x0), v61c6ffVd75
    0x7040x61cS0xd75: v61c704Vd75 = RETURNDATASIZE 
    0x7050x61cS0xd75: v61c705Vd75(0x0) = CONST 
    0x7070x61cS0xd75: REVERT v61c705Vd75(0x0), v61c704Vd75

    Begin block 0x7080x61cB0xd75
    prev=[0x6f40x61cB0xd75], succ=[0x71a0x61cB0xd75, 0x71e0x61cB0xd75]
    =================================
    0x70d0x61cS0xd75: v61c70dVd75(0x40) = CONST 
    0x70f0x61cS0xd75: v61c70fVd75 = MLOAD v61c70dVd75(0x40)
    0x7100x61cS0xd75: v61c710Vd75 = RETURNDATASIZE 
    0x7110x61cS0xd75: v61c711Vd75(0x20) = CONST 
    0x7140x61cS0xd75: v61c714Vd75 = LT v61c710Vd75, v61c711Vd75(0x20)
    0x7150x61cS0xd75: v61c715Vd75 = ISZERO v61c714Vd75
    0x7160x61cS0xd75: v61c716Vd75(0x71e) = CONST 
    0x7190x61cS0xd75: JUMPI v61c716Vd75(0x71e), v61c715Vd75

    Begin block 0x71a0x61cB0xd75
    prev=[0x7080x61cB0xd75], succ=[]
    =================================
    0x71a0x61cS0xd75: v61c71aVd75(0x0) = CONST 
    0x71d0x61cS0xd75: REVERT v61c71aVd75(0x0), v61c71aVd75(0x0)

    Begin block 0x71e0x61cB0xd75
    prev=[0x7080x61cB0xd75], succ=[0x10cd0x61cB0xd75]
    =================================
    0x7200x61cS0xd75: v61c720Vd75 = MLOAD v61c70fVd75
    0x7220x61cS0xd75: v61c722Vd75(0x10cd) = CONST 
    0x7250x61cS0xd75: JUMP v61c722Vd75(0x10cd)

    Begin block 0x10cd0x61cB0xd75
    prev=[0x71e0x61cB0xd75], succ=[0x10d50x61cB0xd75, 0x10dc0x61cB0xd75]
    =================================
    0x10ce0x61cS0xd75: v61c10ceVd75(0x0) = CONST 
    0x10d10x61cS0xd75: v61c10d1Vd75(0x10dc) = CONST 
    0x10d40x61cS0xd75: JUMPI v61c10d1Vd75(0x10dc), v61c720Vd75

    Begin block 0x10d50x61cB0xd75
    prev=[0x10cd0x61cB0xd75], succ=[0x93f0x61cB0xd75]
    =================================
    0x10d60x61cS0xd75: v61c10d6Vd75(0x0) = CONST 
    0x10d80x61cS0xd75: v61c10d8Vd75(0x93f) = CONST 
    0x10db0x61cS0xd75: JUMP v61c10d8Vd75(0x93f)

    Begin block 0x93f0x61cB0xd75
    prev=[0x10d50x61cB0xd75], succ=[0x1dcc0x61cB0xd75]
    =================================
    0x9440x61cS0xd75: JUMP v61c6c0Vd75(0x1dcc)

    Begin block 0x1dcc0x61cB0xd75
    prev=[0x93f0x61cB0xd75, 0x22120x61cB0xd75], succ=[0x112d0x61cB0xd75]
    =================================
    0x1dce0x61cS0xd75: v61c1dceVd75(0x112d) = CONST 
    0x1dd10x61cS0xd75: JUMP v61c1dceVd75(0x112d)

    Begin block 0x112d0x61cB0xd75
    prev=[0x1dcc0x61cB0xd75], succ=[0x15470x61cB0xd75]
    =================================
    0x112e0x61cS0xd75: v61c112eVd75(0x0) = CONST 
    0x11300x61cS0xd75: v61c1130Vd75(0x2238) = CONST 
    0x11350x61cS0xd75: v61c1135Vd75(0x40) = CONST 
    0x11370x61cS0xd75: v61c1137Vd75 = MLOAD v61c1135Vd75(0x40)
    0x11390x61cS0xd75: v61c1139Vd75(0x40) = CONST 
    0x113b0x61cS0xd75: v61c113bVd75 = ADD v61c1139Vd75(0x40), v61c1137Vd75
    0x113c0x61cS0xd75: v61c113cVd75(0x40) = CONST 
    0x113e0x61cS0xd75: MSTORE v61c113cVd75(0x40), v61c113bVd75
    0x11400x61cS0xd75: v61c1140Vd75(0x1a) = CONST 
    0x11430x61cS0xd75: MSTORE v61c1137Vd75, v61c1140Vd75(0x1a)
    0x11440x61cS0xd75: v61c1144Vd75(0x20) = CONST 
    0x11460x61cS0xd75: v61c1146Vd75 = ADD v61c1144Vd75(0x20), v61c1137Vd75
    0x11470x61cS0xd75: v61c1147Vd75(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000) = CONST 
    0x11690x61cS0xd75: MSTORE v61c1146Vd75, v61c1147Vd75(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000)
    0x116b0x61cS0xd75: v61c116bVd75(0x1547) = CONST 
    0x116e0x61cS0xd75: JUMP v61c116bVd75(0x1547)

    Begin block 0x15470x61cB0xd75
    prev=[0x112d0x61cB0xd75], succ=[0x15500x61cB0xd75, 0x15d30x61cB0xd75]
    =================================
    0x15480x61cS0xd75: v61c1548Vd75(0x0) = CONST 
    0x154c0x61cS0xd75: v61c154cVd75(0x15d3) = CONST 
    0x154f0x61cS0xd75: JUMPI v61c154cVd75(0x15d3), v61c69cVd75

    Begin block 0x15500x61cB0xd75
    prev=[0x15470x61cB0xd75], succ=[0x15800x61cB0xd75]
    =================================
    0x15500x61cS0xd75: v61c1550Vd75(0x40) = CONST 
    0x15520x61cS0xd75: v61c1552Vd75 = MLOAD v61c1550Vd75(0x40)
    0x15530x61cS0xd75: v61c1553Vd75(0x461bcd) = CONST 
    0x15570x61cS0xd75: v61c1557Vd75(0xe5) = CONST 
    0x15590x61cS0xd75: v61c1559Vd75(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v61c1557Vd75(0xe5), v61c1553Vd75(0x461bcd)
    0x155b0x61cS0xd75: MSTORE v61c1552Vd75, v61c1559Vd75(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x155c0x61cS0xd75: v61c155cVd75(0x4) = CONST 
    0x155e0x61cS0xd75: v61c155eVd75 = ADD v61c155cVd75(0x4), v61c1552Vd75
    0x15610x61cS0xd75: v61c1561Vd75(0x20) = CONST 
    0x15630x61cS0xd75: v61c1563Vd75 = ADD v61c1561Vd75(0x20), v61c155eVd75
    0x15660x61cS0xd75: v61c1566Vd75(0x20) = SUB v61c1563Vd75, v61c155eVd75
    0x15680x61cS0xd75: MSTORE v61c155eVd75, v61c1566Vd75(0x20)
    0x156c0x61cS0xd75: v61c156cVd75(0x1a) = MLOAD v61c1137Vd75
    0x156e0x61cS0xd75: MSTORE v61c1563Vd75, v61c156cVd75(0x1a)
    0x156f0x61cS0xd75: v61c156fVd75(0x20) = CONST 
    0x15710x61cS0xd75: v61c1571Vd75 = ADD v61c156fVd75(0x20), v61c1563Vd75
    0x15750x61cS0xd75: v61c1575Vd75(0x1a) = MLOAD v61c1137Vd75
    0x15770x61cS0xd75: v61c1577Vd75(0x20) = CONST 
    0x15790x61cS0xd75: v61c1579Vd75 = ADD v61c1577Vd75(0x20), v61c1137Vd75
    0x157e0x61cS0xd75: v61c157eVd75(0x0) = CONST 

    Begin block 0x15800x61cB0xd75
    prev=[0x15500x61cB0xd75, 0x15890x61cB0xd75], succ=[0x15890x61cB0xd75, 0x15980x61cB0xd75]
    =================================
    0x15800x61c_0x0S0xd75: v158061c_0Vd75 = PHI v61c157eVd75(0x0), v61c1593Vd75
    0x15830x61cS0xd75: v61c1583Vd75 = LT v158061c_0Vd75, v61c1575Vd75(0x1a)
    0x15840x61cS0xd75: v61c1584Vd75 = ISZERO v61c1583Vd75
    0x15850x61cS0xd75: v61c1585Vd75(0x1598) = CONST 
    0x15880x61cS0xd75: JUMPI v61c1585Vd75(0x1598), v61c1584Vd75

    Begin block 0x15890x61cB0xd75
    prev=[0x15800x61cB0xd75], succ=[0x15800x61cB0xd75]
    =================================
    0x15890x61c_0x0S0xd75: v158961c_0Vd75 = PHI v61c157eVd75(0x0), v61c1593Vd75
    0x158b0x61cS0xd75: v61c158bVd75 = ADD v158961c_0Vd75, v61c1579Vd75
    0x158c0x61cS0xd75: v61c158cVd75 = MLOAD v61c158bVd75
    0x158f0x61cS0xd75: v61c158fVd75 = ADD v158961c_0Vd75, v61c1571Vd75
    0x15900x61cS0xd75: MSTORE v61c158fVd75, v61c158cVd75
    0x15910x61cS0xd75: v61c1591Vd75(0x20) = CONST 
    0x15930x61cS0xd75: v61c1593Vd75 = ADD v61c1591Vd75(0x20), v158961c_0Vd75
    0x15940x61cS0xd75: v61c1594Vd75(0x1580) = CONST 
    0x15970x61cS0xd75: JUMP v61c1594Vd75(0x1580)

    Begin block 0x15980x61cB0xd75
    prev=[0x15800x61cB0xd75], succ=[0x15ac0x61cB0xd75, 0x15c50x61cB0xd75]
    =================================
    0x15a10x61cS0xd75: v61c15a1Vd75 = ADD v61c1575Vd75(0x1a), v61c1571Vd75
    0x15a30x61cS0xd75: v61c15a3Vd75(0x1f) = CONST 
    0x15a50x61cS0xd75: v61c15a5Vd75(0x1a) = AND v61c15a3Vd75(0x1f), v61c1575Vd75(0x1a)
    0x15a70x61cS0xd75: v61c15a7Vd75 = ISZERO v61c15a5Vd75(0x1a)
    0x15a80x61cS0xd75: v61c15a8Vd75(0x15c5) = CONST 
    0x15ab0x61cS0xd75: JUMPI v61c15a8Vd75(0x15c5), v61c15a7Vd75

    Begin block 0x15ac0x61cB0xd75
    prev=[0x15980x61cB0xd75], succ=[0x15c50x61cB0xd75]
    =================================
    0x15ae0x61cS0xd75: v61c15aeVd75 = SUB v61c15a1Vd75, v61c15a5Vd75(0x1a)
    0x15b00x61cS0xd75: v61c15b0Vd75 = MLOAD v61c15aeVd75
    0x15b10x61cS0xd75: v61c15b1Vd75(0x1) = CONST 
    0x15b40x61cS0xd75: v61c15b4Vd75(0x20) = CONST 
    0x15b60x61cS0xd75: v61c15b6Vd75(0x6) = SUB v61c15b4Vd75(0x20), v61c15a5Vd75(0x1a)
    0x15b70x61cS0xd75: v61c15b7Vd75(0x100) = CONST 
    0x15ba0x61cS0xd75: v61c15baVd75(0x1000000000000) = EXP v61c15b7Vd75(0x100), v61c15b6Vd75(0x6)
    0x15bb0x61cS0xd75: v61c15bbVd75(0xffffffffffff) = SUB v61c15baVd75(0x1000000000000), v61c15b1Vd75(0x1)
    0x15bc0x61cS0xd75: v61c15bcVd75 = NOT v61c15bbVd75(0xffffffffffff)
    0x15bd0x61cS0xd75: v61c15bdVd75 = AND v61c15bcVd75, v61c15b0Vd75
    0x15bf0x61cS0xd75: MSTORE v61c15aeVd75, v61c15bdVd75
    0x15c00x61cS0xd75: v61c15c0Vd75(0x20) = CONST 
    0x15c20x61cS0xd75: v61c15c2Vd75 = ADD v61c15c0Vd75(0x20), v61c15aeVd75

    Begin block 0x15c50x61cB0xd75
    prev=[0x15980x61cB0xd75, 0x15ac0x61cB0xd75], succ=[]
    =================================
    0x15c50x61c_0x1S0xd75: v15c561c_1Vd75 = PHI v61c15a1Vd75, v61c15c2Vd75
    0x15cb0x61cS0xd75: v61c15cbVd75(0x40) = CONST 
    0x15cd0x61cS0xd75: v61c15cdVd75 = MLOAD v61c15cbVd75(0x40)
    0x15d00x61cS0xd75: v61c15d0Vd75 = SUB v15c561c_1Vd75, v61c15cdVd75
    0x15d20x61cS0xd75: REVERT v61c15cdVd75, v61c15d0Vd75

    Begin block 0x15d30x61cB0xd75
    prev=[0x15470x61cB0xd75], succ=[0x15df0x61cB0xd75, 0x15de0x61cB0xd75]
    =================================
    0x15d50x61cS0xd75: v61c15d5Vd75(0x0) = CONST 
    0x15da0x61cS0xd75: v61c15daVd75(0x15df) = CONST 
    0x15dd0x61cS0xd75: JUMPI v61c15daVd75(0x15df), v61c69cVd75

    Begin block 0x15df0x61cB0xd75
    prev=[0x15d30x61cB0xd75], succ=[0x22380x61cB0xd75]
    =================================
    0x15df0x61c_0x0S0xd75: v15df61c_0Vd75 = PHI v61c10d6Vd75(0x0), v61c10dfVd75
    0x15e00x61cS0xd75: v61c15e0Vd75 = DIV v15df61c_0Vd75, v61c69cVd75
    0x15e80x61cS0xd75: JUMP v61c1130Vd75(0x2238)

    Begin block 0x22380x61cB0xd75
    prev=[0x15df0x61cB0xd75], succ=[0x72c0x61cB0xd75]
    =================================
    0x223e0x61cS0xd75: JUMP v646Vd75(0x72c)

    Begin block 0x72c0x61cB0xd75
    prev=[0x22380x61cB0xd75], succ=[0x72f0x61cB0xd75]
    =================================

    Begin block 0x72f0x61cB0xd75
    prev=[0x72c0x61cB0xd75], succ=[0xd83]
    =================================
    0x7330x61cS0xd75: JUMP vd7b(0xd83)

    Begin block 0xd83
    prev=[0x72f0x61cB0xd75], succ=[0x20d2]
    =================================
    0xd84: vd84(0x20d2) = CONST 
    0xd87: vd87(0xad4) = CONST 
    0xd8a: vd8a_0 = CALLPRIVATE vd87(0xad4), vd84(0x20d2)

    Begin block 0x20d2
    prev=[0xd83], succ=[0x20ad]
    =================================
    0x20d4: v20d4(0x10cd) = CONST 
    0x20d7: v20d7_0 = CALLPRIVATE v20d4(0x10cd), v61c15e0Vd75, vd8a_0, vd78(0x20ad)

    Begin block 0x20ad
    prev=[0x20d2], succ=[0x112d0x4a5]
    =================================
    0x20af: v20af(0x112d) = CONST 
    0x20b2: JUMP v20af(0x112d)

    Begin block 0x112d0x4a5
    prev=[0x20ad], succ=[0x15470x4a5]
    =================================
    0x112e0x4a5: v4a5112e(0x0) = CONST 
    0x11300x4a5: v4a51130(0x2238) = CONST 
    0x11350x4a5: v4a51135(0x40) = CONST 
    0x11370x4a5: v4a51137 = MLOAD v4a51135(0x40)
    0x11390x4a5: v4a51139(0x40) = CONST 
    0x113b0x4a5: v4a5113b = ADD v4a51139(0x40), v4a51137
    0x113c0x4a5: v4a5113c(0x40) = CONST 
    0x113e0x4a5: MSTORE v4a5113c(0x40), v4a5113b
    0x11400x4a5: v4a51140(0x1a) = CONST 
    0x11430x4a5: MSTORE v4a51137, v4a51140(0x1a)
    0x11440x4a5: v4a51144(0x20) = CONST 
    0x11460x4a5: v4a51146 = ADD v4a51144(0x20), v4a51137
    0x11470x4a5: v4a51147(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000) = CONST 
    0x11690x4a5: MSTORE v4a51146, v4a51147(0x536166654d6174683a206469766973696f6e206279207a65726f000000000000)
    0x116b0x4a5: v4a5116b(0x1547) = CONST 
    0x116e0x4a5: JUMP v4a5116b(0x1547)

    Begin block 0x15470x4a5
    prev=[0x112d0x4a5], succ=[0x15500x4a5, 0x15d30x4a5]
    =================================
    0x15480x4a5: v4a51548(0x0) = CONST 
    0x154c0x4a5: v4a5154c(0x15d3) = CONST 
    0x154f0x4a5: JUMPI v4a5154c(0x15d3), vd77

    Begin block 0x15500x4a5
    prev=[0x15470x4a5], succ=[0x15800x4a5]
    =================================
    0x15500x4a5: v4a51550(0x40) = CONST 
    0x15520x4a5: v4a51552 = MLOAD v4a51550(0x40)
    0x15530x4a5: v4a51553(0x461bcd) = CONST 
    0x15570x4a5: v4a51557(0xe5) = CONST 
    0x15590x4a5: v4a51559(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v4a51557(0xe5), v4a51553(0x461bcd)
    0x155b0x4a5: MSTORE v4a51552, v4a51559(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x155c0x4a5: v4a5155c(0x4) = CONST 
    0x155e0x4a5: v4a5155e = ADD v4a5155c(0x4), v4a51552
    0x15610x4a5: v4a51561(0x20) = CONST 
    0x15630x4a5: v4a51563 = ADD v4a51561(0x20), v4a5155e
    0x15660x4a5: v4a51566(0x20) = SUB v4a51563, v4a5155e
    0x15680x4a5: MSTORE v4a5155e, v4a51566(0x20)
    0x156c0x4a5: v4a5156c(0x1a) = MLOAD v4a51137
    0x156e0x4a5: MSTORE v4a51563, v4a5156c(0x1a)
    0x156f0x4a5: v4a5156f(0x20) = CONST 
    0x15710x4a5: v4a51571 = ADD v4a5156f(0x20), v4a51563
    0x15750x4a5: v4a51575(0x1a) = MLOAD v4a51137
    0x15770x4a5: v4a51577(0x20) = CONST 
    0x15790x4a5: v4a51579 = ADD v4a51577(0x20), v4a51137
    0x157e0x4a5: v4a5157e(0x0) = CONST 

    Begin block 0x15800x4a5
    prev=[0x15500x4a5, 0x15890x4a5], succ=[0x15980x4a5, 0x15890x4a5]
    =================================
    0x15800x4a5_0x0: v15804a5_0 = PHI v4a51593, v4a5157e(0x0)
    0x15830x4a5: v4a51583 = LT v15804a5_0, v4a51575(0x1a)
    0x15840x4a5: v4a51584 = ISZERO v4a51583
    0x15850x4a5: v4a51585(0x1598) = CONST 
    0x15880x4a5: JUMPI v4a51585(0x1598), v4a51584

    Begin block 0x15980x4a5
    prev=[0x15800x4a5], succ=[0x15c50x4a5, 0x15ac0x4a5]
    =================================
    0x15a10x4a5: v4a515a1 = ADD v4a51575(0x1a), v4a51571
    0x15a30x4a5: v4a515a3(0x1f) = CONST 
    0x15a50x4a5: v4a515a5(0x1a) = AND v4a515a3(0x1f), v4a51575(0x1a)
    0x15a70x4a5: v4a515a7 = ISZERO v4a515a5(0x1a)
    0x15a80x4a5: v4a515a8(0x15c5) = CONST 
    0x15ab0x4a5: JUMPI v4a515a8(0x15c5), v4a515a7

    Begin block 0x15c50x4a5
    prev=[0x15980x4a5, 0x15ac0x4a5], succ=[]
    =================================
    0x15c50x4a5_0x1: v15c54a5_1 = PHI v4a515c2, v4a515a1
    0x15cb0x4a5: v4a515cb(0x40) = CONST 
    0x15cd0x4a5: v4a515cd = MLOAD v4a515cb(0x40)
    0x15d00x4a5: v4a515d0 = SUB v15c54a5_1, v4a515cd
    0x15d20x4a5: REVERT v4a515cd, v4a515d0

    Begin block 0x15ac0x4a5
    prev=[0x15980x4a5], succ=[0x15c50x4a5]
    =================================
    0x15ae0x4a5: v4a515ae = SUB v4a515a1, v4a515a5(0x1a)
    0x15b00x4a5: v4a515b0 = MLOAD v4a515ae
    0x15b10x4a5: v4a515b1(0x1) = CONST 
    0x15b40x4a5: v4a515b4(0x20) = CONST 
    0x15b60x4a5: v4a515b6(0x6) = SUB v4a515b4(0x20), v4a515a5(0x1a)
    0x15b70x4a5: v4a515b7(0x100) = CONST 
    0x15ba0x4a5: v4a515ba(0x1000000000000) = EXP v4a515b7(0x100), v4a515b6(0x6)
    0x15bb0x4a5: v4a515bb(0xffffffffffff) = SUB v4a515ba(0x1000000000000), v4a515b1(0x1)
    0x15bc0x4a5: v4a515bc = NOT v4a515bb(0xffffffffffff)
    0x15bd0x4a5: v4a515bd = AND v4a515bc, v4a515b0
    0x15bf0x4a5: MSTORE v4a515ae, v4a515bd
    0x15c00x4a5: v4a515c0(0x20) = CONST 
    0x15c20x4a5: v4a515c2 = ADD v4a515c0(0x20), v4a515ae

    Begin block 0x15890x4a5
    prev=[0x15800x4a5], succ=[0x15800x4a5]
    =================================
    0x15890x4a5_0x0: v15894a5_0 = PHI v4a51593, v4a5157e(0x0)
    0x158b0x4a5: v4a5158b = ADD v15894a5_0, v4a51579
    0x158c0x4a5: v4a5158c = MLOAD v4a5158b
    0x158f0x4a5: v4a5158f = ADD v15894a5_0, v4a51571
    0x15900x4a5: MSTORE v4a5158f, v4a5158c
    0x15910x4a5: v4a51591(0x20) = CONST 
    0x15930x4a5: v4a51593 = ADD v4a51591(0x20), v15894a5_0
    0x15940x4a5: v4a51594(0x1580) = CONST 
    0x15970x4a5: JUMP v4a51594(0x1580)

    Begin block 0x15d30x4a5
    prev=[0x15470x4a5], succ=[0x15de0x4a5, 0x15df0x4a5]
    =================================
    0x15d50x4a5: v4a515d5(0x0) = CONST 
    0x15da0x4a5: v4a515da(0x15df) = CONST 
    0x15dd0x4a5: JUMPI v4a515da(0x15df), vd77

    Begin block 0x15de0x4a5
    prev=[0x15d30x4a5], succ=[]
    =================================
    0x15de0x4a5: THROW 

    Begin block 0x15df0x4a5
    prev=[0x15d30x4a5], succ=[0x22380x4a5]
    =================================
    0x15e00x4a5: v4a515e0 = DIV v20d7_0, vd77
    0x15e80x4a5: JUMP v4a51130(0x2238)

    Begin block 0x22380x4a5
    prev=[0x15df0x4a5], succ=[0x72c0x4a5]
    =================================
    0x223e0x4a5: JUMP vd10(0x72c)

    Begin block 0x72c0x4a5
    prev=[0x22380x4a5], succ=[0x72f0x4a5]
    =================================

    Begin block 0x72f0x4a5
    prev=[0x72c0x4a5], succ=[0x1c16]
    =================================
    0x7330x4a5: JUMP v4a6(0x1c16)

    Begin block 0x1c16
    prev=[0x72f0x4a5], succ=[]
    =================================
    0x1c17: v1c17(0x40) = CONST 
    0x1c1a: v1c1a = MLOAD v1c17(0x40)
    0x1c1d: MSTORE v1c1a, v4a515e0
    0x1c1e: v1c1e = MLOAD v1c17(0x40)
    0x1c22: v1c22(0x0) = SUB v1c1a, v1c1e
    0x1c23: v1c23(0x20) = CONST 
    0x1c25: v1c25(0x20) = ADD v1c23(0x20), v1c22(0x0)
    0x1c27: RETURN v1c1e, v1c25(0x20)

    Begin block 0x15de0x61cB0xd75
    prev=[0x15d30x61cB0xd75], succ=[]
    =================================
    0x15de0x61cS0xd75: THROW 

    Begin block 0x10dc0x61cB0xd75
    prev=[0x10cd0x61cB0xd75], succ=[0x10e90x61cB0xd75, 0x10e80x61cB0xd75]
    =================================
    0x10df0x61cS0xd75: v61c10dfVd75 = MUL v61c6c4Vd75(0xde0b6b3a7640000), v61c720Vd75
    0x10e40x61cS0xd75: v61c10e4Vd75(0x10e9) = CONST 
    0x10e70x61cS0xd75: JUMPI v61c10e4Vd75(0x10e9), v61c720Vd75

    Begin block 0x10e90x61cB0xd75
    prev=[0x10dc0x61cB0xd75], succ=[0x10f00x61cB0xd75, 0x22120x61cB0xd75]
    =================================
    0x10ea0x61cS0xd75: v61c10eaVd75 = DIV v61c10dfVd75, v61c720Vd75
    0x10eb0x61cS0xd75: v61c10ebVd75 = EQ v61c10eaVd75, v61c6c4Vd75(0xde0b6b3a7640000)
    0x10ec0x61cS0xd75: v61c10ecVd75(0x2212) = CONST 
    0x10ef0x61cS0xd75: JUMPI v61c10ecVd75(0x2212), v61c10ebVd75

    Begin block 0x10f00x61cB0xd75
    prev=[0x10e90x61cB0xd75], succ=[]
    =================================
    0x10f00x61cS0xd75: v61c10f0Vd75(0x40) = CONST 
    0x10f20x61cS0xd75: v61c10f2Vd75 = MLOAD v61c10f0Vd75(0x40)
    0x10f30x61cS0xd75: v61c10f3Vd75(0x461bcd) = CONST 
    0x10f70x61cS0xd75: v61c10f7Vd75(0xe5) = CONST 
    0x10f90x61cS0xd75: v61c10f9Vd75(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v61c10f7Vd75(0xe5), v61c10f3Vd75(0x461bcd)
    0x10fb0x61cS0xd75: MSTORE v61c10f2Vd75, v61c10f9Vd75(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x10fc0x61cS0xd75: v61c10fcVd75(0x4) = CONST 
    0x10fe0x61cS0xd75: v61c10feVd75 = ADD v61c10fcVd75(0x4), v61c10f2Vd75
    0x11010x61cS0xd75: v61c1101Vd75(0x20) = CONST 
    0x11030x61cS0xd75: v61c1103Vd75 = ADD v61c1101Vd75(0x20), v61c10feVd75
    0x11060x61cS0xd75: v61c1106Vd75(0x20) = SUB v61c1103Vd75, v61c10feVd75
    0x11080x61cS0xd75: MSTORE v61c10feVd75, v61c1106Vd75(0x20)
    0x11090x61cS0xd75: v61c1109Vd75(0x21) = CONST 
    0x110c0x61cS0xd75: MSTORE v61c1103Vd75, v61c1109Vd75(0x21)
    0x110d0x61cS0xd75: v61c110dVd75(0x20) = CONST 
    0x110f0x61cS0xd75: v61c110fVd75 = ADD v61c110dVd75(0x20), v61c1103Vd75
    0x11110x61cS0xd75: v61c1111Vd75(0x1644) = CONST 
    0x11140x61cS0xd75: v61c1114Vd75(0x21) = CONST 
    0x11170x61cS0xd75: CODECOPY v61c110fVd75, v61c1111Vd75(0x1644), v61c1114Vd75(0x21)
    0x11180x61cS0xd75: v61c1118Vd75(0x40) = CONST 
    0x111a0x61cS0xd75: v61c111aVd75 = ADD v61c1118Vd75(0x40), v61c110fVd75
    0x111e0x61cS0xd75: v61c111eVd75(0x40) = CONST 
    0x11200x61cS0xd75: v61c1120Vd75 = MLOAD v61c111eVd75(0x40)
    0x11230x61cS0xd75: v61c1123Vd75(0x84) = SUB v61c111aVd75, v61c1120Vd75
    0x11250x61cS0xd75: REVERT v61c1120Vd75, v61c1123Vd75(0x84)

    Begin block 0x22120x61cB0xd75
    prev=[0x10e90x61cB0xd75], succ=[0x1dcc0x61cB0xd75]
    =================================
    0x22180x61cS0xd75: JUMP v61c6c0Vd75(0x1dcc)

    Begin block 0x10e80x61cB0xd75
    prev=[0x10dc0x61cB0xd75], succ=[]
    =================================
    0x10e80x61cS0xd75: THROW 

}

function initialize(address)() public {
    Begin block 0x4cb
    prev=[], succ=[0x4dd, 0x4e1]
    =================================
    0x4cc: v4cc(0x1c47) = CONST 
    0x4cf: v4cf(0x4) = CONST 
    0x4d2: v4d2 = CALLDATASIZE 
    0x4d3: v4d3 = SUB v4d2, v4cf(0x4)
    0x4d4: v4d4(0x20) = CONST 
    0x4d7: v4d7 = LT v4d3, v4d4(0x20)
    0x4d8: v4d8 = ISZERO v4d7
    0x4d9: v4d9(0x4e1) = CONST 
    0x4dc: JUMPI v4d9(0x4e1), v4d8

    Begin block 0x4dd
    prev=[0x4cb], succ=[]
    =================================
    0x4dd: v4dd(0x0) = CONST 
    0x4e0: REVERT v4dd(0x0), v4dd(0x0)

    Begin block 0x4e1
    prev=[0x4cb], succ=[0xd8b0x4cb]
    =================================
    0x4e3: v4e3 = CALLDATALOAD v4cf(0x4)
    0x4e4: v4e4(0x1) = CONST 
    0x4e6: v4e6(0x1) = CONST 
    0x4e8: v4e8(0xa0) = CONST 
    0x4ea: v4ea(0x10000000000000000000000000000000000000000) = SHL v4e8(0xa0), v4e6(0x1)
    0x4eb: v4eb(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4ea(0x10000000000000000000000000000000000000000), v4e4(0x1)
    0x4ec: v4ec = AND v4eb(0xffffffffffffffffffffffffffffffffffffffff), v4e3
    0x4ed: v4ed(0xd8b) = CONST 
    0x4f0: JUMP v4ed(0xd8b)

    Begin block 0xd8b0x4cb
    prev=[0x4e1], succ=[0xda40x4cb, 0xd9c0x4cb]
    =================================
    0xd8c0x4cb: v4cbd8c(0x0) = CONST 
    0xd8e0x4cb: v4cbd8e = SLOAD v4cbd8c(0x0)
    0xd8f0x4cb: v4cbd8f(0x100) = CONST 
    0xd930x4cb: v4cbd93 = DIV v4cbd8e, v4cbd8f(0x100)
    0xd940x4cb: v4cbd94(0xff) = CONST 
    0xd960x4cb: v4cbd96 = AND v4cbd94(0xff), v4cbd93
    0xd980x4cb: v4cbd98(0xda4) = CONST 
    0xd9b0x4cb: JUMPI v4cbd98(0xda4), v4cbd96

    Begin block 0xda40x4cb
    prev=[0xd8b0x4cb, 0x131bB0xd9c0x4cb], succ=[0xdb20x4cb, 0xdaa0x4cb]
    =================================
    0xda40x4cb_0x0: vda44cb_0 = PHI v4cbd96, v131eVd9c4cb
    0xda60x4cb: v4cbda6(0xdb2) = CONST 
    0xda90x4cb: JUMPI v4cbda6(0xdb2), vda44cb_0

    Begin block 0xdb20x4cb
    prev=[0xda40x4cb, 0xdaa0x4cb], succ=[0xdb70x4cb, 0xded0x4cb]
    =================================
    0xdb20x4cb_0x0: vdb24cb_0 = PHI v4cbdb1, v4cbd96, v131eVd9c4cb
    0xdb30x4cb: v4cbdb3(0xded) = CONST 
    0xdb60x4cb: JUMPI v4cbdb3(0xded), vdb24cb_0

    Begin block 0xdb70x4cb
    prev=[0xdb20x4cb], succ=[]
    =================================
    0xdb70x4cb: v4cbdb7(0x40) = CONST 
    0xdb90x4cb: v4cbdb9 = MLOAD v4cbdb7(0x40)
    0xdba0x4cb: v4cbdba(0x461bcd) = CONST 
    0xdbe0x4cb: v4cbdbe(0xe5) = CONST 
    0xdc00x4cb: v4cbdc0(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v4cbdbe(0xe5), v4cbdba(0x461bcd)
    0xdc20x4cb: MSTORE v4cbdb9, v4cbdc0(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xdc30x4cb: v4cbdc3(0x4) = CONST 
    0xdc50x4cb: v4cbdc5 = ADD v4cbdc3(0x4), v4cbdb9
    0xdc80x4cb: v4cbdc8(0x20) = CONST 
    0xdca0x4cb: v4cbdca = ADD v4cbdc8(0x20), v4cbdc5
    0xdcd0x4cb: v4cbdcd(0x20) = SUB v4cbdca, v4cbdc5
    0xdcf0x4cb: MSTORE v4cbdc5, v4cbdcd(0x20)
    0xdd00x4cb: v4cbdd0(0x2e) = CONST 
    0xdd30x4cb: MSTORE v4cbdca, v4cbdd0(0x2e)
    0xdd40x4cb: v4cbdd4(0x20) = CONST 
    0xdd60x4cb: v4cbdd6 = ADD v4cbdd4(0x20), v4cbdca
    0xdd80x4cb: v4cbdd8(0x1665) = CONST 
    0xddb0x4cb: v4cbddb(0x2e) = CONST 
    0xdde0x4cb: CODECOPY v4cbdd6, v4cbdd8(0x1665), v4cbddb(0x2e)
    0xddf0x4cb: v4cbddf(0x40) = CONST 
    0xde10x4cb: v4cbde1 = ADD v4cbddf(0x40), v4cbdd6
    0xde50x4cb: v4cbde5(0x40) = CONST 
    0xde70x4cb: v4cbde7 = MLOAD v4cbde5(0x40)
    0xdea0x4cb: v4cbdea(0x84) = SUB v4cbde1, v4cbde7
    0xdec0x4cb: REVERT v4cbde7, v4cbdea(0x84)

    Begin block 0xded0x4cb
    prev=[0xdb20x4cb], succ=[0xe000x4cb, 0xe180x4cb]
    =================================
    0xdee0x4cb: v4cbdee(0x0) = CONST 
    0xdf00x4cb: v4cbdf0 = SLOAD v4cbdee(0x0)
    0xdf10x4cb: v4cbdf1(0x100) = CONST 
    0xdf50x4cb: v4cbdf5 = DIV v4cbdf0, v4cbdf1(0x100)
    0xdf60x4cb: v4cbdf6(0xff) = CONST 
    0xdf80x4cb: v4cbdf8 = AND v4cbdf6(0xff), v4cbdf5
    0xdf90x4cb: v4cbdf9 = ISZERO v4cbdf8
    0xdfb0x4cb: v4cbdfb = ISZERO v4cbdf9
    0xdfc0x4cb: v4cbdfc(0xe18) = CONST 
    0xdff0x4cb: JUMPI v4cbdfc(0xe18), v4cbdfb

    Begin block 0xe000x4cb
    prev=[0xded0x4cb], succ=[0xe180x4cb]
    =================================
    0xe000x4cb: v4cbe00(0x0) = CONST 
    0xe030x4cb: v4cbe03 = SLOAD v4cbe00(0x0)
    0xe040x4cb: v4cbe04(0xff) = CONST 
    0xe060x4cb: v4cbe06(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT v4cbe04(0xff)
    0xe070x4cb: v4cbe07(0xff00) = CONST 
    0xe0a0x4cb: v4cbe0a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v4cbe07(0xff00)
    0xe0d0x4cb: v4cbe0d = AND v4cbe03, v4cbe0a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff)
    0xe0e0x4cb: v4cbe0e(0x100) = CONST 
    0xe110x4cb: v4cbe11 = OR v4cbe0e(0x100), v4cbe0d
    0xe120x4cb: v4cbe12 = AND v4cbe11, v4cbe06(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00)
    0xe130x4cb: v4cbe13(0x1) = CONST 
    0xe150x4cb: v4cbe15 = OR v4cbe13(0x1), v4cbe12
    0xe170x4cb: SSTORE v4cbe00(0x0), v4cbe15

    Begin block 0xe180x4cb
    prev=[0xe000x4cb, 0xded0x4cb], succ=[0xe6e0x4cb, 0x20f70x4cb]
    =================================
    0xe190x4cb: v4cbe19(0x33) = CONST 
    0xe1c0x4cb: v4cbe1c = SLOAD v4cbe19(0x33)
    0xe1d0x4cb: v4cbe1d(0x1) = CONST 
    0xe1f0x4cb: v4cbe1f(0x1) = CONST 
    0xe210x4cb: v4cbe21(0xa0) = CONST 
    0xe230x4cb: v4cbe23(0x10000000000000000000000000000000000000000) = SHL v4cbe21(0xa0), v4cbe1f(0x1)
    0xe240x4cb: v4cbe24(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4cbe23(0x10000000000000000000000000000000000000000), v4cbe1d(0x1)
    0xe250x4cb: v4cbe25(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v4cbe24(0xffffffffffffffffffffffffffffffffffffffff)
    0xe260x4cb: v4cbe26 = AND v4cbe25(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v4cbe1c
    0xe270x4cb: v4cbe27(0x1) = CONST 
    0xe290x4cb: v4cbe29(0x1) = CONST 
    0xe2b0x4cb: v4cbe2b(0xa0) = CONST 
    0xe2d0x4cb: v4cbe2d(0x10000000000000000000000000000000000000000) = SHL v4cbe2b(0xa0), v4cbe29(0x1)
    0xe2e0x4cb: v4cbe2e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4cbe2d(0x10000000000000000000000000000000000000000), v4cbe27(0x1)
    0xe310x4cb: v4cbe31 = AND v4cbe2e(0xffffffffffffffffffffffffffffffffffffffff), v4ec
    0xe350x4cb: v4cbe35 = OR v4cbe31, v4cbe26
    0xe390x4cb: SSTORE v4cbe19(0x33), v4cbe35
    0xe3a0x4cb: v4cbe3a(0x40) = CONST 
    0xe3c0x4cb: v4cbe3c = MLOAD v4cbe3a(0x40)
    0xe3e0x4cb: v4cbe3e = AND v4cbe35, v4cbe2e(0xffffffffffffffffffffffffffffffffffffffff)
    0xe400x4cb: v4cbe40(0x0) = CONST 
    0xe430x4cb: v4cbe43(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a) = CONST 
    0xe670x4cb: LOG3 v4cbe3c, v4cbe40(0x0), v4cbe43(0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a), v4cbe40(0x0), v4cbe3e
    0xe690x4cb: v4cbe69 = ISZERO v4cbdf9
    0xe6a0x4cb: v4cbe6a(0x20f7) = CONST 
    0xe6d0x4cb: JUMPI v4cbe6a(0x20f7), v4cbe69

    Begin block 0xe6e0x4cb
    prev=[0xe180x4cb], succ=[0x1c47]
    =================================
    0xe6e0x4cb: v4cbe6e(0x0) = CONST 
    0xe710x4cb: v4cbe71 = SLOAD v4cbe6e(0x0)
    0xe720x4cb: v4cbe72(0xff00) = CONST 
    0xe750x4cb: v4cbe75(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff) = NOT v4cbe72(0xff00)
    0xe760x4cb: v4cbe76 = AND v4cbe75(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff), v4cbe71
    0xe780x4cb: SSTORE v4cbe6e(0x0), v4cbe76
    0xe7b0x4cb: JUMP v4cc(0x1c47)

    Begin block 0x1c47
    prev=[0xe6e0x4cb, 0x20f70x4cb], succ=[]
    =================================
    0x1c48: STOP 

    Begin block 0x20f70x4cb
    prev=[0xe180x4cb], succ=[0x1c47]
    =================================
    0x20fa0x4cb: JUMP v4cc(0x1c47)

    Begin block 0xdaa0x4cb
    prev=[0xda40x4cb], succ=[0xdb20x4cb]
    =================================
    0xdab0x4cb: v4cbdab(0x0) = CONST 
    0xdad0x4cb: v4cbdad = SLOAD v4cbdab(0x0)
    0xdae0x4cb: v4cbdae(0xff) = CONST 
    0xdb00x4cb: v4cbdb0 = AND v4cbdae(0xff), v4cbdad
    0xdb10x4cb: v4cbdb1 = ISZERO v4cbdb0

    Begin block 0xd9c0x4cb
    prev=[0xd8b0x4cb], succ=[0x131bB0xd9c0x4cb]
    =================================
    0xd9d0x4cb: v4cbd9d(0xda4) = CONST 
    0xda00x4cb: v4cbda0(0x131b) = CONST 
    0xda30x4cb: JUMP v4cbda0(0x131b)

    Begin block 0x131bB0xd9c0x4cb
    prev=[0xd9c0x4cb], succ=[0xda40x4cb]
    =================================
    0x131cS0xd9c0x4cb: v131cVd9c4cb = ADDRESS 
    0x131dS0xd9c0x4cb: v131dVd9c4cb = EXTCODESIZE v131cVd9c4cb
    0x131eS0xd9c0x4cb: v131eVd9c4cb = ISZERO v131dVd9c4cb
    0x1320S0xd9c0x4cb: JUMP v4cbd9d(0xda4)

}

function coinAgeOf(address)() public {
    Begin block 0x4f1
    prev=[], succ=[0x503, 0x507]
    =================================
    0x4f2: v4f2(0x1c68) = CONST 
    0x4f5: v4f5(0x4) = CONST 
    0x4f8: v4f8 = CALLDATASIZE 
    0x4f9: v4f9 = SUB v4f8, v4f5(0x4)
    0x4fa: v4fa(0x20) = CONST 
    0x4fd: v4fd = LT v4f9, v4fa(0x20)
    0x4fe: v4fe = ISZERO v4fd
    0x4ff: v4ff(0x507) = CONST 
    0x502: JUMPI v4ff(0x507), v4fe

    Begin block 0x503
    prev=[0x4f1], succ=[]
    =================================
    0x503: v503(0x0) = CONST 
    0x506: REVERT v503(0x0), v503(0x0)

    Begin block 0x507
    prev=[0x4f1], succ=[0xe7c0x4f1]
    =================================
    0x509: v509 = CALLDATALOAD v4f5(0x4)
    0x50a: v50a(0x1) = CONST 
    0x50c: v50c(0x1) = CONST 
    0x50e: v50e(0xa0) = CONST 
    0x510: v510(0x10000000000000000000000000000000000000000) = SHL v50e(0xa0), v50c(0x1)
    0x511: v511(0xffffffffffffffffffffffffffffffffffffffff) = SUB v510(0x10000000000000000000000000000000000000000), v50a(0x1)
    0x512: v512 = AND v511(0xffffffffffffffffffffffffffffffffffffffff), v509
    0x513: v513(0xe7c) = CONST 
    0x516: JUMP v513(0xe7c)

    Begin block 0xe7c0x4f1
    prev=[0x507], succ=[0xe8a0x4f1]
    =================================
    0xe7d0x4f1: v4f1e7d(0x0) = CONST 
    0xe7f0x4f1: v4f1e7f(0x72c) = CONST 
    0xe820x4f1: v4f1e82(0xe8a) = CONST 
    0xe860x4f1: v4f1e86(0x104d) = CONST 
    0xe890x4f1: v4f1e89_0 = CALLPRIVATE v4f1e86(0x104d), v512, v4f1e82(0xe8a)

    Begin block 0xe8a0x4f1
    prev=[0xe7c0x4f1], succ=[0x72c0x4f1]
    =================================
    0xe8b0x4f1: v4f1e8b(0x1) = CONST 
    0xe8d0x4f1: v4f1e8d(0x1) = CONST 
    0xe8f0x4f1: v4f1e8f(0xa0) = CONST 
    0xe910x4f1: v4f1e91(0x10000000000000000000000000000000000000000) = SHL v4f1e8f(0xa0), v4f1e8d(0x1)
    0xe920x4f1: v4f1e92(0xffffffffffffffffffffffffffffffffffffffff) = SUB v4f1e91(0x10000000000000000000000000000000000000000), v4f1e8b(0x1)
    0xe940x4f1: v4f1e94 = AND v512, v4f1e92(0xffffffffffffffffffffffffffffffffffffffff)
    0xe950x4f1: v4f1e95(0x0) = CONST 
    0xe990x4f1: MSTORE v4f1e95(0x0), v4f1e94
    0xe9a0x4f1: v4f1e9a(0x38) = CONST 
    0xe9c0x4f1: v4f1e9c(0x20) = CONST 
    0xe9e0x4f1: MSTORE v4f1e9c(0x20), v4f1e9a(0x38)
    0xe9f0x4f1: v4f1e9f(0x40) = CONST 
    0xea20x4f1: v4f1ea2 = SHA3 v4f1e95(0x0), v4f1e9f(0x40)
    0xea30x4f1: v4f1ea3 = SLOAD v4f1ea2
    0xea50x4f1: v4f1ea5(0x10cd) = CONST 
    0xea80x4f1: v4f1ea8_0 = CALLPRIVATE v4f1ea5(0x10cd), v4f1e89_0, v4f1ea3, v4f1e7f(0x72c)

    Begin block 0x72c0x4f1
    prev=[0xe8a0x4f1], succ=[0x72f0x4f1]
    =================================

    Begin block 0x72f0x4f1
    prev=[0x72c0x4f1], succ=[0x1c68]
    =================================
    0x7330x4f1: JUMP v4f2(0x1c68)

    Begin block 0x1c68
    prev=[0x72f0x4f1], succ=[]
    =================================
    0x1c69: v1c69(0x40) = CONST 
    0x1c6c: v1c6c = MLOAD v1c69(0x40)
    0x1c6f: MSTORE v1c6c, v4f1ea8_0
    0x1c70: v1c70 = MLOAD v1c69(0x40)
    0x1c74: v1c74(0x0) = SUB v1c6c, v1c70
    0x1c75: v1c75(0x20) = CONST 
    0x1c77: v1c77(0x20) = ADD v1c75(0x20), v1c74(0x0)
    0x1c79: RETURN v1c70, v1c77(0x20)

}

function spendTimeOf(address)() public {
    Begin block 0x517
    prev=[], succ=[0x529, 0x52d]
    =================================
    0x518: v518(0x1c99) = CONST 
    0x51b: v51b(0x4) = CONST 
    0x51e: v51e = CALLDATASIZE 
    0x51f: v51f = SUB v51e, v51b(0x4)
    0x520: v520(0x20) = CONST 
    0x523: v523 = LT v51f, v520(0x20)
    0x524: v524 = ISZERO v523
    0x525: v525(0x52d) = CONST 
    0x528: JUMPI v525(0x52d), v524

    Begin block 0x529
    prev=[0x517], succ=[]
    =================================
    0x529: v529(0x0) = CONST 
    0x52c: REVERT v529(0x0), v529(0x0)

    Begin block 0x52d
    prev=[0x517], succ=[0xea9]
    =================================
    0x52f: v52f = CALLDATALOAD v51b(0x4)
    0x530: v530(0x1) = CONST 
    0x532: v532(0x1) = CONST 
    0x534: v534(0xa0) = CONST 
    0x536: v536(0x10000000000000000000000000000000000000000) = SHL v534(0xa0), v532(0x1)
    0x537: v537(0xffffffffffffffffffffffffffffffffffffffff) = SUB v536(0x10000000000000000000000000000000000000000), v530(0x1)
    0x538: v538 = AND v537(0xffffffffffffffffffffffffffffffffffffffff), v52f
    0x539: v539(0xea9) = CONST 
    0x53c: JUMP v539(0xea9)

    Begin block 0xea9
    prev=[0x52d], succ=[0x1c99]
    =================================
    0xeaa: veaa(0x3a) = CONST 
    0xeac: veac(0x20) = CONST 
    0xeae: MSTORE veac(0x20), veaa(0x3a)
    0xeaf: veaf(0x0) = CONST 
    0xeb3: MSTORE veaf(0x0), v538
    0xeb4: veb4(0x40) = CONST 
    0xeb7: veb7 = SHA3 veaf(0x0), veb4(0x40)
    0xeb8: veb8 = SLOAD veb7
    0xeba: JUMP v518(0x1c99)

    Begin block 0x1c99
    prev=[0xea9], succ=[]
    =================================
    0x1c9a: v1c9a(0x40) = CONST 
    0x1c9d: v1c9d = MLOAD v1c9a(0x40)
    0x1ca0: MSTORE v1c9d, veb8
    0x1ca1: v1ca1 = MLOAD v1c9a(0x40)
    0x1ca5: v1ca5(0x0) = SUB v1c9d, v1ca1
    0x1ca6: v1ca6(0x20) = CONST 
    0x1ca8: v1ca8(0x20) = ADD v1ca6(0x20), v1ca5(0x0)
    0x1caa: RETURN v1ca1, v1ca8(0x20)

}

function setConfig(bytes32,uint256,uint256)() public {
    Begin block 0x53d
    prev=[], succ=[0x54f, 0x553]
    =================================
    0x53e: v53e(0x1cca) = CONST 
    0x541: v541(0x4) = CONST 
    0x544: v544 = CALLDATASIZE 
    0x545: v545 = SUB v544, v541(0x4)
    0x546: v546(0x60) = CONST 
    0x549: v549 = LT v545, v546(0x60)
    0x54a: v54a = ISZERO v549
    0x54b: v54b(0x553) = CONST 
    0x54e: JUMPI v54b(0x553), v54a

    Begin block 0x54f
    prev=[0x53d], succ=[]
    =================================
    0x54f: v54f(0x0) = CONST 
    0x552: REVERT v54f(0x0), v54f(0x0)

    Begin block 0x553
    prev=[0x53d], succ=[0xebb]
    =================================
    0x556: v556 = CALLDATALOAD v541(0x4)
    0x558: v558(0x20) = CONST 
    0x55b: v55b(0x24) = ADD v541(0x4), v558(0x20)
    0x55c: v55c = CALLDATALOAD v55b(0x24)
    0x55e: v55e(0x40) = CONST 
    0x560: v560(0x44) = ADD v55e(0x40), v541(0x4)
    0x561: v561 = CALLDATALOAD v560(0x44)
    0x562: v562(0xebb) = CONST 
    0x565: JUMP v562(0xebb)

    Begin block 0xebb
    prev=[0x553], succ=[0xece, 0xed2]
    =================================
    0xebc: vebc(0x33) = CONST 
    0xebe: vebe = SLOAD vebc(0x33)
    0xebf: vebf(0x1) = CONST 
    0xec1: vec1(0x1) = CONST 
    0xec3: vec3(0xa0) = CONST 
    0xec5: vec5(0x10000000000000000000000000000000000000000) = SHL vec3(0xa0), vec1(0x1)
    0xec6: vec6(0xffffffffffffffffffffffffffffffffffffffff) = SUB vec5(0x10000000000000000000000000000000000000000), vebf(0x1)
    0xec7: vec7 = AND vec6(0xffffffffffffffffffffffffffffffffffffffff), vebe
    0xec8: vec8 = CALLER 
    0xec9: vec9 = EQ vec8, vec7
    0xeca: veca(0xed2) = CONST 
    0xecd: JUMPI veca(0xed2), vec9

    Begin block 0xece
    prev=[0xebb], succ=[]
    =================================
    0xece: vece(0x0) = CONST 
    0xed1: REVERT vece(0x0), vece(0x0)

    Begin block 0xed2
    prev=[0xebb], succ=[0x10a6B0xed2]
    =================================
    0xed3: ved3(0x211a) = CONST 
    0xed8: ved8 = XOR v55c, v556
    0xeda: veda(0x10a6) = CONST 
    0xedd: JUMP veda(0x10a6), v561, ved8, ved3(0x211a)

    Begin block 0x10a6B0xed2
    prev=[0xed2], succ=[0x10bcB0xed2, 0x21efB0xed2]
    =================================
    0x10a7S0xed2: v10a7Ved2(0x0) = CONST 
    0x10abS0xed2: MSTORE v10a7Ved2(0x0), ved8
    0x10acS0xed2: v10acVed2(0x34) = CONST 
    0x10aeS0xed2: v10aeVed2(0x20) = CONST 
    0x10b0S0xed2: MSTORE v10aeVed2(0x20), v10acVed2(0x34)
    0x10b1S0xed2: v10b1Ved2(0x40) = CONST 
    0x10b4S0xed2: v10b4Ved2 = SHA3 v10a7Ved2(0x0), v10b1Ved2(0x40)
    0x10b5S0xed2: v10b5Ved2 = SLOAD v10b4Ved2
    0x10b7S0xed2: v10b7Ved2 = EQ v561, v10b5Ved2
    0x10b8S0xed2: v10b8Ved2(0x21ef) = CONST 
    0x10bbS0xed2: JUMPI v10b8Ved2(0x21ef), v10b7Ved2

    Begin block 0x10bcB0xed2
    prev=[0x10a6B0xed2], succ=[0x211a]
    =================================
    0x10bcS0xed2: v10bcVed2(0x0) = CONST 
    0x10c0S0xed2: MSTORE v10bcVed2(0x0), ved8
    0x10c1S0xed2: v10c1Ved2(0x34) = CONST 
    0x10c3S0xed2: v10c3Ved2(0x20) = CONST 
    0x10c5S0xed2: MSTORE v10c3Ved2(0x20), v10c1Ved2(0x34)
    0x10c6S0xed2: v10c6Ved2(0x40) = CONST 
    0x10caS0xed2: v10caVed2 = SHA3 v10bcVed2(0x0), v10c6Ved2(0x40)
    0x10cbS0xed2: SSTORE v10caVed2, v561
    0x10ccS0xed2: JUMP ved3(0x211a)

    Begin block 0x211a
    prev=[0x10bcB0xed2, 0x21efB0xed2], succ=[0x1cca]
    =================================
    0x211e: JUMP v53e(0x1cca)

    Begin block 0x1cca
    prev=[0x211a], succ=[]
    =================================
    0x1ccb: STOP 

    Begin block 0x21efB0xed2
    prev=[0x10a6B0xed2], succ=[0x211a]
    =================================
    0x21f2S0xed2: JUMP ved3(0x211a)

}

function spendCoinAge(address,uint256)() public {
    Begin block 0x566
    prev=[], succ=[0x578, 0x57c]
    =================================
    0x567: v567(0x1ceb) = CONST 
    0x56a: v56a(0x4) = CONST 
    0x56d: v56d = CALLDATASIZE 
    0x56e: v56e = SUB v56d, v56a(0x4)
    0x56f: v56f(0x40) = CONST 
    0x572: v572 = LT v56e, v56f(0x40)
    0x573: v573 = ISZERO v572
    0x574: v574(0x57c) = CONST 
    0x577: JUMPI v574(0x57c), v573

    Begin block 0x578
    prev=[0x566], succ=[]
    =================================
    0x578: v578(0x0) = CONST 
    0x57b: REVERT v578(0x0), v578(0x0)

    Begin block 0x57c
    prev=[0x566], succ=[0xede]
    =================================
    0x57e: v57e(0x1) = CONST 
    0x580: v580(0x1) = CONST 
    0x582: v582(0xa0) = CONST 
    0x584: v584(0x10000000000000000000000000000000000000000) = SHL v582(0xa0), v580(0x1)
    0x585: v585(0xffffffffffffffffffffffffffffffffffffffff) = SUB v584(0x10000000000000000000000000000000000000000), v57e(0x1)
    0x587: v587 = CALLDATALOAD v56a(0x4)
    0x588: v588 = AND v587, v585(0xffffffffffffffffffffffffffffffffffffffff)
    0x58a: v58a(0x20) = CONST 
    0x58c: v58c(0x24) = ADD v58a(0x20), v56a(0x4)
    0x58d: v58d = CALLDATALOAD v58c(0x24)
    0x58e: v58e(0xede) = CONST 
    0x591: JUMP v58e(0xede)

    Begin block 0xede
    prev=[0x57c], succ=[0xf2a, 0xf2e]
    =================================
    0xedf: vedf(0x35) = CONST 
    0xee1: vee1 = SLOAD vedf(0x35)
    0xee2: vee2(0x40) = CONST 
    0xee5: vee5 = MLOAD vee2(0x40)
    0xee6: vee6(0xc33342e9) = CONST 
    0xeeb: veeb(0xe0) = CONST 
    0xeed: veed(0xc33342e900000000000000000000000000000000000000000000000000000000) = SHL veeb(0xe0), vee6(0xc33342e9)
    0xeef: MSTORE vee5, veed(0xc33342e900000000000000000000000000000000000000000000000000000000)
    0xef0: vef0 = CALLER 
    0xef1: vef1(0x4) = CONST 
    0xef4: vef4 = ADD vee5, vef1(0x4)
    0xef5: MSTORE vef4, vef0
    0xef7: vef7 = MLOAD vee2(0x40)
    0xef8: vef8(0x0) = CONST 
    0xefd: vefd(0x1) = CONST 
    0xeff: veff(0x1) = CONST 
    0xf01: vf01(0xa0) = CONST 
    0xf03: vf03(0x10000000000000000000000000000000000000000) = SHL vf01(0xa0), veff(0x1)
    0xf04: vf04(0xffffffffffffffffffffffffffffffffffffffff) = SUB vf03(0x10000000000000000000000000000000000000000), vefd(0x1)
    0xf07: vf07 = AND vee1, vf04(0xffffffffffffffffffffffffffffffffffffffff)
    0xf09: vf09(0xc33342e9) = CONST 
    0xf0f: vf0f(0x24) = CONST 
    0xf13: vf13 = ADD vee5, vf0f(0x24)
    0xf15: vf15(0x20) = CONST 
    0xf1d: vf1d(0x0) = SUB vee5, vef7
    0xf1e: vf1e(0x24) = ADD vf1d(0x0), vf0f(0x24)
    0xf22: vf22 = EXTCODESIZE vf07
    0xf23: vf23 = ISZERO vf22
    0xf25: vf25 = ISZERO vf23
    0xf26: vf26(0xf2e) = CONST 
    0xf29: JUMPI vf26(0xf2e), vf25

    Begin block 0xf2a
    prev=[0xede], succ=[]
    =================================
    0xf2a: vf2a(0x0) = CONST 
    0xf2d: REVERT vf2a(0x0), vf2a(0x0)

    Begin block 0xf2e
    prev=[0xede], succ=[0xf39, 0xf42]
    =================================
    0xf30: vf30 = GAS 
    0xf31: vf31 = STATICCALL vf30, vf07, vef7, vf1e(0x24), vef7, vf15(0x20)
    0xf32: vf32 = ISZERO vf31
    0xf34: vf34 = ISZERO vf32
    0xf35: vf35(0xf42) = CONST 
    0xf38: JUMPI vf35(0xf42), vf34

    Begin block 0xf39
    prev=[0xf2e], succ=[]
    =================================
    0xf39: vf39 = RETURNDATASIZE 
    0xf3a: vf3a(0x0) = CONST 
    0xf3d: RETURNDATACOPY vf3a(0x0), vf3a(0x0), vf39
    0xf3e: vf3e = RETURNDATASIZE 
    0xf3f: vf3f(0x0) = CONST 
    0xf41: REVERT vf3f(0x0), vf3e

    Begin block 0xf42
    prev=[0xf2e], succ=[0xf54, 0xf58]
    =================================
    0xf47: vf47(0x40) = CONST 
    0xf49: vf49 = MLOAD vf47(0x40)
    0xf4a: vf4a = RETURNDATASIZE 
    0xf4b: vf4b(0x20) = CONST 
    0xf4e: vf4e = LT vf4a, vf4b(0x20)
    0xf4f: vf4f = ISZERO vf4e
    0xf50: vf50(0xf58) = CONST 
    0xf53: JUMPI vf50(0xf58), vf4f

    Begin block 0xf54
    prev=[0xf42], succ=[]
    =================================
    0xf54: vf54(0x0) = CONST 
    0xf57: REVERT vf54(0x0), vf54(0x0)

    Begin block 0xf58
    prev=[0xf42], succ=[0xf60, 0xf97]
    =================================
    0xf5a: vf5a = MLOAD vf49
    0xf5b: vf5b = GT vf5a, vef8(0x0)
    0xf5c: vf5c(0xf97) = CONST 
    0xf5f: JUMPI vf5c(0xf97), vf5b

    Begin block 0xf60
    prev=[0xf58], succ=[]
    =================================
    0xf60: vf60(0x40) = CONST 
    0xf63: vf63 = MLOAD vf60(0x40)
    0xf64: vf64(0x461bcd) = CONST 
    0xf68: vf68(0xe5) = CONST 
    0xf6a: vf6a(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vf68(0xe5), vf64(0x461bcd)
    0xf6c: MSTORE vf63, vf6a(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0xf6d: vf6d(0x20) = CONST 
    0xf6f: vf6f(0x4) = CONST 
    0xf72: vf72 = ADD vf63, vf6f(0x4)
    0xf73: MSTORE vf72, vf6d(0x20)
    0xf74: vf74(0x8) = CONST 
    0xf76: vf76(0x24) = CONST 
    0xf79: vf79 = ADD vf63, vf76(0x24)
    0xf7a: MSTORE vf79, vf74(0x8)
    0xf7b: vf7b(0x4e6f2071756f7461) = CONST 
    0xf84: vf84(0xc0) = CONST 
    0xf86: vf86(0x4e6f2071756f7461000000000000000000000000000000000000000000000000) = SHL vf84(0xc0), vf7b(0x4e6f2071756f7461)
    0xf87: vf87(0x44) = CONST 
    0xf8a: vf8a = ADD vf63, vf87(0x44)
    0xf8b: MSTORE vf8a, vf86(0x4e6f2071756f7461000000000000000000000000000000000000000000000000)
    0xf8d: vf8d = MLOAD vf60(0x40)
    0xf91: vf91(0x0) = SUB vf63, vf8d
    0xf92: vf92(0x64) = CONST 
    0xf94: vf94(0x64) = ADD vf92(0x64), vf91(0x0)
    0xf96: REVERT vf8d, vf94(0x64)

    Begin block 0xf97
    prev=[0xf58], succ=[0xfa0]
    =================================
    0xf98: vf98(0xfa0) = CONST 
    0xf9c: vf9c(0xe7c) = CONST 
    0xf9f: vf9f_0 = CALLPRIVATE vf9c(0xe7c), v588, vf98(0xfa0)

    Begin block 0xfa0
    prev=[0xf97], succ=[0xfa8, 0xfb3]
    =================================
    0xfa2: vfa2 = GT v58d, vf9f_0
    0xfa3: vfa3 = ISZERO vfa2
    0xfa4: vfa4(0xfb3) = CONST 
    0xfa7: JUMPI vfa4(0xfb3), vfa3

    Begin block 0xfa8
    prev=[0xfa0], succ=[0xfb0]
    =================================
    0xfa8: vfa8(0xfb0) = CONST 
    0xfac: vfac(0xe7c) = CONST 
    0xfaf: vfaf_0 = CALLPRIVATE vfac(0xe7c), v588, vfa8(0xfb0)

    Begin block 0xfb0
    prev=[0xfa8], succ=[0xfb3]
    =================================

    Begin block 0xfb3
    prev=[0xfa0, 0xfb0], succ=[0xfba, 0x1007]
    =================================
    0xfb3_0x1: vfb3_1 = PHI v58d, vfaf_0
    0xfb5: vfb5 = ISZERO vfb3_1
    0xfb6: vfb6(0x1007) = CONST 
    0xfb9: JUMPI vfb6(0x1007), vfb5

    Begin block 0xfba
    prev=[0xfb3], succ=[0xfe7]
    =================================
    0xfba: vfba(0x1) = CONST 
    0xfbc: vfbc(0x1) = CONST 
    0xfbe: vfbe(0xa0) = CONST 
    0xfc0: vfc0(0x10000000000000000000000000000000000000000) = SHL vfbe(0xa0), vfbc(0x1)
    0xfc1: vfc1(0xffffffffffffffffffffffffffffffffffffffff) = SUB vfc0(0x10000000000000000000000000000000000000000), vfba(0x1)
    0xfc3: vfc3 = AND v588, vfc1(0xffffffffffffffffffffffffffffffffffffffff)
    0xfc4: vfc4(0x0) = CONST 
    0xfc8: MSTORE vfc4(0x0), vfc3
    0xfc9: vfc9(0x38) = CONST 
    0xfcb: vfcb(0x20) = CONST 
    0xfcd: MSTORE vfcb(0x20), vfc9(0x38)
    0xfce: vfce(0x40) = CONST 
    0xfd1: vfd1 = SHA3 vfc4(0x0), vfce(0x40)
    0xfd2: vfd2 = SLOAD vfd1
    0xfd3: vfd3(0xfed) = CONST 
    0xfd7: vfd7(0x213e) = CONST 
    0xfdb: vfdb(0x2164) = CONST 
    0xfdf: vfdf(0xfe7) = CONST 
    0xfe3: vfe3(0xe7c) = CONST 
    0xfe6: vfe6_0 = CALLPRIVATE vfe3(0xe7c), v588, vfdf(0xfe7)

    Begin block 0xfe7
    prev=[0xfba], succ=[0x2164]
    =================================
    0xfe7_0x1: vfe7_1 = PHI v58d, vfaf_0
    0xfe9: vfe9(0x116f) = CONST 
    0xfec: vfec_0 = CALLPRIVATE vfe9(0x116f), vfe7_1, vfe6_0, vfdb(0x2164)

    Begin block 0x2164
    prev=[0xfe7], succ=[0x213e]
    =================================
    0x2166: v2166(0x112d) = CONST 
    0x2169: v2169_0 = CALLPRIVATE v2166(0x112d), vfd2, vfec_0, vfd7(0x213e)

    Begin block 0x213e
    prev=[0x2164], succ=[0xfed]
    =================================
    0x213f: v213f = TIMESTAMP 
    0x2141: v2141(0x116f) = CONST 
    0x2144: v2144_0 = CALLPRIVATE v2141(0x116f), v2169_0, v213f, vfd3(0xfed)

    Begin block 0xfed
    prev=[0x213e], succ=[0x1007]
    =================================
    0xfee: vfee(0x1) = CONST 
    0xff0: vff0(0x1) = CONST 
    0xff2: vff2(0xa0) = CONST 
    0xff4: vff4(0x10000000000000000000000000000000000000000) = SHL vff2(0xa0), vff0(0x1)
    0xff5: vff5(0xffffffffffffffffffffffffffffffffffffffff) = SUB vff4(0x10000000000000000000000000000000000000000), vfee(0x1)
    0xff7: vff7 = AND v588, vff5(0xffffffffffffffffffffffffffffffffffffffff)
    0xff8: vff8(0x0) = CONST 
    0xffc: MSTORE vff8(0x0), vff7
    0xffd: vffd(0x3a) = CONST 
    0xfff: vfff(0x20) = CONST 
    0x1001: MSTORE vfff(0x20), vffd(0x3a)
    0x1002: v1002(0x40) = CONST 
    0x1005: v1005 = SHA3 vff8(0x0), v1002(0x40)
    0x1006: SSTORE v1005, v2144_0

    Begin block 0x1007
    prev=[0xfb3, 0xfed], succ=[0x1ceb]
    =================================
    0x1007_0x1: v1007_1 = PHI v58d, vfaf_0
    0x1008: v1008(0x40) = CONST 
    0x100b: v100b = MLOAD v1008(0x40)
    0x100e: MSTORE v100b, v1007_1
    0x1010: v1010 = MLOAD v1008(0x40)
    0x1011: v1011(0x1) = CONST 
    0x1013: v1013(0x1) = CONST 
    0x1015: v1015(0xa0) = CONST 
    0x1017: v1017(0x10000000000000000000000000000000000000000) = SHL v1015(0xa0), v1013(0x1)
    0x1018: v1018(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1017(0x10000000000000000000000000000000000000000), v1011(0x1)
    0x101a: v101a = AND v588, v1018(0xffffffffffffffffffffffffffffffffffffffff)
    0x101c: v101c = CALLER 
    0x101e: v101e(0xc57112cc950e6849539522a31759a20284907e96dbd4c4f4cb7512809f9bd97d) = CONST 
    0x1042: v1042(0x0) = SUB v100b, v1010
    0x1043: v1043(0x20) = CONST 
    0x1045: v1045(0x20) = ADD v1043(0x20), v1042(0x0)
    0x1047: LOG3 v1010, v1045(0x20), v101e(0xc57112cc950e6849539522a31759a20284907e96dbd4c4f4cb7512809f9bd97d), v101c, v101a
    0x104c: JUMP v567(0x1ceb)

    Begin block 0x1ceb
    prev=[0x1007], succ=[]
    =================================
    0x1ceb_0x0: v1ceb_0 = PHI v58d, vfaf_0
    0x1cec: v1cec(0x40) = CONST 
    0x1cef: v1cef = MLOAD v1cec(0x40)
    0x1cf2: MSTORE v1cef, v1ceb_0
    0x1cf3: v1cf3 = MLOAD v1cec(0x40)
    0x1cf7: v1cf7(0x0) = SUB v1cef, v1cf3
    0x1cf8: v1cf8(0x20) = CONST 
    0x1cfa: v1cfa(0x20) = ADD v1cf8(0x20), v1cf7(0x0)
    0x1cfc: RETURN v1cf3, v1cfa(0x20)

}

function spendAgeOf(address)() public {
    Begin block 0x592
    prev=[], succ=[0x5a4, 0x5a8]
    =================================
    0x593: v593(0x1d1c) = CONST 
    0x596: v596(0x4) = CONST 
    0x599: v599 = CALLDATASIZE 
    0x59a: v59a = SUB v599, v596(0x4)
    0x59b: v59b(0x20) = CONST 
    0x59e: v59e = LT v59a, v59b(0x20)
    0x59f: v59f = ISZERO v59e
    0x5a0: v5a0(0x5a8) = CONST 
    0x5a3: JUMPI v5a0(0x5a8), v59f

    Begin block 0x5a4
    prev=[0x592], succ=[]
    =================================
    0x5a4: v5a4(0x0) = CONST 
    0x5a7: REVERT v5a4(0x0), v5a4(0x0)

    Begin block 0x5a8
    prev=[0x592], succ=[0x104d0x592]
    =================================
    0x5aa: v5aa = CALLDATALOAD v596(0x4)
    0x5ab: v5ab(0x1) = CONST 
    0x5ad: v5ad(0x1) = CONST 
    0x5af: v5af(0xa0) = CONST 
    0x5b1: v5b1(0x10000000000000000000000000000000000000000) = SHL v5af(0xa0), v5ad(0x1)
    0x5b2: v5b2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5b1(0x10000000000000000000000000000000000000000), v5ab(0x1)
    0x5b3: v5b3 = AND v5b2(0xffffffffffffffffffffffffffffffffffffffff), v5aa
    0x5b4: v5b4(0x104d) = CONST 
    0x5b7: JUMP v5b4(0x104d)

    Begin block 0x104d0x592
    prev=[0x5a8], succ=[0x106d0x592, 0x21890x592]
    =================================
    0x104e0x592: v592104e(0x1) = CONST 
    0x10500x592: v5921050(0x1) = CONST 
    0x10520x592: v5921052(0xa0) = CONST 
    0x10540x592: v5921054(0x10000000000000000000000000000000000000000) = SHL v5921052(0xa0), v5921050(0x1)
    0x10550x592: v5921055(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5921054(0x10000000000000000000000000000000000000000), v592104e(0x1)
    0x10570x592: v5921057 = AND v5b3, v5921055(0xffffffffffffffffffffffffffffffffffffffff)
    0x10580x592: v5921058(0x0) = CONST 
    0x105c0x592: MSTORE v5921058(0x0), v5921057
    0x105d0x592: v592105d(0x3a) = CONST 
    0x105f0x592: v592105f(0x20) = CONST 
    0x10610x592: MSTORE v592105f(0x20), v592105d(0x3a)
    0x10620x592: v5921062(0x40) = CONST 
    0x10650x592: v5921065 = SHA3 v5921058(0x0), v5921062(0x40)
    0x10660x592: v5921066 = SLOAD v5921065
    0x10680x592: v5921068 = ISZERO v5921066
    0x10690x592: v5921069(0x2189) = CONST 
    0x106c0x592: JUMPI v5921069(0x2189), v5921068

    Begin block 0x106d0x592
    prev=[0x104d0x592], succ=[0x72c0x592]
    =================================
    0x106d0x592: v592106d(0x72c) = CONST 
    0x10700x592: v5921070 = TIMESTAMP 
    0x10720x592: v5921072(0x116f) = CONST 
    0x10750x592: v5921075_0 = CALLPRIVATE v5921072(0x116f), v5921066, v5921070, v592106d(0x72c)

    Begin block 0x72c0x592
    prev=[0x106d0x592], succ=[0x72f0x592]
    =================================

    Begin block 0x72f0x592
    prev=[0x72c0x592], succ=[0x1d1c]
    =================================
    0x7330x592: JUMP v593(0x1d1c)

    Begin block 0x1d1c
    prev=[0x72f0x592, 0x21890x592], succ=[]
    =================================
    0x1d1c_0x0: v1d1c_0 = PHI v5921075_0, v5921066
    0x1d1d: v1d1d(0x40) = CONST 
    0x1d20: v1d20 = MLOAD v1d1d(0x40)
    0x1d23: MSTORE v1d20, v1d1c_0
    0x1d24: v1d24 = MLOAD v1d1d(0x40)
    0x1d28: v1d28(0x0) = SUB v1d20, v1d24
    0x1d29: v1d29(0x20) = CONST 
    0x1d2b: v1d2b(0x20) = ADD v1d29(0x20), v1d28(0x0)
    0x1d2d: RETURN v1d24, v1d2b(0x20)

    Begin block 0x21890x592
    prev=[0x104d0x592], succ=[0x1d1c]
    =================================
    0x218d0x592: JUMP v593(0x1d1c)

}

function exit()() public {
    Begin block 0x5b8
    prev=[], succ=[0x1076B0x5b8]
    =================================
    0x5b9: v5b9(0x1d4d) = CONST 
    0x5bc: v5bc(0x1076) = CONST 
    0x5bf: JUMP v5bc(0x1076), v5b9(0x1d4d)

    Begin block 0x1076B0x5b8
    prev=[0x5b8], succ=[0x7340x1076B0x5b8]
    =================================
    0x1077S0x5b8: v1077V5b8 = CALLER 
    0x1078S0x5b8: v1078V5b8(0x0) = CONST 
    0x107cS0x5b8: MSTORE v1078V5b8(0x0), v1077V5b8
    0x107dS0x5b8: v107dV5b8(0x38) = CONST 
    0x107fS0x5b8: v107fV5b8(0x20) = CONST 
    0x1081S0x5b8: MSTORE v107fV5b8(0x20), v107dV5b8(0x38)
    0x1082S0x5b8: v1082V5b8(0x40) = CONST 
    0x1085S0x5b8: v1085V5b8 = SHA3 v1078V5b8(0x0), v1082V5b8(0x40)
    0x1086S0x5b8: v1086V5b8 = SLOAD v1085V5b8
    0x1087S0x5b8: v1087V5b8(0x108f) = CONST 
    0x108bS0x5b8: v108bV5b8(0x734) = CONST 
    0x108eS0x5b8: JUMP v108bV5b8(0x734)

    Begin block 0x7340x1076B0x5b8
    prev=[0x1076B0x5b8], succ=[0x7410x1076B0x5b8]
    =================================
    0x7350x1076S0x5b8: v1076735V5b8(0x37) = CONST 
    0x7370x1076S0x5b8: v1076737V5b8 = SLOAD v1076735V5b8(0x37)
    0x7380x1076S0x5b8: v1076738V5b8(0x741) = CONST 
    0x73d0x1076S0x5b8: v107673dV5b8(0x116f) = CONST 
    0x7400x1076S0x5b8: v1076740_0V5b8 = CALLPRIVATE v107673dV5b8(0x116f), v1086V5b8, v1076737V5b8, v1076738V5b8(0x741)

    Begin block 0x7410x1076B0x5b8
    prev=[0x7340x1076B0x5b8], succ=[0x75e0x1076B0x5b8]
    =================================
    0x7420x1076S0x5b8: v1076742V5b8(0x37) = CONST 
    0x7440x1076S0x5b8: SSTORE v1076742V5b8(0x37), v1076740_0V5b8
    0x7450x1076S0x5b8: v1076745V5b8 = CALLER 
    0x7460x1076S0x5b8: v1076746V5b8(0x0) = CONST 
    0x74a0x1076S0x5b8: MSTORE v1076746V5b8(0x0), v1076745V5b8
    0x74b0x1076S0x5b8: v107674bV5b8(0x38) = CONST 
    0x74d0x1076S0x5b8: v107674dV5b8(0x20) = CONST 
    0x74f0x1076S0x5b8: MSTORE v107674dV5b8(0x20), v107674bV5b8(0x38)
    0x7500x1076S0x5b8: v1076750V5b8(0x40) = CONST 
    0x7530x1076S0x5b8: v1076753V5b8 = SHA3 v1076746V5b8(0x0), v1076750V5b8(0x40)
    0x7540x1076S0x5b8: v1076754V5b8 = SLOAD v1076753V5b8
    0x7550x1076S0x5b8: v1076755V5b8(0x75e) = CONST 
    0x75a0x1076S0x5b8: v107675aV5b8(0x116f) = CONST 
    0x75d0x1076S0x5b8: v107675d_0V5b8 = CALLPRIVATE v107675aV5b8(0x116f), v1086V5b8, v1076754V5b8, v1076755V5b8(0x75e)

    Begin block 0x75e0x1076B0x5b8
    prev=[0x7410x1076B0x5b8], succ=[0x78a0x1076B0x5b8]
    =================================
    0x75f0x1076S0x5b8: v107675fV5b8 = CALLER 
    0x7600x1076S0x5b8: v1076760V5b8(0x0) = CONST 
    0x7640x1076S0x5b8: MSTORE v1076760V5b8(0x0), v107675fV5b8
    0x7650x1076S0x5b8: v1076765V5b8(0x38) = CONST 
    0x7670x1076S0x5b8: v1076767V5b8(0x20) = CONST 
    0x7690x1076S0x5b8: MSTORE v1076767V5b8(0x20), v1076765V5b8(0x38)
    0x76a0x1076S0x5b8: v107676aV5b8(0x40) = CONST 
    0x76d0x1076S0x5b8: v107676dV5b8 = SHA3 v1076760V5b8(0x0), v107676aV5b8(0x40)
    0x7710x1076S0x5b8: SSTORE v107676dV5b8, v107675d_0V5b8
    0x7720x1076S0x5b8: v1076772V5b8(0x36) = CONST 
    0x7740x1076S0x5b8: v1076774V5b8 = SLOAD v1076772V5b8(0x36)
    0x7750x1076S0x5b8: v1076775V5b8(0x78a) = CONST 
    0x7790x1076S0x5b8: v1076779V5b8(0x1) = CONST 
    0x77b0x1076S0x5b8: v107677bV5b8(0x1) = CONST 
    0x77d0x1076S0x5b8: v107677dV5b8(0xa0) = CONST 
    0x77f0x1076S0x5b8: v107677fV5b8(0x10000000000000000000000000000000000000000) = SHL v107677dV5b8(0xa0), v107677bV5b8(0x1)
    0x7800x1076S0x5b8: v1076780V5b8(0xffffffffffffffffffffffffffffffffffffffff) = SUB v107677fV5b8(0x10000000000000000000000000000000000000000), v1076779V5b8(0x1)
    0x7830x1076S0x5b8: v1076783V5b8 = AND v1076774V5b8, v1076780V5b8(0xffffffffffffffffffffffffffffffffffffffff)
    0x7860x1076S0x5b8: v1076786V5b8(0x11b1) = CONST 
    0x7890x1076S0x5b8: CALLPRIVATE v1076786V5b8(0x11b1), v1086V5b8, v107675fV5b8, v1076783V5b8, v1076775V5b8(0x78a)

    Begin block 0x78a0x1076B0x5b8
    prev=[0x75e0x1076B0x5b8], succ=[0x108fB0x5b8]
    =================================
    0x78b0x1076S0x5b8: v107678bV5b8(0x40) = CONST 
    0x78e0x1076S0x5b8: v107678eV5b8 = MLOAD v107678bV5b8(0x40)
    0x7910x1076S0x5b8: MSTORE v107678eV5b8, v1086V5b8
    0x7930x1076S0x5b8: v1076793V5b8 = MLOAD v107678bV5b8(0x40)
    0x7940x1076S0x5b8: v1076794V5b8 = CALLER 
    0x7960x1076S0x5b8: v1076796V5b8(0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5) = CONST 
    0x7bb0x1076S0x5b8: v10767bbV5b8(0x0) = SUB v107678eV5b8, v1076793V5b8
    0x7bc0x1076S0x5b8: v10767bcV5b8(0x20) = CONST 
    0x7be0x1076S0x5b8: v10767beV5b8(0x20) = ADD v10767bcV5b8(0x20), v10767bbV5b8(0x0)
    0x7c00x1076S0x5b8: LOG2 v1076793V5b8, v10767beV5b8(0x20), v1076796V5b8(0x7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5), v1076794V5b8
    0x7c20x1076S0x5b8: JUMP v1087V5b8(0x108f)

    Begin block 0x108fB0x5b8
    prev=[0x78a0x1076B0x5b8], succ=[0x21ceB0x108fB0x5b8]
    =================================
    0x1090S0x5b8: v1090V5b8(0x21ad) = CONST 
    0x1093S0x5b8: v1093V5b8(0x21ce) = CONST 
    0x1096S0x5b8: JUMP v1093V5b8(0x21ce), v1090V5b8(0x21ad)

    Begin block 0x21ceB0x108fB0x5b8
    prev=[0x108fB0x5b8], succ=[0x21adB0x5b8]
    =================================
    0x21cfS0x108fS0x5b8: JUMP v1090V5b8(0x21ad)

    Begin block 0x21adB0x5b8
    prev=[0x21ceB0x108fB0x5b8], succ=[0x1d4d]
    =================================
    0x21aeS0x5b8: JUMP v5b9(0x1d4d)

    Begin block 0x1d4d
    prev=[0x21adB0x5b8], succ=[]
    =================================
    0x1d4e: STOP 

}

function token()() public {
    Begin block 0x5c0
    prev=[], succ=[0x1097]
    =================================
    0x5c1: v5c1(0x1d6e) = CONST 
    0x5c4: v5c4(0x1097) = CONST 
    0x5c7: JUMP v5c4(0x1097)

    Begin block 0x1097
    prev=[0x5c0], succ=[0x1d6e]
    =================================
    0x1098: v1098(0x36) = CONST 
    0x109a: v109a = SLOAD v1098(0x36)
    0x109b: v109b(0x1) = CONST 
    0x109d: v109d(0x1) = CONST 
    0x109f: v109f(0xa0) = CONST 
    0x10a1: v10a1(0x10000000000000000000000000000000000000000) = SHL v109f(0xa0), v109d(0x1)
    0x10a2: v10a2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10a1(0x10000000000000000000000000000000000000000), v109b(0x1)
    0x10a3: v10a3 = AND v10a2(0xffffffffffffffffffffffffffffffffffffffff), v109a
    0x10a5: JUMP v5c1(0x1d6e)

    Begin block 0x1d6e
    prev=[0x1097], succ=[]
    =================================
    0x1d6f: v1d6f(0x40) = CONST 
    0x1d72: v1d72 = MLOAD v1d6f(0x40)
    0x1d73: v1d73(0x1) = CONST 
    0x1d75: v1d75(0x1) = CONST 
    0x1d77: v1d77(0xa0) = CONST 
    0x1d79: v1d79(0x10000000000000000000000000000000000000000) = SHL v1d77(0xa0), v1d75(0x1)
    0x1d7a: v1d7a(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1d79(0x10000000000000000000000000000000000000000), v1d73(0x1)
    0x1d7d: v1d7d = AND v10a3, v1d7a(0xffffffffffffffffffffffffffffffffffffffff)
    0x1d7f: MSTORE v1d72, v1d7d
    0x1d80: v1d80 = MLOAD v1d6f(0x40)
    0x1d84: v1d84(0x0) = SUB v1d72, v1d80
    0x1d85: v1d85(0x20) = CONST 
    0x1d87: v1d87(0x20) = ADD v1d85(0x20), v1d84(0x0)
    0x1d89: RETURN v1d80, v1d87(0x20)

}

function 0xa13(0xa13arg0x0, 0xa13arg0x1) private {
    Begin block 0xa13
    prev=[], succ=[0xa330xa13, 0x1f850xa13]
    =================================
    0xa14: va14(0x1) = CONST 
    0xa16: va16(0x1) = CONST 
    0xa18: va18(0xa0) = CONST 
    0xa1a: va1a(0x10000000000000000000000000000000000000000) = SHL va18(0xa0), va16(0x1)
    0xa1b: va1b(0xffffffffffffffffffffffffffffffffffffffff) = SUB va1a(0x10000000000000000000000000000000000000000), va14(0x1)
    0xa1d: va1d = AND va13arg0, va1b(0xffffffffffffffffffffffffffffffffffffffff)
    0xa1e: va1e(0x0) = CONST 
    0xa22: MSTORE va1e(0x0), va1d
    0xa23: va23(0x39) = CONST 
    0xa25: va25(0x20) = CONST 
    0xa27: MSTORE va25(0x20), va23(0x39)
    0xa28: va28(0x40) = CONST 
    0xa2b: va2b = SHA3 va1e(0x0), va28(0x40)
    0xa2c: va2c = SLOAD va2b
    0xa2e: va2e = ISZERO va2c
    0xa2f: va2f(0x1f85) = CONST 
    0xa32: JUMPI va2f(0x1f85), va2e

    Begin block 0xa330xa13
    prev=[0xa13], succ=[0x72c0xa13]
    =================================
    0xa330xa13: va13a33(0x72c) = CONST 
    0xa360xa13: va13a36 = TIMESTAMP 
    0xa380xa13: va13a38(0x116f) = CONST 
    0xa3b0xa13: va13a3b_0 = CALLPRIVATE va13a38(0x116f), va2c, va13a36, va13a33(0x72c)

    Begin block 0x72c0xa13
    prev=[0xa330xa13], succ=[0x72f0xa13]
    =================================

    Begin block 0x72f0xa13
    prev=[0x72c0xa13], succ=[]
    =================================
    0x7330xa13: RETURNPRIVATE va13arg1, va13a3b_0

    Begin block 0x1f850xa13
    prev=[0xa13], succ=[]
    =================================
    0x1f890xa13: RETURNPRIVATE va13arg1, va2c

}

function 0xad4(0xad4arg0x0) private {
    Begin block 0xad4
    prev=[], succ=[0xb24, 0xb28]
    =================================
    0xad5: vad5(0x36) = CONST 
    0xad7: vad7 = SLOAD vad5(0x36)
    0xad8: vad8(0x35) = CONST 
    0xada: vada = SLOAD vad8(0x35)
    0xadb: vadb(0x40) = CONST 
    0xade: vade = MLOAD vadb(0x40)
    0xadf: vadf(0x70a08231) = CONST 
    0xae4: vae4(0xe0) = CONST 
    0xae6: vae6(0x70a0823100000000000000000000000000000000000000000000000000000000) = SHL vae4(0xe0), vadf(0x70a08231)
    0xae8: MSTORE vade, vae6(0x70a0823100000000000000000000000000000000000000000000000000000000)
    0xae9: vae9(0x1) = CONST 
    0xaeb: vaeb(0x1) = CONST 
    0xaed: vaed(0xa0) = CONST 
    0xaef: vaef(0x10000000000000000000000000000000000000000) = SHL vaed(0xa0), vaeb(0x1)
    0xaf0: vaf0(0xffffffffffffffffffffffffffffffffffffffff) = SUB vaef(0x10000000000000000000000000000000000000000), vae9(0x1)
    0xaf3: vaf3 = AND vaf0(0xffffffffffffffffffffffffffffffffffffffff), vada
    0xaf4: vaf4(0x4) = CONST 
    0xaf7: vaf7 = ADD vade, vaf4(0x4)
    0xaf8: MSTORE vaf7, vaf3
    0xafa: vafa = MLOAD vadb(0x40)
    0xafb: vafb(0x0) = CONST 
    0xafe: vafe(0xbcb) = CONST 
    0xb02: vb02 = AND vaf0(0xffffffffffffffffffffffffffffffffffffffff), vad7
    0xb04: vb04(0x70a08231) = CONST 
    0xb0a: vb0a(0x24) = CONST 
    0xb0e: vb0e = ADD vade, vb0a(0x24)
    0xb10: vb10(0x20) = CONST 
    0xb17: vb17(0x0) = SUB vade, vafa
    0xb18: vb18(0x24) = ADD vb17(0x0), vb0a(0x24)
    0xb1c: vb1c = EXTCODESIZE vb02
    0xb1d: vb1d = ISZERO vb1c
    0xb1f: vb1f = ISZERO vb1d
    0xb20: vb20(0xb28) = CONST 
    0xb23: JUMPI vb20(0xb28), vb1f

    Begin block 0xb24
    prev=[0xad4], succ=[]
    =================================
    0xb24: vb24(0x0) = CONST 
    0xb27: REVERT vb24(0x0), vb24(0x0)

    Begin block 0xb28
    prev=[0xad4], succ=[0xb33, 0xb3c]
    =================================
    0xb2a: vb2a = GAS 
    0xb2b: vb2b = STATICCALL vb2a, vb02, vafa, vb18(0x24), vafa, vb10(0x20)
    0xb2c: vb2c = ISZERO vb2b
    0xb2e: vb2e = ISZERO vb2c
    0xb2f: vb2f(0xb3c) = CONST 
    0xb32: JUMPI vb2f(0xb3c), vb2e

    Begin block 0xb33
    prev=[0xb28], succ=[]
    =================================
    0xb33: vb33 = RETURNDATASIZE 
    0xb34: vb34(0x0) = CONST 
    0xb37: RETURNDATACOPY vb34(0x0), vb34(0x0), vb33
    0xb38: vb38 = RETURNDATASIZE 
    0xb39: vb39(0x0) = CONST 
    0xb3b: REVERT vb39(0x0), vb38

    Begin block 0xb3c
    prev=[0xb28], succ=[0xb4e, 0xb52]
    =================================
    0xb41: vb41(0x40) = CONST 
    0xb43: vb43 = MLOAD vb41(0x40)
    0xb44: vb44 = RETURNDATASIZE 
    0xb45: vb45(0x20) = CONST 
    0xb48: vb48 = LT vb44, vb45(0x20)
    0xb49: vb49 = ISZERO vb48
    0xb4a: vb4a(0xb52) = CONST 
    0xb4d: JUMPI vb4a(0xb52), vb49

    Begin block 0xb4e
    prev=[0xb3c], succ=[]
    =================================
    0xb4e: vb4e(0x0) = CONST 
    0xb51: REVERT vb4e(0x0), vb4e(0x0)

    Begin block 0xb52
    prev=[0xb3c], succ=[0xb95, 0xb99]
    =================================
    0xb54: vb54 = MLOAD vb43
    0xb55: vb55(0x36) = CONST 
    0xb57: vb57 = SLOAD vb55(0x36)
    0xb58: vb58(0x40) = CONST 
    0xb5b: vb5b = MLOAD vb58(0x40)
    0xb5c: vb5c(0x18160ddd) = CONST 
    0xb61: vb61(0xe0) = CONST 
    0xb63: vb63(0x18160ddd00000000000000000000000000000000000000000000000000000000) = SHL vb61(0xe0), vb5c(0x18160ddd)
    0xb65: MSTORE vb5b, vb63(0x18160ddd00000000000000000000000000000000000000000000000000000000)
    0xb67: vb67 = MLOAD vb58(0x40)
    0xb68: vb68(0x1) = CONST 
    0xb6a: vb6a(0x1) = CONST 
    0xb6c: vb6c(0xa0) = CONST 
    0xb6e: vb6e(0x10000000000000000000000000000000000000000) = SHL vb6c(0xa0), vb6a(0x1)
    0xb6f: vb6f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb6e(0x10000000000000000000000000000000000000000), vb68(0x1)
    0xb72: vb72 = AND vb57, vb6f(0xffffffffffffffffffffffffffffffffffffffff)
    0xb74: vb74(0x18160ddd) = CONST 
    0xb7a: vb7a(0x4) = CONST 
    0xb7e: vb7e = ADD vb5b, vb7a(0x4)
    0xb80: vb80(0x20) = CONST 
    0xb88: vb88(0x0) = SUB vb5b, vb67
    0xb89: vb89(0x4) = ADD vb88(0x0), vb7a(0x4)
    0xb8d: vb8d = EXTCODESIZE vb72
    0xb8e: vb8e = ISZERO vb8d
    0xb90: vb90 = ISZERO vb8e
    0xb91: vb91(0xb99) = CONST 
    0xb94: JUMPI vb91(0xb99), vb90

    Begin block 0xb95
    prev=[0xb52], succ=[]
    =================================
    0xb95: vb95(0x0) = CONST 
    0xb98: REVERT vb95(0x0), vb95(0x0)

    Begin block 0xb99
    prev=[0xb52], succ=[0xba4, 0xbad]
    =================================
    0xb9b: vb9b = GAS 
    0xb9c: vb9c = STATICCALL vb9b, vb72, vb67, vb89(0x4), vb67, vb80(0x20)
    0xb9d: vb9d = ISZERO vb9c
    0xb9f: vb9f = ISZERO vb9d
    0xba0: vba0(0xbad) = CONST 
    0xba3: JUMPI vba0(0xbad), vb9f

    Begin block 0xba4
    prev=[0xb99], succ=[]
    =================================
    0xba4: vba4 = RETURNDATASIZE 
    0xba5: vba5(0x0) = CONST 
    0xba8: RETURNDATACOPY vba5(0x0), vba5(0x0), vba4
    0xba9: vba9 = RETURNDATASIZE 
    0xbaa: vbaa(0x0) = CONST 
    0xbac: REVERT vbaa(0x0), vba9

    Begin block 0xbad
    prev=[0xb99], succ=[0xbbf, 0xbc3]
    =================================
    0xbb2: vbb2(0x40) = CONST 
    0xbb4: vbb4 = MLOAD vbb2(0x40)
    0xbb5: vbb5 = RETURNDATASIZE 
    0xbb6: vbb6(0x20) = CONST 
    0xbb9: vbb9 = LT vbb5, vbb6(0x20)
    0xbba: vbba = ISZERO vbb9
    0xbbb: vbbb(0xbc3) = CONST 
    0xbbe: JUMPI vbbb(0xbc3), vbba

    Begin block 0xbbf
    prev=[0xbad], succ=[]
    =================================
    0xbbf: vbbf(0x0) = CONST 
    0xbc2: REVERT vbbf(0x0), vbbf(0x0)

    Begin block 0xbc3
    prev=[0xbad], succ=[0x116f0xad4]
    =================================
    0xbc5: vbc5 = MLOAD vbb4
    0xbc7: vbc7(0x116f) = CONST 
    0xbca: JUMP vbc7(0x116f)

    Begin block 0x116f0xad4
    prev=[0xbc3], succ=[0x15e90xad4]
    =================================
    0x11700xad4: vad41170(0x0) = CONST 
    0x11720xad4: vad41172(0x225e) = CONST 
    0x11770xad4: vad41177(0x40) = CONST 
    0x11790xad4: vad41179 = MLOAD vad41177(0x40)
    0x117b0xad4: vad4117b(0x40) = CONST 
    0x117d0xad4: vad4117d = ADD vad4117b(0x40), vad41179
    0x117e0xad4: vad4117e(0x40) = CONST 
    0x11800xad4: MSTORE vad4117e(0x40), vad4117d
    0x11820xad4: vad41182(0x1e) = CONST 
    0x11850xad4: MSTORE vad41179, vad41182(0x1e)
    0x11860xad4: vad41186(0x20) = CONST 
    0x11880xad4: vad41188 = ADD vad41186(0x20), vad41179
    0x11890xad4: vad41189(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000) = CONST 
    0x11ab0xad4: MSTORE vad41188, vad41189(0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000)
    0x11ad0xad4: vad411ad(0x15e9) = CONST 
    0x11b00xad4: JUMP vad411ad(0x15e9)

    Begin block 0x15e90xad4
    prev=[0x116f0xad4], succ=[0x15f50xad4, 0x163b0xad4]
    =================================
    0x15ea0xad4: vad415ea(0x0) = CONST 
    0x15ef0xad4: vad415ef = GT vb54, vbc5
    0x15f00xad4: vad415f0 = ISZERO vad415ef
    0x15f10xad4: vad415f1(0x163b) = CONST 
    0x15f40xad4: JUMPI vad415f1(0x163b), vad415f0

    Begin block 0x15f50xad4
    prev=[0x15e90xad4], succ=[0x162c0xad4, 0x15980xad4]
    =================================
    0x15f50xad4: vad415f5(0x40) = CONST 
    0x15f70xad4: vad415f7 = MLOAD vad415f5(0x40)
    0x15f80xad4: vad415f8(0x461bcd) = CONST 
    0x15fc0xad4: vad415fc(0xe5) = CONST 
    0x15fe0xad4: vad415fe(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL vad415fc(0xe5), vad415f8(0x461bcd)
    0x16000xad4: MSTORE vad415f7, vad415fe(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x16010xad4: vad41601(0x20) = CONST 
    0x16030xad4: vad41603(0x4) = CONST 
    0x16060xad4: vad41606 = ADD vad415f7, vad41603(0x4)
    0x16090xad4: MSTORE vad41606, vad41601(0x20)
    0x160b0xad4: vad4160b(0x1e) = MLOAD vad41179
    0x160c0xad4: vad4160c(0x24) = CONST 
    0x160f0xad4: vad4160f = ADD vad415f7, vad4160c(0x24)
    0x16100xad4: MSTORE vad4160f, vad4160b(0x1e)
    0x16120xad4: vad41612(0x1e) = MLOAD vad41179
    0x16170xad4: vad41617(0x44) = CONST 
    0x161b0xad4: vad4161b = ADD vad415f7, vad41617(0x44)
    0x161f0xad4: vad4161f = ADD vad41179, vad41601(0x20)
    0x16240xad4: vad41624(0x0) = CONST 
    0x16270xad4: vad41627 = ISZERO vad41612(0x1e)
    0x16280xad4: vad41628(0x1598) = CONST 
    0x162b0xad4: JUMPI vad41628(0x1598), vad41627

    Begin block 0x162c0xad4
    prev=[0x15f50xad4], succ=[0x15800xad4]
    =================================
    0x162e0xad4: vad4162e = ADD vad41624(0x0), vad4161f
    0x162f0xad4: vad4162f = MLOAD vad4162e
    0x16320xad4: vad41632 = ADD vad41624(0x0), vad4161b
    0x16330xad4: MSTORE vad41632, vad4162f
    0x16340xad4: vad41634(0x20) = CONST 
    0x16360xad4: vad41636(0x20) = ADD vad41634(0x20), vad41624(0x0)
    0x16370xad4: vad41637(0x1580) = CONST 
    0x163a0xad4: JUMP vad41637(0x1580)

    Begin block 0x15800xad4
    prev=[0x162c0xad4, 0x15890xad4], succ=[0x15980xad4, 0x15890xad4]
    =================================
    0x15800xad4_0x0: v1580ad4_0 = PHI vad41636(0x20), vad41593
    0x15830xad4: vad41583 = LT v1580ad4_0, vad41612(0x1e)
    0x15840xad4: vad41584 = ISZERO vad41583
    0x15850xad4: vad41585(0x1598) = CONST 
    0x15880xad4: JUMPI vad41585(0x1598), vad41584

    Begin block 0x15980xad4
    prev=[0x15f50xad4, 0x15800xad4], succ=[0x15c50xad4, 0x15ac0xad4]
    =================================
    0x15a10xad4: vad415a1 = ADD vad41612(0x1e), vad4161b
    0x15a30xad4: vad415a3(0x1f) = CONST 
    0x15a50xad4: vad415a5(0x1e) = AND vad415a3(0x1f), vad41612(0x1e)
    0x15a70xad4: vad415a7 = ISZERO vad415a5(0x1e)
    0x15a80xad4: vad415a8(0x15c5) = CONST 
    0x15ab0xad4: JUMPI vad415a8(0x15c5), vad415a7

    Begin block 0x15c50xad4
    prev=[0x15980xad4, 0x15ac0xad4], succ=[]
    =================================
    0x15c50xad4_0x1: v15c5ad4_1 = PHI vad415c2, vad415a1
    0x15cb0xad4: vad415cb(0x40) = CONST 
    0x15cd0xad4: vad415cd = MLOAD vad415cb(0x40)
    0x15d00xad4: vad415d0 = SUB v15c5ad4_1, vad415cd
    0x15d20xad4: REVERT vad415cd, vad415d0

    Begin block 0x15ac0xad4
    prev=[0x15980xad4], succ=[0x15c50xad4]
    =================================
    0x15ae0xad4: vad415ae = SUB vad415a1, vad415a5(0x1e)
    0x15b00xad4: vad415b0 = MLOAD vad415ae
    0x15b10xad4: vad415b1(0x1) = CONST 
    0x15b40xad4: vad415b4(0x20) = CONST 
    0x15b60xad4: vad415b6(0x2) = SUB vad415b4(0x20), vad415a5(0x1e)
    0x15b70xad4: vad415b7(0x100) = CONST 
    0x15ba0xad4: vad415ba(0x10000) = EXP vad415b7(0x100), vad415b6(0x2)
    0x15bb0xad4: vad415bb(0xffff) = SUB vad415ba(0x10000), vad415b1(0x1)
    0x15bc0xad4: vad415bc = NOT vad415bb(0xffff)
    0x15bd0xad4: vad415bd = AND vad415bc, vad415b0
    0x15bf0xad4: MSTORE vad415ae, vad415bd
    0x15c00xad4: vad415c0(0x20) = CONST 
    0x15c20xad4: vad415c2 = ADD vad415c0(0x20), vad415ae

    Begin block 0x15890xad4
    prev=[0x15800xad4], succ=[0x15800xad4]
    =================================
    0x15890xad4_0x0: v1589ad4_0 = PHI vad41636(0x20), vad41593
    0x158b0xad4: vad4158b = ADD v1589ad4_0, vad4161f
    0x158c0xad4: vad4158c = MLOAD vad4158b
    0x158f0xad4: vad4158f = ADD v1589ad4_0, vad4161b
    0x15900xad4: MSTORE vad4158f, vad4158c
    0x15910xad4: vad41591(0x20) = CONST 
    0x15930xad4: vad41593 = ADD vad41591(0x20), v1589ad4_0
    0x15940xad4: vad41594(0x1580) = CONST 
    0x15970xad4: JUMP vad41594(0x1580)

    Begin block 0x163b0xad4
    prev=[0x15e90xad4], succ=[0x225e0xad4]
    =================================
    0x16400xad4: vad41640 = SUB vbc5, vb54
    0x16420xad4: JUMP vad41172(0x225e)

    Begin block 0x225e0xad4
    prev=[0x163b0xad4], succ=[0xbcb]
    =================================
    0x22640xad4: JUMP vafe(0xbcb)

    Begin block 0xbcb
    prev=[0x225e0xad4], succ=[]
    =================================
    0xbcf: RETURNPRIVATE vad4arg0, vad41640

}

function 0xe7c(0xe7carg0x0, 0xe7carg0x1) private {
    Begin block 0xe7c
    prev=[], succ=[0xe8a0xe7c]
    =================================
    0xe7d: ve7d(0x0) = CONST 
    0xe7f: ve7f(0x72c) = CONST 
    0xe82: ve82(0xe8a) = CONST 
    0xe86: ve86(0x104d) = CONST 
    0xe89: ve89_0 = CALLPRIVATE ve86(0x104d), ve7carg0, ve82(0xe8a)

    Begin block 0xe8a0xe7c
    prev=[0xe7c], succ=[0x72c0xe7c]
    =================================
    0xe8b0xe7c: ve7ce8b(0x1) = CONST 
    0xe8d0xe7c: ve7ce8d(0x1) = CONST 
    0xe8f0xe7c: ve7ce8f(0xa0) = CONST 
    0xe910xe7c: ve7ce91(0x10000000000000000000000000000000000000000) = SHL ve7ce8f(0xa0), ve7ce8d(0x1)
    0xe920xe7c: ve7ce92(0xffffffffffffffffffffffffffffffffffffffff) = SUB ve7ce91(0x10000000000000000000000000000000000000000), ve7ce8b(0x1)
    0xe940xe7c: ve7ce94 = AND ve7carg0, ve7ce92(0xffffffffffffffffffffffffffffffffffffffff)
    0xe950xe7c: ve7ce95(0x0) = CONST 
    0xe990xe7c: MSTORE ve7ce95(0x0), ve7ce94
    0xe9a0xe7c: ve7ce9a(0x38) = CONST 
    0xe9c0xe7c: ve7ce9c(0x20) = CONST 
    0xe9e0xe7c: MSTORE ve7ce9c(0x20), ve7ce9a(0x38)
    0xe9f0xe7c: ve7ce9f(0x40) = CONST 
    0xea20xe7c: ve7cea2 = SHA3 ve7ce95(0x0), ve7ce9f(0x40)
    0xea30xe7c: ve7cea3 = SLOAD ve7cea2
    0xea50xe7c: ve7cea5(0x10cd) = CONST 
    0xea80xe7c: ve7cea8_0 = CALLPRIVATE ve7cea5(0x10cd), ve89_0, ve7cea3, ve7f(0x72c)

    Begin block 0x72c0xe7c
    prev=[0xe8a0xe7c], succ=[0x72f0xe7c]
    =================================

    Begin block 0x72f0xe7c
    prev=[0x72c0xe7c], succ=[]
    =================================
    0x7330xe7c: RETURNPRIVATE ve7carg1, ve7cea8_0

}

