function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xc, 0x10]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5 = CALLVALUE 
    0x7: v7 = ISZERO v5
    0x8: v8(0x10) = CONST 
    0xb: JUMPI v8(0x10), v7

    Begin block 0xc
    prev=[0x0], succ=[]
    =================================
    0xc: vc(0x0) = CONST 
    0xf: REVERT vc(0x0), vc(0x0)

    Begin block 0x10
    prev=[0x0], succ=[0x1a, 0x1373]
    =================================
    0x12: v12(0x4) = CONST 
    0x14: v14 = CALLDATASIZE 
    0x15: v15 = LT v14, v12(0x4)
    0x1312: v1312(0x1373) = CONST 
    0x1313: JUMPI v1312(0x1373), v15

    Begin block 0x1a
    prev=[0x10], succ=[0xad, 0x2b]
    =================================
    0x1a: v1a(0x0) = CONST 
    0x1c: v1c = CALLDATALOAD v1a(0x0)
    0x1d: v1d(0xe0) = CONST 
    0x1f: v1f = SHR v1d(0xe0), v1c
    0x21: v21(0x8129fc1c) = CONST 
    0x26: v26 = GT v21(0x8129fc1c), v1f
    0x27: v27(0xad) = CONST 
    0x2a: JUMPI v27(0xad), v26

    Begin block 0xad
    prev=[0x1a], succ=[0xf4, 0xb9]
    =================================
    0xaf: vaf(0x313ce567) = CONST 
    0xb4: vb4 = GT vaf(0x313ce567), v1f
    0xb5: vb5(0xf4) = CONST 
    0xb8: JUMPI vb5(0xf4), vb4

    Begin block 0xf4
    prev=[0xad], succ=[0x100, 0x133a]
    =================================
    0xf6: vf6(0x6fdde03) = CONST 
    0xfb: vfb = EQ vf6(0x6fdde03), v1f
    0x1332: v1332(0x133a) = CONST 
    0x1333: JUMPI v1332(0x133a), vfb

    Begin block 0x100
    prev=[0xf4], succ=[0x133d, 0x10b]
    =================================
    0x101: v101(0x95ea7b3) = CONST 
    0x106: v106 = EQ v101(0x95ea7b3), v1f
    0x1334: v1334(0x133d) = CONST 
    0x1335: JUMPI v1334(0x133d), v106

    Begin block 0x133d
    prev=[0x100], succ=[]
    =================================
    0x133e: v133e(0x1a3) = CONST 
    0x133f: CALLPRIVATE v133e(0x1a3)

    Begin block 0x10b
    prev=[0x100], succ=[0x1340, 0x116]
    =================================
    0x10c: v10c(0x18160ddd) = CONST 
    0x111: v111 = EQ v10c(0x18160ddd), v1f
    0x1336: v1336(0x1340) = CONST 
    0x1337: JUMPI v1336(0x1340), v111

    Begin block 0x1340
    prev=[0x10b], succ=[]
    =================================
    0x1341: v1341(0x1e3) = CONST 
    0x1342: CALLPRIVATE v1341(0x1e3)

    Begin block 0x116
    prev=[0x10b], succ=[0x1343, 0x121]
    =================================
    0x117: v117(0x23b872dd) = CONST 
    0x11c: v11c = EQ v117(0x23b872dd), v1f
    0x1338: v1338(0x1343) = CONST 
    0x1339: JUMPI v1338(0x1343), v11c

    Begin block 0x1343
    prev=[0x116], succ=[]
    =================================
    0x1344: v1344(0x1fd) = CONST 
    0x1345: CALLPRIVATE v1344(0x1fd)

    Begin block 0x121
    prev=[0x116], succ=[]
    =================================
    0x122: v122(0x0) = CONST 
    0x125: REVERT v122(0x0), v122(0x0)

    Begin block 0x133a
    prev=[0xf4], succ=[]
    =================================
    0x133b: v133b(0x126) = CONST 
    0x133c: CALLPRIVATE v133b(0x126)

    Begin block 0xb9
    prev=[0xad], succ=[0x1346, 0xc4]
    =================================
    0xba: vba(0x313ce567) = CONST 
    0xbf: vbf = EQ vba(0x313ce567), v1f
    0x1328: v1328(0x1346) = CONST 
    0x1329: JUMPI v1328(0x1346), vbf

    Begin block 0x1346
    prev=[0xb9], succ=[]
    =================================
    0x1347: v1347(0x233) = CONST 
    0x1348: CALLPRIVATE v1347(0x233)

    Begin block 0xc4
    prev=[0xb9], succ=[0x1349, 0xcf]
    =================================
    0xc5: vc5(0x378dc3dc) = CONST 
    0xca: vca = EQ vc5(0x378dc3dc), v1f
    0x132a: v132a(0x1349) = CONST 
    0x132b: JUMPI v132a(0x1349), vca

    Begin block 0x1349
    prev=[0xc4], succ=[]
    =================================
    0x134a: v134a(0x23b) = CONST 
    0x134b: CALLPRIVATE v134a(0x23b)

    Begin block 0xcf
    prev=[0xc4], succ=[0x134c, 0xda]
    =================================
    0xd0: vd0(0x4e71e0c8) = CONST 
    0xd5: vd5 = EQ vd0(0x4e71e0c8), v1f
    0x132c: v132c(0x134c) = CONST 
    0x132d: JUMPI v132c(0x134c), vd5

    Begin block 0x134c
    prev=[0xcf], succ=[]
    =================================
    0x134d: v134d(0x243) = CONST 
    0x134e: CALLPRIVATE v134d(0x243)

    Begin block 0xda
    prev=[0xcf], succ=[0x134f, 0xe5]
    =================================
    0xdb: vdb(0x66188463) = CONST 
    0xe0: ve0 = EQ vdb(0x66188463), v1f
    0x132e: v132e(0x134f) = CONST 
    0x132f: JUMPI v132e(0x134f), ve0

    Begin block 0x134f
    prev=[0xda], succ=[]
    =================================
    0x1350: v1350(0x24d) = CONST 
    0x1351: CALLPRIVATE v1350(0x24d)

    Begin block 0xe5
    prev=[0xda], succ=[0xf0, 0x1352]
    =================================
    0xe6: ve6(0x70a08231) = CONST 
    0xeb: veb = EQ ve6(0x70a08231), v1f
    0x1330: v1330(0x1352) = CONST 
    0x1331: JUMPI v1330(0x1352), veb

    Begin block 0xf0
    prev=[0xe5], succ=[0xf0a]
    =================================
    0xf0: vf0(0xf0a) = CONST 
    0xf3: JUMP vf0(0xf0a)

    Begin block 0xf0a
    prev=[0xf0], succ=[]
    =================================
    0xf0b: vf0b(0x0) = CONST 
    0xf0e: REVERT vf0b(0x0), vf0b(0x0)

    Begin block 0x1352
    prev=[0xe5], succ=[]
    =================================
    0x1353: v1353(0x279) = CONST 
    0x1354: CALLPRIVATE v1353(0x279)

    Begin block 0x2b
    prev=[0x1a], succ=[0x71, 0x36]
    =================================
    0x2c: v2c(0xd493b9ac) = CONST 
    0x31: v31 = GT v2c(0xd493b9ac), v1f
    0x32: v32(0x71) = CONST 
    0x35: JUMPI v32(0x71), v31

    Begin block 0x71
    prev=[0x2b], succ=[0x1355, 0x7d]
    =================================
    0x73: v73(0x8129fc1c) = CONST 
    0x78: v78 = EQ v73(0x8129fc1c), v1f
    0x131e: v131e(0x1355) = CONST 
    0x131f: JUMPI v131e(0x1355), v78

    Begin block 0x1355
    prev=[0x71], succ=[]
    =================================
    0x1356: v1356(0x29f) = CONST 
    0x1357: CALLPRIVATE v1356(0x29f)

    Begin block 0x7d
    prev=[0x71], succ=[0x1358, 0x88]
    =================================
    0x7e: v7e(0x8da5cb5b) = CONST 
    0x83: v83 = EQ v7e(0x8da5cb5b), v1f
    0x1320: v1320(0x1358) = CONST 
    0x1321: JUMPI v1320(0x1358), v83

    Begin block 0x1358
    prev=[0x7d], succ=[]
    =================================
    0x1359: v1359(0x2a7) = CONST 
    0x135a: CALLPRIVATE v1359(0x2a7)

    Begin block 0x88
    prev=[0x7d], succ=[0x135b, 0x93]
    =================================
    0x89: v89(0x95d89b41) = CONST 
    0x8e: v8e = EQ v89(0x95d89b41), v1f
    0x1322: v1322(0x135b) = CONST 
    0x1323: JUMPI v1322(0x135b), v8e

    Begin block 0x135b
    prev=[0x88], succ=[]
    =================================
    0x135c: v135c(0x2cb) = CONST 
    0x135d: CALLPRIVATE v135c(0x2cb)

    Begin block 0x93
    prev=[0x88], succ=[0x135e, 0x9e]
    =================================
    0x94: v94(0xa9059cbb) = CONST 
    0x99: v99 = EQ v94(0xa9059cbb), v1f
    0x1324: v1324(0x135e) = CONST 
    0x1325: JUMPI v1324(0x135e), v99

    Begin block 0x135e
    prev=[0x93], succ=[]
    =================================
    0x135f: v135f(0x2d3) = CONST 
    0x1360: CALLPRIVATE v135f(0x2d3)

    Begin block 0x9e
    prev=[0x93], succ=[0xa9, 0x1361]
    =================================
    0x9f: v9f(0xcae9ca51) = CONST 
    0xa4: va4 = EQ v9f(0xcae9ca51), v1f
    0x1326: v1326(0x1361) = CONST 
    0x1327: JUMPI v1326(0x1361), va4

    Begin block 0xa9
    prev=[0x9e], succ=[0xee6]
    =================================
    0xa9: va9(0xee6) = CONST 
    0xac: JUMP va9(0xee6)

    Begin block 0xee6
    prev=[0xa9], succ=[]
    =================================
    0xee7: vee7(0x0) = CONST 
    0xeea: REVERT vee7(0x0), vee7(0x0)

    Begin block 0x1361
    prev=[0x9e], succ=[]
    =================================
    0x1362: v1362(0x2ff) = CONST 
    0x1363: CALLPRIVATE v1362(0x2ff)

    Begin block 0x36
    prev=[0x2b], succ=[0x1364, 0x41]
    =================================
    0x37: v37(0xd493b9ac) = CONST 
    0x3c: v3c = EQ v37(0xd493b9ac), v1f
    0x1314: v1314(0x1364) = CONST 
    0x1315: JUMPI v1314(0x1364), v3c

    Begin block 0x1364
    prev=[0x36], succ=[]
    =================================
    0x1365: v1365(0x384) = CONST 
    0x1366: CALLPRIVATE v1365(0x384)

    Begin block 0x41
    prev=[0x36], succ=[0x1367, 0x4c]
    =================================
    0x42: v42(0xd73dd623) = CONST 
    0x47: v47 = EQ v42(0xd73dd623), v1f
    0x1316: v1316(0x1367) = CONST 
    0x1317: JUMPI v1316(0x1367), v47

    Begin block 0x1367
    prev=[0x41], succ=[]
    =================================
    0x1368: v1368(0x3ba) = CONST 
    0x1369: CALLPRIVATE v1368(0x3ba)

    Begin block 0x4c
    prev=[0x41], succ=[0x136a, 0x57]
    =================================
    0x4d: v4d(0xdd62ed3e) = CONST 
    0x52: v52 = EQ v4d(0xdd62ed3e), v1f
    0x1318: v1318(0x136a) = CONST 
    0x1319: JUMPI v1318(0x136a), v52

    Begin block 0x136a
    prev=[0x4c], succ=[]
    =================================
    0x136b: v136b(0x3e6) = CONST 
    0x136c: CALLPRIVATE v136b(0x3e6)

    Begin block 0x57
    prev=[0x4c], succ=[0x136d, 0x62]
    =================================
    0x58: v58(0xe30c3978) = CONST 
    0x5d: v5d = EQ v58(0xe30c3978), v1f
    0x131a: v131a(0x136d) = CONST 
    0x131b: JUMPI v131a(0x136d), v5d

    Begin block 0x136d
    prev=[0x57], succ=[]
    =================================
    0x136e: v136e(0x414) = CONST 
    0x136f: CALLPRIVATE v136e(0x414)

    Begin block 0x62
    prev=[0x57], succ=[0x6d, 0x1370]
    =================================
    0x63: v63(0xf2fde38b) = CONST 
    0x68: v68 = EQ v63(0xf2fde38b), v1f
    0x131c: v131c(0x1370) = CONST 
    0x131d: JUMPI v131c(0x1370), v68

    Begin block 0x6d
    prev=[0x62], succ=[0xec2]
    =================================
    0x6d: v6d(0xec2) = CONST 
    0x70: JUMP v6d(0xec2)

    Begin block 0xec2
    prev=[0x6d], succ=[]
    =================================
    0xec3: vec3(0x0) = CONST 
    0xec6: REVERT vec3(0x0), vec3(0x0)

    Begin block 0x1370
    prev=[0x62], succ=[]
    =================================
    0x1371: v1371(0x41c) = CONST 
    0x1372: CALLPRIVATE v1371(0x41c)

    Begin block 0x1373
    prev=[0x10], succ=[]
    =================================
    0x1374: v1374(0xe9e) = CONST 
    0x1375: CALLPRIVATE v1374(0xe9e)

}

function name()() public {
    Begin block 0x126
    prev=[], succ=[0x12e0x126]
    =================================
    0x127: v127(0x12e) = CONST 
    0x12a: v12a(0x442) = CONST 
    0x12d: v12d_0, v12d_1 = CALLPRIVATE v12a(0x442), v127(0x12e)

    Begin block 0x12e0x126
    prev=[0x126], succ=[0x1500x126]
    =================================
    0x12f0x126: v12612f(0x40) = CONST 
    0x1320x126: v126132 = MLOAD v12612f(0x40)
    0x1330x126: v126133(0x20) = CONST 
    0x1370x126: MSTORE v126132, v126133(0x20)
    0x1390x126: v126139 = MLOAD v12d_0
    0x13c0x126: v12613c = ADD v126132, v126133(0x20)
    0x13d0x126: MSTORE v12613c, v126139
    0x13f0x126: v12613f = MLOAD v12d_0
    0x1460x126: v126146 = ADD v126132, v12612f(0x40)
    0x1490x126: v126149 = ADD v12d_0, v126133(0x20)
    0x14e0x126: v12614e(0x0) = CONST 

    Begin block 0x1500x126
    prev=[0x1590x126, 0x12e0x126], succ=[0x1680x126, 0x1590x126]
    =================================
    0x1500x126_0x0: v150126_0 = PHI v126163, v12614e(0x0)
    0x1530x126: v126153 = LT v150126_0, v12613f
    0x1540x126: v126154 = ISZERO v126153
    0x1550x126: v126155(0x168) = CONST 
    0x1580x126: JUMPI v126155(0x168), v126154

    Begin block 0x1680x126
    prev=[0x1500x126], succ=[0x1950x126, 0x17c0x126]
    =================================
    0x1710x126: v126171 = ADD v12613f, v126146
    0x1730x126: v126173(0x1f) = CONST 
    0x1750x126: v126175 = AND v126173(0x1f), v12613f
    0x1770x126: v126177 = ISZERO v126175
    0x1780x126: v126178(0x195) = CONST 
    0x17b0x126: JUMPI v126178(0x195), v126177

    Begin block 0x1950x126
    prev=[0x1680x126, 0x17c0x126], succ=[]
    =================================
    0x1950x126_0x1: v195126_1 = PHI v126192, v126171
    0x19b0x126: v12619b(0x40) = CONST 
    0x19d0x126: v12619d = MLOAD v12619b(0x40)
    0x1a00x126: v1261a0 = SUB v195126_1, v12619d
    0x1a20x126: RETURN v12619d, v1261a0

    Begin block 0x17c0x126
    prev=[0x1680x126], succ=[0x1950x126]
    =================================
    0x17e0x126: v12617e = SUB v126171, v126175
    0x1800x126: v126180 = MLOAD v12617e
    0x1810x126: v126181(0x1) = CONST 
    0x1840x126: v126184(0x20) = CONST 
    0x1860x126: v126186 = SUB v126184(0x20), v126175
    0x1870x126: v126187(0x100) = CONST 
    0x18a0x126: v12618a = EXP v126187(0x100), v126186
    0x18b0x126: v12618b = SUB v12618a, v126181(0x1)
    0x18c0x126: v12618c = NOT v12618b
    0x18d0x126: v12618d = AND v12618c, v126180
    0x18f0x126: MSTORE v12617e, v12618d
    0x1900x126: v126190(0x20) = CONST 
    0x1920x126: v126192 = ADD v126190(0x20), v12617e

    Begin block 0x1590x126
    prev=[0x1500x126], succ=[0x1500x126]
    =================================
    0x1590x126_0x0: v159126_0 = PHI v126163, v12614e(0x0)
    0x15b0x126: v12615b = ADD v159126_0, v126149
    0x15c0x126: v12615c = MLOAD v12615b
    0x15f0x126: v12615f = ADD v159126_0, v126146
    0x1600x126: MSTORE v12615f, v12615c
    0x1610x126: v126161(0x20) = CONST 
    0x1630x126: v126163 = ADD v126161(0x20), v159126_0
    0x1640x126: v126164(0x150) = CONST 
    0x1670x126: JUMP v126164(0x150)

}

function approve(address,uint256)() public {
    Begin block 0x1a3
    prev=[], succ=[0x1b5, 0x1b9]
    =================================
    0x1a4: v1a4(0xf2e) = CONST 
    0x1a7: v1a7(0x4) = CONST 
    0x1aa: v1aa = CALLDATASIZE 
    0x1ab: v1ab = SUB v1aa, v1a7(0x4)
    0x1ac: v1ac(0x40) = CONST 
    0x1af: v1af = LT v1ab, v1ac(0x40)
    0x1b0: v1b0 = ISZERO v1af
    0x1b1: v1b1(0x1b9) = CONST 
    0x1b4: JUMPI v1b1(0x1b9), v1b0

    Begin block 0x1b5
    prev=[0x1a3], succ=[]
    =================================
    0x1b5: v1b5(0x0) = CONST 
    0x1b8: REVERT v1b5(0x0), v1b5(0x0)

    Begin block 0x1b9
    prev=[0x1a3], succ=[0x4d00x1a3]
    =================================
    0x1bb: v1bb(0x1) = CONST 
    0x1bd: v1bd(0x1) = CONST 
    0x1bf: v1bf(0xa0) = CONST 
    0x1c1: v1c1(0x10000000000000000000000000000000000000000) = SHL v1bf(0xa0), v1bd(0x1)
    0x1c2: v1c2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1c1(0x10000000000000000000000000000000000000000), v1bb(0x1)
    0x1c4: v1c4 = CALLDATALOAD v1a7(0x4)
    0x1c5: v1c5 = AND v1c4, v1c2(0xffffffffffffffffffffffffffffffffffffffff)
    0x1c7: v1c7(0x20) = CONST 
    0x1c9: v1c9(0x24) = ADD v1c7(0x20), v1a7(0x4)
    0x1ca: v1ca = CALLDATALOAD v1c9(0x24)
    0x1cb: v1cb(0x4d0) = CONST 
    0x1ce: JUMP v1cb(0x4d0)

    Begin block 0x4d00x1a3
    prev=[0x1b9], succ=[0xf2e]
    =================================
    0x4d10x1a3: v1a34d1 = CALLER 
    0x4d20x1a3: v1a34d2(0x0) = CONST 
    0x4d60x1a3: MSTORE v1a34d2(0x0), v1a34d1
    0x4d70x1a3: v1a34d7(0x2) = CONST 
    0x4d90x1a3: v1a34d9(0x20) = CONST 
    0x4dd0x1a3: MSTORE v1a34d9(0x20), v1a34d7(0x2)
    0x4de0x1a3: v1a34de(0x40) = CONST 
    0x4e20x1a3: v1a34e2 = SHA3 v1a34d2(0x0), v1a34de(0x40)
    0x4e30x1a3: v1a34e3(0x1) = CONST 
    0x4e50x1a3: v1a34e5(0x1) = CONST 
    0x4e70x1a3: v1a34e7(0xa0) = CONST 
    0x4e90x1a3: v1a34e9(0x10000000000000000000000000000000000000000) = SHL v1a34e7(0xa0), v1a34e5(0x1)
    0x4ea0x1a3: v1a34ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1a34e9(0x10000000000000000000000000000000000000000), v1a34e3(0x1)
    0x4ec0x1a3: v1a34ec = AND v1c5, v1a34ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x4ef0x1a3: MSTORE v1a34d2(0x0), v1a34ec
    0x4f20x1a3: MSTORE v1a34d9(0x20), v1a34e2
    0x4f50x1a3: v1a34f5 = SHA3 v1a34d2(0x0), v1a34de(0x40)
    0x4f80x1a3: SSTORE v1a34f5, v1ca
    0x4fa0x1a3: v1a34fa = MLOAD v1a34de(0x40)
    0x4fd0x1a3: MSTORE v1a34fa, v1ca
    0x4ff0x1a3: v1a34ff = MLOAD v1a34de(0x40)
    0x5060x1a3: v1a3506(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
    0x52a0x1a3: v1a352a(0x0) = SUB v1a34fa, v1a34ff
    0x52b0x1a3: v1a352b(0x20) = ADD v1a352a(0x0), v1a34d9(0x20)
    0x52d0x1a3: LOG3 v1a34ff, v1a352b(0x20), v1a3506(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925), v1a34d1, v1a34ec
    0x52f0x1a3: v1a352f(0x1) = CONST 
    0x5350x1a3: JUMP v1a4(0xf2e)

    Begin block 0xf2e
    prev=[0x4d00x1a3], succ=[]
    =================================
    0xf2f: vf2f(0x40) = CONST 
    0xf32: vf32 = MLOAD vf2f(0x40)
    0xf34: vf34 = ISZERO v1a352f(0x1)
    0xf35: vf35 = ISZERO vf34
    0xf37: MSTORE vf32, vf35
    0xf38: vf38 = MLOAD vf2f(0x40)
    0xf3c: vf3c(0x0) = SUB vf32, vf38
    0xf3d: vf3d(0x20) = CONST 
    0xf3f: vf3f(0x20) = ADD vf3d(0x20), vf3c(0x0)
    0xf41: RETURN vf38, vf3f(0x20)

}

function totalSupply()() public {
    Begin block 0x1e3
    prev=[], succ=[0x536]
    =================================
    0x1e4: v1e4(0xf61) = CONST 
    0x1e7: v1e7(0x536) = CONST 
    0x1ea: JUMP v1e7(0x536)

    Begin block 0x536
    prev=[0x1e3], succ=[0xf61]
    =================================
    0x537: v537(0x0) = CONST 
    0x539: v539 = SLOAD v537(0x0)
    0x53b: JUMP v1e4(0xf61)

    Begin block 0xf61
    prev=[0x536], succ=[]
    =================================
    0xf62: vf62(0x40) = CONST 
    0xf65: vf65 = MLOAD vf62(0x40)
    0xf68: MSTORE vf65, v539
    0xf69: vf69 = MLOAD vf62(0x40)
    0xf6d: vf6d(0x0) = SUB vf65, vf69
    0xf6e: vf6e(0x20) = CONST 
    0xf70: vf70(0x20) = ADD vf6e(0x20), vf6d(0x0)
    0xf72: RETURN vf69, vf70(0x20)

}

function transferFrom(address,address,uint256)() public {
    Begin block 0x1fd
    prev=[], succ=[0x20f, 0x213]
    =================================
    0x1fe: v1fe(0xf92) = CONST 
    0x201: v201(0x4) = CONST 
    0x204: v204 = CALLDATASIZE 
    0x205: v205 = SUB v204, v201(0x4)
    0x206: v206(0x60) = CONST 
    0x209: v209 = LT v205, v206(0x60)
    0x20a: v20a = ISZERO v209
    0x20b: v20b(0x213) = CONST 
    0x20e: JUMPI v20b(0x213), v20a

    Begin block 0x20f
    prev=[0x1fd], succ=[]
    =================================
    0x20f: v20f(0x0) = CONST 
    0x212: REVERT v20f(0x0), v20f(0x0)

    Begin block 0x213
    prev=[0x1fd], succ=[0x53c]
    =================================
    0x215: v215(0x1) = CONST 
    0x217: v217(0x1) = CONST 
    0x219: v219(0xa0) = CONST 
    0x21b: v21b(0x10000000000000000000000000000000000000000) = SHL v219(0xa0), v217(0x1)
    0x21c: v21c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v21b(0x10000000000000000000000000000000000000000), v215(0x1)
    0x21e: v21e = CALLDATALOAD v201(0x4)
    0x220: v220 = AND v21c(0xffffffffffffffffffffffffffffffffffffffff), v21e
    0x222: v222(0x20) = CONST 
    0x225: v225(0x24) = ADD v201(0x4), v222(0x20)
    0x226: v226 = CALLDATALOAD v225(0x24)
    0x229: v229 = AND v21c(0xffffffffffffffffffffffffffffffffffffffff), v226
    0x22b: v22b(0x40) = CONST 
    0x22d: v22d(0x44) = ADD v22b(0x40), v201(0x4)
    0x22e: v22e = CALLDATALOAD v22d(0x44)
    0x22f: v22f(0x53c) = CONST 
    0x232: JUMP v22f(0x53c)

    Begin block 0x53c
    prev=[0x213], succ=[0x55f, 0x551]
    =================================
    0x53d: v53d(0x0) = CONST 
    0x53f: v53f(0x1) = CONST 
    0x541: v541(0x1) = CONST 
    0x543: v543(0xa0) = CONST 
    0x545: v545(0x10000000000000000000000000000000000000000) = SHL v543(0xa0), v541(0x1)
    0x546: v546(0xffffffffffffffffffffffffffffffffffffffff) = SUB v545(0x10000000000000000000000000000000000000000), v53f(0x1)
    0x548: v548 = AND v229, v546(0xffffffffffffffffffffffffffffffffffffffff)
    0x549: v549 = ISZERO v548
    0x54b: v54b = ISZERO v549
    0x54d: v54d(0x55f) = CONST 
    0x550: JUMPI v54d(0x55f), v549

    Begin block 0x55f
    prev=[0x53c, 0x551], succ=[0x564, 0x568]
    =================================
    0x55f_0x0: v55f_0 = PHI v54b, v55e
    0x560: v560(0x568) = CONST 
    0x563: JUMPI v560(0x568), v55f_0

    Begin block 0x564
    prev=[0x55f], succ=[]
    =================================
    0x564: v564(0x0) = CONST 
    0x567: REVERT v564(0x0), v564(0x0)

    Begin block 0x568
    prev=[0x55f], succ=[0xd55B0x568]
    =================================
    0x569: v569(0x1) = CONST 
    0x56b: v56b(0x1) = CONST 
    0x56d: v56d(0xa0) = CONST 
    0x56f: v56f(0x10000000000000000000000000000000000000000) = SHL v56d(0xa0), v56b(0x1)
    0x570: v570(0xffffffffffffffffffffffffffffffffffffffff) = SUB v56f(0x10000000000000000000000000000000000000000), v569(0x1)
    0x572: v572 = AND v220, v570(0xffffffffffffffffffffffffffffffffffffffff)
    0x573: v573(0x0) = CONST 
    0x577: MSTORE v573(0x0), v572
    0x578: v578(0x2) = CONST 
    0x57a: v57a(0x20) = CONST 
    0x57e: MSTORE v57a(0x20), v578(0x2)
    0x57f: v57f(0x40) = CONST 
    0x583: v583 = SHA3 v573(0x0), v57f(0x40)
    0x584: v584 = CALLER 
    0x586: MSTORE v573(0x0), v584
    0x588: MSTORE v57a(0x20), v583
    0x58b: v58b = SHA3 v573(0x0), v57f(0x40)
    0x58c: v58c = SLOAD v58b
    0x58f: MSTORE v573(0x0), v572
    0x590: v590(0x1) = CONST 
    0x594: MSTORE v57a(0x20), v590(0x1)
    0x596: v596 = SHA3 v573(0x0), v57f(0x40)
    0x597: v597 = SLOAD v596
    0x598: v598(0x5a7) = CONST 
    0x59d: v59d(0xffffffff) = CONST 
    0x5a2: v5a2(0xd55) = CONST 
    0x5a5: v5a5(0xd55) = AND v5a2(0xd55), v59d(0xffffffff)
    0x5a6: JUMP v5a5(0xd55)

    Begin block 0xd55B0x568
    prev=[0x568], succ=[0xd61B0x568, 0xd60B0x568]
    =================================
    0xd56S0x568: vd56V568(0x0) = CONST 
    0xd5aS0x568: vd5aV568 = GT v22e, v597
    0xd5bS0x568: vd5bV568 = ISZERO vd5aV568
    0xd5cS0x568: vd5cV568(0xd61) = CONST 
    0xd5fS0x568: JUMPI vd5cV568(0xd61), vd5bV568

    Begin block 0xd61B0x568
    prev=[0xd55B0x568], succ=[0x5a7]
    =================================
    0xd64S0x568: vd64V568 = SUB v597, v22e
    0xd66S0x568: JUMP v598(0x5a7)

    Begin block 0x5a7
    prev=[0xd61B0x568], succ=[0xd67B0x5a7]
    =================================
    0x5a8: v5a8(0x1) = CONST 
    0x5aa: v5aa(0x1) = CONST 
    0x5ac: v5ac(0xa0) = CONST 
    0x5ae: v5ae(0x10000000000000000000000000000000000000000) = SHL v5ac(0xa0), v5aa(0x1)
    0x5af: v5af(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5ae(0x10000000000000000000000000000000000000000), v5a8(0x1)
    0x5b2: v5b2 = AND v220, v5af(0xffffffffffffffffffffffffffffffffffffffff)
    0x5b3: v5b3(0x0) = CONST 
    0x5b7: MSTORE v5b3(0x0), v5b2
    0x5b8: v5b8(0x1) = CONST 
    0x5ba: v5ba(0x20) = CONST 
    0x5bc: MSTORE v5ba(0x20), v5b8(0x1)
    0x5bd: v5bd(0x40) = CONST 
    0x5c1: v5c1 = SHA3 v5b3(0x0), v5bd(0x40)
    0x5c5: SSTORE v5c1, vd64V568
    0x5c8: v5c8 = AND v229, v5af(0xffffffffffffffffffffffffffffffffffffffff)
    0x5ca: MSTORE v5b3(0x0), v5c8
    0x5cb: v5cb = SHA3 v5b3(0x0), v5bd(0x40)
    0x5cc: v5cc = SLOAD v5cb
    0x5cd: v5cd(0x5dc) = CONST 
    0x5d2: v5d2(0xffffffff) = CONST 
    0x5d7: v5d7(0xd67) = CONST 
    0x5da: v5da(0xd67) = AND v5d7(0xd67), v5d2(0xffffffff)
    0x5db: JUMP v5da(0xd67)

    Begin block 0xd67B0x5a7
    prev=[0x5a7], succ=[0xd75B0x5a7, 0xd76B0x5a7]
    =================================
    0xd68S0x5a7: vd68V5a7(0x0) = CONST 
    0xd6cS0x5a7: vd6cV5a7 = ADD v22e, v5cc
    0xd6fS0x5a7: vd6fV5a7 = LT vd6cV5a7, v5cc
    0xd70S0x5a7: vd70V5a7 = ISZERO vd6fV5a7
    0xd71S0x5a7: vd71V5a7(0xd76) = CONST 
    0xd74S0x5a7: JUMPI vd71V5a7(0xd76), vd70V5a7

    Begin block 0xd75B0x5a7
    prev=[0xd67B0x5a7], succ=[]
    =================================
    0xd75S0x5a7: THROW 

    Begin block 0xd76B0x5a7
    prev=[0xd67B0x5a7], succ=[0x5dc]
    =================================
    0xd7cS0x5a7: JUMP v5cd(0x5dc)

    Begin block 0x5dc
    prev=[0xd76B0x5a7], succ=[0xd55B0x5dc]
    =================================
    0x5dd: v5dd(0x1) = CONST 
    0x5df: v5df(0x1) = CONST 
    0x5e1: v5e1(0xa0) = CONST 
    0x5e3: v5e3(0x10000000000000000000000000000000000000000) = SHL v5e1(0xa0), v5df(0x1)
    0x5e4: v5e4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5e3(0x10000000000000000000000000000000000000000), v5dd(0x1)
    0x5e6: v5e6 = AND v229, v5e4(0xffffffffffffffffffffffffffffffffffffffff)
    0x5e7: v5e7(0x0) = CONST 
    0x5eb: MSTORE v5e7(0x0), v5e6
    0x5ec: v5ec(0x1) = CONST 
    0x5ee: v5ee(0x20) = CONST 
    0x5f0: MSTORE v5ee(0x20), v5ec(0x1)
    0x5f1: v5f1(0x40) = CONST 
    0x5f4: v5f4 = SHA3 v5e7(0x0), v5f1(0x40)
    0x5f5: SSTORE v5f4, vd6cV5a7
    0x5f6: v5f6(0x605) = CONST 
    0x5fb: v5fb(0xffffffff) = CONST 
    0x600: v600(0xd55) = CONST 
    0x603: v603(0xd55) = AND v600(0xd55), v5fb(0xffffffff)
    0x604: JUMP v603(0xd55)

    Begin block 0xd55B0x5dc
    prev=[0x5dc], succ=[0xd61B0x5dc, 0xd60B0x5dc]
    =================================
    0xd56S0x5dc: vd56V5dc(0x0) = CONST 
    0xd5aS0x5dc: vd5aV5dc = GT v22e, v58c
    0xd5bS0x5dc: vd5bV5dc = ISZERO vd5aV5dc
    0xd5cS0x5dc: vd5cV5dc(0xd61) = CONST 
    0xd5fS0x5dc: JUMPI vd5cV5dc(0xd61), vd5bV5dc

    Begin block 0xd61B0x5dc
    prev=[0xd55B0x5dc], succ=[0x605]
    =================================
    0xd64S0x5dc: vd64V5dc = SUB v58c, v22e
    0xd66S0x5dc: JUMP v5f6(0x605)

    Begin block 0x605
    prev=[0xd61B0x5dc], succ=[0xf92]
    =================================
    0x606: v606(0x1) = CONST 
    0x608: v608(0x1) = CONST 
    0x60a: v60a(0xa0) = CONST 
    0x60c: v60c(0x10000000000000000000000000000000000000000) = SHL v60a(0xa0), v608(0x1)
    0x60d: v60d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v60c(0x10000000000000000000000000000000000000000), v606(0x1)
    0x610: v610 = AND v220, v60d(0xffffffffffffffffffffffffffffffffffffffff)
    0x611: v611(0x0) = CONST 
    0x615: MSTORE v611(0x0), v610
    0x616: v616(0x2) = CONST 
    0x618: v618(0x20) = CONST 
    0x61c: MSTORE v618(0x20), v616(0x2)
    0x61d: v61d(0x40) = CONST 
    0x621: v621 = SHA3 v611(0x0), v61d(0x40)
    0x622: v622 = CALLER 
    0x624: MSTORE v611(0x0), v622
    0x626: MSTORE v618(0x20), v621
    0x62a: v62a = SHA3 v611(0x0), v61d(0x40)
    0x62e: SSTORE v62a, vd64V5dc
    0x630: v630 = MLOAD v61d(0x40)
    0x633: MSTORE v630, v22e
    0x635: v635 = MLOAD v61d(0x40)
    0x638: v638 = AND v229, v60d(0xffffffffffffffffffffffffffffffffffffffff)
    0x63c: v63c(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
    0x661: v661(0x0) = SUB v630, v635
    0x664: v664(0x20) = ADD v618(0x20), v661(0x0)
    0x666: LOG3 v635, v664(0x20), v63c(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), v610, v638
    0x668: v668(0x1) = CONST 
    0x670: JUMP v1fe(0xf92)

    Begin block 0xf92
    prev=[0x605], succ=[]
    =================================
    0xf93: vf93(0x40) = CONST 
    0xf96: vf96 = MLOAD vf93(0x40)
    0xf98: vf98 = ISZERO v668(0x1)
    0xf99: vf99 = ISZERO vf98
    0xf9b: MSTORE vf96, vf99
    0xf9c: vf9c = MLOAD vf93(0x40)
    0xfa0: vfa0(0x0) = SUB vf96, vf9c
    0xfa1: vfa1(0x20) = CONST 
    0xfa3: vfa3(0x20) = ADD vfa1(0x20), vfa0(0x0)
    0xfa5: RETURN vf9c, vfa3(0x20)

    Begin block 0xd60B0x5dc
    prev=[0xd55B0x5dc], succ=[]
    =================================
    0xd60S0x5dc: THROW 

    Begin block 0xd60B0x568
    prev=[0xd55B0x568], succ=[]
    =================================
    0xd60S0x568: THROW 

    Begin block 0x551
    prev=[0x53c], succ=[0x55f]
    =================================
    0x552: v552(0x1) = CONST 
    0x554: v554(0x1) = CONST 
    0x556: v556(0xa0) = CONST 
    0x558: v558(0x10000000000000000000000000000000000000000) = SHL v556(0xa0), v554(0x1)
    0x559: v559(0xffffffffffffffffffffffffffffffffffffffff) = SUB v558(0x10000000000000000000000000000000000000000), v552(0x1)
    0x55b: v55b = AND v229, v559(0xffffffffffffffffffffffffffffffffffffffff)
    0x55c: v55c = ADDRESS 
    0x55d: v55d = EQ v55c, v55b
    0x55e: v55e = ISZERO v55d

}

function decimals()() public {
    Begin block 0x233
    prev=[], succ=[0x671]
    =================================
    0x234: v234(0xfc5) = CONST 
    0x237: v237(0x671) = CONST 
    0x23a: JUMP v237(0x671)

    Begin block 0x671
    prev=[0x233], succ=[0xfc5]
    =================================
    0x672: v672(0x39) = CONST 
    0x674: v674 = SLOAD v672(0x39)
    0x676: JUMP v234(0xfc5)

    Begin block 0xfc5
    prev=[0x671], succ=[]
    =================================
    0xfc6: vfc6(0x40) = CONST 
    0xfc9: vfc9 = MLOAD vfc6(0x40)
    0xfcc: MSTORE vfc9, v674
    0xfcd: vfcd = MLOAD vfc6(0x40)
    0xfd1: vfd1(0x0) = SUB vfc9, vfcd
    0xfd2: vfd2(0x20) = CONST 
    0xfd4: vfd4(0x20) = ADD vfd2(0x20), vfd1(0x0)
    0xfd6: RETURN vfcd, vfd4(0x20)

}

function initialSupply()() public {
    Begin block 0x23b
    prev=[], succ=[0x677]
    =================================
    0x23c: v23c(0xff6) = CONST 
    0x23f: v23f(0x677) = CONST 
    0x242: JUMP v23f(0x677)

    Begin block 0x677
    prev=[0x23b], succ=[0xff6]
    =================================
    0x678: v678(0x3a) = CONST 
    0x67a: v67a = SLOAD v678(0x3a)
    0x67c: JUMP v23c(0xff6)

    Begin block 0xff6
    prev=[0x677], succ=[]
    =================================
    0xff7: vff7(0x40) = CONST 
    0xffa: vffa = MLOAD vff7(0x40)
    0xffd: MSTORE vffa, v67a
    0xffe: vffe = MLOAD vff7(0x40)
    0x1002: v1002(0x0) = SUB vffa, vffe
    0x1003: v1003(0x20) = CONST 
    0x1005: v1005(0x20) = ADD v1003(0x20), v1002(0x0)
    0x1007: RETURN vffe, v1005(0x20)

}

function claimOwnership()() public {
    Begin block 0x243
    prev=[], succ=[0x67d]
    =================================
    0x244: v244(0x1027) = CONST 
    0x247: v247(0x67d) = CONST 
    0x24a: JUMP v247(0x67d)

    Begin block 0x67d
    prev=[0x243], succ=[0x683, 0x684]
    =================================
    0x67e: v67e = CALLER 
    0x67f: v67f(0x684) = CONST 
    0x682: JUMPI v67f(0x684), v67e

    Begin block 0x683
    prev=[0x67d], succ=[]
    =================================
    0x683: THROW 

    Begin block 0x684
    prev=[0x67d], succ=[0x697, 0x69b]
    =================================
    0x685: v685(0x4) = CONST 
    0x687: v687 = SLOAD v685(0x4)
    0x688: v688(0x1) = CONST 
    0x68a: v68a(0x1) = CONST 
    0x68c: v68c(0xa0) = CONST 
    0x68e: v68e(0x10000000000000000000000000000000000000000) = SHL v68c(0xa0), v68a(0x1)
    0x68f: v68f(0xffffffffffffffffffffffffffffffffffffffff) = SUB v68e(0x10000000000000000000000000000000000000000), v688(0x1)
    0x690: v690 = AND v68f(0xffffffffffffffffffffffffffffffffffffffff), v687
    0x691: v691 = CALLER 
    0x692: v692 = EQ v691, v690
    0x693: v693(0x69b) = CONST 
    0x696: JUMPI v693(0x69b), v692

    Begin block 0x697
    prev=[0x684], succ=[]
    =================================
    0x697: v697(0x0) = CONST 
    0x69a: REVERT v697(0x0), v697(0x0)

    Begin block 0x69b
    prev=[0x684], succ=[0x1027]
    =================================
    0x69c: v69c(0x4) = CONST 
    0x69e: v69e = SLOAD v69c(0x4)
    0x69f: v69f(0x3) = CONST 
    0x6a1: v6a1 = SLOAD v69f(0x3)
    0x6a2: v6a2(0x40) = CONST 
    0x6a4: v6a4 = MLOAD v6a2(0x40)
    0x6a5: v6a5(0x1) = CONST 
    0x6a7: v6a7(0x1) = CONST 
    0x6a9: v6a9(0xa0) = CONST 
    0x6ab: v6ab(0x10000000000000000000000000000000000000000) = SHL v6a9(0xa0), v6a7(0x1)
    0x6ac: v6ac(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6ab(0x10000000000000000000000000000000000000000), v6a5(0x1)
    0x6af: v6af = AND v6ac(0xffffffffffffffffffffffffffffffffffffffff), v69e
    0x6b3: v6b3 = AND v6a1, v6ac(0xffffffffffffffffffffffffffffffffffffffff)
    0x6b5: v6b5(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0) = CONST 
    0x6d7: v6d7(0x0) = CONST 
    0x6da: LOG3 v6a4, v6d7(0x0), v6b5(0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0), v6b3, v6af
    0x6db: v6db(0x4) = CONST 
    0x6de: v6de = SLOAD v6db(0x4)
    0x6df: v6df(0x3) = CONST 
    0x6e2: v6e2 = SLOAD v6df(0x3)
    0x6e3: v6e3(0x1) = CONST 
    0x6e5: v6e5(0x1) = CONST 
    0x6e7: v6e7(0xa0) = CONST 
    0x6e9: v6e9(0x10000000000000000000000000000000000000000) = SHL v6e7(0xa0), v6e5(0x1)
    0x6ea: v6ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6e9(0x10000000000000000000000000000000000000000), v6e3(0x1)
    0x6eb: v6eb(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT v6ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x6ee: v6ee = AND v6eb(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v6e2
    0x6ef: v6ef(0x1) = CONST 
    0x6f1: v6f1(0x1) = CONST 
    0x6f3: v6f3(0xa0) = CONST 
    0x6f5: v6f5(0x10000000000000000000000000000000000000000) = SHL v6f3(0xa0), v6f1(0x1)
    0x6f6: v6f6(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6f5(0x10000000000000000000000000000000000000000), v6ef(0x1)
    0x6f8: v6f8 = AND v6de, v6f6(0xffffffffffffffffffffffffffffffffffffffff)
    0x6f9: v6f9 = OR v6f8, v6ee
    0x6fc: SSTORE v6df(0x3), v6f9
    0x6fd: v6fd = AND v6eb(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), v6de
    0x6ff: SSTORE v6db(0x4), v6fd
    0x700: JUMP v244(0x1027)

    Begin block 0x1027
    prev=[0x69b], succ=[]
    =================================
    0x1028: STOP 

}

function decreaseApproval(address,uint256)() public {
    Begin block 0x24d
    prev=[], succ=[0x25f, 0x263]
    =================================
    0x24e: v24e(0x1048) = CONST 
    0x251: v251(0x4) = CONST 
    0x254: v254 = CALLDATASIZE 
    0x255: v255 = SUB v254, v251(0x4)
    0x256: v256(0x40) = CONST 
    0x259: v259 = LT v255, v256(0x40)
    0x25a: v25a = ISZERO v259
    0x25b: v25b(0x263) = CONST 
    0x25e: JUMPI v25b(0x263), v25a

    Begin block 0x25f
    prev=[0x24d], succ=[]
    =================================
    0x25f: v25f(0x0) = CONST 
    0x262: REVERT v25f(0x0), v25f(0x0)

    Begin block 0x263
    prev=[0x24d], succ=[0x701]
    =================================
    0x265: v265(0x1) = CONST 
    0x267: v267(0x1) = CONST 
    0x269: v269(0xa0) = CONST 
    0x26b: v26b(0x10000000000000000000000000000000000000000) = SHL v269(0xa0), v267(0x1)
    0x26c: v26c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v26b(0x10000000000000000000000000000000000000000), v265(0x1)
    0x26e: v26e = CALLDATALOAD v251(0x4)
    0x26f: v26f = AND v26e, v26c(0xffffffffffffffffffffffffffffffffffffffff)
    0x271: v271(0x20) = CONST 
    0x273: v273(0x24) = ADD v271(0x20), v251(0x4)
    0x274: v274 = CALLDATALOAD v273(0x24)
    0x275: v275(0x701) = CONST 
    0x278: JUMP v275(0x701)

    Begin block 0x701
    prev=[0x263], succ=[0x72e, 0x756]
    =================================
    0x702: v702 = CALLER 
    0x703: v703(0x0) = CONST 
    0x707: MSTORE v703(0x0), v702
    0x708: v708(0x2) = CONST 
    0x70a: v70a(0x20) = CONST 
    0x70e: MSTORE v70a(0x20), v708(0x2)
    0x70f: v70f(0x40) = CONST 
    0x713: v713 = SHA3 v703(0x0), v70f(0x40)
    0x714: v714(0x1) = CONST 
    0x716: v716(0x1) = CONST 
    0x718: v718(0xa0) = CONST 
    0x71a: v71a(0x10000000000000000000000000000000000000000) = SHL v718(0xa0), v716(0x1)
    0x71b: v71b(0xffffffffffffffffffffffffffffffffffffffff) = SUB v71a(0x10000000000000000000000000000000000000000), v714(0x1)
    0x71d: v71d = AND v26f, v71b(0xffffffffffffffffffffffffffffffffffffffff)
    0x71f: MSTORE v703(0x0), v71d
    0x722: MSTORE v70a(0x20), v713
    0x724: v724 = SHA3 v703(0x0), v70f(0x40)
    0x725: v725 = SLOAD v724
    0x728: v728 = GT v274, v725
    0x729: v729 = ISZERO v728
    0x72a: v72a(0x756) = CONST 
    0x72d: JUMPI v72a(0x756), v729

    Begin block 0x72e
    prev=[0x701], succ=[0x78b]
    =================================
    0x72e: v72e = CALLER 
    0x72f: v72f(0x0) = CONST 
    0x733: MSTORE v72f(0x0), v72e
    0x734: v734(0x2) = CONST 
    0x736: v736(0x20) = CONST 
    0x73a: MSTORE v736(0x20), v734(0x2)
    0x73b: v73b(0x40) = CONST 
    0x73f: v73f = SHA3 v72f(0x0), v73b(0x40)
    0x740: v740(0x1) = CONST 
    0x742: v742(0x1) = CONST 
    0x744: v744(0xa0) = CONST 
    0x746: v746(0x10000000000000000000000000000000000000000) = SHL v744(0xa0), v742(0x1)
    0x747: v747(0xffffffffffffffffffffffffffffffffffffffff) = SUB v746(0x10000000000000000000000000000000000000000), v740(0x1)
    0x749: v749 = AND v26f, v747(0xffffffffffffffffffffffffffffffffffffffff)
    0x74b: MSTORE v72f(0x0), v749
    0x74e: MSTORE v736(0x20), v73f
    0x750: v750 = SHA3 v72f(0x0), v73b(0x40)
    0x751: SSTORE v750, v72f(0x0)
    0x752: v752(0x78b) = CONST 
    0x755: JUMP v752(0x78b)

    Begin block 0x78b
    prev=[0x72e, 0x766], succ=[0x1048]
    =================================
    0x78c: v78c = CALLER 
    0x78d: v78d(0x0) = CONST 
    0x791: MSTORE v78d(0x0), v78c
    0x792: v792(0x2) = CONST 
    0x794: v794(0x20) = CONST 
    0x798: MSTORE v794(0x20), v792(0x2)
    0x799: v799(0x40) = CONST 
    0x79d: v79d = SHA3 v78d(0x0), v799(0x40)
    0x79e: v79e(0x1) = CONST 
    0x7a0: v7a0(0x1) = CONST 
    0x7a2: v7a2(0xa0) = CONST 
    0x7a4: v7a4(0x10000000000000000000000000000000000000000) = SHL v7a2(0xa0), v7a0(0x1)
    0x7a5: v7a5(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7a4(0x10000000000000000000000000000000000000000), v79e(0x1)
    0x7a7: v7a7 = AND v26f, v7a5(0xffffffffffffffffffffffffffffffffffffffff)
    0x7aa: MSTORE v78d(0x0), v7a7
    0x7ad: MSTORE v794(0x20), v79d
    0x7b1: v7b1 = SHA3 v78d(0x0), v799(0x40)
    0x7b2: v7b2 = SLOAD v7b1
    0x7b4: v7b4 = MLOAD v799(0x40)
    0x7b7: MSTORE v7b4, v7b2
    0x7b9: v7b9 = MLOAD v799(0x40)
    0x7bd: v7bd(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
    0x7e2: v7e2(0x0) = SUB v7b4, v7b9
    0x7e5: v7e5(0x20) = ADD v794(0x20), v7e2(0x0)
    0x7e7: LOG3 v7b9, v7e5(0x20), v7bd(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925), v78c, v7a7
    0x7e9: v7e9(0x1) = CONST 
    0x7f0: JUMP v24e(0x1048)

    Begin block 0x1048
    prev=[0x78b], succ=[]
    =================================
    0x1049: v1049(0x40) = CONST 
    0x104c: v104c = MLOAD v1049(0x40)
    0x104e: v104e = ISZERO v7e9(0x1)
    0x104f: v104f = ISZERO v104e
    0x1051: MSTORE v104c, v104f
    0x1052: v1052 = MLOAD v1049(0x40)
    0x1056: v1056(0x0) = SUB v104c, v1052
    0x1057: v1057(0x20) = CONST 
    0x1059: v1059(0x20) = ADD v1057(0x20), v1056(0x0)
    0x105b: RETURN v1052, v1059(0x20)

    Begin block 0x756
    prev=[0x701], succ=[0xd55B0x756]
    =================================
    0x757: v757(0x766) = CONST 
    0x75c: v75c(0xffffffff) = CONST 
    0x761: v761(0xd55) = CONST 
    0x764: v764(0xd55) = AND v761(0xd55), v75c(0xffffffff)
    0x765: JUMP v764(0xd55)

    Begin block 0xd55B0x756
    prev=[0x756], succ=[0xd61B0x756, 0xd60B0x756]
    =================================
    0xd56S0x756: vd56V756(0x0) = CONST 
    0xd5aS0x756: vd5aV756 = GT v274, v725
    0xd5bS0x756: vd5bV756 = ISZERO vd5aV756
    0xd5cS0x756: vd5cV756(0xd61) = CONST 
    0xd5fS0x756: JUMPI vd5cV756(0xd61), vd5bV756

    Begin block 0xd61B0x756
    prev=[0xd55B0x756], succ=[0x766]
    =================================
    0xd64S0x756: vd64V756 = SUB v725, v274
    0xd66S0x756: JUMP v757(0x766)

    Begin block 0x766
    prev=[0xd61B0x756], succ=[0x78b]
    =================================
    0x767: v767 = CALLER 
    0x768: v768(0x0) = CONST 
    0x76c: MSTORE v768(0x0), v767
    0x76d: v76d(0x2) = CONST 
    0x76f: v76f(0x20) = CONST 
    0x773: MSTORE v76f(0x20), v76d(0x2)
    0x774: v774(0x40) = CONST 
    0x778: v778 = SHA3 v768(0x0), v774(0x40)
    0x779: v779(0x1) = CONST 
    0x77b: v77b(0x1) = CONST 
    0x77d: v77d(0xa0) = CONST 
    0x77f: v77f(0x10000000000000000000000000000000000000000) = SHL v77d(0xa0), v77b(0x1)
    0x780: v780(0xffffffffffffffffffffffffffffffffffffffff) = SUB v77f(0x10000000000000000000000000000000000000000), v779(0x1)
    0x782: v782 = AND v26f, v780(0xffffffffffffffffffffffffffffffffffffffff)
    0x784: MSTORE v768(0x0), v782
    0x787: MSTORE v76f(0x20), v778
    0x789: v789 = SHA3 v768(0x0), v774(0x40)
    0x78a: SSTORE v789, vd64V756

    Begin block 0xd60B0x756
    prev=[0xd55B0x756], succ=[]
    =================================
    0xd60S0x756: THROW 

}

function balanceOf(address)() public {
    Begin block 0x279
    prev=[], succ=[0x28b, 0x28f]
    =================================
    0x27a: v27a(0x107b) = CONST 
    0x27d: v27d(0x4) = CONST 
    0x280: v280 = CALLDATASIZE 
    0x281: v281 = SUB v280, v27d(0x4)
    0x282: v282(0x20) = CONST 
    0x285: v285 = LT v281, v282(0x20)
    0x286: v286 = ISZERO v285
    0x287: v287(0x28f) = CONST 
    0x28a: JUMPI v287(0x28f), v286

    Begin block 0x28b
    prev=[0x279], succ=[]
    =================================
    0x28b: v28b(0x0) = CONST 
    0x28e: REVERT v28b(0x0), v28b(0x0)

    Begin block 0x28f
    prev=[0x279], succ=[0x7f1]
    =================================
    0x291: v291 = CALLDATALOAD v27d(0x4)
    0x292: v292(0x1) = CONST 
    0x294: v294(0x1) = CONST 
    0x296: v296(0xa0) = CONST 
    0x298: v298(0x10000000000000000000000000000000000000000) = SHL v296(0xa0), v294(0x1)
    0x299: v299(0xffffffffffffffffffffffffffffffffffffffff) = SUB v298(0x10000000000000000000000000000000000000000), v292(0x1)
    0x29a: v29a = AND v299(0xffffffffffffffffffffffffffffffffffffffff), v291
    0x29b: v29b(0x7f1) = CONST 
    0x29e: JUMP v29b(0x7f1)

    Begin block 0x7f1
    prev=[0x28f], succ=[0x107b]
    =================================
    0x7f2: v7f2(0x1) = CONST 
    0x7f4: v7f4(0x1) = CONST 
    0x7f6: v7f6(0xa0) = CONST 
    0x7f8: v7f8(0x10000000000000000000000000000000000000000) = SHL v7f6(0xa0), v7f4(0x1)
    0x7f9: v7f9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v7f8(0x10000000000000000000000000000000000000000), v7f2(0x1)
    0x7fa: v7fa = AND v7f9(0xffffffffffffffffffffffffffffffffffffffff), v29a
    0x7fb: v7fb(0x0) = CONST 
    0x7ff: MSTORE v7fb(0x0), v7fa
    0x800: v800(0x1) = CONST 
    0x802: v802(0x20) = CONST 
    0x804: MSTORE v802(0x20), v800(0x1)
    0x805: v805(0x40) = CONST 
    0x808: v808 = SHA3 v7fb(0x0), v805(0x40)
    0x809: v809 = SLOAD v808
    0x80b: JUMP v27a(0x107b)

    Begin block 0x107b
    prev=[0x7f1], succ=[]
    =================================
    0x107c: v107c(0x40) = CONST 
    0x107f: v107f = MLOAD v107c(0x40)
    0x1082: MSTORE v107f, v809
    0x1083: v1083 = MLOAD v107c(0x40)
    0x1087: v1087(0x0) = SUB v107f, v1083
    0x1088: v1088(0x20) = CONST 
    0x108a: v108a(0x20) = ADD v1088(0x20), v1087(0x0)
    0x108c: RETURN v1083, v108a(0x20)

}

function initialize()() public {
    Begin block 0x29f
    prev=[], succ=[0x80cB0x29f]
    =================================
    0x2a0: v2a0(0x10ac) = CONST 
    0x2a3: v2a3(0x80c) = CONST 
    0x2a6: JUMP v2a3(0x80c), v2a0(0x10ac)

    Begin block 0x80cB0x29f
    prev=[0x29f], succ=[0x827B0x29f, 0x81fB0x29f]
    =================================
    0x80dS0x29f: v80dV29f(0x4) = CONST 
    0x80fS0x29f: v80fV29f = SLOAD v80dV29f(0x4)
    0x810S0x29f: v810V29f(0x1) = CONST 
    0x812S0x29f: v812V29f(0xa8) = CONST 
    0x814S0x29f: v814V29f(0x1000000000000000000000000000000000000000000) = SHL v812V29f(0xa8), v810V29f(0x1)
    0x816S0x29f: v816V29f = DIV v80fV29f, v814V29f(0x1000000000000000000000000000000000000000000)
    0x817S0x29f: v817V29f(0xff) = CONST 
    0x819S0x29f: v819V29f = AND v817V29f(0xff), v816V29f
    0x81bS0x29f: v81bV29f(0x827) = CONST 
    0x81eS0x29f: JUMPI v81bV29f(0x827), v819V29f

    Begin block 0x827B0x29f
    prev=[0x80cB0x29f, 0xd810xd7dB0x81fB0x29f], succ=[0x83cB0x29f, 0x82dB0x29f]
    =================================
    0x827_0x0S0x29f: v827_0V29f = PHI v819V29f, vd80V81fV29f
    0x829S0x29f: v829V29f(0x83c) = CONST 
    0x82cS0x29f: JUMPI v829V29f(0x83c), v827_0V29f

    Begin block 0x83cB0x29f
    prev=[0x827B0x29f, 0x82dB0x29f], succ=[0x841B0x29f, 0x877B0x29f]
    =================================
    0x83c_0x0S0x29f: v83c_0V29f = PHI v819V29f, v83bV29f, vd80V81fV29f
    0x83dS0x29f: v83dV29f(0x877) = CONST 
    0x840S0x29f: JUMPI v83dV29f(0x877), v83c_0V29f

    Begin block 0x841B0x29f
    prev=[0x83cB0x29f], succ=[]
    =================================
    0x841S0x29f: v841V29f(0x40) = CONST 
    0x843S0x29f: v843V29f = MLOAD v841V29f(0x40)
    0x844S0x29f: v844V29f(0x461bcd) = CONST 
    0x848S0x29f: v848V29f(0xe5) = CONST 
    0x84aS0x29f: v84aV29f(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v848V29f(0xe5), v844V29f(0x461bcd)
    0x84cS0x29f: MSTORE v843V29f, v84aV29f(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x84dS0x29f: v84dV29f(0x4) = CONST 
    0x84fS0x29f: v84fV29f = ADD v84dV29f(0x4), v843V29f
    0x852S0x29f: v852V29f(0x20) = CONST 
    0x854S0x29f: v854V29f = ADD v852V29f(0x20), v84fV29f
    0x857S0x29f: v857V29f(0x20) = SUB v854V29f, v84fV29f
    0x859S0x29f: MSTORE v84fV29f, v857V29f(0x20)
    0x85aS0x29f: v85aV29f(0x2e) = CONST 
    0x85dS0x29f: MSTORE v854V29f, v85aV29f(0x2e)
    0x85eS0x29f: v85eV29f(0x20) = CONST 
    0x860S0x29f: v860V29f = ADD v85eV29f(0x20), v854V29f
    0x862S0x29f: v862V29f(0xe1d) = CONST 
    0x865S0x29f: v865V29f(0x2e) = CONST 
    0x868S0x29f: CODECOPY v860V29f, v862V29f(0xe1d), v865V29f(0x2e)
    0x869S0x29f: v869V29f(0x40) = CONST 
    0x86bS0x29f: v86bV29f = ADD v869V29f(0x40), v860V29f
    0x86fS0x29f: v86fV29f(0x40) = CONST 
    0x871S0x29f: v871V29f = MLOAD v86fV29f(0x40)
    0x874S0x29f: v874V29f(0x84) = SUB v86bV29f, v871V29f
    0x876S0x29f: REVERT v871V29f, v874V29f(0x84)

    Begin block 0x877B0x29f
    prev=[0x83cB0x29f], succ=[0x88cB0x29f, 0x8aeB0x29f]
    =================================
    0x878S0x29f: v878V29f(0x4) = CONST 
    0x87aS0x29f: v87aV29f = SLOAD v878V29f(0x4)
    0x87bS0x29f: v87bV29f(0x1) = CONST 
    0x87dS0x29f: v87dV29f(0xa8) = CONST 
    0x87fS0x29f: v87fV29f(0x1000000000000000000000000000000000000000000) = SHL v87dV29f(0xa8), v87bV29f(0x1)
    0x881S0x29f: v881V29f = DIV v87aV29f, v87fV29f(0x1000000000000000000000000000000000000000000)
    0x882S0x29f: v882V29f(0xff) = CONST 
    0x884S0x29f: v884V29f = AND v882V29f(0xff), v881V29f
    0x885S0x29f: v885V29f = ISZERO v884V29f
    0x887S0x29f: v887V29f = ISZERO v885V29f
    0x888S0x29f: v888V29f(0x8ae) = CONST 
    0x88bS0x29f: JUMPI v888V29f(0x8ae), v887V29f

    Begin block 0x88cB0x29f
    prev=[0x877B0x29f], succ=[0x8aeB0x29f]
    =================================
    0x88cS0x29f: v88cV29f(0x4) = CONST 
    0x88fS0x29f: v88fV29f = SLOAD v88cV29f(0x4)
    0x890S0x29f: v890V29f(0xff) = CONST 
    0x892S0x29f: v892V29f(0xa0) = CONST 
    0x894S0x29f: v894V29f(0xff0000000000000000000000000000000000000000) = SHL v892V29f(0xa0), v890V29f(0xff)
    0x895S0x29f: v895V29f(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff) = NOT v894V29f(0xff0000000000000000000000000000000000000000)
    0x896S0x29f: v896V29f(0xff) = CONST 
    0x898S0x29f: v898V29f(0xa8) = CONST 
    0x89aS0x29f: v89aV29f(0xff000000000000000000000000000000000000000000) = SHL v898V29f(0xa8), v896V29f(0xff)
    0x89bS0x29f: v89bV29f(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) = NOT v89aV29f(0xff000000000000000000000000000000000000000000)
    0x89eS0x29f: v89eV29f = AND v88fV29f, v89bV29f(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff)
    0x89fS0x29f: v89fV29f(0x1) = CONST 
    0x8a1S0x29f: v8a1V29f(0xa8) = CONST 
    0x8a3S0x29f: v8a3V29f(0x1000000000000000000000000000000000000000000) = SHL v8a1V29f(0xa8), v89fV29f(0x1)
    0x8a4S0x29f: v8a4V29f = OR v8a3V29f(0x1000000000000000000000000000000000000000000), v89eV29f
    0x8a5S0x29f: v8a5V29f = AND v8a4V29f, v895V29f(0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff)
    0x8a6S0x29f: v8a6V29f(0x1) = CONST 
    0x8a8S0x29f: v8a8V29f(0xa0) = CONST 
    0x8aaS0x29f: v8aaV29f(0x10000000000000000000000000000000000000000) = SHL v8a8V29f(0xa0), v8a6V29f(0x1)
    0x8abS0x29f: v8abV29f = OR v8aaV29f(0x10000000000000000000000000000000000000000), v8a5V29f
    0x8adS0x29f: SSTORE v88cV29f(0x4), v8abV29f

    Begin block 0x8aeB0x29f
    prev=[0x88cB0x29f, 0x877B0x29f], succ=[0xd84B0x8aeB0x29f]
    =================================
    0x8afS0x29f: v8afV29f(0x40) = CONST 
    0x8b2S0x29f: v8b2V29f = MLOAD v8afV29f(0x40)
    0x8b5S0x29f: v8b5V29f = ADD v8afV29f(0x40), v8b2V29f
    0x8b8S0x29f: MSTORE v8afV29f(0x40), v8b5V29f
    0x8b9S0x29f: v8b9V29f(0x9) = CONST 
    0x8bdS0x29f: MSTORE v8b2V29f, v8b9V29f(0x9)
    0x8beS0x29f: v8beV29f(0x2ba7a6902a37b5b2b7) = CONST 
    0x8c8S0x29f: v8c8V29f(0xb9) = CONST 
    0x8caS0x29f: v8caV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000000) = SHL v8c8V29f(0xb9), v8beV29f(0x2ba7a6902a37b5b2b7)
    0x8cbS0x29f: v8cbV29f(0x20) = CONST 
    0x8cfS0x29f: v8cfV29f = ADD v8b2V29f, v8cbV29f(0x20)
    0x8d2S0x29f: MSTORE v8cfV29f, v8caV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000000)
    0x8d3S0x29f: v8d3V29f(0x8de) = CONST 
    0x8d7S0x29f: v8d7V29f(0x37) = CONST 
    0x8daS0x29f: v8daV29f(0xd84) = CONST 
    0x8ddS0x29f: JUMP v8daV29f(0xd84)

    Begin block 0xd84B0x8aeB0x29f
    prev=[0x8aeB0x29f], succ=[0xdc5B0x8aeB0x29f, 0xdb5B0x8aeB0x29f]
    =================================
    0xd87S0x8aeS0x29f: vd87V8aeV29f = SLOAD v8d7V29f(0x37)
    0xd88S0x8aeS0x29f: vd88V8aeV29f(0x1) = CONST 
    0xd8bS0x8aeS0x29f: vd8bV8aeV29f(0x1) = CONST 
    0xd8dS0x8aeS0x29f: vd8dV8aeV29f = AND vd8bV8aeV29f(0x1), vd87V8aeV29f
    0xd8eS0x8aeS0x29f: vd8eV8aeV29f = ISZERO vd8dV8aeV29f
    0xd8fS0x8aeS0x29f: vd8fV8aeV29f(0x100) = CONST 
    0xd92S0x8aeS0x29f: vd92V8aeV29f = MUL vd8fV8aeV29f(0x100), vd8eV8aeV29f
    0xd93S0x8aeS0x29f: vd93V8aeV29f = SUB vd92V8aeV29f, vd88V8aeV29f(0x1)
    0xd94S0x8aeS0x29f: vd94V8aeV29f = AND vd93V8aeV29f, vd87V8aeV29f
    0xd95S0x8aeS0x29f: vd95V8aeV29f(0x2) = CONST 
    0xd98S0x8aeS0x29f: vd98V8aeV29f = DIV vd94V8aeV29f, vd95V8aeV29f(0x2)
    0xd9aS0x8aeS0x29f: vd9aV8aeV29f(0x0) = CONST 
    0xd9cS0x8aeS0x29f: MSTORE vd9aV8aeV29f(0x0), v8d7V29f(0x37)
    0xd9dS0x8aeS0x29f: vd9dV8aeV29f(0x20) = CONST 
    0xd9fS0x8aeS0x29f: vd9fV8aeV29f(0x0) = CONST 
    0xda1S0x8aeS0x29f: vda1V8aeV29f = SHA3 vd9fV8aeV29f(0x0), vd9dV8aeV29f(0x20)
    0xda3S0x8aeS0x29f: vda3V8aeV29f(0x1f) = CONST 
    0xda5S0x8aeS0x29f: vda5V8aeV29f = ADD vda3V8aeV29f(0x1f), vd98V8aeV29f
    0xda6S0x8aeS0x29f: vda6V8aeV29f(0x20) = CONST 
    0xda9S0x8aeS0x29f: vda9V8aeV29f = DIV vda5V8aeV29f, vda6V8aeV29f(0x20)
    0xdabS0x8aeS0x29f: vdabV8aeV29f = ADD vda1V8aeV29f, vda9V8aeV29f
    0xdaeS0x8aeS0x29f: vdaeV8aeV29f(0x1f) = CONST 
    0xdb0S0x8aeS0x29f: vdb0V8aeV29f(0x0) = LT vdaeV8aeV29f(0x1f), v8b9V29f(0x9)
    0xdb1S0x8aeS0x29f: vdb1V8aeV29f(0xdc5) = CONST 
    0xdb4S0x8aeS0x29f: JUMPI vdb1V8aeV29f(0xdc5), vdb0V8aeV29f(0x0)

    Begin block 0xdc5B0x8aeB0x29f
    prev=[0xd84B0x8aeB0x29f], succ=[0xdf2B0x8aeB0x29f, 0xdd4B0x8aeB0x29f]
    =================================
    0xdc8S0x8aeS0x29f: vdc8V8aeV29f(0x12) = ADD v8b9V29f(0x9), v8b9V29f(0x9)
    0xdc9S0x8aeS0x29f: vdc9V8aeV29f(0x1) = CONST 
    0xdcbS0x8aeS0x29f: vdcbV8aeV29f(0x13) = ADD vdc9V8aeV29f(0x1), vdc8V8aeV29f(0x12)
    0xdcdS0x8aeS0x29f: SSTORE v8d7V29f(0x37), vdcbV8aeV29f(0x13)
    0xdcfS0x8aeS0x29f: vdcfV8aeV29f = ISZERO v8b9V29f(0x9)
    0xdd0S0x8aeS0x29f: vdd0V8aeV29f(0xdf2) = CONST 
    0xdd3S0x8aeS0x29f: JUMPI vdd0V8aeV29f(0xdf2), vdcfV8aeV29f

    Begin block 0xdf2B0x8aeB0x29f
    prev=[0xdc5B0x8aeB0x29f, 0xdd7B0x8aeB0x29f, 0xdb5B0x8aeB0x29f], succ=[0xe02B0xdf2B0x8aeB0x29f]
    =================================
    0xdf2_0x1S0x8aeS0x29f: vdf2_1V8aeV29f = PHI vda1V8aeV29f, vdecV8aeV29f
    0xdf4S0x8aeS0x29f: vdf4V8aeV29f(0x12eb) = CONST 
    0xdfaS0x8aeS0x29f: vdfaV8aeV29f(0xe02) = CONST 
    0xdfdS0x8aeS0x29f: JUMP vdfaV8aeV29f(0xe02)

    Begin block 0xe02B0xdf2B0x8aeB0x29f
    prev=[0xdf2B0x8aeB0x29f], succ=[0xe08B0xdf2B0x8aeB0x29f]
    =================================
    0xe03S0xdf2S0x8aeS0x29f: ve03Vdf2V8aeV29f(0xd81) = CONST 

    Begin block 0xe08B0xdf2B0x8aeB0x29f
    prev=[0xe11B0xdf2B0x8aeB0x29f, 0xe02B0xdf2B0x8aeB0x29f], succ=[0xe11B0xdf2B0x8aeB0x29f, 0x130eB0xdf2B0x8aeB0x29f]
    =================================
    0xe08_0x0S0xdf2S0x8aeS0x29f: ve08_0Vdf2V8aeV29f = PHI vdf2_1V8aeV29f, ve17Vdf2V8aeV29f
    0xe0bS0xdf2S0x8aeS0x29f: ve0bVdf2V8aeV29f = GT vdabV8aeV29f, ve08_0Vdf2V8aeV29f
    0xe0cS0xdf2S0x8aeS0x29f: ve0cVdf2V8aeV29f = ISZERO ve0bVdf2V8aeV29f
    0xe0dS0xdf2S0x8aeS0x29f: ve0dVdf2V8aeV29f(0x130e) = CONST 
    0xe10S0xdf2S0x8aeS0x29f: JUMPI ve0dVdf2V8aeV29f(0x130e), ve0cVdf2V8aeV29f

    Begin block 0xe11B0xdf2B0x8aeB0x29f
    prev=[0xe08B0xdf2B0x8aeB0x29f], succ=[0xe08B0xdf2B0x8aeB0x29f]
    =================================
    0xe11S0xdf2S0x8aeS0x29f: ve11Vdf2V8aeV29f(0x0) = CONST 
    0xe11_0x0S0xdf2S0x8aeS0x29f: ve11_0Vdf2V8aeV29f = PHI vdf2_1V8aeV29f, ve17Vdf2V8aeV29f
    0xe14S0xdf2S0x8aeS0x29f: SSTORE ve11_0Vdf2V8aeV29f, ve11Vdf2V8aeV29f(0x0)
    0xe15S0xdf2S0x8aeS0x29f: ve15Vdf2V8aeV29f(0x1) = CONST 
    0xe17S0xdf2S0x8aeS0x29f: ve17Vdf2V8aeV29f = ADD ve15Vdf2V8aeV29f(0x1), ve11_0Vdf2V8aeV29f
    0xe18S0xdf2S0x8aeS0x29f: ve18Vdf2V8aeV29f(0xe08) = CONST 
    0xe1bS0xdf2S0x8aeS0x29f: JUMP ve18Vdf2V8aeV29f(0xe08)

    Begin block 0x130eB0xdf2B0x8aeB0x29f
    prev=[0xe08B0xdf2B0x8aeB0x29f], succ=[0xd810xe02B0xdf2B0x8aeB0x29f]
    =================================
    0x1311S0xdf2S0x8aeS0x29f: JUMP ve03Vdf2V8aeV29f(0xd81)

    Begin block 0xd810xe02B0xdf2B0x8aeB0x29f
    prev=[0x130eB0xdf2B0x8aeB0x29f], succ=[0x12ebB0x8aeB0x29f]
    =================================
    0xd830xe02S0xdf2S0x8aeS0x29f: JUMP vdf4V8aeV29f(0x12eb)

    Begin block 0x12ebB0x8aeB0x29f
    prev=[0xd810xe02B0xdf2B0x8aeB0x29f], succ=[0x8deB0x29f]
    =================================
    0x12eeS0x8aeS0x29f: JUMP v8d3V29f(0x8de)

    Begin block 0x8deB0x29f
    prev=[0x12ebB0x8aeB0x29f], succ=[0xd84B0x8deB0x29f]
    =================================
    0x8e0S0x29f: v8e0V29f(0x40) = CONST 
    0x8e3S0x29f: v8e3V29f = MLOAD v8e0V29f(0x40)
    0x8e6S0x29f: v8e6V29f = ADD v8e0V29f(0x40), v8e3V29f
    0x8e9S0x29f: MSTORE v8e0V29f(0x40), v8e6V29f
    0x8eaS0x29f: v8eaV29f(0x3) = CONST 
    0x8eeS0x29f: MSTORE v8e3V29f, v8eaV29f(0x3)
    0x8efS0x29f: v8efV29f(0x574f4d) = CONST 
    0x8f3S0x29f: v8f3V29f(0xe8) = CONST 
    0x8f5S0x29f: v8f5V29f(0x574f4d0000000000000000000000000000000000000000000000000000000000) = SHL v8f3V29f(0xe8), v8efV29f(0x574f4d)
    0x8f6S0x29f: v8f6V29f(0x20) = CONST 
    0x8faS0x29f: v8faV29f = ADD v8e3V29f, v8f6V29f(0x20)
    0x8fdS0x29f: MSTORE v8faV29f, v8f5V29f(0x574f4d0000000000000000000000000000000000000000000000000000000000)
    0x8feS0x29f: v8feV29f(0x909) = CONST 
    0x902S0x29f: v902V29f(0x38) = CONST 
    0x905S0x29f: v905V29f(0xd84) = CONST 
    0x908S0x29f: JUMP v905V29f(0xd84)

    Begin block 0xd84B0x8deB0x29f
    prev=[0x8deB0x29f], succ=[0xdc5B0x8deB0x29f, 0xdb5B0x8deB0x29f]
    =================================
    0xd87S0x8deS0x29f: vd87V8deV29f = SLOAD v902V29f(0x38)
    0xd88S0x8deS0x29f: vd88V8deV29f(0x1) = CONST 
    0xd8bS0x8deS0x29f: vd8bV8deV29f(0x1) = CONST 
    0xd8dS0x8deS0x29f: vd8dV8deV29f = AND vd8bV8deV29f(0x1), vd87V8deV29f
    0xd8eS0x8deS0x29f: vd8eV8deV29f = ISZERO vd8dV8deV29f
    0xd8fS0x8deS0x29f: vd8fV8deV29f(0x100) = CONST 
    0xd92S0x8deS0x29f: vd92V8deV29f = MUL vd8fV8deV29f(0x100), vd8eV8deV29f
    0xd93S0x8deS0x29f: vd93V8deV29f = SUB vd92V8deV29f, vd88V8deV29f(0x1)
    0xd94S0x8deS0x29f: vd94V8deV29f = AND vd93V8deV29f, vd87V8deV29f
    0xd95S0x8deS0x29f: vd95V8deV29f(0x2) = CONST 
    0xd98S0x8deS0x29f: vd98V8deV29f = DIV vd94V8deV29f, vd95V8deV29f(0x2)
    0xd9aS0x8deS0x29f: vd9aV8deV29f(0x0) = CONST 
    0xd9cS0x8deS0x29f: MSTORE vd9aV8deV29f(0x0), v902V29f(0x38)
    0xd9dS0x8deS0x29f: vd9dV8deV29f(0x20) = CONST 
    0xd9fS0x8deS0x29f: vd9fV8deV29f(0x0) = CONST 
    0xda1S0x8deS0x29f: vda1V8deV29f = SHA3 vd9fV8deV29f(0x0), vd9dV8deV29f(0x20)
    0xda3S0x8deS0x29f: vda3V8deV29f(0x1f) = CONST 
    0xda5S0x8deS0x29f: vda5V8deV29f = ADD vda3V8deV29f(0x1f), vd98V8deV29f
    0xda6S0x8deS0x29f: vda6V8deV29f(0x20) = CONST 
    0xda9S0x8deS0x29f: vda9V8deV29f = DIV vda5V8deV29f, vda6V8deV29f(0x20)
    0xdabS0x8deS0x29f: vdabV8deV29f = ADD vda1V8deV29f, vda9V8deV29f
    0xdaeS0x8deS0x29f: vdaeV8deV29f(0x1f) = CONST 
    0xdb0S0x8deS0x29f: vdb0V8deV29f(0x0) = LT vdaeV8deV29f(0x1f), v8eaV29f(0x3)
    0xdb1S0x8deS0x29f: vdb1V8deV29f(0xdc5) = CONST 
    0xdb4S0x8deS0x29f: JUMPI vdb1V8deV29f(0xdc5), vdb0V8deV29f(0x0)

    Begin block 0xdc5B0x8deB0x29f
    prev=[0xd84B0x8deB0x29f], succ=[0xdf2B0x8deB0x29f, 0xdd4B0x8deB0x29f]
    =================================
    0xdc8S0x8deS0x29f: vdc8V8deV29f(0x6) = ADD v8eaV29f(0x3), v8eaV29f(0x3)
    0xdc9S0x8deS0x29f: vdc9V8deV29f(0x1) = CONST 
    0xdcbS0x8deS0x29f: vdcbV8deV29f(0x7) = ADD vdc9V8deV29f(0x1), vdc8V8deV29f(0x6)
    0xdcdS0x8deS0x29f: SSTORE v902V29f(0x38), vdcbV8deV29f(0x7)
    0xdcfS0x8deS0x29f: vdcfV8deV29f = ISZERO v8eaV29f(0x3)
    0xdd0S0x8deS0x29f: vdd0V8deV29f(0xdf2) = CONST 
    0xdd3S0x8deS0x29f: JUMPI vdd0V8deV29f(0xdf2), vdcfV8deV29f

    Begin block 0xdf2B0x8deB0x29f
    prev=[0xdc5B0x8deB0x29f, 0xdd7B0x8deB0x29f, 0xdb5B0x8deB0x29f], succ=[0xe02B0xdf2B0x8deB0x29f]
    =================================
    0xdf2_0x1S0x8deS0x29f: vdf2_1V8deV29f = PHI vda1V8deV29f, vdecV8deV29f
    0xdf4S0x8deS0x29f: vdf4V8deV29f(0x12eb) = CONST 
    0xdfaS0x8deS0x29f: vdfaV8deV29f(0xe02) = CONST 
    0xdfdS0x8deS0x29f: JUMP vdfaV8deV29f(0xe02)

    Begin block 0xe02B0xdf2B0x8deB0x29f
    prev=[0xdf2B0x8deB0x29f], succ=[0xe08B0xdf2B0x8deB0x29f]
    =================================
    0xe03S0xdf2S0x8deS0x29f: ve03Vdf2V8deV29f(0xd81) = CONST 

    Begin block 0xe08B0xdf2B0x8deB0x29f
    prev=[0xe11B0xdf2B0x8deB0x29f, 0xe02B0xdf2B0x8deB0x29f], succ=[0xe11B0xdf2B0x8deB0x29f, 0x130eB0xdf2B0x8deB0x29f]
    =================================
    0xe08_0x0S0xdf2S0x8deS0x29f: ve08_0Vdf2V8deV29f = PHI vdf2_1V8deV29f, ve17Vdf2V8deV29f
    0xe0bS0xdf2S0x8deS0x29f: ve0bVdf2V8deV29f = GT vdabV8deV29f, ve08_0Vdf2V8deV29f
    0xe0cS0xdf2S0x8deS0x29f: ve0cVdf2V8deV29f = ISZERO ve0bVdf2V8deV29f
    0xe0dS0xdf2S0x8deS0x29f: ve0dVdf2V8deV29f(0x130e) = CONST 
    0xe10S0xdf2S0x8deS0x29f: JUMPI ve0dVdf2V8deV29f(0x130e), ve0cVdf2V8deV29f

    Begin block 0xe11B0xdf2B0x8deB0x29f
    prev=[0xe08B0xdf2B0x8deB0x29f], succ=[0xe08B0xdf2B0x8deB0x29f]
    =================================
    0xe11S0xdf2S0x8deS0x29f: ve11Vdf2V8deV29f(0x0) = CONST 
    0xe11_0x0S0xdf2S0x8deS0x29f: ve11_0Vdf2V8deV29f = PHI vdf2_1V8deV29f, ve17Vdf2V8deV29f
    0xe14S0xdf2S0x8deS0x29f: SSTORE ve11_0Vdf2V8deV29f, ve11Vdf2V8deV29f(0x0)
    0xe15S0xdf2S0x8deS0x29f: ve15Vdf2V8deV29f(0x1) = CONST 
    0xe17S0xdf2S0x8deS0x29f: ve17Vdf2V8deV29f = ADD ve15Vdf2V8deV29f(0x1), ve11_0Vdf2V8deV29f
    0xe18S0xdf2S0x8deS0x29f: ve18Vdf2V8deV29f(0xe08) = CONST 
    0xe1bS0xdf2S0x8deS0x29f: JUMP ve18Vdf2V8deV29f(0xe08)

    Begin block 0x130eB0xdf2B0x8deB0x29f
    prev=[0xe08B0xdf2B0x8deB0x29f], succ=[0xd810xe02B0xdf2B0x8deB0x29f]
    =================================
    0x1311S0xdf2S0x8deS0x29f: JUMP ve03Vdf2V8deV29f(0xd81)

    Begin block 0xd810xe02B0xdf2B0x8deB0x29f
    prev=[0x130eB0xdf2B0x8deB0x29f], succ=[0x12ebB0x8deB0x29f]
    =================================
    0xd830xe02S0xdf2S0x8deS0x29f: JUMP vdf4V8deV29f(0x12eb)

    Begin block 0x12ebB0x8deB0x29f
    prev=[0xd810xe02B0xdf2B0x8deB0x29f], succ=[0x909B0x29f]
    =================================
    0x12eeS0x8deS0x29f: JUMP v8feV29f(0x909)

    Begin block 0x909B0x29f
    prev=[0x12ebB0x8deB0x29f], succ=[0x973B0x29f, 0x980B0x29f]
    =================================
    0x90bS0x29f: v90bV29f(0x12) = CONST 
    0x90dS0x29f: v90dV29f(0x39) = CONST 
    0x90fS0x29f: SSTORE v90dV29f(0x39), v90bV29f(0x12)
    0x910S0x29f: v910V29f(0x33b2e3c9fd0803ce8000000) = CONST 
    0x91dS0x29f: v91dV29f(0x3a) = CONST 
    0x921S0x29f: SSTORE v91dV29f(0x3a), v910V29f(0x33b2e3c9fd0803ce8000000)
    0x922S0x29f: v922V29f(0x0) = CONST 
    0x926S0x29f: SSTORE v922V29f(0x0), v910V29f(0x33b2e3c9fd0803ce8000000)
    0x927S0x29f: v927V29f = CALLER 
    0x92aS0x29f: MSTORE v922V29f(0x0), v927V29f
    0x92bS0x29f: v92bV29f(0x1) = CONST 
    0x92dS0x29f: v92dV29f(0x20) = CONST 
    0x931S0x29f: MSTORE v92dV29f(0x20), v92bV29f(0x1)
    0x932S0x29f: v932V29f(0x40) = CONST 
    0x936S0x29f: v936V29f = SHA3 v922V29f(0x0), v932V29f(0x40)
    0x939S0x29f: SSTORE v936V29f, v910V29f(0x33b2e3c9fd0803ce8000000)
    0x93bS0x29f: v93bV29f = MLOAD v932V29f(0x40)
    0x93eS0x29f: MSTORE v93bV29f, v910V29f(0x33b2e3c9fd0803ce8000000)
    0x93fS0x29f: v93fV29f = MLOAD v932V29f(0x40)
    0x942S0x29f: v942V29f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
    0x967S0x29f: v967V29f(0x0) = SUB v93bV29f, v93fV29f
    0x96aS0x29f: v96aV29f(0x20) = ADD v92dV29f(0x20), v967V29f(0x0)
    0x96cS0x29f: LOG3 v93fV29f, v96aV29f(0x20), v942V29f(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), v922V29f(0x0), v927V29f
    0x96eS0x29f: v96eV29f = ISZERO v885V29f
    0x96fS0x29f: v96fV29f(0x980) = CONST 
    0x972S0x29f: JUMPI v96fV29f(0x980), v96eV29f

    Begin block 0x973B0x29f
    prev=[0x909B0x29f], succ=[0x980B0x29f]
    =================================
    0x973S0x29f: v973V29f(0x4) = CONST 
    0x976S0x29f: v976V29f = SLOAD v973V29f(0x4)
    0x977S0x29f: v977V29f(0xff) = CONST 
    0x979S0x29f: v979V29f(0xa8) = CONST 
    0x97bS0x29f: v97bV29f(0xff000000000000000000000000000000000000000000) = SHL v979V29f(0xa8), v977V29f(0xff)
    0x97cS0x29f: v97cV29f(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) = NOT v97bV29f(0xff000000000000000000000000000000000000000000)
    0x97dS0x29f: v97dV29f = AND v97cV29f(0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff), v976V29f
    0x97fS0x29f: SSTORE v973V29f(0x4), v97dV29f

    Begin block 0x980B0x29f
    prev=[0x973B0x29f, 0x909B0x29f], succ=[0x10ac]
    =================================
    0x982S0x29f: JUMP v2a0(0x10ac)

    Begin block 0x10ac
    prev=[0x980B0x29f], succ=[]
    =================================
    0x10ad: STOP 

    Begin block 0xdd4B0x8deB0x29f
    prev=[0xdc5B0x8deB0x29f], succ=[0xdd7B0x8deB0x29f]
    =================================
    0xdd6S0x8deS0x29f: vdd6V8deV29f = ADD v8faV29f, v8eaV29f(0x3)

    Begin block 0xdd7B0x8deB0x29f
    prev=[0xdd4B0x8deB0x29f, 0xde0B0x8deB0x29f], succ=[0xdf2B0x8deB0x29f, 0xde0B0x8deB0x29f]
    =================================
    0xdd7_0x2S0x8deS0x29f: vdd7_2V8deV29f = PHI v8faV29f, vde7V8deV29f
    0xddaS0x8deS0x29f: vddaV8deV29f = GT vdd6V8deV29f, vdd7_2V8deV29f
    0xddbS0x8deS0x29f: vddbV8deV29f = ISZERO vddaV8deV29f
    0xddcS0x8deS0x29f: vddcV8deV29f(0xdf2) = CONST 
    0xddfS0x8deS0x29f: JUMPI vddcV8deV29f(0xdf2), vddbV8deV29f

    Begin block 0xde0B0x8deB0x29f
    prev=[0xdd7B0x8deB0x29f], succ=[0xdd7B0x8deB0x29f]
    =================================
    0xde0_0x1S0x8deS0x29f: vde0_1V8deV29f = PHI vda1V8deV29f, vdecV8deV29f
    0xde0_0x2S0x8deS0x29f: vde0_2V8deV29f = PHI v8faV29f, vde7V8deV29f
    0xde1S0x8deS0x29f: vde1V8deV29f = MLOAD vde0_2V8deV29f
    0xde3S0x8deS0x29f: SSTORE vde0_1V8deV29f, vde1V8deV29f
    0xde5S0x8deS0x29f: vde5V8deV29f(0x20) = CONST 
    0xde7S0x8deS0x29f: vde7V8deV29f = ADD vde5V8deV29f(0x20), vde0_2V8deV29f
    0xdeaS0x8deS0x29f: vdeaV8deV29f(0x1) = CONST 
    0xdecS0x8deS0x29f: vdecV8deV29f = ADD vdeaV8deV29f(0x1), vde0_1V8deV29f
    0xdeeS0x8deS0x29f: vdeeV8deV29f(0xdd7) = CONST 
    0xdf1S0x8deS0x29f: JUMP vdeeV8deV29f(0xdd7)

    Begin block 0xdb5B0x8deB0x29f
    prev=[0xd84B0x8deB0x29f], succ=[0xdf2B0x8deB0x29f]
    =================================
    0xdb6S0x8deS0x29f: vdb6V8deV29f(0x574f4d0000000000000000000000000000000000000000000000000000000000) = MLOAD v8faV29f
    0xdb7S0x8deS0x29f: vdb7V8deV29f(0xff) = CONST 
    0xdb9S0x8deS0x29f: vdb9V8deV29f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vdb7V8deV29f(0xff)
    0xdbaS0x8deS0x29f: vdbaV8deV29f(0x574f4d0000000000000000000000000000000000000000000000000000000000) = AND vdb9V8deV29f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), vdb6V8deV29f(0x574f4d0000000000000000000000000000000000000000000000000000000000)
    0xdbdS0x8deS0x29f: vdbdV8deV29f(0x6) = ADD v8eaV29f(0x3), v8eaV29f(0x3)
    0xdbeS0x8deS0x29f: vdbeV8deV29f(0x574f4d0000000000000000000000000000000000000000000000000000000006) = OR vdbdV8deV29f(0x6), vdbaV8deV29f(0x574f4d0000000000000000000000000000000000000000000000000000000000)
    0xdc0S0x8deS0x29f: SSTORE v902V29f(0x38), vdbeV8deV29f(0x574f4d0000000000000000000000000000000000000000000000000000000006)
    0xdc1S0x8deS0x29f: vdc1V8deV29f(0xdf2) = CONST 
    0xdc4S0x8deS0x29f: JUMP vdc1V8deV29f(0xdf2)

    Begin block 0xdd4B0x8aeB0x29f
    prev=[0xdc5B0x8aeB0x29f], succ=[0xdd7B0x8aeB0x29f]
    =================================
    0xdd6S0x8aeS0x29f: vdd6V8aeV29f = ADD v8cfV29f, v8b9V29f(0x9)

    Begin block 0xdd7B0x8aeB0x29f
    prev=[0xdd4B0x8aeB0x29f, 0xde0B0x8aeB0x29f], succ=[0xdf2B0x8aeB0x29f, 0xde0B0x8aeB0x29f]
    =================================
    0xdd7_0x2S0x8aeS0x29f: vdd7_2V8aeV29f = PHI v8cfV29f, vde7V8aeV29f
    0xddaS0x8aeS0x29f: vddaV8aeV29f = GT vdd6V8aeV29f, vdd7_2V8aeV29f
    0xddbS0x8aeS0x29f: vddbV8aeV29f = ISZERO vddaV8aeV29f
    0xddcS0x8aeS0x29f: vddcV8aeV29f(0xdf2) = CONST 
    0xddfS0x8aeS0x29f: JUMPI vddcV8aeV29f(0xdf2), vddbV8aeV29f

    Begin block 0xde0B0x8aeB0x29f
    prev=[0xdd7B0x8aeB0x29f], succ=[0xdd7B0x8aeB0x29f]
    =================================
    0xde0_0x1S0x8aeS0x29f: vde0_1V8aeV29f = PHI vda1V8aeV29f, vdecV8aeV29f
    0xde0_0x2S0x8aeS0x29f: vde0_2V8aeV29f = PHI v8cfV29f, vde7V8aeV29f
    0xde1S0x8aeS0x29f: vde1V8aeV29f = MLOAD vde0_2V8aeV29f
    0xde3S0x8aeS0x29f: SSTORE vde0_1V8aeV29f, vde1V8aeV29f
    0xde5S0x8aeS0x29f: vde5V8aeV29f(0x20) = CONST 
    0xde7S0x8aeS0x29f: vde7V8aeV29f = ADD vde5V8aeV29f(0x20), vde0_2V8aeV29f
    0xdeaS0x8aeS0x29f: vdeaV8aeV29f(0x1) = CONST 
    0xdecS0x8aeS0x29f: vdecV8aeV29f = ADD vdeaV8aeV29f(0x1), vde0_1V8aeV29f
    0xdeeS0x8aeS0x29f: vdeeV8aeV29f(0xdd7) = CONST 
    0xdf1S0x8aeS0x29f: JUMP vdeeV8aeV29f(0xdd7)

    Begin block 0xdb5B0x8aeB0x29f
    prev=[0xd84B0x8aeB0x29f], succ=[0xdf2B0x8aeB0x29f]
    =================================
    0xdb6S0x8aeS0x29f: vdb6V8aeV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000000) = MLOAD v8cfV29f
    0xdb7S0x8aeS0x29f: vdb7V8aeV29f(0xff) = CONST 
    0xdb9S0x8aeS0x29f: vdb9V8aeV29f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00) = NOT vdb7V8aeV29f(0xff)
    0xdbaS0x8aeS0x29f: vdbaV8aeV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000000) = AND vdb9V8aeV29f(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), vdb6V8aeV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000000)
    0xdbdS0x8aeS0x29f: vdbdV8aeV29f(0x12) = ADD v8b9V29f(0x9), v8b9V29f(0x9)
    0xdbeS0x8aeS0x29f: vdbeV8aeV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000012) = OR vdbdV8aeV29f(0x12), vdbaV8aeV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000000)
    0xdc0S0x8aeS0x29f: SSTORE v8d7V29f(0x37), vdbeV8aeV29f(0x574f4d20546f6b656e0000000000000000000000000000000000000000000012)
    0xdc1S0x8aeS0x29f: vdc1V8aeV29f(0xdf2) = CONST 
    0xdc4S0x8aeS0x29f: JUMP vdc1V8aeV29f(0xdf2)

    Begin block 0x82dB0x29f
    prev=[0x827B0x29f], succ=[0x83cB0x29f]
    =================================
    0x82eS0x29f: v82eV29f(0x4) = CONST 
    0x830S0x29f: v830V29f = SLOAD v82eV29f(0x4)
    0x831S0x29f: v831V29f(0x1) = CONST 
    0x833S0x29f: v833V29f(0xa0) = CONST 
    0x835S0x29f: v835V29f(0x10000000000000000000000000000000000000000) = SHL v833V29f(0xa0), v831V29f(0x1)
    0x837S0x29f: v837V29f = DIV v830V29f, v835V29f(0x10000000000000000000000000000000000000000)
    0x838S0x29f: v838V29f(0xff) = CONST 
    0x83aS0x29f: v83aV29f = AND v838V29f(0xff), v837V29f
    0x83bS0x29f: v83bV29f = ISZERO v83aV29f

    Begin block 0x81fB0x29f
    prev=[0x80cB0x29f], succ=[0xd7dB0x81fB0x29f]
    =================================
    0x820S0x29f: v820V29f(0x827) = CONST 
    0x823S0x29f: v823V29f(0xd7d) = CONST 
    0x826S0x29f: JUMP v823V29f(0xd7d)

    Begin block 0xd7dB0x81fB0x29f
    prev=[0x81fB0x29f], succ=[0xd810xd7dB0x81fB0x29f]
    =================================
    0xd7eS0x81fS0x29f: vd7eV81fV29f = ADDRESS 
    0xd7fS0x81fS0x29f: vd7fV81fV29f = EXTCODESIZE vd7eV81fV29f
    0xd80S0x81fS0x29f: vd80V81fV29f = ISZERO vd7fV81fV29f

    Begin block 0xd810xd7dB0x81fB0x29f
    prev=[0xd7dB0x81fB0x29f], succ=[0x827B0x29f]
    =================================
    0xd830xd7dS0x81fS0x29f: JUMP v820V29f(0x827)

}

function owner()() public {
    Begin block 0x2a7
    prev=[], succ=[0x983]
    =================================
    0x2a8: v2a8(0x10cd) = CONST 
    0x2ab: v2ab(0x983) = CONST 
    0x2ae: JUMP v2ab(0x983)

    Begin block 0x983
    prev=[0x2a7], succ=[0x10cd]
    =================================
    0x984: v984(0x3) = CONST 
    0x986: v986 = SLOAD v984(0x3)
    0x987: v987(0x1) = CONST 
    0x989: v989(0x1) = CONST 
    0x98b: v98b(0xa0) = CONST 
    0x98d: v98d(0x10000000000000000000000000000000000000000) = SHL v98b(0xa0), v989(0x1)
    0x98e: v98e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v98d(0x10000000000000000000000000000000000000000), v987(0x1)
    0x98f: v98f = AND v98e(0xffffffffffffffffffffffffffffffffffffffff), v986
    0x991: JUMP v2a8(0x10cd)

    Begin block 0x10cd
    prev=[0x983], succ=[]
    =================================
    0x10ce: v10ce(0x40) = CONST 
    0x10d1: v10d1 = MLOAD v10ce(0x40)
    0x10d2: v10d2(0x1) = CONST 
    0x10d4: v10d4(0x1) = CONST 
    0x10d6: v10d6(0xa0) = CONST 
    0x10d8: v10d8(0x10000000000000000000000000000000000000000) = SHL v10d6(0xa0), v10d4(0x1)
    0x10d9: v10d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v10d8(0x10000000000000000000000000000000000000000), v10d2(0x1)
    0x10dc: v10dc = AND v98f, v10d9(0xffffffffffffffffffffffffffffffffffffffff)
    0x10de: MSTORE v10d1, v10dc
    0x10df: v10df = MLOAD v10ce(0x40)
    0x10e3: v10e3(0x0) = SUB v10d1, v10df
    0x10e4: v10e4(0x20) = CONST 
    0x10e6: v10e6(0x20) = ADD v10e4(0x20), v10e3(0x0)
    0x10e8: RETURN v10df, v10e6(0x20)

}

function symbol()() public {
    Begin block 0x2cb
    prev=[], succ=[0x12e0x2cb]
    =================================
    0x2cc: v2cc(0x12e) = CONST 
    0x2cf: v2cf(0x992) = CONST 
    0x2d2: v2d2_0, v2d2_1 = CALLPRIVATE v2cf(0x992), v2cc(0x12e)

    Begin block 0x12e0x2cb
    prev=[0x2cb], succ=[0x1500x2cb]
    =================================
    0x12f0x2cb: v2cb12f(0x40) = CONST 
    0x1320x2cb: v2cb132 = MLOAD v2cb12f(0x40)
    0x1330x2cb: v2cb133(0x20) = CONST 
    0x1370x2cb: MSTORE v2cb132, v2cb133(0x20)
    0x1390x2cb: v2cb139 = MLOAD v2d2_0
    0x13c0x2cb: v2cb13c = ADD v2cb132, v2cb133(0x20)
    0x13d0x2cb: MSTORE v2cb13c, v2cb139
    0x13f0x2cb: v2cb13f = MLOAD v2d2_0
    0x1460x2cb: v2cb146 = ADD v2cb132, v2cb12f(0x40)
    0x1490x2cb: v2cb149 = ADD v2d2_0, v2cb133(0x20)
    0x14e0x2cb: v2cb14e(0x0) = CONST 

    Begin block 0x1500x2cb
    prev=[0x1590x2cb, 0x12e0x2cb], succ=[0x1680x2cb, 0x1590x2cb]
    =================================
    0x1500x2cb_0x0: v1502cb_0 = PHI v2cb163, v2cb14e(0x0)
    0x1530x2cb: v2cb153 = LT v1502cb_0, v2cb13f
    0x1540x2cb: v2cb154 = ISZERO v2cb153
    0x1550x2cb: v2cb155(0x168) = CONST 
    0x1580x2cb: JUMPI v2cb155(0x168), v2cb154

    Begin block 0x1680x2cb
    prev=[0x1500x2cb], succ=[0x1950x2cb, 0x17c0x2cb]
    =================================
    0x1710x2cb: v2cb171 = ADD v2cb13f, v2cb146
    0x1730x2cb: v2cb173(0x1f) = CONST 
    0x1750x2cb: v2cb175 = AND v2cb173(0x1f), v2cb13f
    0x1770x2cb: v2cb177 = ISZERO v2cb175
    0x1780x2cb: v2cb178(0x195) = CONST 
    0x17b0x2cb: JUMPI v2cb178(0x195), v2cb177

    Begin block 0x1950x2cb
    prev=[0x1680x2cb, 0x17c0x2cb], succ=[]
    =================================
    0x1950x2cb_0x1: v1952cb_1 = PHI v2cb192, v2cb171
    0x19b0x2cb: v2cb19b(0x40) = CONST 
    0x19d0x2cb: v2cb19d = MLOAD v2cb19b(0x40)
    0x1a00x2cb: v2cb1a0 = SUB v1952cb_1, v2cb19d
    0x1a20x2cb: RETURN v2cb19d, v2cb1a0

    Begin block 0x17c0x2cb
    prev=[0x1680x2cb], succ=[0x1950x2cb]
    =================================
    0x17e0x2cb: v2cb17e = SUB v2cb171, v2cb175
    0x1800x2cb: v2cb180 = MLOAD v2cb17e
    0x1810x2cb: v2cb181(0x1) = CONST 
    0x1840x2cb: v2cb184(0x20) = CONST 
    0x1860x2cb: v2cb186 = SUB v2cb184(0x20), v2cb175
    0x1870x2cb: v2cb187(0x100) = CONST 
    0x18a0x2cb: v2cb18a = EXP v2cb187(0x100), v2cb186
    0x18b0x2cb: v2cb18b = SUB v2cb18a, v2cb181(0x1)
    0x18c0x2cb: v2cb18c = NOT v2cb18b
    0x18d0x2cb: v2cb18d = AND v2cb18c, v2cb180
    0x18f0x2cb: MSTORE v2cb17e, v2cb18d
    0x1900x2cb: v2cb190(0x20) = CONST 
    0x1920x2cb: v2cb192 = ADD v2cb190(0x20), v2cb17e

    Begin block 0x1590x2cb
    prev=[0x1500x2cb], succ=[0x1500x2cb]
    =================================
    0x1590x2cb_0x0: v1592cb_0 = PHI v2cb163, v2cb14e(0x0)
    0x15b0x2cb: v2cb15b = ADD v1592cb_0, v2cb149
    0x15c0x2cb: v2cb15c = MLOAD v2cb15b
    0x15f0x2cb: v2cb15f = ADD v1592cb_0, v2cb146
    0x1600x2cb: MSTORE v2cb15f, v2cb15c
    0x1610x2cb: v2cb161(0x20) = CONST 
    0x1630x2cb: v2cb163 = ADD v2cb161(0x20), v1592cb_0
    0x1640x2cb: v2cb164(0x150) = CONST 
    0x1670x2cb: JUMP v2cb164(0x150)

}

function transfer(address,uint256)() public {
    Begin block 0x2d3
    prev=[], succ=[0x2e5, 0x2e9]
    =================================
    0x2d4: v2d4(0x1108) = CONST 
    0x2d7: v2d7(0x4) = CONST 
    0x2da: v2da = CALLDATASIZE 
    0x2db: v2db = SUB v2da, v2d7(0x4)
    0x2dc: v2dc(0x40) = CONST 
    0x2df: v2df = LT v2db, v2dc(0x40)
    0x2e0: v2e0 = ISZERO v2df
    0x2e1: v2e1(0x2e9) = CONST 
    0x2e4: JUMPI v2e1(0x2e9), v2e0

    Begin block 0x2e5
    prev=[0x2d3], succ=[]
    =================================
    0x2e5: v2e5(0x0) = CONST 
    0x2e8: REVERT v2e5(0x0), v2e5(0x0)

    Begin block 0x2e9
    prev=[0x2d3], succ=[0x9ed]
    =================================
    0x2eb: v2eb(0x1) = CONST 
    0x2ed: v2ed(0x1) = CONST 
    0x2ef: v2ef(0xa0) = CONST 
    0x2f1: v2f1(0x10000000000000000000000000000000000000000) = SHL v2ef(0xa0), v2ed(0x1)
    0x2f2: v2f2(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2f1(0x10000000000000000000000000000000000000000), v2eb(0x1)
    0x2f4: v2f4 = CALLDATALOAD v2d7(0x4)
    0x2f5: v2f5 = AND v2f4, v2f2(0xffffffffffffffffffffffffffffffffffffffff)
    0x2f7: v2f7(0x20) = CONST 
    0x2f9: v2f9(0x24) = ADD v2f7(0x20), v2d7(0x4)
    0x2fa: v2fa = CALLDATALOAD v2f9(0x24)
    0x2fb: v2fb(0x9ed) = CONST 
    0x2fe: JUMP v2fb(0x9ed)

    Begin block 0x9ed
    prev=[0x2e9], succ=[0xa10, 0xa02]
    =================================
    0x9ee: v9ee(0x0) = CONST 
    0x9f0: v9f0(0x1) = CONST 
    0x9f2: v9f2(0x1) = CONST 
    0x9f4: v9f4(0xa0) = CONST 
    0x9f6: v9f6(0x10000000000000000000000000000000000000000) = SHL v9f4(0xa0), v9f2(0x1)
    0x9f7: v9f7(0xffffffffffffffffffffffffffffffffffffffff) = SUB v9f6(0x10000000000000000000000000000000000000000), v9f0(0x1)
    0x9f9: v9f9 = AND v2f5, v9f7(0xffffffffffffffffffffffffffffffffffffffff)
    0x9fa: v9fa = ISZERO v9f9
    0x9fc: v9fc = ISZERO v9fa
    0x9fe: v9fe(0xa10) = CONST 
    0xa01: JUMPI v9fe(0xa10), v9fa

    Begin block 0xa10
    prev=[0x9ed, 0xa02], succ=[0xa15, 0xa19]
    =================================
    0xa10_0x0: va10_0 = PHI v9fc, va0f
    0xa11: va11(0xa19) = CONST 
    0xa14: JUMPI va11(0xa19), va10_0

    Begin block 0xa15
    prev=[0xa10], succ=[]
    =================================
    0xa15: va15(0x0) = CONST 
    0xa18: REVERT va15(0x0), va15(0x0)

    Begin block 0xa19
    prev=[0xa10], succ=[0xd55B0xa19]
    =================================
    0xa1a: va1a = CALLER 
    0xa1b: va1b(0x0) = CONST 
    0xa1f: MSTORE va1b(0x0), va1a
    0xa20: va20(0x1) = CONST 
    0xa22: va22(0x20) = CONST 
    0xa24: MSTORE va22(0x20), va20(0x1)
    0xa25: va25(0x40) = CONST 
    0xa28: va28 = SHA3 va1b(0x0), va25(0x40)
    0xa29: va29 = SLOAD va28
    0xa2a: va2a(0xa39) = CONST 
    0xa2f: va2f(0xffffffff) = CONST 
    0xa34: va34(0xd55) = CONST 
    0xa37: va37(0xd55) = AND va34(0xd55), va2f(0xffffffff)
    0xa38: JUMP va37(0xd55)

    Begin block 0xd55B0xa19
    prev=[0xa19], succ=[0xd61B0xa19, 0xd60B0xa19]
    =================================
    0xd56S0xa19: vd56Va19(0x0) = CONST 
    0xd5aS0xa19: vd5aVa19 = GT v2fa, va29
    0xd5bS0xa19: vd5bVa19 = ISZERO vd5aVa19
    0xd5cS0xa19: vd5cVa19(0xd61) = CONST 
    0xd5fS0xa19: JUMPI vd5cVa19(0xd61), vd5bVa19

    Begin block 0xd61B0xa19
    prev=[0xd55B0xa19], succ=[0xa39]
    =================================
    0xd64S0xa19: vd64Va19 = SUB va29, v2fa
    0xd66S0xa19: JUMP va2a(0xa39)

    Begin block 0xa39
    prev=[0xd61B0xa19], succ=[0xd67B0xa39]
    =================================
    0xa3a: va3a = CALLER 
    0xa3b: va3b(0x0) = CONST 
    0xa3f: MSTORE va3b(0x0), va3a
    0xa40: va40(0x1) = CONST 
    0xa42: va42(0x20) = CONST 
    0xa44: MSTORE va42(0x20), va40(0x1)
    0xa45: va45(0x40) = CONST 
    0xa49: va49 = SHA3 va3b(0x0), va45(0x40)
    0xa4d: SSTORE va49, vd64Va19
    0xa4e: va4e(0x1) = CONST 
    0xa50: va50(0x1) = CONST 
    0xa52: va52(0xa0) = CONST 
    0xa54: va54(0x10000000000000000000000000000000000000000) = SHL va52(0xa0), va50(0x1)
    0xa55: va55(0xffffffffffffffffffffffffffffffffffffffff) = SUB va54(0x10000000000000000000000000000000000000000), va4e(0x1)
    0xa57: va57 = AND v2f5, va55(0xffffffffffffffffffffffffffffffffffffffff)
    0xa59: MSTORE va3b(0x0), va57
    0xa5a: va5a = SHA3 va3b(0x0), va45(0x40)
    0xa5b: va5b = SLOAD va5a
    0xa5c: va5c(0xa6b) = CONST 
    0xa61: va61(0xffffffff) = CONST 
    0xa66: va66(0xd67) = CONST 
    0xa69: va69(0xd67) = AND va66(0xd67), va61(0xffffffff)
    0xa6a: JUMP va69(0xd67)

    Begin block 0xd67B0xa39
    prev=[0xa39], succ=[0xd75B0xa39, 0xd76B0xa39]
    =================================
    0xd68S0xa39: vd68Va39(0x0) = CONST 
    0xd6cS0xa39: vd6cVa39 = ADD v2fa, va5b
    0xd6fS0xa39: vd6fVa39 = LT vd6cVa39, va5b
    0xd70S0xa39: vd70Va39 = ISZERO vd6fVa39
    0xd71S0xa39: vd71Va39(0xd76) = CONST 
    0xd74S0xa39: JUMPI vd71Va39(0xd76), vd70Va39

    Begin block 0xd75B0xa39
    prev=[0xd67B0xa39], succ=[]
    =================================
    0xd75S0xa39: THROW 

    Begin block 0xd76B0xa39
    prev=[0xd67B0xa39], succ=[0xa6b]
    =================================
    0xd7cS0xa39: JUMP va5c(0xa6b)

    Begin block 0xa6b
    prev=[0xd76B0xa39], succ=[0x1108]
    =================================
    0xa6c: va6c(0x1) = CONST 
    0xa6e: va6e(0x1) = CONST 
    0xa70: va70(0xa0) = CONST 
    0xa72: va72(0x10000000000000000000000000000000000000000) = SHL va70(0xa0), va6e(0x1)
    0xa73: va73(0xffffffffffffffffffffffffffffffffffffffff) = SUB va72(0x10000000000000000000000000000000000000000), va6c(0x1)
    0xa75: va75 = AND v2f5, va73(0xffffffffffffffffffffffffffffffffffffffff)
    0xa76: va76(0x0) = CONST 
    0xa7a: MSTORE va76(0x0), va75
    0xa7b: va7b(0x1) = CONST 
    0xa7d: va7d(0x20) = CONST 
    0xa81: MSTORE va7d(0x20), va7b(0x1)
    0xa82: va82(0x40) = CONST 
    0xa87: va87 = SHA3 va76(0x0), va82(0x40)
    0xa8b: SSTORE va87, vd6cVa39
    0xa8d: va8d = MLOAD va82(0x40)
    0xa90: MSTORE va8d, v2fa
    0xa92: va92 = MLOAD va82(0x40)
    0xa95: va95 = CALLER 
    0xa97: va97(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef) = CONST 
    0xabb: vabb(0x0) = SUB va8d, va92
    0xabe: vabe(0x20) = ADD va7d(0x20), vabb(0x0)
    0xac0: LOG3 va92, vabe(0x20), va97(0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef), va95, va75
    0xac2: vac2(0x1) = CONST 
    0xac8: JUMP v2d4(0x1108)

    Begin block 0x1108
    prev=[0xa6b], succ=[]
    =================================
    0x1109: v1109(0x40) = CONST 
    0x110c: v110c = MLOAD v1109(0x40)
    0x110e: v110e = ISZERO vac2(0x1)
    0x110f: v110f = ISZERO v110e
    0x1111: MSTORE v110c, v110f
    0x1112: v1112 = MLOAD v1109(0x40)
    0x1116: v1116(0x0) = SUB v110c, v1112
    0x1117: v1117(0x20) = CONST 
    0x1119: v1119(0x20) = ADD v1117(0x20), v1116(0x0)
    0x111b: RETURN v1112, v1119(0x20)

    Begin block 0xd60B0xa19
    prev=[0xd55B0xa19], succ=[]
    =================================
    0xd60S0xa19: THROW 

    Begin block 0xa02
    prev=[0x9ed], succ=[0xa10]
    =================================
    0xa03: va03(0x1) = CONST 
    0xa05: va05(0x1) = CONST 
    0xa07: va07(0xa0) = CONST 
    0xa09: va09(0x10000000000000000000000000000000000000000) = SHL va07(0xa0), va05(0x1)
    0xa0a: va0a(0xffffffffffffffffffffffffffffffffffffffff) = SUB va09(0x10000000000000000000000000000000000000000), va03(0x1)
    0xa0c: va0c = AND v2f5, va0a(0xffffffffffffffffffffffffffffffffffffffff)
    0xa0d: va0d = ADDRESS 
    0xa0e: va0e = EQ va0d, va0c
    0xa0f: va0f = ISZERO va0e

}

function approveAndCall(address,uint256,bytes)() public {
    Begin block 0x2ff
    prev=[], succ=[0x311, 0x315]
    =================================
    0x300: v300(0x113b) = CONST 
    0x303: v303(0x4) = CONST 
    0x306: v306 = CALLDATASIZE 
    0x307: v307 = SUB v306, v303(0x4)
    0x308: v308(0x60) = CONST 
    0x30b: v30b = LT v307, v308(0x60)
    0x30c: v30c = ISZERO v30b
    0x30d: v30d(0x315) = CONST 
    0x310: JUMPI v30d(0x315), v30c

    Begin block 0x311
    prev=[0x2ff], succ=[]
    =================================
    0x311: v311(0x0) = CONST 
    0x314: REVERT v311(0x0), v311(0x0)

    Begin block 0x315
    prev=[0x2ff], succ=[0x341, 0x345]
    =================================
    0x316: v316(0x1) = CONST 
    0x318: v318(0x1) = CONST 
    0x31a: v31a(0xa0) = CONST 
    0x31c: v31c(0x10000000000000000000000000000000000000000) = SHL v31a(0xa0), v318(0x1)
    0x31d: v31d(0xffffffffffffffffffffffffffffffffffffffff) = SUB v31c(0x10000000000000000000000000000000000000000), v316(0x1)
    0x31f: v31f = CALLDATALOAD v303(0x4)
    0x320: v320 = AND v31f, v31d(0xffffffffffffffffffffffffffffffffffffffff)
    0x322: v322(0x20) = CONST 
    0x325: v325(0x24) = ADD v303(0x4), v322(0x20)
    0x326: v326 = CALLDATALOAD v325(0x24)
    0x329: v329 = ADD v303(0x4), v307
    0x32b: v32b(0x60) = CONST 
    0x32e: v32e(0x64) = ADD v303(0x4), v32b(0x60)
    0x32f: v32f(0x40) = CONST 
    0x332: v332(0x44) = ADD v303(0x4), v32f(0x40)
    0x333: v333 = CALLDATALOAD v332(0x44)
    0x334: v334(0x100000000) = CONST 
    0x33b: v33b = GT v333, v334(0x100000000)
    0x33c: v33c = ISZERO v33b
    0x33d: v33d(0x345) = CONST 
    0x340: JUMPI v33d(0x345), v33c

    Begin block 0x341
    prev=[0x315], succ=[]
    =================================
    0x341: v341(0x0) = CONST 
    0x344: REVERT v341(0x0), v341(0x0)

    Begin block 0x345
    prev=[0x315], succ=[0x353, 0x357]
    =================================
    0x347: v347 = ADD v303(0x4), v333
    0x349: v349(0x20) = CONST 
    0x34c: v34c = ADD v347, v349(0x20)
    0x34d: v34d = GT v34c, v329
    0x34e: v34e = ISZERO v34d
    0x34f: v34f(0x357) = CONST 
    0x352: JUMPI v34f(0x357), v34e

    Begin block 0x353
    prev=[0x345], succ=[]
    =================================
    0x353: v353(0x0) = CONST 
    0x356: REVERT v353(0x0), v353(0x0)

    Begin block 0x357
    prev=[0x345], succ=[0x375, 0x379]
    =================================
    0x359: v359 = CALLDATALOAD v347
    0x35b: v35b(0x20) = CONST 
    0x35d: v35d = ADD v35b(0x20), v347
    0x360: v360(0x1) = CONST 
    0x363: v363 = MUL v359, v360(0x1)
    0x365: v365 = ADD v35d, v363
    0x366: v366 = GT v365, v329
    0x367: v367(0x100000000) = CONST 
    0x36e: v36e = GT v359, v367(0x100000000)
    0x36f: v36f = OR v36e, v366
    0x370: v370 = ISZERO v36f
    0x371: v371(0x379) = CONST 
    0x374: JUMPI v371(0x379), v370

    Begin block 0x375
    prev=[0x357], succ=[]
    =================================
    0x375: v375(0x0) = CONST 
    0x378: REVERT v375(0x0), v375(0x0)

    Begin block 0x379
    prev=[0x357], succ=[0xac9]
    =================================
    0x380: v380(0xac9) = CONST 
    0x383: JUMP v380(0xac9)

    Begin block 0xac9
    prev=[0x379], succ=[0x4d00x2ff]
    =================================
    0xaca: vaca(0x0) = CONST 
    0xacd: vacd(0xad6) = CONST 
    0xad2: vad2(0x4d0) = CONST 
    0xad5: JUMP vad2(0x4d0)

    Begin block 0x4d00x2ff
    prev=[0xac9], succ=[0xad6]
    =================================
    0x4d10x2ff: v2ff4d1 = CALLER 
    0x4d20x2ff: v2ff4d2(0x0) = CONST 
    0x4d60x2ff: MSTORE v2ff4d2(0x0), v2ff4d1
    0x4d70x2ff: v2ff4d7(0x2) = CONST 
    0x4d90x2ff: v2ff4d9(0x20) = CONST 
    0x4dd0x2ff: MSTORE v2ff4d9(0x20), v2ff4d7(0x2)
    0x4de0x2ff: v2ff4de(0x40) = CONST 
    0x4e20x2ff: v2ff4e2 = SHA3 v2ff4d2(0x0), v2ff4de(0x40)
    0x4e30x2ff: v2ff4e3(0x1) = CONST 
    0x4e50x2ff: v2ff4e5(0x1) = CONST 
    0x4e70x2ff: v2ff4e7(0xa0) = CONST 
    0x4e90x2ff: v2ff4e9(0x10000000000000000000000000000000000000000) = SHL v2ff4e7(0xa0), v2ff4e5(0x1)
    0x4ea0x2ff: v2ff4ea(0xffffffffffffffffffffffffffffffffffffffff) = SUB v2ff4e9(0x10000000000000000000000000000000000000000), v2ff4e3(0x1)
    0x4ec0x2ff: v2ff4ec = AND v320, v2ff4ea(0xffffffffffffffffffffffffffffffffffffffff)
    0x4ef0x2ff: MSTORE v2ff4d2(0x0), v2ff4ec
    0x4f20x2ff: MSTORE v2ff4d9(0x20), v2ff4e2
    0x4f50x2ff: v2ff4f5 = SHA3 v2ff4d2(0x0), v2ff4de(0x40)
    0x4f80x2ff: SSTORE v2ff4f5, v326
    0x4fa0x2ff: v2ff4fa = MLOAD v2ff4de(0x40)
    0x4fd0x2ff: MSTORE v2ff4fa, v326
    0x4ff0x2ff: v2ff4ff = MLOAD v2ff4de(0x40)
    0x5060x2ff: v2ff506(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
    0x52a0x2ff: v2ff52a(0x0) = SUB v2ff4fa, v2ff4ff
    0x52b0x2ff: v2ff52b(0x20) = ADD v2ff52a(0x0), v2ff4d9(0x20)
    0x52d0x2ff: LOG3 v2ff4ff, v2ff52b(0x20), v2ff506(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925), v2ff4d1, v2ff4ec
    0x52f0x2ff: v2ff52f(0x1) = CONST 
    0x5350x2ff: JUMP vacd(0xad6)

    Begin block 0xad6
    prev=[0x4d00x2ff], succ=[0xadc, 0xb84]
    =================================
    0xad7: vad7 = ISZERO v2ff52f(0x1)
    0xad8: vad8(0xb84) = CONST 
    0xadb: JUMPI vad8(0xb84), vad7

    Begin block 0xadc
    prev=[0xad6], succ=[0xb5e, 0xb62]
    =================================
    0xadc: vadc(0x40) = CONST 
    0xade: vade = MLOAD vadc(0x40)
    0xadf: vadf(0xa2d57853) = CONST 
    0xae4: vae4(0xe0) = CONST 
    0xae6: vae6(0xa2d5785300000000000000000000000000000000000000000000000000000000) = SHL vae4(0xe0), vadf(0xa2d57853)
    0xae8: MSTORE vade, vae6(0xa2d5785300000000000000000000000000000000000000000000000000000000)
    0xae9: vae9 = CALLER 
    0xaea: vaea(0x4) = CONST 
    0xaed: vaed = ADD vade, vaea(0x4)
    0xaf0: MSTORE vaed, vae9
    0xaf1: vaf1(0x24) = CONST 
    0xaf4: vaf4 = ADD vade, vaf1(0x24)
    0xaf7: MSTORE vaf4, v326
    0xaf8: vaf8(0x60) = CONST 
    0xafa: vafa(0x44) = CONST 
    0xafd: vafd = ADD vade, vafa(0x44)
    0xb00: MSTORE vafd, vaf8(0x60)
    0xb01: vb01(0x64) = CONST 
    0xb04: vb04 = ADD vade, vb01(0x64)
    0xb07: MSTORE vb04, v359
    0xb08: vb08(0x1) = CONST 
    0xb0a: vb0a(0x1) = CONST 
    0xb0c: vb0c(0xa0) = CONST 
    0xb0e: vb0e(0x10000000000000000000000000000000000000000) = SHL vb0c(0xa0), vb0a(0x1)
    0xb0f: vb0f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb0e(0x10000000000000000000000000000000000000000), vb08(0x1)
    0xb11: vb11 = AND v320, vb0f(0xffffffffffffffffffffffffffffffffffffffff)
    0xb13: vb13(0xa2d57853) = CONST 
    0xb22: vb22(0x84) = CONST 
    0xb24: vb24 = ADD vb22(0x84), vade
    0xb2a: CALLDATACOPY vb24, v35d, v359
    0xb2b: vb2b(0x0) = CONST 
    0xb2f: vb2f = ADD vb24, v359
    0xb30: MSTORE vb2f, vb2b(0x0)
    0xb31: vb31(0x1f) = CONST 
    0xb33: vb33(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0) = NOT vb31(0x1f)
    0xb34: vb34(0x1f) = CONST 
    0xb37: vb37 = ADD v359, vb34(0x1f)
    0xb38: vb38 = AND vb37, vb33(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)
    0xb3d: vb3d = ADD vb24, vb38
    0xb49: vb49(0x0) = CONST 
    0xb4b: vb4b(0x40) = CONST 
    0xb4d: vb4d = MLOAD vb4b(0x40)
    0xb50: vb50 = SUB vb3d, vb4d
    0xb52: vb52(0x0) = CONST 
    0xb56: vb56 = EXTCODESIZE vb11
    0xb57: vb57 = ISZERO vb56
    0xb59: vb59 = ISZERO vb57
    0xb5a: vb5a(0xb62) = CONST 
    0xb5d: JUMPI vb5a(0xb62), vb59

    Begin block 0xb5e
    prev=[0xadc], succ=[]
    =================================
    0xb5e: vb5e(0x0) = CONST 
    0xb61: REVERT vb5e(0x0), vb5e(0x0)

    Begin block 0xb62
    prev=[0xadc], succ=[0xb6d, 0xb76]
    =================================
    0xb64: vb64 = GAS 
    0xb65: vb65 = CALL vb64, vb11, vb52(0x0), vb4d, vb50, vb4d, vb49(0x0)
    0xb66: vb66 = ISZERO vb65
    0xb68: vb68 = ISZERO vb66
    0xb69: vb69(0xb76) = CONST 
    0xb6c: JUMPI vb69(0xb76), vb68

    Begin block 0xb6d
    prev=[0xb62], succ=[]
    =================================
    0xb6d: vb6d = RETURNDATASIZE 
    0xb6e: vb6e(0x0) = CONST 
    0xb71: RETURNDATACOPY vb6e(0x0), vb6e(0x0), vb6d
    0xb72: vb72 = RETURNDATASIZE 
    0xb73: vb73(0x0) = CONST 
    0xb75: REVERT vb73(0x0), vb72

    Begin block 0xb76
    prev=[0xb62], succ=[0xb86]
    =================================
    0xb7b: vb7b(0x1) = CONST 
    0xb80: vb80(0xb86) = CONST 
    0xb83: JUMP vb80(0xb86)

    Begin block 0xb86
    prev=[0xb84, 0xb76], succ=[0x113b]
    =================================
    0xb8d: JUMP v300(0x113b)

    Begin block 0x113b
    prev=[0xb86], succ=[]
    =================================
    0x113b_0x0: v113b_0 = PHI vaca(0x0), vb7b(0x1)
    0x113c: v113c(0x40) = CONST 
    0x113f: v113f = MLOAD v113c(0x40)
    0x1141: v1141 = ISZERO v113b_0
    0x1142: v1142 = ISZERO v1141
    0x1144: MSTORE v113f, v1142
    0x1145: v1145 = MLOAD v113c(0x40)
    0x1149: v1149(0x0) = SUB v113f, v1145
    0x114a: v114a(0x20) = CONST 
    0x114c: v114c(0x20) = ADD v114a(0x20), v1149(0x0)
    0x114e: RETURN v1145, v114c(0x20)

    Begin block 0xb84
    prev=[0xad6], succ=[0xb86]
    =================================

}

function transferAnyERC20Token(address,address,uint256)() public {
    Begin block 0x384
    prev=[], succ=[0x396, 0x39a]
    =================================
    0x385: v385(0x116e) = CONST 
    0x388: v388(0x4) = CONST 
    0x38b: v38b = CALLDATASIZE 
    0x38c: v38c = SUB v38b, v388(0x4)
    0x38d: v38d(0x60) = CONST 
    0x390: v390 = LT v38c, v38d(0x60)
    0x391: v391 = ISZERO v390
    0x392: v392(0x39a) = CONST 
    0x395: JUMPI v392(0x39a), v391

    Begin block 0x396
    prev=[0x384], succ=[]
    =================================
    0x396: v396(0x0) = CONST 
    0x399: REVERT v396(0x0), v396(0x0)

    Begin block 0x39a
    prev=[0x384], succ=[0xb8e]
    =================================
    0x39c: v39c(0x1) = CONST 
    0x39e: v39e(0x1) = CONST 
    0x3a0: v3a0(0xa0) = CONST 
    0x3a2: v3a2(0x10000000000000000000000000000000000000000) = SHL v3a0(0xa0), v39e(0x1)
    0x3a3: v3a3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3a2(0x10000000000000000000000000000000000000000), v39c(0x1)
    0x3a5: v3a5 = CALLDATALOAD v388(0x4)
    0x3a7: v3a7 = AND v3a3(0xffffffffffffffffffffffffffffffffffffffff), v3a5
    0x3a9: v3a9(0x20) = CONST 
    0x3ac: v3ac(0x24) = ADD v388(0x4), v3a9(0x20)
    0x3ad: v3ad = CALLDATALOAD v3ac(0x24)
    0x3b0: v3b0 = AND v3a3(0xffffffffffffffffffffffffffffffffffffffff), v3ad
    0x3b2: v3b2(0x40) = CONST 
    0x3b4: v3b4(0x44) = ADD v3b2(0x40), v388(0x4)
    0x3b5: v3b5 = CALLDATALOAD v3b4(0x44)
    0x3b6: v3b6(0xb8e) = CONST 
    0x3b9: JUMP v3b6(0xb8e)

    Begin block 0xb8e
    prev=[0x39a], succ=[0xba1, 0xba5]
    =================================
    0xb8f: vb8f(0x3) = CONST 
    0xb91: vb91 = SLOAD vb8f(0x3)
    0xb92: vb92(0x1) = CONST 
    0xb94: vb94(0x1) = CONST 
    0xb96: vb96(0xa0) = CONST 
    0xb98: vb98(0x10000000000000000000000000000000000000000) = SHL vb96(0xa0), vb94(0x1)
    0xb99: vb99(0xffffffffffffffffffffffffffffffffffffffff) = SUB vb98(0x10000000000000000000000000000000000000000), vb92(0x1)
    0xb9a: vb9a = AND vb99(0xffffffffffffffffffffffffffffffffffffffff), vb91
    0xb9b: vb9b = CALLER 
    0xb9c: vb9c = EQ vb9b, vb9a
    0xb9d: vb9d(0xba5) = CONST 
    0xba0: JUMPI vb9d(0xba5), vb9c

    Begin block 0xba1
    prev=[0xb8e], succ=[]
    =================================
    0xba1: vba1(0x0) = CONST 
    0xba4: REVERT vba1(0x0), vba1(0x0)

    Begin block 0xba5
    prev=[0xb8e], succ=[0xc01, 0xc05]
    =================================
    0xba7: vba7(0x1) = CONST 
    0xba9: vba9(0x1) = CONST 
    0xbab: vbab(0xa0) = CONST 
    0xbad: vbad(0x10000000000000000000000000000000000000000) = SHL vbab(0xa0), vba9(0x1)
    0xbae: vbae(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbad(0x10000000000000000000000000000000000000000), vba7(0x1)
    0xbaf: vbaf = AND vbae(0xffffffffffffffffffffffffffffffffffffffff), v3a7
    0xbb0: vbb0(0xa9059cbb) = CONST 
    0xbb7: vbb7(0x40) = CONST 
    0xbb9: vbb9 = MLOAD vbb7(0x40)
    0xbbb: vbbb(0xffffffff) = CONST 
    0xbc0: vbc0(0xa9059cbb) = AND vbbb(0xffffffff), vbb0(0xa9059cbb)
    0xbc1: vbc1(0xe0) = CONST 
    0xbc3: vbc3(0xa9059cbb00000000000000000000000000000000000000000000000000000000) = SHL vbc1(0xe0), vbc0(0xa9059cbb)
    0xbc5: MSTORE vbb9, vbc3(0xa9059cbb00000000000000000000000000000000000000000000000000000000)
    0xbc6: vbc6(0x4) = CONST 
    0xbc8: vbc8 = ADD vbc6(0x4), vbb9
    0xbcb: vbcb(0x1) = CONST 
    0xbcd: vbcd(0x1) = CONST 
    0xbcf: vbcf(0xa0) = CONST 
    0xbd1: vbd1(0x10000000000000000000000000000000000000000) = SHL vbcf(0xa0), vbcd(0x1)
    0xbd2: vbd2(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbd1(0x10000000000000000000000000000000000000000), vbcb(0x1)
    0xbd3: vbd3 = AND vbd2(0xffffffffffffffffffffffffffffffffffffffff), v3b0
    0xbd4: vbd4(0x1) = CONST 
    0xbd6: vbd6(0x1) = CONST 
    0xbd8: vbd8(0xa0) = CONST 
    0xbda: vbda(0x10000000000000000000000000000000000000000) = SHL vbd8(0xa0), vbd6(0x1)
    0xbdb: vbdb(0xffffffffffffffffffffffffffffffffffffffff) = SUB vbda(0x10000000000000000000000000000000000000000), vbd4(0x1)
    0xbdc: vbdc = AND vbdb(0xffffffffffffffffffffffffffffffffffffffff), vbd3
    0xbde: MSTORE vbc8, vbdc
    0xbdf: vbdf(0x20) = CONST 
    0xbe1: vbe1 = ADD vbdf(0x20), vbc8
    0xbe4: MSTORE vbe1, v3b5
    0xbe5: vbe5(0x20) = CONST 
    0xbe7: vbe7 = ADD vbe5(0x20), vbe1
    0xbec: vbec(0x20) = CONST 
    0xbee: vbee(0x40) = CONST 
    0xbf0: vbf0 = MLOAD vbee(0x40)
    0xbf3: vbf3(0x44) = SUB vbe7, vbf0
    0xbf5: vbf5(0x0) = CONST 
    0xbf9: vbf9 = EXTCODESIZE vbaf
    0xbfa: vbfa = ISZERO vbf9
    0xbfc: vbfc = ISZERO vbfa
    0xbfd: vbfd(0xc05) = CONST 
    0xc00: JUMPI vbfd(0xc05), vbfc

    Begin block 0xc01
    prev=[0xba5], succ=[]
    =================================
    0xc01: vc01(0x0) = CONST 
    0xc04: REVERT vc01(0x0), vc01(0x0)

    Begin block 0xc05
    prev=[0xba5], succ=[0xc10, 0xc19]
    =================================
    0xc07: vc07 = GAS 
    0xc08: vc08 = CALL vc07, vbaf, vbf5(0x0), vbf0, vbf3(0x44), vbf0, vbec(0x20)
    0xc09: vc09 = ISZERO vc08
    0xc0b: vc0b = ISZERO vc09
    0xc0c: vc0c(0xc19) = CONST 
    0xc0f: JUMPI vc0c(0xc19), vc0b

    Begin block 0xc10
    prev=[0xc05], succ=[]
    =================================
    0xc10: vc10 = RETURNDATASIZE 
    0xc11: vc11(0x0) = CONST 
    0xc14: RETURNDATACOPY vc11(0x0), vc11(0x0), vc10
    0xc15: vc15 = RETURNDATASIZE 
    0xc16: vc16(0x0) = CONST 
    0xc18: REVERT vc16(0x0), vc15

    Begin block 0xc19
    prev=[0xc05], succ=[0xc2b, 0xc2f]
    =================================
    0xc1e: vc1e(0x40) = CONST 
    0xc20: vc20 = MLOAD vc1e(0x40)
    0xc21: vc21 = RETURNDATASIZE 
    0xc22: vc22(0x20) = CONST 
    0xc25: vc25 = LT vc21, vc22(0x20)
    0xc26: vc26 = ISZERO vc25
    0xc27: vc27(0xc2f) = CONST 
    0xc2a: JUMPI vc27(0xc2f), vc26

    Begin block 0xc2b
    prev=[0xc19], succ=[]
    =================================
    0xc2b: vc2b(0x0) = CONST 
    0xc2e: REVERT vc2b(0x0), vc2b(0x0)

    Begin block 0xc2f
    prev=[0xc19], succ=[0x116e]
    =================================
    0xc35: JUMP v385(0x116e)

    Begin block 0x116e
    prev=[0xc2f], succ=[]
    =================================
    0x116f: STOP 

}

function increaseApproval(address,uint256)() public {
    Begin block 0x3ba
    prev=[], succ=[0x3cc, 0x3d0]
    =================================
    0x3bb: v3bb(0x118f) = CONST 
    0x3be: v3be(0x4) = CONST 
    0x3c1: v3c1 = CALLDATASIZE 
    0x3c2: v3c2 = SUB v3c1, v3be(0x4)
    0x3c3: v3c3(0x40) = CONST 
    0x3c6: v3c6 = LT v3c2, v3c3(0x40)
    0x3c7: v3c7 = ISZERO v3c6
    0x3c8: v3c8(0x3d0) = CONST 
    0x3cb: JUMPI v3c8(0x3d0), v3c7

    Begin block 0x3cc
    prev=[0x3ba], succ=[]
    =================================
    0x3cc: v3cc(0x0) = CONST 
    0x3cf: REVERT v3cc(0x0), v3cc(0x0)

    Begin block 0x3d0
    prev=[0x3ba], succ=[0xc36]
    =================================
    0x3d2: v3d2(0x1) = CONST 
    0x3d4: v3d4(0x1) = CONST 
    0x3d6: v3d6(0xa0) = CONST 
    0x3d8: v3d8(0x10000000000000000000000000000000000000000) = SHL v3d6(0xa0), v3d4(0x1)
    0x3d9: v3d9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3d8(0x10000000000000000000000000000000000000000), v3d2(0x1)
    0x3db: v3db = CALLDATALOAD v3be(0x4)
    0x3dc: v3dc = AND v3db, v3d9(0xffffffffffffffffffffffffffffffffffffffff)
    0x3de: v3de(0x20) = CONST 
    0x3e0: v3e0(0x24) = ADD v3de(0x20), v3be(0x4)
    0x3e1: v3e1 = CALLDATALOAD v3e0(0x24)
    0x3e2: v3e2(0xc36) = CONST 
    0x3e5: JUMP v3e2(0xc36)

    Begin block 0xc36
    prev=[0x3d0], succ=[0xd67B0xc36]
    =================================
    0xc37: vc37 = CALLER 
    0xc38: vc38(0x0) = CONST 
    0xc3c: MSTORE vc38(0x0), vc37
    0xc3d: vc3d(0x2) = CONST 
    0xc3f: vc3f(0x20) = CONST 
    0xc43: MSTORE vc3f(0x20), vc3d(0x2)
    0xc44: vc44(0x40) = CONST 
    0xc48: vc48 = SHA3 vc38(0x0), vc44(0x40)
    0xc49: vc49(0x1) = CONST 
    0xc4b: vc4b(0x1) = CONST 
    0xc4d: vc4d(0xa0) = CONST 
    0xc4f: vc4f(0x10000000000000000000000000000000000000000) = SHL vc4d(0xa0), vc4b(0x1)
    0xc50: vc50(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc4f(0x10000000000000000000000000000000000000000), vc49(0x1)
    0xc52: vc52 = AND v3dc, vc50(0xffffffffffffffffffffffffffffffffffffffff)
    0xc54: MSTORE vc38(0x0), vc52
    0xc57: MSTORE vc3f(0x20), vc48
    0xc59: vc59 = SHA3 vc38(0x0), vc44(0x40)
    0xc5a: vc5a = SLOAD vc59
    0xc5b: vc5b(0xc6a) = CONST 
    0xc60: vc60(0xffffffff) = CONST 
    0xc65: vc65(0xd67) = CONST 
    0xc68: vc68(0xd67) = AND vc65(0xd67), vc60(0xffffffff)
    0xc69: JUMP vc68(0xd67)

    Begin block 0xd67B0xc36
    prev=[0xc36], succ=[0xd75B0xc36, 0xd76B0xc36]
    =================================
    0xd68S0xc36: vd68Vc36(0x0) = CONST 
    0xd6cS0xc36: vd6cVc36 = ADD v3e1, vc5a
    0xd6fS0xc36: vd6fVc36 = LT vd6cVc36, vc5a
    0xd70S0xc36: vd70Vc36 = ISZERO vd6fVc36
    0xd71S0xc36: vd71Vc36(0xd76) = CONST 
    0xd74S0xc36: JUMPI vd71Vc36(0xd76), vd70Vc36

    Begin block 0xd75B0xc36
    prev=[0xd67B0xc36], succ=[]
    =================================
    0xd75S0xc36: THROW 

    Begin block 0xd76B0xc36
    prev=[0xd67B0xc36], succ=[0xc6a]
    =================================
    0xd7cS0xc36: JUMP vc5b(0xc6a)

    Begin block 0xc6a
    prev=[0xd76B0xc36], succ=[0x118f]
    =================================
    0xc6b: vc6b = CALLER 
    0xc6c: vc6c(0x0) = CONST 
    0xc70: MSTORE vc6c(0x0), vc6b
    0xc71: vc71(0x2) = CONST 
    0xc73: vc73(0x20) = CONST 
    0xc77: MSTORE vc73(0x20), vc71(0x2)
    0xc78: vc78(0x40) = CONST 
    0xc7c: vc7c = SHA3 vc6c(0x0), vc78(0x40)
    0xc7d: vc7d(0x1) = CONST 
    0xc7f: vc7f(0x1) = CONST 
    0xc81: vc81(0xa0) = CONST 
    0xc83: vc83(0x10000000000000000000000000000000000000000) = SHL vc81(0xa0), vc7f(0x1)
    0xc84: vc84(0xffffffffffffffffffffffffffffffffffffffff) = SUB vc83(0x10000000000000000000000000000000000000000), vc7d(0x1)
    0xc86: vc86 = AND v3dc, vc84(0xffffffffffffffffffffffffffffffffffffffff)
    0xc89: MSTORE vc6c(0x0), vc86
    0xc8c: MSTORE vc73(0x20), vc7c
    0xc90: vc90 = SHA3 vc6c(0x0), vc78(0x40)
    0xc93: SSTORE vc90, vd6cVc36
    0xc95: vc95 = MLOAD vc78(0x40)
    0xc98: MSTORE vc95, vd6cVc36
    0xc99: vc99 = MLOAD vc78(0x40)
    0xc9c: vc9c(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925) = CONST 
    0xcc1: vcc1(0x0) = SUB vc95, vc99
    0xcc4: vcc4(0x20) = ADD vc73(0x20), vcc1(0x0)
    0xcc6: LOG3 vc99, vcc4(0x20), vc9c(0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925), vc6b, vc86
    0xcc8: vcc8(0x1) = CONST 
    0xcce: JUMP v3bb(0x118f)

    Begin block 0x118f
    prev=[0xc6a], succ=[]
    =================================
    0x1190: v1190(0x40) = CONST 
    0x1193: v1193 = MLOAD v1190(0x40)
    0x1195: v1195 = ISZERO vcc8(0x1)
    0x1196: v1196 = ISZERO v1195
    0x1198: MSTORE v1193, v1196
    0x1199: v1199 = MLOAD v1190(0x40)
    0x119d: v119d(0x0) = SUB v1193, v1199
    0x119e: v119e(0x20) = CONST 
    0x11a0: v11a0(0x20) = ADD v119e(0x20), v119d(0x0)
    0x11a2: RETURN v1199, v11a0(0x20)

}

function allowance(address,address)() public {
    Begin block 0x3e6
    prev=[], succ=[0x3f8, 0x3fc]
    =================================
    0x3e7: v3e7(0x11c2) = CONST 
    0x3ea: v3ea(0x4) = CONST 
    0x3ed: v3ed = CALLDATASIZE 
    0x3ee: v3ee = SUB v3ed, v3ea(0x4)
    0x3ef: v3ef(0x40) = CONST 
    0x3f2: v3f2 = LT v3ee, v3ef(0x40)
    0x3f3: v3f3 = ISZERO v3f2
    0x3f4: v3f4(0x3fc) = CONST 
    0x3f7: JUMPI v3f4(0x3fc), v3f3

    Begin block 0x3f8
    prev=[0x3e6], succ=[]
    =================================
    0x3f8: v3f8(0x0) = CONST 
    0x3fb: REVERT v3f8(0x0), v3f8(0x0)

    Begin block 0x3fc
    prev=[0x3e6], succ=[0xccf]
    =================================
    0x3fe: v3fe(0x1) = CONST 
    0x400: v400(0x1) = CONST 
    0x402: v402(0xa0) = CONST 
    0x404: v404(0x10000000000000000000000000000000000000000) = SHL v402(0xa0), v400(0x1)
    0x405: v405(0xffffffffffffffffffffffffffffffffffffffff) = SUB v404(0x10000000000000000000000000000000000000000), v3fe(0x1)
    0x407: v407 = CALLDATALOAD v3ea(0x4)
    0x409: v409 = AND v405(0xffffffffffffffffffffffffffffffffffffffff), v407
    0x40b: v40b(0x20) = CONST 
    0x40d: v40d(0x24) = ADD v40b(0x20), v3ea(0x4)
    0x40e: v40e = CALLDATALOAD v40d(0x24)
    0x40f: v40f = AND v40e, v405(0xffffffffffffffffffffffffffffffffffffffff)
    0x410: v410(0xccf) = CONST 
    0x413: JUMP v410(0xccf)

    Begin block 0xccf
    prev=[0x3fc], succ=[0x11c2]
    =================================
    0xcd0: vcd0(0x1) = CONST 
    0xcd2: vcd2(0x1) = CONST 
    0xcd4: vcd4(0xa0) = CONST 
    0xcd6: vcd6(0x10000000000000000000000000000000000000000) = SHL vcd4(0xa0), vcd2(0x1)
    0xcd7: vcd7(0xffffffffffffffffffffffffffffffffffffffff) = SUB vcd6(0x10000000000000000000000000000000000000000), vcd0(0x1)
    0xcda: vcda = AND vcd7(0xffffffffffffffffffffffffffffffffffffffff), v409
    0xcdb: vcdb(0x0) = CONST 
    0xcdf: MSTORE vcdb(0x0), vcda
    0xce0: vce0(0x2) = CONST 
    0xce2: vce2(0x20) = CONST 
    0xce6: MSTORE vce2(0x20), vce0(0x2)
    0xce7: vce7(0x40) = CONST 
    0xceb: vceb = SHA3 vcdb(0x0), vce7(0x40)
    0xcef: vcef = AND vcd7(0xffffffffffffffffffffffffffffffffffffffff), v40f
    0xcf1: MSTORE vcdb(0x0), vcef
    0xcf5: MSTORE vce2(0x20), vceb
    0xcf6: vcf6 = SHA3 vcdb(0x0), vce7(0x40)
    0xcf7: vcf7 = SLOAD vcf6
    0xcf9: JUMP v3e7(0x11c2)

    Begin block 0x11c2
    prev=[0xccf], succ=[]
    =================================
    0x11c3: v11c3(0x40) = CONST 
    0x11c6: v11c6 = MLOAD v11c3(0x40)
    0x11c9: MSTORE v11c6, vcf7
    0x11ca: v11ca = MLOAD v11c3(0x40)
    0x11ce: v11ce(0x0) = SUB v11c6, v11ca
    0x11cf: v11cf(0x20) = CONST 
    0x11d1: v11d1(0x20) = ADD v11cf(0x20), v11ce(0x0)
    0x11d3: RETURN v11ca, v11d1(0x20)

}

function pendingOwner()() public {
    Begin block 0x414
    prev=[], succ=[0xcfa]
    =================================
    0x415: v415(0x11f3) = CONST 
    0x418: v418(0xcfa) = CONST 
    0x41b: JUMP v418(0xcfa)

    Begin block 0xcfa
    prev=[0x414], succ=[0x11f3]
    =================================
    0xcfb: vcfb(0x4) = CONST 
    0xcfd: vcfd = SLOAD vcfb(0x4)
    0xcfe: vcfe(0x1) = CONST 
    0xd00: vd00(0x1) = CONST 
    0xd02: vd02(0xa0) = CONST 
    0xd04: vd04(0x10000000000000000000000000000000000000000) = SHL vd02(0xa0), vd00(0x1)
    0xd05: vd05(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd04(0x10000000000000000000000000000000000000000), vcfe(0x1)
    0xd06: vd06 = AND vd05(0xffffffffffffffffffffffffffffffffffffffff), vcfd
    0xd08: JUMP v415(0x11f3)

    Begin block 0x11f3
    prev=[0xcfa], succ=[]
    =================================
    0x11f4: v11f4(0x40) = CONST 
    0x11f7: v11f7 = MLOAD v11f4(0x40)
    0x11f8: v11f8(0x1) = CONST 
    0x11fa: v11fa(0x1) = CONST 
    0x11fc: v11fc(0xa0) = CONST 
    0x11fe: v11fe(0x10000000000000000000000000000000000000000) = SHL v11fc(0xa0), v11fa(0x1)
    0x11ff: v11ff(0xffffffffffffffffffffffffffffffffffffffff) = SUB v11fe(0x10000000000000000000000000000000000000000), v11f8(0x1)
    0x1202: v1202 = AND vd06, v11ff(0xffffffffffffffffffffffffffffffffffffffff)
    0x1204: MSTORE v11f7, v1202
    0x1205: v1205 = MLOAD v11f4(0x40)
    0x1209: v1209(0x0) = SUB v11f7, v1205
    0x120a: v120a(0x20) = CONST 
    0x120c: v120c(0x20) = ADD v120a(0x20), v1209(0x0)
    0x120e: RETURN v1205, v120c(0x20)

}

function transferOwnership(address)() public {
    Begin block 0x41c
    prev=[], succ=[0x42e, 0x432]
    =================================
    0x41d: v41d(0x122e) = CONST 
    0x420: v420(0x4) = CONST 
    0x423: v423 = CALLDATASIZE 
    0x424: v424 = SUB v423, v420(0x4)
    0x425: v425(0x20) = CONST 
    0x428: v428 = LT v424, v425(0x20)
    0x429: v429 = ISZERO v428
    0x42a: v42a(0x432) = CONST 
    0x42d: JUMPI v42a(0x432), v429

    Begin block 0x42e
    prev=[0x41c], succ=[]
    =================================
    0x42e: v42e(0x0) = CONST 
    0x431: REVERT v42e(0x0), v42e(0x0)

    Begin block 0x432
    prev=[0x41c], succ=[0xd09]
    =================================
    0x434: v434 = CALLDATALOAD v420(0x4)
    0x435: v435(0x1) = CONST 
    0x437: v437(0x1) = CONST 
    0x439: v439(0xa0) = CONST 
    0x43b: v43b(0x10000000000000000000000000000000000000000) = SHL v439(0xa0), v437(0x1)
    0x43c: v43c(0xffffffffffffffffffffffffffffffffffffffff) = SUB v43b(0x10000000000000000000000000000000000000000), v435(0x1)
    0x43d: v43d = AND v43c(0xffffffffffffffffffffffffffffffffffffffff), v434
    0x43e: v43e(0xd09) = CONST 
    0x441: JUMP v43e(0xd09)

    Begin block 0xd09
    prev=[0x432], succ=[0xd1c, 0xd20]
    =================================
    0xd0a: vd0a(0x3) = CONST 
    0xd0c: vd0c = SLOAD vd0a(0x3)
    0xd0d: vd0d(0x1) = CONST 
    0xd0f: vd0f(0x1) = CONST 
    0xd11: vd11(0xa0) = CONST 
    0xd13: vd13(0x10000000000000000000000000000000000000000) = SHL vd11(0xa0), vd0f(0x1)
    0xd14: vd14(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd13(0x10000000000000000000000000000000000000000), vd0d(0x1)
    0xd15: vd15 = AND vd14(0xffffffffffffffffffffffffffffffffffffffff), vd0c
    0xd16: vd16 = CALLER 
    0xd17: vd17 = EQ vd16, vd15
    0xd18: vd18(0xd20) = CONST 
    0xd1b: JUMPI vd18(0xd20), vd17

    Begin block 0xd1c
    prev=[0xd09], succ=[]
    =================================
    0xd1c: vd1c(0x0) = CONST 
    0xd1f: REVERT vd1c(0x0), vd1c(0x0)

    Begin block 0xd20
    prev=[0xd09], succ=[0xd2f, 0xd33]
    =================================
    0xd21: vd21(0x1) = CONST 
    0xd23: vd23(0x1) = CONST 
    0xd25: vd25(0xa0) = CONST 
    0xd27: vd27(0x10000000000000000000000000000000000000000) = SHL vd25(0xa0), vd23(0x1)
    0xd28: vd28(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd27(0x10000000000000000000000000000000000000000), vd21(0x1)
    0xd2a: vd2a = AND v43d, vd28(0xffffffffffffffffffffffffffffffffffffffff)
    0xd2b: vd2b(0xd33) = CONST 
    0xd2e: JUMPI vd2b(0xd33), vd2a

    Begin block 0xd2f
    prev=[0xd20], succ=[]
    =================================
    0xd2f: vd2f(0x0) = CONST 
    0xd32: REVERT vd2f(0x0), vd2f(0x0)

    Begin block 0xd33
    prev=[0xd20], succ=[0x122e]
    =================================
    0xd34: vd34(0x4) = CONST 
    0xd37: vd37 = SLOAD vd34(0x4)
    0xd38: vd38(0x1) = CONST 
    0xd3a: vd3a(0x1) = CONST 
    0xd3c: vd3c(0xa0) = CONST 
    0xd3e: vd3e(0x10000000000000000000000000000000000000000) = SHL vd3c(0xa0), vd3a(0x1)
    0xd3f: vd3f(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd3e(0x10000000000000000000000000000000000000000), vd38(0x1)
    0xd40: vd40(0xffffffffffffffffffffffff0000000000000000000000000000000000000000) = NOT vd3f(0xffffffffffffffffffffffffffffffffffffffff)
    0xd41: vd41 = AND vd40(0xffffffffffffffffffffffff0000000000000000000000000000000000000000), vd37
    0xd42: vd42(0x1) = CONST 
    0xd44: vd44(0x1) = CONST 
    0xd46: vd46(0xa0) = CONST 
    0xd48: vd48(0x10000000000000000000000000000000000000000) = SHL vd46(0xa0), vd44(0x1)
    0xd49: vd49(0xffffffffffffffffffffffffffffffffffffffff) = SUB vd48(0x10000000000000000000000000000000000000000), vd42(0x1)
    0xd4d: vd4d = AND vd49(0xffffffffffffffffffffffffffffffffffffffff), v43d
    0xd51: vd51 = OR vd4d, vd41
    0xd53: SSTORE vd34(0x4), vd51
    0xd54: JUMP v41d(0x122e)

    Begin block 0x122e
    prev=[0xd33], succ=[]
    =================================
    0x122f: STOP 

}

function 0x442(0x442arg0x0) private {
    Begin block 0x442
    prev=[], succ=[0x124f, 0x482]
    =================================
    0x443: v443(0x37) = CONST 
    0x446: v446 = SLOAD v443(0x37)
    0x447: v447(0x40) = CONST 
    0x44a: v44a = MLOAD v447(0x40)
    0x44b: v44b(0x20) = CONST 
    0x44d: v44d(0x2) = CONST 
    0x44f: v44f(0x1) = CONST 
    0x452: v452 = AND v446, v44f(0x1)
    0x453: v453 = ISZERO v452
    0x454: v454(0x100) = CONST 
    0x457: v457 = MUL v454(0x100), v453
    0x458: v458(0x0) = CONST 
    0x45a: v45a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v458(0x0)
    0x45b: v45b = ADD v45a(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v457
    0x45e: v45e = AND v446, v45b
    0x462: v462 = DIV v45e, v44d(0x2)
    0x463: v463(0x1f) = CONST 
    0x466: v466 = ADD v462, v463(0x1f)
    0x469: v469 = DIV v466, v44b(0x20)
    0x46b: v46b = MUL v44b(0x20), v469
    0x46d: v46d = ADD v44a, v46b
    0x46f: v46f = ADD v44b(0x20), v46d
    0x472: MSTORE v447(0x40), v46f
    0x475: MSTORE v44a, v462
    0x479: v479 = ADD v44a, v44b(0x20)
    0x47d: v47d = ISZERO v462
    0x47e: v47e(0x124f) = CONST 
    0x481: JUMPI v47e(0x124f), v47d

    Begin block 0x124f
    prev=[0x442], succ=[]
    =================================
    0x1256: RETURNPRIVATE v442arg0, v44a, v442arg0

    Begin block 0x482
    prev=[0x442], succ=[0x48a, 0x49d0x442]
    =================================
    0x483: v483(0x1f) = CONST 
    0x485: v485 = LT v483(0x1f), v462
    0x486: v486(0x49d) = CONST 
    0x489: JUMPI v486(0x49d), v485

    Begin block 0x48a
    prev=[0x482], succ=[0x1276]
    =================================
    0x48a: v48a(0x100) = CONST 
    0x48f: v48f = SLOAD v443(0x37)
    0x490: v490 = DIV v48f, v48a(0x100)
    0x491: v491 = MUL v490, v48a(0x100)
    0x493: MSTORE v479, v491
    0x495: v495(0x20) = CONST 
    0x497: v497 = ADD v495(0x20), v479
    0x499: v499(0x1276) = CONST 
    0x49c: JUMP v499(0x1276)

    Begin block 0x1276
    prev=[0x48a], succ=[]
    =================================
    0x127d: RETURNPRIVATE v442arg0, v44a, v442arg0

    Begin block 0x49d0x442
    prev=[0x482], succ=[0x4ab0x442]
    =================================
    0x49f0x442: v44249f = ADD v479, v462
    0x4a20x442: v4424a2(0x0) = CONST 
    0x4a40x442: MSTORE v4424a2(0x0), v443(0x37)
    0x4a50x442: v4424a5(0x20) = CONST 
    0x4a70x442: v4424a7(0x0) = CONST 
    0x4a90x442: v4424a9 = SHA3 v4424a7(0x0), v4424a5(0x20)

    Begin block 0x4ab0x442
    prev=[0x4ab0x442, 0x49d0x442], succ=[0x4ab0x442, 0x4bf0x442]
    =================================
    0x4ab0x442_0x0: v4ab442_0 = PHI v479, v4424b7
    0x4ab0x442_0x1: v4ab442_1 = PHI v4424b3, v4424a9
    0x4ad0x442: v4424ad = SLOAD v4ab442_1
    0x4af0x442: MSTORE v4ab442_0, v4424ad
    0x4b10x442: v4424b1(0x1) = CONST 
    0x4b30x442: v4424b3 = ADD v4424b1(0x1), v4ab442_1
    0x4b50x442: v4424b5(0x20) = CONST 
    0x4b70x442: v4424b7 = ADD v4424b5(0x20), v4ab442_0
    0x4ba0x442: v4424ba = GT v44249f, v4424b7
    0x4bb0x442: v4424bb(0x4ab) = CONST 
    0x4be0x442: JUMPI v4424bb(0x4ab), v4424ba

    Begin block 0x4bf0x442
    prev=[0x4ab0x442], succ=[0x4c80x442]
    =================================
    0x4c10x442: v4424c1 = SUB v4424b7, v44249f
    0x4c20x442: v4424c2(0x1f) = CONST 
    0x4c40x442: v4424c4 = AND v4424c2(0x1f), v4424c1
    0x4c60x442: v4424c6 = ADD v44249f, v4424c4

    Begin block 0x4c80x442
    prev=[0x4bf0x442], succ=[]
    =================================
    0x4cf0x442: RETURNPRIVATE v442arg0, v44a, v442arg0

}

function 0x992(0x992arg0x0) private {
    Begin block 0x992
    prev=[], succ=[0x129d, 0x9d2]
    =================================
    0x993: v993(0x38) = CONST 
    0x996: v996 = SLOAD v993(0x38)
    0x997: v997(0x40) = CONST 
    0x99a: v99a = MLOAD v997(0x40)
    0x99b: v99b(0x20) = CONST 
    0x99d: v99d(0x2) = CONST 
    0x99f: v99f(0x1) = CONST 
    0x9a2: v9a2 = AND v996, v99f(0x1)
    0x9a3: v9a3 = ISZERO v9a2
    0x9a4: v9a4(0x100) = CONST 
    0x9a7: v9a7 = MUL v9a4(0x100), v9a3
    0x9a8: v9a8(0x0) = CONST 
    0x9aa: v9aa(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) = NOT v9a8(0x0)
    0x9ab: v9ab = ADD v9aa(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff), v9a7
    0x9ae: v9ae = AND v996, v9ab
    0x9b2: v9b2 = DIV v9ae, v99d(0x2)
    0x9b3: v9b3(0x1f) = CONST 
    0x9b6: v9b6 = ADD v9b2, v9b3(0x1f)
    0x9b9: v9b9 = DIV v9b6, v99b(0x20)
    0x9bb: v9bb = MUL v99b(0x20), v9b9
    0x9bd: v9bd = ADD v99a, v9bb
    0x9bf: v9bf = ADD v99b(0x20), v9bd
    0x9c2: MSTORE v997(0x40), v9bf
    0x9c5: MSTORE v99a, v9b2
    0x9c9: v9c9 = ADD v99a, v99b(0x20)
    0x9cd: v9cd = ISZERO v9b2
    0x9ce: v9ce(0x129d) = CONST 
    0x9d1: JUMPI v9ce(0x129d), v9cd

    Begin block 0x129d
    prev=[0x992], succ=[]
    =================================
    0x12a4: RETURNPRIVATE v992arg0, v99a, v992arg0

    Begin block 0x9d2
    prev=[0x992], succ=[0x9da, 0x49d0x992]
    =================================
    0x9d3: v9d3(0x1f) = CONST 
    0x9d5: v9d5 = LT v9d3(0x1f), v9b2
    0x9d6: v9d6(0x49d) = CONST 
    0x9d9: JUMPI v9d6(0x49d), v9d5

    Begin block 0x9da
    prev=[0x9d2], succ=[0x12c4]
    =================================
    0x9da: v9da(0x100) = CONST 
    0x9df: v9df = SLOAD v993(0x38)
    0x9e0: v9e0 = DIV v9df, v9da(0x100)
    0x9e1: v9e1 = MUL v9e0, v9da(0x100)
    0x9e3: MSTORE v9c9, v9e1
    0x9e5: v9e5(0x20) = CONST 
    0x9e7: v9e7 = ADD v9e5(0x20), v9c9
    0x9e9: v9e9(0x12c4) = CONST 
    0x9ec: JUMP v9e9(0x12c4)

    Begin block 0x12c4
    prev=[0x9da], succ=[]
    =================================
    0x12cb: RETURNPRIVATE v992arg0, v99a, v992arg0

    Begin block 0x49d0x992
    prev=[0x9d2], succ=[0x4ab0x992]
    =================================
    0x49f0x992: v99249f = ADD v9c9, v9b2
    0x4a20x992: v9924a2(0x0) = CONST 
    0x4a40x992: MSTORE v9924a2(0x0), v993(0x38)
    0x4a50x992: v9924a5(0x20) = CONST 
    0x4a70x992: v9924a7(0x0) = CONST 
    0x4a90x992: v9924a9 = SHA3 v9924a7(0x0), v9924a5(0x20)

    Begin block 0x4ab0x992
    prev=[0x4ab0x992, 0x49d0x992], succ=[0x4ab0x992, 0x4bf0x992]
    =================================
    0x4ab0x992_0x0: v4ab992_0 = PHI v9c9, v9924b7
    0x4ab0x992_0x1: v4ab992_1 = PHI v9924b3, v9924a9
    0x4ad0x992: v9924ad = SLOAD v4ab992_1
    0x4af0x992: MSTORE v4ab992_0, v9924ad
    0x4b10x992: v9924b1(0x1) = CONST 
    0x4b30x992: v9924b3 = ADD v9924b1(0x1), v4ab992_1
    0x4b50x992: v9924b5(0x20) = CONST 
    0x4b70x992: v9924b7 = ADD v9924b5(0x20), v4ab992_0
    0x4ba0x992: v9924ba = GT v99249f, v9924b7
    0x4bb0x992: v9924bb(0x4ab) = CONST 
    0x4be0x992: JUMPI v9924bb(0x4ab), v9924ba

    Begin block 0x4bf0x992
    prev=[0x4ab0x992], succ=[0x4c80x992]
    =================================
    0x4c10x992: v9924c1 = SUB v9924b7, v99249f
    0x4c20x992: v9924c2(0x1f) = CONST 
    0x4c40x992: v9924c4 = AND v9924c2(0x1f), v9924c1
    0x4c60x992: v9924c6 = ADD v99249f, v9924c4

    Begin block 0x4c80x992
    prev=[0x4bf0x992], succ=[]
    =================================
    0x4cf0x992: RETURNPRIVATE v992arg0, v99a, v992arg0

}

function fallback()() public {
    Begin block 0xe9e
    prev=[], succ=[]
    =================================
    0xe9f: ve9f(0x0) = CONST 
    0xea2: REVERT ve9f(0x0), ve9f(0x0)

}

