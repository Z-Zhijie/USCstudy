function __function_selector__() public {
    Begin block 0x0
    prev=[], succ=[0xd, 0x81d]
    =================================
    0x0: v0(0x80) = CONST 
    0x2: v2(0x40) = CONST 
    0x4: MSTORE v2(0x40), v0(0x80)
    0x5: v5(0x4) = CONST 
    0x7: v7 = CALLDATASIZE 
    0x8: v8 = LT v7, v5(0x4)
    0x809: v809(0x81d) = CONST 
    0x80a: JUMPI v809(0x81d), v8

    Begin block 0xd
    prev=[0x0], succ=[0x59, 0x1e]
    =================================
    0xd: vd(0x0) = CONST 
    0xf: vf = CALLDATALOAD vd(0x0)
    0x10: v10(0xe0) = CONST 
    0x12: v12 = SHR v10(0xe0), vf
    0x14: v14(0x9d84ae69) = CONST 
    0x19: v19 = GT v14(0x9d84ae69), v12
    0x1a: v1a(0x59) = CONST 
    0x1d: JUMPI v1a(0x59), v19

    Begin block 0x59
    prev=[0xd], succ=[0x820, 0x65]
    =================================
    0x5b: v5b(0x1ab7710d) = CONST 
    0x60: v60 = EQ v5b(0x1ab7710d), v12
    0x815: v815(0x820) = CONST 
    0x816: JUMPI v815(0x820), v60

    Begin block 0x820
    prev=[0x59], succ=[]
    =================================
    0x821: v821(0x90) = CONST 
    0x822: CALLPRIVATE v821(0x90)

    Begin block 0x65
    prev=[0x59], succ=[0x823, 0x70]
    =================================
    0x66: v66(0x37a440e6) = CONST 
    0x6b: v6b = EQ v66(0x37a440e6), v12
    0x817: v817(0x823) = CONST 
    0x818: JUMPI v817(0x823), v6b

    Begin block 0x823
    prev=[0x65], succ=[]
    =================================
    0x824: v824(0xc1) = CONST 
    0x825: CALLPRIVATE v824(0xc1)

    Begin block 0x70
    prev=[0x65], succ=[0x826, 0x7b]
    =================================
    0x71: v71(0x5ced058e) = CONST 
    0x76: v76 = EQ v71(0x5ced058e), v12
    0x819: v819(0x826) = CONST 
    0x81a: JUMPI v819(0x826), v76

    Begin block 0x826
    prev=[0x70], succ=[]
    =================================
    0x827: v827(0xfd) = CONST 
    0x828: CALLPRIVATE v827(0xfd)

    Begin block 0x7b
    prev=[0x70], succ=[0x81d, 0x829]
    =================================
    0x7c: v7c(0x82c947b7) = CONST 
    0x81: v81 = EQ v7c(0x82c947b7), v12
    0x81b: v81b(0x829) = CONST 
    0x81c: JUMPI v81b(0x829), v81

    Begin block 0x81d
    prev=[0x0, 0x7b], succ=[]
    =================================
    0x81e: v81e(0x86) = CONST 
    0x81f: CALLPRIVATE v81e(0x86)

    Begin block 0x829
    prev=[0x7b], succ=[]
    =================================
    0x82a: v82a(0x127) = CONST 
    0x82b: CALLPRIVATE v82a(0x127)

    Begin block 0x1e
    prev=[0xd], succ=[0x82c, 0x29]
    =================================
    0x1f: v1f(0x9d84ae69) = CONST 
    0x24: v24 = EQ v1f(0x9d84ae69), v12
    0x80b: v80b(0x82c) = CONST 
    0x80c: JUMPI v80b(0x82c), v24

    Begin block 0x82c
    prev=[0x1e], succ=[]
    =================================
    0x82d: v82d(0x15a) = CONST 
    0x82e: CALLPRIVATE v82d(0x15a)

    Begin block 0x29
    prev=[0x1e], succ=[0x82f, 0x34]
    =================================
    0x2a: v2a(0xaaf10f42) = CONST 
    0x2f: v2f = EQ v2a(0xaaf10f42), v12
    0x80d: v80d(0x82f) = CONST 
    0x80e: JUMPI v80d(0x82f), v2f

    Begin block 0x82f
    prev=[0x29], succ=[]
    =================================
    0x830: v830(0x184) = CONST 
    0x831: CALLPRIVATE v830(0x184)

    Begin block 0x34
    prev=[0x29], succ=[0x3f, 0x832]
    =================================
    0x35: v35(0xbb15ac8e) = CONST 
    0x3a: v3a = EQ v35(0xbb15ac8e), v12
    0x80f: v80f(0x832) = CONST 
    0x810: JUMPI v80f(0x832), v3a

    Begin block 0x3f
    prev=[0x34], succ=[0x835, 0x4a]
    =================================
    0x40: v40(0xcaaee91c) = CONST 
    0x45: v45 = EQ v40(0xcaaee91c), v12
    0x811: v811(0x835) = CONST 
    0x812: JUMPI v811(0x835), v45

    Begin block 0x835
    prev=[0x3f], succ=[]
    =================================
    0x836: v836(0x1d7) = CONST 
    0x837: CALLPRIVATE v836(0x1d7)

    Begin block 0x4a
    prev=[0x3f], succ=[0x55, 0x838]
    =================================
    0x4b: v4b(0xd784d426) = CONST 
    0x50: v50 = EQ v4b(0xd784d426), v12
    0x813: v813(0x838) = CONST 
    0x814: JUMPI v813(0x838), v50

    Begin block 0x55
    prev=[0x4a], succ=[]
    =================================
    0x55: v55(0x86) = CONST 
    0x58: JUMP v55(0x86)

    Begin block 0x838
    prev=[0x4a], succ=[]
    =================================
    0x839: v839(0x20a) = CONST 
    0x83a: CALLPRIVATE v839(0x20a)

    Begin block 0x832
    prev=[0x34], succ=[]
    =================================
    0x833: v833(0x199) = CONST 
    0x834: CALLPRIVATE v833(0x199)

}

function addressToBytes32(address)() public {
    Begin block 0x127
    prev=[], succ=[0x12f, 0x133]
    =================================
    0x128: v128 = CALLVALUE 
    0x12a: v12a = ISZERO v128
    0x12b: v12b(0x133) = CONST 
    0x12e: JUMPI v12b(0x133), v12a

    Begin block 0x12f
    prev=[0x127], succ=[]
    =================================
    0x12f: v12f(0x0) = CONST 
    0x132: REVERT v12f(0x0), v12f(0x0)

    Begin block 0x133
    prev=[0x127], succ=[0x146, 0x14a]
    =================================
    0x135: v135(0x691) = CONST 
    0x138: v138(0x4) = CONST 
    0x13b: v13b = CALLDATASIZE 
    0x13c: v13c = SUB v13b, v138(0x4)
    0x13d: v13d(0x20) = CONST 
    0x140: v140 = LT v13c, v13d(0x20)
    0x141: v141 = ISZERO v140
    0x142: v142(0x14a) = CONST 
    0x145: JUMPI v142(0x14a), v141

    Begin block 0x146
    prev=[0x133], succ=[]
    =================================
    0x146: v146(0x0) = CONST 
    0x149: REVERT v146(0x0), v146(0x0)

    Begin block 0x14a
    prev=[0x133], succ=[0x2f50x127]
    =================================
    0x14c: v14c = CALLDATALOAD v138(0x4)
    0x14d: v14d(0x1) = CONST 
    0x14f: v14f(0x1) = CONST 
    0x151: v151(0xa0) = CONST 
    0x153: v153(0x10000000000000000000000000000000000000000) = SHL v151(0xa0), v14f(0x1)
    0x154: v154(0xffffffffffffffffffffffffffffffffffffffff) = SUB v153(0x10000000000000000000000000000000000000000), v14d(0x1)
    0x155: v155 = AND v154(0xffffffffffffffffffffffffffffffffffffffff), v14c
    0x156: v156(0x2f5) = CONST 
    0x159: JUMP v156(0x2f5)

    Begin block 0x2f50x127
    prev=[0x14a], succ=[0x691]
    =================================
    0x2f60x127: v1272f6(0x1) = CONST 
    0x2f80x127: v1272f8(0x1) = CONST 
    0x2fa0x127: v1272fa(0xa0) = CONST 
    0x2fc0x127: v1272fc(0x10000000000000000000000000000000000000000) = SHL v1272fa(0xa0), v1272f8(0x1)
    0x2fd0x127: v1272fd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v1272fc(0x10000000000000000000000000000000000000000), v1272f6(0x1)
    0x2fe0x127: v1272fe = AND v1272fd(0xffffffffffffffffffffffffffffffffffffffff), v155
    0x3000x127: JUMP v135(0x691)

    Begin block 0x691
    prev=[0x2f50x127], succ=[]
    =================================
    0x692: v692(0x40) = CONST 
    0x695: v695 = MLOAD v692(0x40)
    0x698: MSTORE v695, v1272fe
    0x699: v699 = MLOAD v692(0x40)
    0x69d: v69d(0x0) = SUB v695, v699
    0x69e: v69e(0x20) = CONST 
    0x6a0: v6a0(0x20) = ADD v69e(0x20), v69d(0x0)
    0x6a2: RETURN v699, v6a0(0x20)

}

function readAddress(bytes32)() public {
    Begin block 0x15a
    prev=[], succ=[0x162, 0x166]
    =================================
    0x15b: v15b = CALLVALUE 
    0x15d: v15d = ISZERO v15b
    0x15e: v15e(0x166) = CONST 
    0x161: JUMPI v15e(0x166), v15d

    Begin block 0x162
    prev=[0x15a], succ=[]
    =================================
    0x162: v162(0x0) = CONST 
    0x165: REVERT v162(0x0), v162(0x0)

    Begin block 0x166
    prev=[0x15a], succ=[0x179, 0x17d]
    =================================
    0x168: v168(0x6c2) = CONST 
    0x16b: v16b(0x4) = CONST 
    0x16e: v16e = CALLDATASIZE 
    0x16f: v16f = SUB v16e, v16b(0x4)
    0x170: v170(0x20) = CONST 
    0x173: v173 = LT v16f, v170(0x20)
    0x174: v174 = ISZERO v173
    0x175: v175(0x17d) = CONST 
    0x178: JUMPI v175(0x17d), v174

    Begin block 0x179
    prev=[0x166], succ=[]
    =================================
    0x179: v179(0x0) = CONST 
    0x17c: REVERT v179(0x0), v179(0x0)

    Begin block 0x17d
    prev=[0x166], succ=[0x3010x15a]
    =================================
    0x17f: v17f = CALLDATALOAD v16b(0x4)
    0x180: v180(0x301) = CONST 
    0x183: JUMP v180(0x301)

    Begin block 0x3010x15a
    prev=[0x17d], succ=[0x2eeB0x3010x15a]
    =================================
    0x3020x15a: v15a302(0x0) = CONST 
    0x3040x15a: v15a304(0x314) = CONST 
    0x3070x15a: v15a307(0x30f) = CONST 
    0x30b0x15a: v15a30b(0x2ee) = CONST 
    0x30e0x15a: JUMP v15a30b(0x2ee)

    Begin block 0x2eeB0x3010x15a
    prev=[0x3010x15a], succ=[0x30f0x15a]
    =================================
    0x2efS0x3010x15a: v2efV30115a = SLOAD v17f
    0x2f1S0x3010x15a: JUMP v15a307(0x30f)

    Begin block 0x30f0x15a
    prev=[0x2eeB0x3010x15a], succ=[0x79eB0x30f0x15a]
    =================================
    0x3100x15a: v15a310(0x79e) = CONST 
    0x3130x15a: JUMP v15a310(0x79e)

    Begin block 0x79eB0x30f0x15a
    prev=[0x30f0x15a], succ=[0x3140x15a]
    =================================
    0x7a0S0x30f0x15a: JUMP v15a304(0x314)

    Begin block 0x3140x15a
    prev=[0x79eB0x30f0x15a], succ=[0x6c2]
    =================================
    0x3190x15a: JUMP v168(0x6c2)

    Begin block 0x6c2
    prev=[0x3140x15a], succ=[]
    =================================
    0x6c3: v6c3(0x40) = CONST 
    0x6c6: v6c6 = MLOAD v6c3(0x40)
    0x6c7: v6c7(0x1) = CONST 
    0x6c9: v6c9(0x1) = CONST 
    0x6cb: v6cb(0xa0) = CONST 
    0x6cd: v6cd(0x10000000000000000000000000000000000000000) = SHL v6cb(0xa0), v6c9(0x1)
    0x6ce: v6ce(0xffffffffffffffffffffffffffffffffffffffff) = SUB v6cd(0x10000000000000000000000000000000000000000), v6c7(0x1)
    0x6d1: v6d1 = AND v2efV30115a, v6ce(0xffffffffffffffffffffffffffffffffffffffff)
    0x6d3: MSTORE v6c6, v6d1
    0x6d4: v6d4 = MLOAD v6c3(0x40)
    0x6d8: v6d8(0x0) = SUB v6c6, v6d4
    0x6d9: v6d9(0x20) = CONST 
    0x6db: v6db(0x20) = ADD v6d9(0x20), v6d8(0x0)
    0x6dd: RETURN v6d4, v6db(0x20)

}

function getImplementation()() public {
    Begin block 0x184
    prev=[], succ=[0x18c, 0x190]
    =================================
    0x185: v185 = CALLVALUE 
    0x187: v187 = ISZERO v185
    0x188: v188(0x190) = CONST 
    0x18b: JUMPI v188(0x190), v187

    Begin block 0x18c
    prev=[0x184], succ=[]
    =================================
    0x18c: v18c(0x0) = CONST 
    0x18f: REVERT v18c(0x0), v18c(0x0)

    Begin block 0x190
    prev=[0x184], succ=[0x31aB0x190]
    =================================
    0x192: v192(0x6fd) = CONST 
    0x195: v195(0x31a) = CONST 
    0x198: JUMP v195(0x31a)

    Begin block 0x31aB0x190
    prev=[0x190], succ=[0x301B0x31aB0x190]
    =================================
    0x31bS0x190: v31bV190(0x0) = CONST 
    0x31dS0x190: v31dV190(0x7c0) = CONST 
    0x320S0x190: v320V190(0x40) = CONST 
    0x322S0x190: v322V190 = MLOAD v320V190(0x40)
    0x323S0x190: v323V190(0x20) = CONST 
    0x325S0x190: v325V190 = ADD v323V190(0x20), v322V190
    0x328S0x190: v328V190(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x33cS0x190: v33cV190(0x6a) = CONST 
    0x33eS0x190: v33eV190(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL v33cV190(0x6a), v328V190(0x12535413115351539510551253d397d4d313d5)
    0x340S0x190: MSTORE v325V190, v33eV190(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x342S0x190: v342V190(0x13) = CONST 
    0x344S0x190: v344V190 = ADD v342V190(0x13), v325V190
    0x347S0x190: v347V190(0x40) = CONST 
    0x349S0x190: v349V190 = MLOAD v347V190(0x40)
    0x34aS0x190: v34aV190(0x20) = CONST 
    0x34eS0x190: v34eV190(0x33) = SUB v344V190, v349V190
    0x34fS0x190: v34fV190(0x13) = SUB v34eV190(0x33), v34aV190(0x20)
    0x351S0x190: MSTORE v349V190, v34fV190(0x13)
    0x353S0x190: v353V190(0x40) = CONST 
    0x355S0x190: MSTORE v353V190(0x40), v344V190
    0x357S0x190: v357V190(0x13) = MLOAD v349V190
    0x359S0x190: v359V190(0x20) = CONST 
    0x35bS0x190: v35bV190 = ADD v359V190(0x20), v349V190
    0x35cS0x190: v35cV190 = SHA3 v35bV190, v357V190(0x13)
    0x35dS0x190: v35dV190(0x301) = CONST 
    0x360S0x190: JUMP v35dV190(0x301)

    Begin block 0x301B0x31aB0x190
    prev=[0x31aB0x190], succ=[0x2eeB0x301B0x31aB0x190]
    =================================
    0x302S0x31aS0x190: v302V31aV190(0x0) = CONST 
    0x304S0x31aS0x190: v304V31aV190(0x314) = CONST 
    0x307S0x31aS0x190: v307V31aV190(0x30f) = CONST 
    0x30bS0x31aS0x190: v30bV31aV190(0x2ee) = CONST 
    0x30eS0x31aS0x190: JUMP v30bV31aV190(0x2ee)

    Begin block 0x2eeB0x301B0x31aB0x190
    prev=[0x301B0x31aB0x190], succ=[0x30f0x301B0x31aB0x190]
    =================================
    0x2efS0x301S0x31aS0x190: v2efV301V31aV190 = SLOAD v35cV190
    0x2f1S0x301S0x31aS0x190: JUMP v307V31aV190(0x30f)

    Begin block 0x30f0x301B0x31aB0x190
    prev=[0x2eeB0x301B0x31aB0x190], succ=[0x79eB0x30f0x301B0x31aB0x190]
    =================================
    0x3100x301S0x31aS0x190: v301310V31aV190(0x79e) = CONST 
    0x3130x301S0x31aS0x190: JUMP v301310V31aV190(0x79e)

    Begin block 0x79eB0x30f0x301B0x31aB0x190
    prev=[0x30f0x301B0x31aB0x190], succ=[0x3140x301B0x31aB0x190]
    =================================
    0x7a0S0x30f0x301S0x31aS0x190: JUMP v304V31aV190(0x314)

    Begin block 0x3140x301B0x31aB0x190
    prev=[0x79eB0x30f0x301B0x31aB0x190], succ=[0x7c0B0x190]
    =================================
    0x3190x301S0x31aS0x190: JUMP v31dV190(0x7c0)

    Begin block 0x7c0B0x190
    prev=[0x3140x301B0x31aB0x190], succ=[0x6fd]
    =================================
    0x7c4S0x190: JUMP v192(0x6fd)

    Begin block 0x6fd
    prev=[0x7c0B0x190], succ=[]
    =================================
    0x6fe: v6fe(0x40) = CONST 
    0x701: v701 = MLOAD v6fe(0x40)
    0x702: v702(0x1) = CONST 
    0x704: v704(0x1) = CONST 
    0x706: v706(0xa0) = CONST 
    0x708: v708(0x10000000000000000000000000000000000000000) = SHL v706(0xa0), v704(0x1)
    0x709: v709(0xffffffffffffffffffffffffffffffffffffffff) = SUB v708(0x10000000000000000000000000000000000000000), v702(0x1)
    0x70c: v70c = AND v2efV301V31aV190, v709(0xffffffffffffffffffffffffffffffffffffffff)
    0x70e: MSTORE v701, v70c
    0x70f: v70f = MLOAD v6fe(0x40)
    0x713: v713(0x0) = SUB v701, v70f
    0x714: v714(0x20) = CONST 
    0x716: v716(0x20) = ADD v714(0x20), v713(0x0)
    0x718: RETURN v70f, v716(0x20)

}

function readBool(bytes32)() public {
    Begin block 0x199
    prev=[], succ=[0x1a1, 0x1a5]
    =================================
    0x19a: v19a = CALLVALUE 
    0x19c: v19c = ISZERO v19a
    0x19d: v19d(0x1a5) = CONST 
    0x1a0: JUMPI v19d(0x1a5), v19c

    Begin block 0x1a1
    prev=[0x199], succ=[]
    =================================
    0x1a1: v1a1(0x0) = CONST 
    0x1a4: REVERT v1a1(0x0), v1a1(0x0)

    Begin block 0x1a5
    prev=[0x199], succ=[0x1b8, 0x1bc]
    =================================
    0x1a7: v1a7(0x1c3) = CONST 
    0x1aa: v1aa(0x4) = CONST 
    0x1ad: v1ad = CALLDATASIZE 
    0x1ae: v1ae = SUB v1ad, v1aa(0x4)
    0x1af: v1af(0x20) = CONST 
    0x1b2: v1b2 = LT v1ae, v1af(0x20)
    0x1b3: v1b3 = ISZERO v1b2
    0x1b4: v1b4(0x1bc) = CONST 
    0x1b7: JUMPI v1b4(0x1bc), v1b3

    Begin block 0x1b8
    prev=[0x1a5], succ=[]
    =================================
    0x1b8: v1b8(0x0) = CONST 
    0x1bb: REVERT v1b8(0x0), v1b8(0x0)

    Begin block 0x1bc
    prev=[0x1a5], succ=[0x361]
    =================================
    0x1be: v1be = CALLDATALOAD v1aa(0x4)
    0x1bf: v1bf(0x361) = CONST 
    0x1c2: JUMP v1bf(0x361)

    Begin block 0x361
    prev=[0x1bc], succ=[0x2eeB0x361]
    =================================
    0x362: v362(0x0) = CONST 
    0x364: v364(0x1) = CONST 
    0x366: v366(0x36e) = CONST 
    0x36a: v36a(0x2ee) = CONST 
    0x36d: JUMP v36a(0x2ee)

    Begin block 0x2eeB0x361
    prev=[0x361], succ=[0x36e]
    =================================
    0x2efS0x361: v2efV361 = SLOAD v1be
    0x2f1S0x361: JUMP v366(0x36e)

    Begin block 0x36e
    prev=[0x2eeB0x361], succ=[0x1c3]
    =================================
    0x36f: v36f = EQ v2efV361, v364(0x1)
    0x374: JUMP v1a7(0x1c3)

    Begin block 0x1c3
    prev=[0x36e], succ=[]
    =================================
    0x1c4: v1c4(0x40) = CONST 
    0x1c7: v1c7 = MLOAD v1c4(0x40)
    0x1c9: v1c9 = ISZERO v36f
    0x1ca: v1ca = ISZERO v1c9
    0x1cc: MSTORE v1c7, v1ca
    0x1cd: v1cd = MLOAD v1c4(0x40)
    0x1d1: v1d1(0x0) = SUB v1c7, v1cd
    0x1d2: v1d2(0x20) = CONST 
    0x1d4: v1d4(0x20) = ADD v1d2(0x20), v1d1(0x0)
    0x1d6: RETURN v1cd, v1d4(0x20)

}

function setProxyOwner(address)() public {
    Begin block 0x1d7
    prev=[], succ=[0x1df, 0x1e3]
    =================================
    0x1d8: v1d8 = CALLVALUE 
    0x1da: v1da = ISZERO v1d8
    0x1db: v1db(0x1e3) = CONST 
    0x1de: JUMPI v1db(0x1e3), v1da

    Begin block 0x1df
    prev=[0x1d7], succ=[]
    =================================
    0x1df: v1df(0x0) = CONST 
    0x1e2: REVERT v1df(0x0), v1df(0x0)

    Begin block 0x1e3
    prev=[0x1d7], succ=[0x1f6, 0x1fa]
    =================================
    0x1e5: v1e5(0x738) = CONST 
    0x1e8: v1e8(0x4) = CONST 
    0x1eb: v1eb = CALLDATASIZE 
    0x1ec: v1ec = SUB v1eb, v1e8(0x4)
    0x1ed: v1ed(0x20) = CONST 
    0x1f0: v1f0 = LT v1ec, v1ed(0x20)
    0x1f1: v1f1 = ISZERO v1f0
    0x1f2: v1f2(0x1fa) = CONST 
    0x1f5: JUMPI v1f2(0x1fa), v1f1

    Begin block 0x1f6
    prev=[0x1e3], succ=[]
    =================================
    0x1f6: v1f6(0x0) = CONST 
    0x1f9: REVERT v1f6(0x0), v1f6(0x0)

    Begin block 0x1fa
    prev=[0x1e3], succ=[0x375]
    =================================
    0x1fc: v1fc = CALLDATALOAD v1e8(0x4)
    0x1fd: v1fd(0x1) = CONST 
    0x1ff: v1ff(0x1) = CONST 
    0x201: v201(0xa0) = CONST 
    0x203: v203(0x10000000000000000000000000000000000000000) = SHL v201(0xa0), v1ff(0x1)
    0x204: v204(0xffffffffffffffffffffffffffffffffffffffff) = SUB v203(0x10000000000000000000000000000000000000000), v1fd(0x1)
    0x205: v205 = AND v204(0xffffffffffffffffffffffffffffffffffffffff), v1fc
    0x206: v206(0x375) = CONST 
    0x209: JUMP v206(0x375)

    Begin block 0x375
    prev=[0x1fa], succ=[0x301B0x375]
    =================================
    0x376: v376(0x3b1) = CONST 
    0x379: v379(0x40) = CONST 
    0x37b: v37b = MLOAD v379(0x40)
    0x37c: v37c(0x20) = CONST 
    0x37e: v37e = ADD v37c(0x20), v37b
    0x381: v381(0x13d5d3915497d4d313d5) = CONST 
    0x38c: v38c(0xb2) = CONST 
    0x38e: v38e(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v38c(0xb2), v381(0x13d5d3915497d4d313d5)
    0x390: MSTORE v37e, v38e(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x392: v392(0xa) = CONST 
    0x394: v394 = ADD v392(0xa), v37e
    0x397: v397(0x40) = CONST 
    0x399: v399 = MLOAD v397(0x40)
    0x39a: v39a(0x20) = CONST 
    0x39e: v39e(0x2a) = SUB v394, v399
    0x39f: v39f(0xa) = SUB v39e(0x2a), v39a(0x20)
    0x3a1: MSTORE v399, v39f(0xa)
    0x3a3: v3a3(0x40) = CONST 
    0x3a5: MSTORE v3a3(0x40), v394
    0x3a7: v3a7(0xa) = MLOAD v399
    0x3a9: v3a9(0x20) = CONST 
    0x3ab: v3ab = ADD v3a9(0x20), v399
    0x3ac: v3ac = SHA3 v3ab, v3a7(0xa)
    0x3ad: v3ad(0x301) = CONST 
    0x3b0: JUMP v3ad(0x301)

    Begin block 0x301B0x375
    prev=[0x375], succ=[0x2eeB0x301B0x375]
    =================================
    0x302S0x375: v302V375(0x0) = CONST 
    0x304S0x375: v304V375(0x314) = CONST 
    0x307S0x375: v307V375(0x30f) = CONST 
    0x30bS0x375: v30bV375(0x2ee) = CONST 
    0x30eS0x375: JUMP v30bV375(0x2ee)

    Begin block 0x2eeB0x301B0x375
    prev=[0x301B0x375], succ=[0x30f0x301B0x375]
    =================================
    0x2efS0x301S0x375: v2efV301V375 = SLOAD v3ac
    0x2f1S0x301S0x375: JUMP v307V375(0x30f)

    Begin block 0x30f0x301B0x375
    prev=[0x2eeB0x301B0x375], succ=[0x79eB0x30f0x301B0x375]
    =================================
    0x3100x301S0x375: v301310V375(0x79e) = CONST 
    0x3130x301S0x375: JUMP v301310V375(0x79e)

    Begin block 0x79eB0x30f0x301B0x375
    prev=[0x30f0x301B0x375], succ=[0x3140x301B0x375]
    =================================
    0x7a0S0x30f0x301S0x375: JUMP v304V375(0x314)

    Begin block 0x3140x301B0x375
    prev=[0x79eB0x30f0x301B0x375], succ=[0x3b1]
    =================================
    0x3190x301S0x375: JUMP v376(0x3b1)

    Begin block 0x3b1
    prev=[0x3140x301B0x375], succ=[0x3ca, 0x400]
    =================================
    0x3b2: v3b2(0x1) = CONST 
    0x3b4: v3b4(0x1) = CONST 
    0x3b6: v3b6(0xa0) = CONST 
    0x3b8: v3b8(0x10000000000000000000000000000000000000000) = SHL v3b6(0xa0), v3b4(0x1)
    0x3b9: v3b9(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3b8(0x10000000000000000000000000000000000000000), v3b2(0x1)
    0x3ba: v3ba = AND v3b9(0xffffffffffffffffffffffffffffffffffffffff), v2efV301V375
    0x3bb: v3bb = CALLER 
    0x3bc: v3bc(0x1) = CONST 
    0x3be: v3be(0x1) = CONST 
    0x3c0: v3c0(0xa0) = CONST 
    0x3c2: v3c2(0x10000000000000000000000000000000000000000) = SHL v3c0(0xa0), v3be(0x1)
    0x3c3: v3c3(0xffffffffffffffffffffffffffffffffffffffff) = SUB v3c2(0x10000000000000000000000000000000000000000), v3bc(0x1)
    0x3c4: v3c4 = AND v3c3(0xffffffffffffffffffffffffffffffffffffffff), v3bb
    0x3c5: v3c5 = EQ v3c4, v3ba
    0x3c6: v3c6(0x400) = CONST 
    0x3c9: JUMPI v3c6(0x400), v3c5

    Begin block 0x3ca
    prev=[0x3b1], succ=[]
    =================================
    0x3ca: v3ca(0x40) = CONST 
    0x3cc: v3cc = MLOAD v3ca(0x40)
    0x3cd: v3cd(0x461bcd) = CONST 
    0x3d1: v3d1(0xe5) = CONST 
    0x3d3: v3d3(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v3d1(0xe5), v3cd(0x461bcd)
    0x3d5: MSTORE v3cc, v3d3(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x3d6: v3d6(0x4) = CONST 
    0x3d8: v3d8 = ADD v3d6(0x4), v3cc
    0x3db: v3db(0x20) = CONST 
    0x3dd: v3dd = ADD v3db(0x20), v3d8
    0x3e0: v3e0(0x20) = SUB v3dd, v3d8
    0x3e2: MSTORE v3d8, v3e0(0x20)
    0x3e3: v3e3(0x2b) = CONST 
    0x3e6: MSTORE v3dd, v3e3(0x2b)
    0x3e7: v3e7(0x20) = CONST 
    0x3e9: v3e9 = ADD v3e7(0x20), v3dd
    0x3eb: v3eb(0x528) = CONST 
    0x3ee: v3ee(0x2b) = CONST 
    0x3f1: CODECOPY v3e9, v3eb(0x528), v3ee(0x2b)
    0x3f2: v3f2(0x40) = CONST 
    0x3f4: v3f4 = ADD v3f2(0x40), v3e9
    0x3f8: v3f8(0x40) = CONST 
    0x3fa: v3fa = MLOAD v3f8(0x40)
    0x3fd: v3fd(0x84) = SUB v3f4, v3fa
    0x3ff: REVERT v3fa, v3fd(0x84)

    Begin block 0x400
    prev=[0x3b1], succ=[0x50dB0x400]
    =================================
    0x401: v401(0x7e4) = CONST 
    0x404: v404(0x40) = CONST 
    0x406: v406 = MLOAD v404(0x40)
    0x407: v407(0x20) = CONST 
    0x409: v409 = ADD v407(0x20), v406
    0x40c: v40c(0x13d5d3915497d4d313d5) = CONST 
    0x417: v417(0xb2) = CONST 
    0x419: v419(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v417(0xb2), v40c(0x13d5d3915497d4d313d5)
    0x41b: MSTORE v409, v419(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x41d: v41d(0xa) = CONST 
    0x41f: v41f = ADD v41d(0xa), v409
    0x422: v422(0x40) = CONST 
    0x424: v424 = MLOAD v422(0x40)
    0x425: v425(0x20) = CONST 
    0x429: v429(0x2a) = SUB v41f, v424
    0x42a: v42a(0xa) = SUB v429(0x2a), v425(0x20)
    0x42c: MSTORE v424, v42a(0xa)
    0x42e: v42e(0x40) = CONST 
    0x430: MSTORE v42e(0x40), v41f
    0x432: v432(0xa) = MLOAD v424
    0x434: v434(0x20) = CONST 
    0x436: v436 = ADD v434(0x20), v424
    0x437: v437 = SHA3 v436, v432(0xa)
    0x439: v439(0x50d) = CONST 
    0x43c: JUMP v439(0x50d), v205, v437, v401(0x7e4)

    Begin block 0x50dB0x400
    prev=[0x400], succ=[0x2f50x50dB0x400]
    =================================
    0x50eS0x400: v50eV400(0x51f) = CONST 
    0x512S0x400: v512V400(0x51a) = CONST 
    0x516S0x400: v516V400(0x2f5) = CONST 
    0x519S0x400: JUMP v516V400(0x2f5)

    Begin block 0x2f50x50dB0x400
    prev=[0x50dB0x400], succ=[0x51a0x50dB0x400]
    =================================
    0x2f60x50dS0x400: v50d2f6V400(0x1) = CONST 
    0x2f80x50dS0x400: v50d2f8V400(0x1) = CONST 
    0x2fa0x50dS0x400: v50d2faV400(0xa0) = CONST 
    0x2fc0x50dS0x400: v50d2fcV400(0x10000000000000000000000000000000000000000) = SHL v50d2faV400(0xa0), v50d2f8V400(0x1)
    0x2fd0x50dS0x400: v50d2fdV400(0xffffffffffffffffffffffffffffffffffffffff) = SUB v50d2fcV400(0x10000000000000000000000000000000000000000), v50d2f6V400(0x1)
    0x2fe0x50dS0x400: v50d2feV400 = AND v50d2fdV400(0xffffffffffffffffffffffffffffffffffffffff), v205
    0x3000x50dS0x400: JUMP v512V400(0x51a)

    Begin block 0x51a0x50dB0x400
    prev=[0x2f50x50dB0x400], succ=[0x5230x50dB0x400]
    =================================
    0x51b0x50dS0x400: v50d51bV400(0x523) = CONST 
    0x51e0x50dS0x400: JUMP v50d51bV400(0x523)

    Begin block 0x5230x50dB0x400
    prev=[0x51a0x50dB0x400], succ=[0x51f0x50dB0x400]
    =================================
    0x5250x50dS0x400: SSTORE v437, v50d2feV400
    0x5260x50dS0x400: JUMP v50eV400(0x51f)

    Begin block 0x51f0x50dB0x400
    prev=[0x5230x50dB0x400], succ=[0x7e4]
    =================================
    0x5220x50dS0x400: JUMP v401(0x7e4)

    Begin block 0x7e4
    prev=[0x51f0x50dB0x400], succ=[0x738]
    =================================
    0x7e6: JUMP v1e5(0x738)

    Begin block 0x738
    prev=[0x7e4], succ=[]
    =================================
    0x739: STOP 

}

function setImplementation(address)() public {
    Begin block 0x20a
    prev=[], succ=[0x212, 0x216]
    =================================
    0x20b: v20b = CALLVALUE 
    0x20d: v20d = ISZERO v20b
    0x20e: v20e(0x216) = CONST 
    0x211: JUMPI v20e(0x216), v20d

    Begin block 0x212
    prev=[0x20a], succ=[]
    =================================
    0x212: v212(0x0) = CONST 
    0x215: REVERT v212(0x0), v212(0x0)

    Begin block 0x216
    prev=[0x20a], succ=[0x229, 0x22d]
    =================================
    0x218: v218(0x759) = CONST 
    0x21b: v21b(0x4) = CONST 
    0x21e: v21e = CALLDATASIZE 
    0x21f: v21f = SUB v21e, v21b(0x4)
    0x220: v220(0x20) = CONST 
    0x223: v223 = LT v21f, v220(0x20)
    0x224: v224 = ISZERO v223
    0x225: v225(0x22d) = CONST 
    0x228: JUMPI v225(0x22d), v224

    Begin block 0x229
    prev=[0x216], succ=[]
    =================================
    0x229: v229(0x0) = CONST 
    0x22c: REVERT v229(0x0), v229(0x0)

    Begin block 0x22d
    prev=[0x216], succ=[0x440]
    =================================
    0x22f: v22f = CALLDATALOAD v21b(0x4)
    0x230: v230(0x1) = CONST 
    0x232: v232(0x1) = CONST 
    0x234: v234(0xa0) = CONST 
    0x236: v236(0x10000000000000000000000000000000000000000) = SHL v234(0xa0), v232(0x1)
    0x237: v237(0xffffffffffffffffffffffffffffffffffffffff) = SUB v236(0x10000000000000000000000000000000000000000), v230(0x1)
    0x238: v238 = AND v237(0xffffffffffffffffffffffffffffffffffffffff), v22f
    0x239: v239(0x440) = CONST 
    0x23c: JUMP v239(0x440)

    Begin block 0x440
    prev=[0x22d], succ=[0x301B0x440]
    =================================
    0x441: v441(0x47c) = CONST 
    0x444: v444(0x40) = CONST 
    0x446: v446 = MLOAD v444(0x40)
    0x447: v447(0x20) = CONST 
    0x449: v449 = ADD v447(0x20), v446
    0x44c: v44c(0x13d5d3915497d4d313d5) = CONST 
    0x457: v457(0xb2) = CONST 
    0x459: v459(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v457(0xb2), v44c(0x13d5d3915497d4d313d5)
    0x45b: MSTORE v449, v459(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x45d: v45d(0xa) = CONST 
    0x45f: v45f = ADD v45d(0xa), v449
    0x462: v462(0x40) = CONST 
    0x464: v464 = MLOAD v462(0x40)
    0x465: v465(0x20) = CONST 
    0x469: v469(0x2a) = SUB v45f, v464
    0x46a: v46a(0xa) = SUB v469(0x2a), v465(0x20)
    0x46c: MSTORE v464, v46a(0xa)
    0x46e: v46e(0x40) = CONST 
    0x470: MSTORE v46e(0x40), v45f
    0x472: v472(0xa) = MLOAD v464
    0x474: v474(0x20) = CONST 
    0x476: v476 = ADD v474(0x20), v464
    0x477: v477 = SHA3 v476, v472(0xa)
    0x478: v478(0x301) = CONST 
    0x47b: JUMP v478(0x301)

    Begin block 0x301B0x440
    prev=[0x440], succ=[0x2eeB0x301B0x440]
    =================================
    0x302S0x440: v302V440(0x0) = CONST 
    0x304S0x440: v304V440(0x314) = CONST 
    0x307S0x440: v307V440(0x30f) = CONST 
    0x30bS0x440: v30bV440(0x2ee) = CONST 
    0x30eS0x440: JUMP v30bV440(0x2ee)

    Begin block 0x2eeB0x301B0x440
    prev=[0x301B0x440], succ=[0x30f0x301B0x440]
    =================================
    0x2efS0x301S0x440: v2efV301V440 = SLOAD v477
    0x2f1S0x301S0x440: JUMP v307V440(0x30f)

    Begin block 0x30f0x301B0x440
    prev=[0x2eeB0x301B0x440], succ=[0x79eB0x30f0x301B0x440]
    =================================
    0x3100x301S0x440: v301310V440(0x79e) = CONST 
    0x3130x301S0x440: JUMP v301310V440(0x79e)

    Begin block 0x79eB0x30f0x301B0x440
    prev=[0x30f0x301B0x440], succ=[0x3140x301B0x440]
    =================================
    0x7a0S0x30f0x301S0x440: JUMP v304V440(0x314)

    Begin block 0x3140x301B0x440
    prev=[0x79eB0x30f0x301B0x440], succ=[0x47c]
    =================================
    0x3190x301S0x440: JUMP v441(0x47c)

    Begin block 0x47c
    prev=[0x3140x301B0x440], succ=[0x495, 0x4cb]
    =================================
    0x47d: v47d(0x1) = CONST 
    0x47f: v47f(0x1) = CONST 
    0x481: v481(0xa0) = CONST 
    0x483: v483(0x10000000000000000000000000000000000000000) = SHL v481(0xa0), v47f(0x1)
    0x484: v484(0xffffffffffffffffffffffffffffffffffffffff) = SUB v483(0x10000000000000000000000000000000000000000), v47d(0x1)
    0x485: v485 = AND v484(0xffffffffffffffffffffffffffffffffffffffff), v2efV301V440
    0x486: v486 = CALLER 
    0x487: v487(0x1) = CONST 
    0x489: v489(0x1) = CONST 
    0x48b: v48b(0xa0) = CONST 
    0x48d: v48d(0x10000000000000000000000000000000000000000) = SHL v48b(0xa0), v489(0x1)
    0x48e: v48e(0xffffffffffffffffffffffffffffffffffffffff) = SUB v48d(0x10000000000000000000000000000000000000000), v487(0x1)
    0x48f: v48f = AND v48e(0xffffffffffffffffffffffffffffffffffffffff), v486
    0x490: v490 = EQ v48f, v485
    0x491: v491(0x4cb) = CONST 
    0x494: JUMPI v491(0x4cb), v490

    Begin block 0x495
    prev=[0x47c], succ=[]
    =================================
    0x495: v495(0x40) = CONST 
    0x497: v497 = MLOAD v495(0x40)
    0x498: v498(0x461bcd) = CONST 
    0x49c: v49c(0xe5) = CONST 
    0x49e: v49e(0x8c379a000000000000000000000000000000000000000000000000000000000) = SHL v49c(0xe5), v498(0x461bcd)
    0x4a0: MSTORE v497, v49e(0x8c379a000000000000000000000000000000000000000000000000000000000)
    0x4a1: v4a1(0x4) = CONST 
    0x4a3: v4a3 = ADD v4a1(0x4), v497
    0x4a6: v4a6(0x20) = CONST 
    0x4a8: v4a8 = ADD v4a6(0x20), v4a3
    0x4ab: v4ab(0x20) = SUB v4a8, v4a3
    0x4ad: MSTORE v4a3, v4ab(0x20)
    0x4ae: v4ae(0x2b) = CONST 
    0x4b1: MSTORE v4a8, v4ae(0x2b)
    0x4b2: v4b2(0x20) = CONST 
    0x4b4: v4b4 = ADD v4b2(0x20), v4a8
    0x4b6: v4b6(0x528) = CONST 
    0x4b9: v4b9(0x2b) = CONST 
    0x4bc: CODECOPY v4b4, v4b6(0x528), v4b9(0x2b)
    0x4bd: v4bd(0x40) = CONST 
    0x4bf: v4bf = ADD v4bd(0x40), v4b4
    0x4c3: v4c3(0x40) = CONST 
    0x4c5: v4c5 = MLOAD v4c3(0x40)
    0x4c8: v4c8(0x84) = SUB v4bf, v4c5
    0x4ca: REVERT v4c5, v4c8(0x84)

    Begin block 0x4cb
    prev=[0x47c], succ=[0x50d0x20a]
    =================================
    0x4cc: v4cc(0x806) = CONST 
    0x4cf: v4cf(0x40) = CONST 
    0x4d1: v4d1 = MLOAD v4cf(0x40)
    0x4d2: v4d2(0x20) = CONST 
    0x4d4: v4d4 = ADD v4d2(0x20), v4d1
    0x4d7: v4d7(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x4eb: v4eb(0x6a) = CONST 
    0x4ed: v4ed(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL v4eb(0x6a), v4d7(0x12535413115351539510551253d397d4d313d5)
    0x4ef: MSTORE v4d4, v4ed(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x4f1: v4f1(0x13) = CONST 
    0x4f3: v4f3 = ADD v4f1(0x13), v4d4
    0x4f6: v4f6(0x40) = CONST 
    0x4f8: v4f8 = MLOAD v4f6(0x40)
    0x4f9: v4f9(0x20) = CONST 
    0x4fd: v4fd(0x33) = SUB v4f3, v4f8
    0x4fe: v4fe(0x13) = SUB v4fd(0x33), v4f9(0x20)
    0x500: MSTORE v4f8, v4fe(0x13)
    0x502: v502(0x40) = CONST 
    0x504: MSTORE v502(0x40), v4f3
    0x506: v506(0x13) = MLOAD v4f8
    0x508: v508(0x20) = CONST 
    0x50a: v50a = ADD v508(0x20), v4f8
    0x50b: v50b = SHA3 v50a, v506(0x13)

    Begin block 0x50d0x20a
    prev=[0x4cb], succ=[0x2f50x20a]
    =================================
    0x50e0x20a: v20a50e(0x51f) = CONST 
    0x5120x20a: v20a512(0x51a) = CONST 
    0x5160x20a: v20a516(0x2f5) = CONST 
    0x5190x20a: JUMP v20a516(0x2f5)

    Begin block 0x2f50x20a
    prev=[0x50d0x20a], succ=[0x51a0x20a]
    =================================
    0x2f60x20a: v20a2f6(0x1) = CONST 
    0x2f80x20a: v20a2f8(0x1) = CONST 
    0x2fa0x20a: v20a2fa(0xa0) = CONST 
    0x2fc0x20a: v20a2fc(0x10000000000000000000000000000000000000000) = SHL v20a2fa(0xa0), v20a2f8(0x1)
    0x2fd0x20a: v20a2fd(0xffffffffffffffffffffffffffffffffffffffff) = SUB v20a2fc(0x10000000000000000000000000000000000000000), v20a2f6(0x1)
    0x2fe0x20a: v20a2fe = AND v20a2fd(0xffffffffffffffffffffffffffffffffffffffff), v238
    0x3000x20a: JUMP v20a512(0x51a)

    Begin block 0x51a0x20a
    prev=[0x2f50x20a], succ=[0x5230x20a]
    =================================
    0x51b0x20a: v20a51b(0x523) = CONST 
    0x51e0x20a: JUMP v20a51b(0x523)

    Begin block 0x5230x20a
    prev=[0x51a0x20a], succ=[0x51f0x20a]
    =================================
    0x5250x20a: SSTORE v50b, v20a2fe
    0x5260x20a: JUMP v20a50e(0x51f)

    Begin block 0x51f0x20a
    prev=[0x5230x20a], succ=[0x806]
    =================================
    0x5220x20a: JUMP v4cc(0x806)

    Begin block 0x806
    prev=[0x51f0x20a], succ=[0x759]
    =================================
    0x808: JUMP v218(0x759)

    Begin block 0x759
    prev=[0x806], succ=[]
    =================================
    0x75a: STOP 

}

function fallback()() public {
    Begin block 0x86
    prev=[], succ=[0x23d]
    =================================
    0x87: v87(0x5a7) = CONST 
    0x8a: v8a(0x23d) = CONST 
    0x8d: JUMP v8a(0x23d)

    Begin block 0x23d
    prev=[0x86], succ=[0x301B0x23d]
    =================================
    0x23e: v23e(0x0) = CONST 
    0x240: v240(0x284) = CONST 
    0x243: v243(0x40) = CONST 
    0x245: v245 = MLOAD v243(0x40)
    0x246: v246(0x20) = CONST 
    0x248: v248 = ADD v246(0x20), v245
    0x24b: v24b(0x12535413115351539510551253d397d4d313d5) = CONST 
    0x25f: v25f(0x6a) = CONST 
    0x261: v261(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000) = SHL v25f(0x6a), v24b(0x12535413115351539510551253d397d4d313d5)
    0x263: MSTORE v248, v261(0x494d504c454d454e544154494f4e5f534c4f5400000000000000000000000000)
    0x265: v265(0x13) = CONST 
    0x267: v267 = ADD v265(0x13), v248
    0x26a: v26a(0x40) = CONST 
    0x26c: v26c = MLOAD v26a(0x40)
    0x26d: v26d(0x20) = CONST 
    0x271: v271(0x33) = SUB v267, v26c
    0x272: v272(0x13) = SUB v271(0x33), v26d(0x20)
    0x274: MSTORE v26c, v272(0x13)
    0x276: v276(0x40) = CONST 
    0x278: MSTORE v276(0x40), v267
    0x27a: v27a(0x13) = MLOAD v26c
    0x27c: v27c(0x20) = CONST 
    0x27e: v27e = ADD v27c(0x20), v26c
    0x27f: v27f = SHA3 v27e, v27a(0x13)
    0x280: v280(0x301) = CONST 
    0x283: JUMP v280(0x301)

    Begin block 0x301B0x23d
    prev=[0x23d], succ=[0x2eeB0x301B0x23d]
    =================================
    0x302S0x23d: v302V23d(0x0) = CONST 
    0x304S0x23d: v304V23d(0x314) = CONST 
    0x307S0x23d: v307V23d(0x30f) = CONST 
    0x30bS0x23d: v30bV23d(0x2ee) = CONST 
    0x30eS0x23d: JUMP v30bV23d(0x2ee)

    Begin block 0x2eeB0x301B0x23d
    prev=[0x301B0x23d], succ=[0x30f0x301B0x23d]
    =================================
    0x2efS0x301S0x23d: v2efV301V23d = SLOAD v27f
    0x2f1S0x301S0x23d: JUMP v307V23d(0x30f)

    Begin block 0x30f0x301B0x23d
    prev=[0x2eeB0x301B0x23d], succ=[0x79eB0x30f0x301B0x23d]
    =================================
    0x3100x301S0x23d: v301310V23d(0x79e) = CONST 
    0x3130x301S0x23d: JUMP v301310V23d(0x79e)

    Begin block 0x79eB0x30f0x301B0x23d
    prev=[0x30f0x301B0x23d], succ=[0x3140x301B0x23d]
    =================================
    0x7a0S0x30f0x301S0x23d: JUMP v304V23d(0x314)

    Begin block 0x3140x301B0x23d
    prev=[0x79eB0x30f0x301B0x23d], succ=[0x284]
    =================================
    0x3190x301S0x23d: JUMP v240(0x284)

    Begin block 0x284
    prev=[0x3140x301B0x23d], succ=[0x2a7, 0x2a4]
    =================================
    0x287: v287(0x40) = CONST 
    0x289: v289 = MLOAD v287(0x40)
    0x28a: v28a = CALLDATASIZE 
    0x28b: v28b(0x0) = CONST 
    0x28e: CALLDATACOPY v289, v28b(0x0), v28a
    0x28f: v28f(0x0) = CONST 
    0x292: v292 = CALLDATASIZE 
    0x295: v295 = GAS 
    0x296: v296 = DELEGATECALL v295, v2efV301V23d, v289, v292, v28f(0x0), v28f(0x0)
    0x297: v297 = RETURNDATASIZE 
    0x299: v299(0x0) = CONST 
    0x29c: RETURNDATACOPY v289, v299(0x0), v297
    0x29f: v29f = ISZERO v296
    0x2a0: v2a0(0x2a7) = CONST 
    0x2a3: JUMPI v2a0(0x2a7), v29f

    Begin block 0x2a7
    prev=[0x284], succ=[]
    =================================
    0x2aa: REVERT v289, v297

    Begin block 0x2a4
    prev=[0x284], succ=[]
    =================================
    0x2a6: RETURN v289, v297

}

function getProxyOwner()() public {
    Begin block 0x90
    prev=[], succ=[0x98, 0x9c]
    =================================
    0x91: v91 = CALLVALUE 
    0x93: v93 = ISZERO v91
    0x94: v94(0x9c) = CONST 
    0x97: JUMPI v94(0x9c), v93

    Begin block 0x98
    prev=[0x90], succ=[]
    =================================
    0x98: v98(0x0) = CONST 
    0x9b: REVERT v98(0x0), v98(0x0)

    Begin block 0x9c
    prev=[0x90], succ=[0x2abB0x9c]
    =================================
    0x9e: v9e(0x5c8) = CONST 
    0xa1: va1(0x2ab) = CONST 
    0xa4: JUMP va1(0x2ab)

    Begin block 0x2abB0x9c
    prev=[0x9c], succ=[0x301B0x2abB0x9c]
    =================================
    0x2acS0x9c: v2acV9c(0x0) = CONST 
    0x2aeS0x9c: v2aeV9c(0x77a) = CONST 
    0x2b1S0x9c: v2b1V9c(0x40) = CONST 
    0x2b3S0x9c: v2b3V9c = MLOAD v2b1V9c(0x40)
    0x2b4S0x9c: v2b4V9c(0x20) = CONST 
    0x2b6S0x9c: v2b6V9c = ADD v2b4V9c(0x20), v2b3V9c
    0x2b9S0x9c: v2b9V9c(0x13d5d3915497d4d313d5) = CONST 
    0x2c4S0x9c: v2c4V9c(0xb2) = CONST 
    0x2c6S0x9c: v2c6V9c(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000) = SHL v2c4V9c(0xb2), v2b9V9c(0x13d5d3915497d4d313d5)
    0x2c8S0x9c: MSTORE v2b6V9c, v2c6V9c(0x4f574e45525f534c4f5400000000000000000000000000000000000000000000)
    0x2caS0x9c: v2caV9c(0xa) = CONST 
    0x2ccS0x9c: v2ccV9c = ADD v2caV9c(0xa), v2b6V9c
    0x2cfS0x9c: v2cfV9c(0x40) = CONST 
    0x2d1S0x9c: v2d1V9c = MLOAD v2cfV9c(0x40)
    0x2d2S0x9c: v2d2V9c(0x20) = CONST 
    0x2d6S0x9c: v2d6V9c(0x2a) = SUB v2ccV9c, v2d1V9c
    0x2d7S0x9c: v2d7V9c(0xa) = SUB v2d6V9c(0x2a), v2d2V9c(0x20)
    0x2d9S0x9c: MSTORE v2d1V9c, v2d7V9c(0xa)
    0x2dbS0x9c: v2dbV9c(0x40) = CONST 
    0x2ddS0x9c: MSTORE v2dbV9c(0x40), v2ccV9c
    0x2dfS0x9c: v2dfV9c(0xa) = MLOAD v2d1V9c
    0x2e1S0x9c: v2e1V9c(0x20) = CONST 
    0x2e3S0x9c: v2e3V9c = ADD v2e1V9c(0x20), v2d1V9c
    0x2e4S0x9c: v2e4V9c = SHA3 v2e3V9c, v2dfV9c(0xa)
    0x2e5S0x9c: v2e5V9c(0x301) = CONST 
    0x2e8S0x9c: JUMP v2e5V9c(0x301)

    Begin block 0x301B0x2abB0x9c
    prev=[0x2abB0x9c], succ=[0x2eeB0x301B0x2abB0x9c]
    =================================
    0x302S0x2abS0x9c: v302V2abV9c(0x0) = CONST 
    0x304S0x2abS0x9c: v304V2abV9c(0x314) = CONST 
    0x307S0x2abS0x9c: v307V2abV9c(0x30f) = CONST 
    0x30bS0x2abS0x9c: v30bV2abV9c(0x2ee) = CONST 
    0x30eS0x2abS0x9c: JUMP v30bV2abV9c(0x2ee)

    Begin block 0x2eeB0x301B0x2abB0x9c
    prev=[0x301B0x2abB0x9c], succ=[0x30f0x301B0x2abB0x9c]
    =================================
    0x2efS0x301S0x2abS0x9c: v2efV301V2abV9c = SLOAD v2e4V9c
    0x2f1S0x301S0x2abS0x9c: JUMP v307V2abV9c(0x30f)

    Begin block 0x30f0x301B0x2abB0x9c
    prev=[0x2eeB0x301B0x2abB0x9c], succ=[0x79eB0x30f0x301B0x2abB0x9c]
    =================================
    0x3100x301S0x2abS0x9c: v301310V2abV9c(0x79e) = CONST 
    0x3130x301S0x2abS0x9c: JUMP v301310V2abV9c(0x79e)

    Begin block 0x79eB0x30f0x301B0x2abB0x9c
    prev=[0x30f0x301B0x2abB0x9c], succ=[0x3140x301B0x2abB0x9c]
    =================================
    0x7a0S0x30f0x301S0x2abS0x9c: JUMP v304V2abV9c(0x314)

    Begin block 0x3140x301B0x2abB0x9c
    prev=[0x79eB0x30f0x301B0x2abB0x9c], succ=[0x77aB0x9c]
    =================================
    0x3190x301S0x2abS0x9c: JUMP v2aeV9c(0x77a)

    Begin block 0x77aB0x9c
    prev=[0x3140x301B0x2abB0x9c], succ=[0x5c8]
    =================================
    0x77eS0x9c: JUMP v9e(0x5c8)

    Begin block 0x5c8
    prev=[0x77aB0x9c], succ=[]
    =================================
    0x5c9: v5c9(0x40) = CONST 
    0x5cc: v5cc = MLOAD v5c9(0x40)
    0x5cd: v5cd(0x1) = CONST 
    0x5cf: v5cf(0x1) = CONST 
    0x5d1: v5d1(0xa0) = CONST 
    0x5d3: v5d3(0x10000000000000000000000000000000000000000) = SHL v5d1(0xa0), v5cf(0x1)
    0x5d4: v5d4(0xffffffffffffffffffffffffffffffffffffffff) = SUB v5d3(0x10000000000000000000000000000000000000000), v5cd(0x1)
    0x5d7: v5d7 = AND v2efV301V2abV9c, v5d4(0xffffffffffffffffffffffffffffffffffffffff)
    0x5d9: MSTORE v5cc, v5d7
    0x5da: v5da = MLOAD v5c9(0x40)
    0x5de: v5de(0x0) = SUB v5cc, v5da
    0x5df: v5df(0x20) = CONST 
    0x5e1: v5e1(0x20) = ADD v5df(0x20), v5de(0x0)
    0x5e3: RETURN v5da, v5e1(0x20)

}

function storageRead(bytes32)() public {
    Begin block 0xc1
    prev=[], succ=[0xc9, 0xcd]
    =================================
    0xc2: vc2 = CALLVALUE 
    0xc4: vc4 = ISZERO vc2
    0xc5: vc5(0xcd) = CONST 
    0xc8: JUMPI vc5(0xcd), vc4

    Begin block 0xc9
    prev=[0xc1], succ=[]
    =================================
    0xc9: vc9(0x0) = CONST 
    0xcc: REVERT vc9(0x0), vc9(0x0)

    Begin block 0xcd
    prev=[0xc1], succ=[0xe0, 0xe4]
    =================================
    0xcf: vcf(0x603) = CONST 
    0xd2: vd2(0x4) = CONST 
    0xd5: vd5 = CALLDATASIZE 
    0xd6: vd6 = SUB vd5, vd2(0x4)
    0xd7: vd7(0x20) = CONST 
    0xda: vda = LT vd6, vd7(0x20)
    0xdb: vdb = ISZERO vda
    0xdc: vdc(0xe4) = CONST 
    0xdf: JUMPI vdc(0xe4), vdb

    Begin block 0xe0
    prev=[0xcd], succ=[]
    =================================
    0xe0: ve0(0x0) = CONST 
    0xe3: REVERT ve0(0x0), ve0(0x0)

    Begin block 0xe4
    prev=[0xcd], succ=[0x2ee0xc1]
    =================================
    0xe6: ve6 = CALLDATALOAD vd2(0x4)
    0xe7: ve7(0x2ee) = CONST 
    0xea: JUMP ve7(0x2ee)

    Begin block 0x2ee0xc1
    prev=[0xe4], succ=[0x603]
    =================================
    0x2ef0xc1: vc12ef = SLOAD ve6
    0x2f10xc1: JUMP vcf(0x603)

    Begin block 0x603
    prev=[0x2ee0xc1], succ=[]
    =================================
    0x604: v604(0x40) = CONST 
    0x607: v607 = MLOAD v604(0x40)
    0x60a: MSTORE v607, vc12ef
    0x60b: v60b = MLOAD v604(0x40)
    0x60f: v60f(0x0) = SUB v607, v60b
    0x610: v610(0x20) = CONST 
    0x612: v612(0x20) = ADD v610(0x20), v60f(0x0)
    0x614: RETURN v60b, v612(0x20)

}

function bytes32ToAddress(bytes32)() public {
    Begin block 0xfd
    prev=[], succ=[0x105, 0x109]
    =================================
    0xfe: vfe = CALLVALUE 
    0x100: v100 = ISZERO vfe
    0x101: v101(0x109) = CONST 
    0x104: JUMPI v101(0x109), v100

    Begin block 0x105
    prev=[0xfd], succ=[]
    =================================
    0x105: v105(0x0) = CONST 
    0x108: REVERT v105(0x0), v105(0x0)

    Begin block 0x109
    prev=[0xfd], succ=[0x11c, 0x120]
    =================================
    0x10b: v10b(0x634) = CONST 
    0x10e: v10e(0x4) = CONST 
    0x111: v111 = CALLDATASIZE 
    0x112: v112 = SUB v111, v10e(0x4)
    0x113: v113(0x20) = CONST 
    0x116: v116 = LT v112, v113(0x20)
    0x117: v117 = ISZERO v116
    0x118: v118(0x120) = CONST 
    0x11b: JUMPI v118(0x120), v117

    Begin block 0x11c
    prev=[0x109], succ=[]
    =================================
    0x11c: v11c(0x0) = CONST 
    0x11f: REVERT v11c(0x0), v11c(0x0)

    Begin block 0x120
    prev=[0x109], succ=[0x66f]
    =================================
    0x122: v122 = CALLDATALOAD v10e(0x4)
    0x123: v123(0x66f) = CONST 
    0x126: JUMP v123(0x66f)

    Begin block 0x66f
    prev=[0x120], succ=[0x634]
    =================================
    0x671: JUMP v10b(0x634)

    Begin block 0x634
    prev=[0x66f], succ=[]
    =================================
    0x635: v635(0x40) = CONST 
    0x638: v638 = MLOAD v635(0x40)
    0x639: v639(0x1) = CONST 
    0x63b: v63b(0x1) = CONST 
    0x63d: v63d(0xa0) = CONST 
    0x63f: v63f(0x10000000000000000000000000000000000000000) = SHL v63d(0xa0), v63b(0x1)
    0x640: v640(0xffffffffffffffffffffffffffffffffffffffff) = SUB v63f(0x10000000000000000000000000000000000000000), v639(0x1)
    0x643: v643 = AND v122, v640(0xffffffffffffffffffffffffffffffffffffffff)
    0x645: MSTORE v638, v643
    0x646: v646 = MLOAD v635(0x40)
    0x64a: v64a(0x0) = SUB v638, v646
    0x64b: v64b(0x20) = CONST 
    0x64d: v64d(0x20) = ADD v64b(0x20), v64a(0x0)
    0x64f: RETURN v646, v64d(0x20)

}

